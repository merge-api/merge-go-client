// Code generated by Fern. DO NOT EDIT.

package ticketing

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type TicketEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool          `json:"-" url:"run_async,omitempty"`
	Model    *TicketRequest `json:"model,omitempty" url:"-"`
}

type TicketsListRequest struct {
	// If provided, will only return tickets for this account.
	AccountId *string `json:"-" url:"account_id,omitempty"`
	// If provided, will only return tickets assigned to the assignee_ids; multiple assignee_ids can be separated by commas.
	AssigneeIds *string `json:"-" url:"assignee_ids,omitempty"`
	// If provided, will only return tickets assigned to the collection_ids; multiple collection_ids can be separated by commas.
	CollectionIds *string `json:"-" url:"collection_ids,omitempty"`
	// If provided, will only return tickets completed after this datetime.
	CompletedAfter *time.Time `json:"-" url:"completed_after,omitempty"`
	// If provided, will only return tickets completed before this datetime.
	CompletedBefore *time.Time `json:"-" url:"completed_before,omitempty"`
	// If provided, will only return tickets for this contact.
	ContactId *string `json:"-" url:"contact_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will only return tickets due after this datetime.
	DueAfter *time.Time `json:"-" url:"due_after,omitempty"`
	// If provided, will only return tickets due before this datetime.
	DueBefore *time.Time `json:"-" url:"due_before,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*TicketsListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// If provided, will only return sub tickets of the parent_ticket_id.
	ParentTicketId *string `json:"-" url:"parent_ticket_id,omitempty"`
	// If provided, will only return tickets of this priority.
	//
	// * `URGENT` - URGENT
	// * `HIGH` - HIGH
	// * `NORMAL` - NORMAL
	// * `LOW` - LOW
	Priority *TicketsListRequestPriority `json:"-" url:"priority,omitempty"`
	// If provided, will only return tickets created in the third party platform after this datetime.
	RemoteCreatedAfter *time.Time `json:"-" url:"remote_created_after,omitempty"`
	// If provided, will only return tickets created in the third party platform before this datetime.
	RemoteCreatedBefore *time.Time `json:"-" url:"remote_created_before,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *TicketsListRequestRemoteFields `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// If provided, will only return tickets updated in the third party platform after this datetime.
	RemoteUpdatedAfter *time.Time `json:"-" url:"remote_updated_after,omitempty"`
	// If provided, will only return tickets updated in the third party platform before this datetime.
	RemoteUpdatedBefore *time.Time `json:"-" url:"remote_updated_before,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *TicketsListRequestShowEnumOrigins `json:"-" url:"show_enum_origins,omitempty"`
	// If provided, will only return tickets of this status.
	Status *string `json:"-" url:"status,omitempty"`
	// If provided, will only return tickets matching the tags; multiple tags can be separated by commas.
	Tags *string `json:"-" url:"tags,omitempty"`
	// If provided, will only return tickets of this type.
	TicketType *string `json:"-" url:"ticket_type,omitempty"`
	// If provided, will only return tickets where the URL matches or contains the substring
	TicketUrl *string `json:"-" url:"ticket_url,omitempty"`
}

type PatchedTicketEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool                 `json:"-" url:"run_async,omitempty"`
	Model    *PatchedTicketRequest `json:"model,omitempty" url:"-"`
}

type TicketsRemoteFieldClassesListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will only return remote field classes with the `ids` in this list
	Ids *string `json:"-" url:"ids,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return remote field classes with this is_common_model_field value
	IsCommonModelField *bool `json:"-" url:"is_common_model_field,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type TicketsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*TicketsRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *TicketsRetrieveRequestRemoteFields `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *TicketsRetrieveRequestShowEnumOrigins `json:"-" url:"show_enum_origins,omitempty"`
}

type TicketsListRequestExpandItem string

const (
	TicketsListRequestExpandItemAccount       TicketsListRequestExpandItem = "account"
	TicketsListRequestExpandItemAssignedTeams TicketsListRequestExpandItem = "assigned_teams"
	TicketsListRequestExpandItemAssignees     TicketsListRequestExpandItem = "assignees"
	TicketsListRequestExpandItemAttachments   TicketsListRequestExpandItem = "attachments"
	TicketsListRequestExpandItemCollections   TicketsListRequestExpandItem = "collections"
	TicketsListRequestExpandItemContact       TicketsListRequestExpandItem = "contact"
	TicketsListRequestExpandItemCreator       TicketsListRequestExpandItem = "creator"
	TicketsListRequestExpandItemParentTicket  TicketsListRequestExpandItem = "parent_ticket"
)

func NewTicketsListRequestExpandItemFromString(s string) (TicketsListRequestExpandItem, error) {
	switch s {
	case "account":
		return TicketsListRequestExpandItemAccount, nil
	case "assigned_teams":
		return TicketsListRequestExpandItemAssignedTeams, nil
	case "assignees":
		return TicketsListRequestExpandItemAssignees, nil
	case "attachments":
		return TicketsListRequestExpandItemAttachments, nil
	case "collections":
		return TicketsListRequestExpandItemCollections, nil
	case "contact":
		return TicketsListRequestExpandItemContact, nil
	case "creator":
		return TicketsListRequestExpandItemCreator, nil
	case "parent_ticket":
		return TicketsListRequestExpandItemParentTicket, nil
	}
	var t TicketsListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TicketsListRequestExpandItem) Ptr() *TicketsListRequestExpandItem {
	return &t
}

type TicketsListRequestPriority string

const (
	TicketsListRequestPriorityHigh   TicketsListRequestPriority = "HIGH"
	TicketsListRequestPriorityLow    TicketsListRequestPriority = "LOW"
	TicketsListRequestPriorityNormal TicketsListRequestPriority = "NORMAL"
	TicketsListRequestPriorityUrgent TicketsListRequestPriority = "URGENT"
)

func NewTicketsListRequestPriorityFromString(s string) (TicketsListRequestPriority, error) {
	switch s {
	case "HIGH":
		return TicketsListRequestPriorityHigh, nil
	case "LOW":
		return TicketsListRequestPriorityLow, nil
	case "NORMAL":
		return TicketsListRequestPriorityNormal, nil
	case "URGENT":
		return TicketsListRequestPriorityUrgent, nil
	}
	var t TicketsListRequestPriority
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TicketsListRequestPriority) Ptr() *TicketsListRequestPriority {
	return &t
}

type TicketsListRequestRemoteFields string

const (
	TicketsListRequestRemoteFieldsPriority                 TicketsListRequestRemoteFields = "priority"
	TicketsListRequestRemoteFieldsPriorityStatus           TicketsListRequestRemoteFields = "priority,status"
	TicketsListRequestRemoteFieldsPriorityStatusTicketType TicketsListRequestRemoteFields = "priority,status,ticket_type"
	TicketsListRequestRemoteFieldsPriorityTicketType       TicketsListRequestRemoteFields = "priority,ticket_type"
	TicketsListRequestRemoteFieldsStatus                   TicketsListRequestRemoteFields = "status"
	TicketsListRequestRemoteFieldsStatusTicketType         TicketsListRequestRemoteFields = "status,ticket_type"
	TicketsListRequestRemoteFieldsTicketType               TicketsListRequestRemoteFields = "ticket_type"
)

func NewTicketsListRequestRemoteFieldsFromString(s string) (TicketsListRequestRemoteFields, error) {
	switch s {
	case "priority":
		return TicketsListRequestRemoteFieldsPriority, nil
	case "priority,status":
		return TicketsListRequestRemoteFieldsPriorityStatus, nil
	case "priority,status,ticket_type":
		return TicketsListRequestRemoteFieldsPriorityStatusTicketType, nil
	case "priority,ticket_type":
		return TicketsListRequestRemoteFieldsPriorityTicketType, nil
	case "status":
		return TicketsListRequestRemoteFieldsStatus, nil
	case "status,ticket_type":
		return TicketsListRequestRemoteFieldsStatusTicketType, nil
	case "ticket_type":
		return TicketsListRequestRemoteFieldsTicketType, nil
	}
	var t TicketsListRequestRemoteFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TicketsListRequestRemoteFields) Ptr() *TicketsListRequestRemoteFields {
	return &t
}

type TicketsListRequestShowEnumOrigins string

const (
	TicketsListRequestShowEnumOriginsPriority                 TicketsListRequestShowEnumOrigins = "priority"
	TicketsListRequestShowEnumOriginsPriorityStatus           TicketsListRequestShowEnumOrigins = "priority,status"
	TicketsListRequestShowEnumOriginsPriorityStatusTicketType TicketsListRequestShowEnumOrigins = "priority,status,ticket_type"
	TicketsListRequestShowEnumOriginsPriorityTicketType       TicketsListRequestShowEnumOrigins = "priority,ticket_type"
	TicketsListRequestShowEnumOriginsStatus                   TicketsListRequestShowEnumOrigins = "status"
	TicketsListRequestShowEnumOriginsStatusTicketType         TicketsListRequestShowEnumOrigins = "status,ticket_type"
	TicketsListRequestShowEnumOriginsTicketType               TicketsListRequestShowEnumOrigins = "ticket_type"
)

func NewTicketsListRequestShowEnumOriginsFromString(s string) (TicketsListRequestShowEnumOrigins, error) {
	switch s {
	case "priority":
		return TicketsListRequestShowEnumOriginsPriority, nil
	case "priority,status":
		return TicketsListRequestShowEnumOriginsPriorityStatus, nil
	case "priority,status,ticket_type":
		return TicketsListRequestShowEnumOriginsPriorityStatusTicketType, nil
	case "priority,ticket_type":
		return TicketsListRequestShowEnumOriginsPriorityTicketType, nil
	case "status":
		return TicketsListRequestShowEnumOriginsStatus, nil
	case "status,ticket_type":
		return TicketsListRequestShowEnumOriginsStatusTicketType, nil
	case "ticket_type":
		return TicketsListRequestShowEnumOriginsTicketType, nil
	}
	var t TicketsListRequestShowEnumOrigins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TicketsListRequestShowEnumOrigins) Ptr() *TicketsListRequestShowEnumOrigins {
	return &t
}

type TicketsRetrieveRequestExpandItem string

const (
	TicketsRetrieveRequestExpandItemAccount       TicketsRetrieveRequestExpandItem = "account"
	TicketsRetrieveRequestExpandItemAssignedTeams TicketsRetrieveRequestExpandItem = "assigned_teams"
	TicketsRetrieveRequestExpandItemAssignees     TicketsRetrieveRequestExpandItem = "assignees"
	TicketsRetrieveRequestExpandItemAttachments   TicketsRetrieveRequestExpandItem = "attachments"
	TicketsRetrieveRequestExpandItemCollections   TicketsRetrieveRequestExpandItem = "collections"
	TicketsRetrieveRequestExpandItemContact       TicketsRetrieveRequestExpandItem = "contact"
	TicketsRetrieveRequestExpandItemCreator       TicketsRetrieveRequestExpandItem = "creator"
	TicketsRetrieveRequestExpandItemParentTicket  TicketsRetrieveRequestExpandItem = "parent_ticket"
)

func NewTicketsRetrieveRequestExpandItemFromString(s string) (TicketsRetrieveRequestExpandItem, error) {
	switch s {
	case "account":
		return TicketsRetrieveRequestExpandItemAccount, nil
	case "assigned_teams":
		return TicketsRetrieveRequestExpandItemAssignedTeams, nil
	case "assignees":
		return TicketsRetrieveRequestExpandItemAssignees, nil
	case "attachments":
		return TicketsRetrieveRequestExpandItemAttachments, nil
	case "collections":
		return TicketsRetrieveRequestExpandItemCollections, nil
	case "contact":
		return TicketsRetrieveRequestExpandItemContact, nil
	case "creator":
		return TicketsRetrieveRequestExpandItemCreator, nil
	case "parent_ticket":
		return TicketsRetrieveRequestExpandItemParentTicket, nil
	}
	var t TicketsRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TicketsRetrieveRequestExpandItem) Ptr() *TicketsRetrieveRequestExpandItem {
	return &t
}

type TicketsRetrieveRequestRemoteFields string

const (
	TicketsRetrieveRequestRemoteFieldsPriority                 TicketsRetrieveRequestRemoteFields = "priority"
	TicketsRetrieveRequestRemoteFieldsPriorityStatus           TicketsRetrieveRequestRemoteFields = "priority,status"
	TicketsRetrieveRequestRemoteFieldsPriorityStatusTicketType TicketsRetrieveRequestRemoteFields = "priority,status,ticket_type"
	TicketsRetrieveRequestRemoteFieldsPriorityTicketType       TicketsRetrieveRequestRemoteFields = "priority,ticket_type"
	TicketsRetrieveRequestRemoteFieldsStatus                   TicketsRetrieveRequestRemoteFields = "status"
	TicketsRetrieveRequestRemoteFieldsStatusTicketType         TicketsRetrieveRequestRemoteFields = "status,ticket_type"
	TicketsRetrieveRequestRemoteFieldsTicketType               TicketsRetrieveRequestRemoteFields = "ticket_type"
)

func NewTicketsRetrieveRequestRemoteFieldsFromString(s string) (TicketsRetrieveRequestRemoteFields, error) {
	switch s {
	case "priority":
		return TicketsRetrieveRequestRemoteFieldsPriority, nil
	case "priority,status":
		return TicketsRetrieveRequestRemoteFieldsPriorityStatus, nil
	case "priority,status,ticket_type":
		return TicketsRetrieveRequestRemoteFieldsPriorityStatusTicketType, nil
	case "priority,ticket_type":
		return TicketsRetrieveRequestRemoteFieldsPriorityTicketType, nil
	case "status":
		return TicketsRetrieveRequestRemoteFieldsStatus, nil
	case "status,ticket_type":
		return TicketsRetrieveRequestRemoteFieldsStatusTicketType, nil
	case "ticket_type":
		return TicketsRetrieveRequestRemoteFieldsTicketType, nil
	}
	var t TicketsRetrieveRequestRemoteFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TicketsRetrieveRequestRemoteFields) Ptr() *TicketsRetrieveRequestRemoteFields {
	return &t
}

type TicketsRetrieveRequestShowEnumOrigins string

const (
	TicketsRetrieveRequestShowEnumOriginsPriority                 TicketsRetrieveRequestShowEnumOrigins = "priority"
	TicketsRetrieveRequestShowEnumOriginsPriorityStatus           TicketsRetrieveRequestShowEnumOrigins = "priority,status"
	TicketsRetrieveRequestShowEnumOriginsPriorityStatusTicketType TicketsRetrieveRequestShowEnumOrigins = "priority,status,ticket_type"
	TicketsRetrieveRequestShowEnumOriginsPriorityTicketType       TicketsRetrieveRequestShowEnumOrigins = "priority,ticket_type"
	TicketsRetrieveRequestShowEnumOriginsStatus                   TicketsRetrieveRequestShowEnumOrigins = "status"
	TicketsRetrieveRequestShowEnumOriginsStatusTicketType         TicketsRetrieveRequestShowEnumOrigins = "status,ticket_type"
	TicketsRetrieveRequestShowEnumOriginsTicketType               TicketsRetrieveRequestShowEnumOrigins = "ticket_type"
)

func NewTicketsRetrieveRequestShowEnumOriginsFromString(s string) (TicketsRetrieveRequestShowEnumOrigins, error) {
	switch s {
	case "priority":
		return TicketsRetrieveRequestShowEnumOriginsPriority, nil
	case "priority,status":
		return TicketsRetrieveRequestShowEnumOriginsPriorityStatus, nil
	case "priority,status,ticket_type":
		return TicketsRetrieveRequestShowEnumOriginsPriorityStatusTicketType, nil
	case "priority,ticket_type":
		return TicketsRetrieveRequestShowEnumOriginsPriorityTicketType, nil
	case "status":
		return TicketsRetrieveRequestShowEnumOriginsStatus, nil
	case "status,ticket_type":
		return TicketsRetrieveRequestShowEnumOriginsStatusTicketType, nil
	case "ticket_type":
		return TicketsRetrieveRequestShowEnumOriginsTicketType, nil
	}
	var t TicketsRetrieveRequestShowEnumOrigins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TicketsRetrieveRequestShowEnumOrigins) Ptr() *TicketsRetrieveRequestShowEnumOrigins {
	return &t
}

type TicketsViewersListRequestExpandItem string

const (
	TicketsViewersListRequestExpandItemTeam TicketsViewersListRequestExpandItem = "team"
	TicketsViewersListRequestExpandItemUser TicketsViewersListRequestExpandItem = "user"
)

func NewTicketsViewersListRequestExpandItemFromString(s string) (TicketsViewersListRequestExpandItem, error) {
	switch s {
	case "team":
		return TicketsViewersListRequestExpandItemTeam, nil
	case "user":
		return TicketsViewersListRequestExpandItemUser, nil
	}
	var t TicketsViewersListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TicketsViewersListRequestExpandItem) Ptr() *TicketsViewersListRequestExpandItem {
	return &t
}

type PaginatedRemoteFieldClassList struct {
	Next     *string             `json:"next,omitempty" url:"next,omitempty"`
	Previous *string             `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*RemoteFieldClass `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedRemoteFieldClassList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedRemoteFieldClassList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedRemoteFieldClassList) GetResults() []*RemoteFieldClass {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedRemoteFieldClassList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedRemoteFieldClassList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedRemoteFieldClassList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedRemoteFieldClassList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedRemoteFieldClassList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedTicketList struct {
	Next     *string   `json:"next,omitempty" url:"next,omitempty"`
	Previous *string   `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Ticket `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedTicketList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedTicketList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedTicketList) GetResults() []*Ticket {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedTicketList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedTicketList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTicketList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTicketList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTicketList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Ticket Object
// ### Description
// The `Ticket` object is used to represent a ticket, issue, task or case.
// ### Usage Example
// TODO
type PatchedTicketRequest struct {
	// The ticket's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The individual `Users` who are assigned to this ticket. This does not include `Users` who just have view access to this ticket. To fetch all `Users` and `Teams` that can access the ticket, use the `GET /tickets/{ticket_id}/viewers` [endpoint](https://docs.merge.dev/ticketing/tickets/#tickets_viewers_list).
	Assignees []*string `json:"assignees,omitempty" url:"assignees,omitempty"`
	// The `Teams` that are assigned to this ticket. This does not include `Teams` who just have view access to this ticket. To fetch all `Users` and `Teams` that can access this ticket, use the `GET /tickets/{ticket_id}/viewers` [endpoint](https://docs.merge.dev/ticketing/tickets/#tickets_viewers_list).
	AssignedTeams []*string `json:"assigned_teams,omitempty" url:"assigned_teams,omitempty"`
	// The user who created this ticket.
	Creator *string `json:"creator,omitempty" url:"creator,omitempty"`
	// The ticket's due date.
	DueDate *time.Time `json:"due_date,omitempty" url:"due_date,omitempty"`
	// The current status of the ticket.
	//
	// * `OPEN` - OPEN
	// * `CLOSED` - CLOSED
	// * `IN_PROGRESS` - IN_PROGRESS
	// * `ON_HOLD` - ON_HOLD
	Status *TicketStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The ticket’s description. HTML version of description is mapped if supported by the third-party platform.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The `Collections` that this `Ticket` is included in.
	Collections []*string `json:"collections,omitempty" url:"collections,omitempty"`
	// The sub category of the ticket within the 3rd party system. Examples include incident, task, subtask or to-do.
	TicketType *string `json:"ticket_type,omitempty" url:"ticket_type,omitempty"`
	// The account associated with the ticket.
	Account *string `json:"account,omitempty" url:"account,omitempty"`
	// The contact associated with the ticket.
	Contact *string `json:"contact,omitempty" url:"contact,omitempty"`
	// The ticket's parent ticket.
	ParentTicket *string   `json:"parent_ticket,omitempty" url:"parent_ticket,omitempty"`
	Tags         []*string `json:"tags,omitempty" url:"tags,omitempty"`
	Roles        []*string `json:"roles,omitempty" url:"roles,omitempty"`
	// When the ticket was completed.
	CompletedAt *time.Time `json:"completed_at,omitempty" url:"completed_at,omitempty"`
	// The 3rd party url of the Ticket.
	TicketUrl *string `json:"ticket_url,omitempty" url:"ticket_url,omitempty"`
	// The priority or urgency of the Ticket.
	//
	// * `URGENT` - URGENT
	// * `HIGH` - HIGH
	// * `NORMAL` - NORMAL
	// * `LOW` - LOW
	Priority            *PriorityEnum          `json:"priority,omitempty" url:"priority,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PatchedTicketRequest) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PatchedTicketRequest) GetAssignees() []*string {
	if p == nil {
		return nil
	}
	return p.Assignees
}

func (p *PatchedTicketRequest) GetAssignedTeams() []*string {
	if p == nil {
		return nil
	}
	return p.AssignedTeams
}

func (p *PatchedTicketRequest) GetCreator() *string {
	if p == nil {
		return nil
	}
	return p.Creator
}

func (p *PatchedTicketRequest) GetDueDate() *time.Time {
	if p == nil {
		return nil
	}
	return p.DueDate
}

func (p *PatchedTicketRequest) GetStatus() *TicketStatusEnum {
	if p == nil {
		return nil
	}
	return p.Status
}

func (p *PatchedTicketRequest) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PatchedTicketRequest) GetCollections() []*string {
	if p == nil {
		return nil
	}
	return p.Collections
}

func (p *PatchedTicketRequest) GetTicketType() *string {
	if p == nil {
		return nil
	}
	return p.TicketType
}

func (p *PatchedTicketRequest) GetAccount() *string {
	if p == nil {
		return nil
	}
	return p.Account
}

func (p *PatchedTicketRequest) GetContact() *string {
	if p == nil {
		return nil
	}
	return p.Contact
}

func (p *PatchedTicketRequest) GetParentTicket() *string {
	if p == nil {
		return nil
	}
	return p.ParentTicket
}

func (p *PatchedTicketRequest) GetTags() []*string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *PatchedTicketRequest) GetRoles() []*string {
	if p == nil {
		return nil
	}
	return p.Roles
}

func (p *PatchedTicketRequest) GetCompletedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.CompletedAt
}

func (p *PatchedTicketRequest) GetTicketUrl() *string {
	if p == nil {
		return nil
	}
	return p.TicketUrl
}

func (p *PatchedTicketRequest) GetPriority() *PriorityEnum {
	if p == nil {
		return nil
	}
	return p.Priority
}

func (p *PatchedTicketRequest) GetIntegrationParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.IntegrationParams
}

func (p *PatchedTicketRequest) GetLinkedAccountParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.LinkedAccountParams
}

func (p *PatchedTicketRequest) GetRemoteFields() []*RemoteFieldRequest {
	if p == nil {
		return nil
	}
	return p.RemoteFields
}

func (p *PatchedTicketRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PatchedTicketRequest) UnmarshalJSON(data []byte) error {
	type embed PatchedTicketRequest
	var unmarshaler = struct {
		embed
		DueDate     *internal.DateTime `json:"due_date,omitempty"`
		CompletedAt *internal.DateTime `json:"completed_at,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PatchedTicketRequest(unmarshaler.embed)
	p.DueDate = unmarshaler.DueDate.TimePtr()
	p.CompletedAt = unmarshaler.CompletedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedTicketRequest) MarshalJSON() ([]byte, error) {
	type embed PatchedTicketRequest
	var marshaler = struct {
		embed
		DueDate     *internal.DateTime `json:"due_date,omitempty"`
		CompletedAt *internal.DateTime `json:"completed_at,omitempty"`
	}{
		embed:       embed(*p),
		DueDate:     internal.NewOptionalDateTime(p.DueDate),
		CompletedAt: internal.NewOptionalDateTime(p.CompletedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PatchedTicketRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type RemoteFieldRequest struct {
	RemoteFieldClass *RemoteFieldRequestRemoteFieldClass `json:"remote_field_class" url:"remote_field_class"`
	Value            interface{}                         `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoteFieldRequest) GetRemoteFieldClass() *RemoteFieldRequestRemoteFieldClass {
	if r == nil {
		return nil
	}
	return r.RemoteFieldClass
}

func (r *RemoteFieldRequest) GetValue() interface{} {
	if r == nil {
		return nil
	}
	return r.Value
}

func (r *RemoteFieldRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoteFieldRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldRequest) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldRequestRemoteFieldClass struct {
	String           string
	RemoteFieldClass *RemoteFieldClass

	typ string
}

func (r *RemoteFieldRequestRemoteFieldClass) GetString() string {
	if r == nil {
		return ""
	}
	return r.String
}

func (r *RemoteFieldRequestRemoteFieldClass) GetRemoteFieldClass() *RemoteFieldClass {
	if r == nil {
		return nil
	}
	return r.RemoteFieldClass
}

func (r *RemoteFieldRequestRemoteFieldClass) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typ = "String"
		r.String = valueString
		return nil
	}
	valueRemoteFieldClass := new(RemoteFieldClass)
	if err := json.Unmarshal(data, &valueRemoteFieldClass); err == nil {
		r.typ = "RemoteFieldClass"
		r.RemoteFieldClass = valueRemoteFieldClass
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldRequestRemoteFieldClass) MarshalJSON() ([]byte, error) {
	if r.typ == "String" || r.String != "" {
		return json.Marshal(r.String)
	}
	if r.typ == "RemoteFieldClass" || r.RemoteFieldClass != nil {
		return json.Marshal(r.RemoteFieldClass)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RemoteFieldRequestRemoteFieldClassVisitor interface {
	VisitString(string) error
	VisitRemoteFieldClass(*RemoteFieldClass) error
}

func (r *RemoteFieldRequestRemoteFieldClass) Accept(visitor RemoteFieldRequestRemoteFieldClassVisitor) error {
	if r.typ == "String" || r.String != "" {
		return visitor.VisitString(r.String)
	}
	if r.typ == "RemoteFieldClass" || r.RemoteFieldClass != nil {
		return visitor.VisitRemoteFieldClass(r.RemoteFieldClass)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// # The Ticket Object
// ### Description
// The `Ticket` object is used to represent a ticket, issue, task or case.
// ### Usage Example
// TODO
type TicketRequest struct {
	// The ticket's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The individual `Users` who are assigned to this ticket. This does not include `Users` who just have view access to this ticket. To fetch all `Users` and `Teams` that can access the ticket, use the `GET /tickets/{ticket_id}/viewers` [endpoint](https://docs.merge.dev/ticketing/tickets/#tickets_viewers_list).
	Assignees []*TicketRequestAssigneesItem `json:"assignees,omitempty" url:"assignees,omitempty"`
	// The `Teams` that are assigned to this ticket. This does not include `Teams` who just have view access to this ticket. To fetch all `Users` and `Teams` that can access this ticket, use the `GET /tickets/{ticket_id}/viewers` [endpoint](https://docs.merge.dev/ticketing/tickets/#tickets_viewers_list).
	AssignedTeams []*TicketRequestAssignedTeamsItem `json:"assigned_teams,omitempty" url:"assigned_teams,omitempty"`
	// The user who created this ticket.
	Creator *TicketRequestCreator `json:"creator,omitempty" url:"creator,omitempty"`
	// The ticket's due date.
	DueDate *time.Time `json:"due_date,omitempty" url:"due_date,omitempty"`
	// The current status of the ticket.
	//
	// * `OPEN` - OPEN
	// * `CLOSED` - CLOSED
	// * `IN_PROGRESS` - IN_PROGRESS
	// * `ON_HOLD` - ON_HOLD
	Status *TicketStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The ticket’s description. HTML version of description is mapped if supported by the third-party platform.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The `Collections` that this `Ticket` is included in.
	Collections []*TicketRequestCollectionsItem `json:"collections,omitempty" url:"collections,omitempty"`
	// The sub category of the ticket within the 3rd party system. Examples include incident, task, subtask or to-do.
	TicketType *string `json:"ticket_type,omitempty" url:"ticket_type,omitempty"`
	// The account associated with the ticket.
	Account *TicketRequestAccount `json:"account,omitempty" url:"account,omitempty"`
	// The contact associated with the ticket.
	Contact *TicketRequestContact `json:"contact,omitempty" url:"contact,omitempty"`
	// The ticket's parent ticket.
	ParentTicket *TicketRequestParentTicket      `json:"parent_ticket,omitempty" url:"parent_ticket,omitempty"`
	Attachments  []*TicketRequestAttachmentsItem `json:"attachments,omitempty" url:"attachments,omitempty"`
	Tags         []*string                       `json:"tags,omitempty" url:"tags,omitempty"`
	Roles        []*string                       `json:"roles,omitempty" url:"roles,omitempty"`
	// When the ticket was completed.
	CompletedAt *time.Time `json:"completed_at,omitempty" url:"completed_at,omitempty"`
	// The 3rd party url of the Ticket.
	TicketUrl *string `json:"ticket_url,omitempty" url:"ticket_url,omitempty"`
	// The priority or urgency of the Ticket.
	//
	// * `URGENT` - URGENT
	// * `HIGH` - HIGH
	// * `NORMAL` - NORMAL
	// * `LOW` - LOW
	Priority            *PriorityEnum          `json:"priority,omitempty" url:"priority,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TicketRequest) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *TicketRequest) GetAssignees() []*TicketRequestAssigneesItem {
	if t == nil {
		return nil
	}
	return t.Assignees
}

func (t *TicketRequest) GetAssignedTeams() []*TicketRequestAssignedTeamsItem {
	if t == nil {
		return nil
	}
	return t.AssignedTeams
}

func (t *TicketRequest) GetCreator() *TicketRequestCreator {
	if t == nil {
		return nil
	}
	return t.Creator
}

func (t *TicketRequest) GetDueDate() *time.Time {
	if t == nil {
		return nil
	}
	return t.DueDate
}

func (t *TicketRequest) GetStatus() *TicketStatusEnum {
	if t == nil {
		return nil
	}
	return t.Status
}

func (t *TicketRequest) GetDescription() *string {
	if t == nil {
		return nil
	}
	return t.Description
}

func (t *TicketRequest) GetCollections() []*TicketRequestCollectionsItem {
	if t == nil {
		return nil
	}
	return t.Collections
}

func (t *TicketRequest) GetTicketType() *string {
	if t == nil {
		return nil
	}
	return t.TicketType
}

func (t *TicketRequest) GetAccount() *TicketRequestAccount {
	if t == nil {
		return nil
	}
	return t.Account
}

func (t *TicketRequest) GetContact() *TicketRequestContact {
	if t == nil {
		return nil
	}
	return t.Contact
}

func (t *TicketRequest) GetParentTicket() *TicketRequestParentTicket {
	if t == nil {
		return nil
	}
	return t.ParentTicket
}

func (t *TicketRequest) GetAttachments() []*TicketRequestAttachmentsItem {
	if t == nil {
		return nil
	}
	return t.Attachments
}

func (t *TicketRequest) GetTags() []*string {
	if t == nil {
		return nil
	}
	return t.Tags
}

func (t *TicketRequest) GetRoles() []*string {
	if t == nil {
		return nil
	}
	return t.Roles
}

func (t *TicketRequest) GetCompletedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CompletedAt
}

func (t *TicketRequest) GetTicketUrl() *string {
	if t == nil {
		return nil
	}
	return t.TicketUrl
}

func (t *TicketRequest) GetPriority() *PriorityEnum {
	if t == nil {
		return nil
	}
	return t.Priority
}

func (t *TicketRequest) GetIntegrationParams() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.IntegrationParams
}

func (t *TicketRequest) GetLinkedAccountParams() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.LinkedAccountParams
}

func (t *TicketRequest) GetRemoteFields() []*RemoteFieldRequest {
	if t == nil {
		return nil
	}
	return t.RemoteFields
}

func (t *TicketRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TicketRequest) UnmarshalJSON(data []byte) error {
	type embed TicketRequest
	var unmarshaler = struct {
		embed
		DueDate     *internal.DateTime `json:"due_date,omitempty"`
		CompletedAt *internal.DateTime `json:"completed_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TicketRequest(unmarshaler.embed)
	t.DueDate = unmarshaler.DueDate.TimePtr()
	t.CompletedAt = unmarshaler.CompletedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TicketRequest) MarshalJSON() ([]byte, error) {
	type embed TicketRequest
	var marshaler = struct {
		embed
		DueDate     *internal.DateTime `json:"due_date,omitempty"`
		CompletedAt *internal.DateTime `json:"completed_at,omitempty"`
	}{
		embed:       embed(*t),
		DueDate:     internal.NewOptionalDateTime(t.DueDate),
		CompletedAt: internal.NewOptionalDateTime(t.CompletedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TicketRequest) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The account associated with the ticket.
type TicketRequestAccount struct {
	String  string
	Account *Account

	typ string
}

func (t *TicketRequestAccount) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TicketRequestAccount) GetAccount() *Account {
	if t == nil {
		return nil
	}
	return t.Account
}

func (t *TicketRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		t.typ = "Account"
		t.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestAccount) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Account" || t.Account != nil {
		return json.Marshal(t.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (t *TicketRequestAccount) Accept(visitor TicketRequestAccountVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Account" || t.Account != nil {
		return visitor.VisitAccount(t.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketRequestAssignedTeamsItem struct {
	String string
	Team   *Team

	typ string
}

func (t *TicketRequestAssignedTeamsItem) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TicketRequestAssignedTeamsItem) GetTeam() *Team {
	if t == nil {
		return nil
	}
	return t.Team
}

func (t *TicketRequestAssignedTeamsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueTeam := new(Team)
	if err := json.Unmarshal(data, &valueTeam); err == nil {
		t.typ = "Team"
		t.Team = valueTeam
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestAssignedTeamsItem) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Team" || t.Team != nil {
		return json.Marshal(t.Team)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketRequestAssignedTeamsItemVisitor interface {
	VisitString(string) error
	VisitTeam(*Team) error
}

func (t *TicketRequestAssignedTeamsItem) Accept(visitor TicketRequestAssignedTeamsItemVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Team" || t.Team != nil {
		return visitor.VisitTeam(t.Team)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketRequestAssigneesItem struct {
	String string
	User   *User

	typ string
}

func (t *TicketRequestAssigneesItem) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TicketRequestAssigneesItem) GetUser() *User {
	if t == nil {
		return nil
	}
	return t.User
}

func (t *TicketRequestAssigneesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typ = "User"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestAssigneesItem) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "User" || t.User != nil {
		return json.Marshal(t.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketRequestAssigneesItemVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TicketRequestAssigneesItem) Accept(visitor TicketRequestAssigneesItemVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "User" || t.User != nil {
		return visitor.VisitUser(t.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketRequestAttachmentsItem struct {
	String     string
	Attachment *Attachment

	typ string
}

func (t *TicketRequestAttachmentsItem) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TicketRequestAttachmentsItem) GetAttachment() *Attachment {
	if t == nil {
		return nil
	}
	return t.Attachment
}

func (t *TicketRequestAttachmentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueAttachment := new(Attachment)
	if err := json.Unmarshal(data, &valueAttachment); err == nil {
		t.typ = "Attachment"
		t.Attachment = valueAttachment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestAttachmentsItem) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Attachment" || t.Attachment != nil {
		return json.Marshal(t.Attachment)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketRequestAttachmentsItemVisitor interface {
	VisitString(string) error
	VisitAttachment(*Attachment) error
}

func (t *TicketRequestAttachmentsItem) Accept(visitor TicketRequestAttachmentsItemVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Attachment" || t.Attachment != nil {
		return visitor.VisitAttachment(t.Attachment)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketRequestCollectionsItem struct {
	String     string
	Collection *Collection

	typ string
}

func (t *TicketRequestCollectionsItem) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TicketRequestCollectionsItem) GetCollection() *Collection {
	if t == nil {
		return nil
	}
	return t.Collection
}

func (t *TicketRequestCollectionsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueCollection := new(Collection)
	if err := json.Unmarshal(data, &valueCollection); err == nil {
		t.typ = "Collection"
		t.Collection = valueCollection
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestCollectionsItem) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Collection" || t.Collection != nil {
		return json.Marshal(t.Collection)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketRequestCollectionsItemVisitor interface {
	VisitString(string) error
	VisitCollection(*Collection) error
}

func (t *TicketRequestCollectionsItem) Accept(visitor TicketRequestCollectionsItemVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Collection" || t.Collection != nil {
		return visitor.VisitCollection(t.Collection)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// The contact associated with the ticket.
type TicketRequestContact struct {
	String  string
	Contact *Contact

	typ string
}

func (t *TicketRequestContact) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TicketRequestContact) GetContact() *Contact {
	if t == nil {
		return nil
	}
	return t.Contact
}

func (t *TicketRequestContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		t.typ = "Contact"
		t.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestContact) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Contact" || t.Contact != nil {
		return json.Marshal(t.Contact)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketRequestContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (t *TicketRequestContact) Accept(visitor TicketRequestContactVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Contact" || t.Contact != nil {
		return visitor.VisitContact(t.Contact)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// The user who created this ticket.
type TicketRequestCreator struct {
	String string
	User   *User

	typ string
}

func (t *TicketRequestCreator) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TicketRequestCreator) GetUser() *User {
	if t == nil {
		return nil
	}
	return t.User
}

func (t *TicketRequestCreator) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typ = "User"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestCreator) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "User" || t.User != nil {
		return json.Marshal(t.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketRequestCreatorVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TicketRequestCreator) Accept(visitor TicketRequestCreatorVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "User" || t.User != nil {
		return visitor.VisitUser(t.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// The ticket's parent ticket.
type TicketRequestParentTicket struct {
	String string
	Ticket *Ticket

	typ string
}

func (t *TicketRequestParentTicket) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TicketRequestParentTicket) GetTicket() *Ticket {
	if t == nil {
		return nil
	}
	return t.Ticket
}

func (t *TicketRequestParentTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		t.typ = "Ticket"
		t.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestParentTicket) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Ticket" || t.Ticket != nil {
		return json.Marshal(t.Ticket)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketRequestParentTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (t *TicketRequestParentTicket) Accept(visitor TicketRequestParentTicketVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Ticket" || t.Ticket != nil {
		return visitor.VisitTicket(t.Ticket)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TicketResponse struct {
	Model    *Ticket                     `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TicketResponse) GetModel() *Ticket {
	if t == nil {
		return nil
	}
	return t.Model
}

func (t *TicketResponse) GetWarnings() []*WarningValidationProblem {
	if t == nil {
		return nil
	}
	return t.Warnings
}

func (t *TicketResponse) GetErrors() []*ErrorValidationProblem {
	if t == nil {
		return nil
	}
	return t.Errors
}

func (t *TicketResponse) GetLogs() []*DebugModeLog {
	if t == nil {
		return nil
	}
	return t.Logs
}

func (t *TicketResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TicketResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TicketResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TicketResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TicketResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TicketsViewersListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*TicketsViewersListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}
