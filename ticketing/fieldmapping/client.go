// This file was auto-generated by Fern from our API Definition.

package fieldmapping

import (
	context "context"
	fmt "fmt"
	core "github.com/merge-api/merge-go-client/core"
	ticketing "github.com/merge-api/merge-go-client/ticketing"
	http "net/http"
	url "net/url"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL: options.BaseURL,
		caller:  core.NewCaller(options.HTTPClient),
		header:  options.ToHeader(),
	}
}

// Get all Field Mappings for this Linked Account. Field Mappings are mappings between third-party Remote Fields and user defined Merge fields. [Learn more](https://docs.merge.dev/supplemental-data/field-mappings/overview/).
func (c *Client) FieldMappingsRetrieve(ctx context.Context, request *ticketing.FieldMappingsRetrieveRequest) (*ticketing.FieldMappingApiInstanceResponse, error) {
	baseURL := "https://api.merge.dev/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "ticketing/v1/field-mappings"

	queryParams := make(url.Values)
	if request.ExcludeRemoteFieldMetadata != nil {
		queryParams.Add("exclude_remote_field_metadata", fmt.Sprintf("%v", *request.ExcludeRemoteFieldMetadata))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *ticketing.FieldMappingApiInstanceResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Create new Field Mappings that will be available after the next scheduled sync. This will cause the next sync for this Linked Account to sync **ALL** data from start.
func (c *Client) FieldMappingsCreate(ctx context.Context, request *ticketing.CreateFieldMappingRequest) (*ticketing.FieldMappingInstanceResponse, error) {
	baseURL := "https://api.merge.dev/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "ticketing/v1/field-mappings"

	queryParams := make(url.Values)
	if request.ExcludeRemoteFieldMetadata != nil {
		queryParams.Add("exclude_remote_field_metadata", fmt.Sprintf("%v", *request.ExcludeRemoteFieldMetadata))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *ticketing.FieldMappingInstanceResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodPost,
			Headers:  c.header,
			Request:  request,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes Field Mappings for a Linked Account. All data related to this Field Mapping will be deleted and these changes will be reflected after the next scheduled sync. This will cause the next sync for this Linked Account to sync **ALL** data from start.
func (c *Client) FieldMappingsDestroy(ctx context.Context, fieldMappingId string) (*ticketing.FieldMappingInstanceResponse, error) {
	baseURL := "https://api.merge.dev/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"ticketing/v1/field-mappings/%v", fieldMappingId)

	var response *ticketing.FieldMappingInstanceResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodDelete,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Create or update existing Field Mappings for a Linked Account. Changes will be reflected after the next scheduled sync. This will cause the next sync for this Linked Account to sync **ALL** data from start.
func (c *Client) FieldMappingsPartialUpdate(ctx context.Context, fieldMappingId string, request *ticketing.PatchedEditFieldMappingRequest) (*ticketing.FieldMappingInstanceResponse, error) {
	baseURL := "https://api.merge.dev/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"ticketing/v1/field-mappings/%v", fieldMappingId)

	var response *ticketing.FieldMappingInstanceResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodPatch,
			Headers:  c.header,
			Request:  request,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get all remote fields for a Linked Account. Remote fields are third-party fields that are accessible after initial sync if remote_data is enabled. You can use remote fields to override existing Merge fields or map a new Merge field. [Learn more](https://docs.merge.dev/supplemental-data/field-mappings/overview/).
func (c *Client) RemoteFieldsRetrieve(ctx context.Context, request *ticketing.RemoteFieldsRetrieveRequest) (*ticketing.RemoteFieldApiResponse, error) {
	baseURL := "https://api.merge.dev/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "ticketing/v1/remote-fields"

	queryParams := make(url.Values)
	if request.CommonModels != nil {
		queryParams.Add("common_models", fmt.Sprintf("%v", *request.CommonModels))
	}
	if request.IncludeExampleValues != nil {
		queryParams.Add("include_example_values", fmt.Sprintf("%v", *request.IncludeExampleValues))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *ticketing.RemoteFieldApiResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get all organization-wide Target Fields, this will not include any Linked Account specific Target Fields. Organization-wide Target Fields are additional fields appended to the Merge Common Model for all Linked Accounts in a category. [Learn more](https://docs.merge.dev/supplemental-data/field-mappings/target-fields/).
func (c *Client) TargetFieldsRetrieve(ctx context.Context) (*ticketing.ExternalTargetFieldApiResponse, error) {
	baseURL := "https://api.merge.dev/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "ticketing/v1/target-fields"

	var response *ticketing.ExternalTargetFieldApiResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
