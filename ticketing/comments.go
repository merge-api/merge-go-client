// This file was auto-generated by Fern from our API Definition.

package ticketing

import (
	fmt "fmt"
	time "time"
)

type CommentEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool           `json:"-"`
	Model    *CommentRequest `json:"model,omitempty"`
}

type CommentsListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-"`
	// The pagination cursor value.
	Cursor *string `json:"-"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *CommentsListRequestExpand `json:"-"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-"`
	// Number of results to return per page.
	PageSize *int `json:"-"`
	// If provided, will only return Comments created in the third party platform after this datetime.
	RemoteCreatedAfter *time.Time `json:"-"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-"`
	// If provided, will only return comments for this ticket.
	TicketId *string `json:"-"`
}

type CommentsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *CommentsRetrieveRequestExpand `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
}

type CommentsListRequestExpand string

const (
	CommentsListRequestExpandContact           CommentsListRequestExpand = "contact"
	CommentsListRequestExpandContactTicket     CommentsListRequestExpand = "contact,ticket"
	CommentsListRequestExpandTicket            CommentsListRequestExpand = "ticket"
	CommentsListRequestExpandUser              CommentsListRequestExpand = "user"
	CommentsListRequestExpandUserContact       CommentsListRequestExpand = "user,contact"
	CommentsListRequestExpandUserContactTicket CommentsListRequestExpand = "user,contact,ticket"
	CommentsListRequestExpandUserTicket        CommentsListRequestExpand = "user,ticket"
)

func NewCommentsListRequestExpandFromString(s string) (CommentsListRequestExpand, error) {
	switch s {
	case "contact":
		return CommentsListRequestExpandContact, nil
	case "contact,ticket":
		return CommentsListRequestExpandContactTicket, nil
	case "ticket":
		return CommentsListRequestExpandTicket, nil
	case "user":
		return CommentsListRequestExpandUser, nil
	case "user,contact":
		return CommentsListRequestExpandUserContact, nil
	case "user,contact,ticket":
		return CommentsListRequestExpandUserContactTicket, nil
	case "user,ticket":
		return CommentsListRequestExpandUserTicket, nil
	}
	var t CommentsListRequestExpand
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CommentsListRequestExpand) Ptr() *CommentsListRequestExpand {
	return &c
}

type CommentsRetrieveRequestExpand string

const (
	CommentsRetrieveRequestExpandContact           CommentsRetrieveRequestExpand = "contact"
	CommentsRetrieveRequestExpandContactTicket     CommentsRetrieveRequestExpand = "contact,ticket"
	CommentsRetrieveRequestExpandTicket            CommentsRetrieveRequestExpand = "ticket"
	CommentsRetrieveRequestExpandUser              CommentsRetrieveRequestExpand = "user"
	CommentsRetrieveRequestExpandUserContact       CommentsRetrieveRequestExpand = "user,contact"
	CommentsRetrieveRequestExpandUserContactTicket CommentsRetrieveRequestExpand = "user,contact,ticket"
	CommentsRetrieveRequestExpandUserTicket        CommentsRetrieveRequestExpand = "user,ticket"
)

func NewCommentsRetrieveRequestExpandFromString(s string) (CommentsRetrieveRequestExpand, error) {
	switch s {
	case "contact":
		return CommentsRetrieveRequestExpandContact, nil
	case "contact,ticket":
		return CommentsRetrieveRequestExpandContactTicket, nil
	case "ticket":
		return CommentsRetrieveRequestExpandTicket, nil
	case "user":
		return CommentsRetrieveRequestExpandUser, nil
	case "user,contact":
		return CommentsRetrieveRequestExpandUserContact, nil
	case "user,contact,ticket":
		return CommentsRetrieveRequestExpandUserContactTicket, nil
	case "user,ticket":
		return CommentsRetrieveRequestExpandUserTicket, nil
	}
	var t CommentsRetrieveRequestExpand
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CommentsRetrieveRequestExpand) Ptr() *CommentsRetrieveRequestExpand {
	return &c
}
