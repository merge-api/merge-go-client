// Code generated by Fern. DO NOT EDIT.

package ticketing

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type CommentEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool           `json:"-" url:"run_async,omitempty"`
	Model    *CommentRequest `json:"model,omitempty" url:"-"`
}

type CommentsListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*CommentsListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// If provided, will only return Comments created in the third party platform after this datetime.
	RemoteCreatedAfter *time.Time `json:"-" url:"remote_created_after,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// If provided, will only return comments for this ticket.
	TicketId *string `json:"-" url:"ticket_id,omitempty"`
}

type CommentsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*CommentsRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

type CommentsListRequestExpandItem string

const (
	CommentsListRequestExpandItemContact CommentsListRequestExpandItem = "contact"
	CommentsListRequestExpandItemTicket  CommentsListRequestExpandItem = "ticket"
	CommentsListRequestExpandItemUser    CommentsListRequestExpandItem = "user"
)

func NewCommentsListRequestExpandItemFromString(s string) (CommentsListRequestExpandItem, error) {
	switch s {
	case "contact":
		return CommentsListRequestExpandItemContact, nil
	case "ticket":
		return CommentsListRequestExpandItemTicket, nil
	case "user":
		return CommentsListRequestExpandItemUser, nil
	}
	var t CommentsListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CommentsListRequestExpandItem) Ptr() *CommentsListRequestExpandItem {
	return &c
}

type CommentsRetrieveRequestExpandItem string

const (
	CommentsRetrieveRequestExpandItemContact CommentsRetrieveRequestExpandItem = "contact"
	CommentsRetrieveRequestExpandItemTicket  CommentsRetrieveRequestExpandItem = "ticket"
	CommentsRetrieveRequestExpandItemUser    CommentsRetrieveRequestExpandItem = "user"
)

func NewCommentsRetrieveRequestExpandItemFromString(s string) (CommentsRetrieveRequestExpandItem, error) {
	switch s {
	case "contact":
		return CommentsRetrieveRequestExpandItemContact, nil
	case "ticket":
		return CommentsRetrieveRequestExpandItemTicket, nil
	case "user":
		return CommentsRetrieveRequestExpandItemUser, nil
	}
	var t CommentsRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CommentsRetrieveRequestExpandItem) Ptr() *CommentsRetrieveRequestExpandItem {
	return &c
}

// # The Comment Object
// ### Description
// The `Comment` object is used to represent a comment on a ticket.
//
// ### Usage Example
// TODO
type Comment struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The author of the Comment, if the author is a User. If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
	User *CommentUser `json:"user,omitempty" url:"user,omitempty"`
	// The author of the Comment, if the author is a Contact.If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
	Contact *CommentContact `json:"contact,omitempty" url:"contact,omitempty"`
	// The comment's text body.
	Body *string `json:"body,omitempty" url:"body,omitempty"`
	// The comment's text body formatted as html.
	HtmlBody *string `json:"html_body,omitempty" url:"html_body,omitempty"`
	// The ticket associated with the comment.
	Ticket *CommentTicket `json:"ticket,omitempty" url:"ticket,omitempty"`
	// Whether or not the comment is internal.
	IsPrivate *bool `json:"is_private,omitempty" url:"is_private,omitempty"`
	// When the third party's comment was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty" url:"remote_created_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Comment) GetId() *string {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *Comment) GetRemoteId() *string {
	if c == nil {
		return nil
	}
	return c.RemoteId
}

func (c *Comment) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *Comment) GetModifiedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.ModifiedAt
}

func (c *Comment) GetUser() *CommentUser {
	if c == nil {
		return nil
	}
	return c.User
}

func (c *Comment) GetContact() *CommentContact {
	if c == nil {
		return nil
	}
	return c.Contact
}

func (c *Comment) GetBody() *string {
	if c == nil {
		return nil
	}
	return c.Body
}

func (c *Comment) GetHtmlBody() *string {
	if c == nil {
		return nil
	}
	return c.HtmlBody
}

func (c *Comment) GetTicket() *CommentTicket {
	if c == nil {
		return nil
	}
	return c.Ticket
}

func (c *Comment) GetIsPrivate() *bool {
	if c == nil {
		return nil
	}
	return c.IsPrivate
}

func (c *Comment) GetRemoteCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.RemoteCreatedAt
}

func (c *Comment) GetRemoteWasDeleted() *bool {
	if c == nil {
		return nil
	}
	return c.RemoteWasDeleted
}

func (c *Comment) GetFieldMappings() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.FieldMappings
}

func (c *Comment) GetRemoteData() []*RemoteData {
	if c == nil {
		return nil
	}
	return c.RemoteData
}

func (c *Comment) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Comment) UnmarshalJSON(data []byte) error {
	type embed Comment
	var unmarshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = Comment(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	c.RemoteCreatedAt = unmarshaler.RemoteCreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Comment) MarshalJSON() ([]byte, error) {
	type embed Comment
	var marshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
	}{
		embed:           embed(*c),
		CreatedAt:       internal.NewOptionalDateTime(c.CreatedAt),
		ModifiedAt:      internal.NewOptionalDateTime(c.ModifiedAt),
		RemoteCreatedAt: internal.NewOptionalDateTime(c.RemoteCreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *Comment) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The author of the Comment, if the author is a Contact.If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
type CommentContact struct {
	String  string
	Contact *Contact

	typ string
}

func (c *CommentContact) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *CommentContact) GetContact() *Contact {
	if c == nil {
		return nil
	}
	return c.Contact
}

func (c *CommentContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		c.typ = "Contact"
		c.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentContact) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "Contact" || c.Contact != nil {
		return json.Marshal(c.Contact)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CommentContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (c *CommentContact) Accept(visitor CommentContactVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "Contact" || c.Contact != nil {
		return visitor.VisitContact(c.Contact)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// # The Comment Object
// ### Description
// The `Comment` object is used to represent a comment on a ticket.
//
// ### Usage Example
// TODO
type CommentRequest struct {
	// The author of the Comment, if the author is a User. If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
	User *CommentRequestUser `json:"user,omitempty" url:"user,omitempty"`
	// The author of the Comment, if the author is a Contact.If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
	Contact *CommentRequestContact `json:"contact,omitempty" url:"contact,omitempty"`
	// The comment's text body.
	Body *string `json:"body,omitempty" url:"body,omitempty"`
	// The comment's text body formatted as html.
	HtmlBody *string `json:"html_body,omitempty" url:"html_body,omitempty"`
	// The ticket associated with the comment.
	Ticket *CommentRequestTicket `json:"ticket,omitempty" url:"ticket,omitempty"`
	// Whether or not the comment is internal.
	IsPrivate           *bool                  `json:"is_private,omitempty" url:"is_private,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CommentRequest) GetUser() *CommentRequestUser {
	if c == nil {
		return nil
	}
	return c.User
}

func (c *CommentRequest) GetContact() *CommentRequestContact {
	if c == nil {
		return nil
	}
	return c.Contact
}

func (c *CommentRequest) GetBody() *string {
	if c == nil {
		return nil
	}
	return c.Body
}

func (c *CommentRequest) GetHtmlBody() *string {
	if c == nil {
		return nil
	}
	return c.HtmlBody
}

func (c *CommentRequest) GetTicket() *CommentRequestTicket {
	if c == nil {
		return nil
	}
	return c.Ticket
}

func (c *CommentRequest) GetIsPrivate() *bool {
	if c == nil {
		return nil
	}
	return c.IsPrivate
}

func (c *CommentRequest) GetIntegrationParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.IntegrationParams
}

func (c *CommentRequest) GetLinkedAccountParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.LinkedAccountParams
}

func (c *CommentRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CommentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CommentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommentRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommentRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The author of the Comment, if the author is a Contact.If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
type CommentRequestContact struct {
	String  string
	Contact *Contact

	typ string
}

func (c *CommentRequestContact) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *CommentRequestContact) GetContact() *Contact {
	if c == nil {
		return nil
	}
	return c.Contact
}

func (c *CommentRequestContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		c.typ = "Contact"
		c.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentRequestContact) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "Contact" || c.Contact != nil {
		return json.Marshal(c.Contact)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CommentRequestContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (c *CommentRequestContact) Accept(visitor CommentRequestContactVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "Contact" || c.Contact != nil {
		return visitor.VisitContact(c.Contact)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// The ticket associated with the comment.
type CommentRequestTicket struct {
	String string
	Ticket *Ticket

	typ string
}

func (c *CommentRequestTicket) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *CommentRequestTicket) GetTicket() *Ticket {
	if c == nil {
		return nil
	}
	return c.Ticket
}

func (c *CommentRequestTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		c.typ = "Ticket"
		c.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentRequestTicket) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "Ticket" || c.Ticket != nil {
		return json.Marshal(c.Ticket)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CommentRequestTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (c *CommentRequestTicket) Accept(visitor CommentRequestTicketVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "Ticket" || c.Ticket != nil {
		return visitor.VisitTicket(c.Ticket)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// The author of the Comment, if the author is a User. If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
type CommentRequestUser struct {
	String string
	User   *User

	typ string
}

func (c *CommentRequestUser) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *CommentRequestUser) GetUser() *User {
	if c == nil {
		return nil
	}
	return c.User
}

func (c *CommentRequestUser) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		c.typ = "User"
		c.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentRequestUser) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "User" || c.User != nil {
		return json.Marshal(c.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CommentRequestUserVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (c *CommentRequestUser) Accept(visitor CommentRequestUserVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "User" || c.User != nil {
		return visitor.VisitUser(c.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CommentResponse struct {
	Model    *Comment                    `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CommentResponse) GetModel() *Comment {
	if c == nil {
		return nil
	}
	return c.Model
}

func (c *CommentResponse) GetWarnings() []*WarningValidationProblem {
	if c == nil {
		return nil
	}
	return c.Warnings
}

func (c *CommentResponse) GetErrors() []*ErrorValidationProblem {
	if c == nil {
		return nil
	}
	return c.Errors
}

func (c *CommentResponse) GetLogs() []*DebugModeLog {
	if c == nil {
		return nil
	}
	return c.Logs
}

func (c *CommentResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CommentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CommentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommentResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The ticket associated with the comment.
type CommentTicket struct {
	String string
	Ticket *Ticket

	typ string
}

func (c *CommentTicket) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *CommentTicket) GetTicket() *Ticket {
	if c == nil {
		return nil
	}
	return c.Ticket
}

func (c *CommentTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		c.typ = "Ticket"
		c.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentTicket) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "Ticket" || c.Ticket != nil {
		return json.Marshal(c.Ticket)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CommentTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (c *CommentTicket) Accept(visitor CommentTicketVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "Ticket" || c.Ticket != nil {
		return visitor.VisitTicket(c.Ticket)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// The author of the Comment, if the author is a User. If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
type CommentUser struct {
	String string
	User   *User

	typ string
}

func (c *CommentUser) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *CommentUser) GetUser() *User {
	if c == nil {
		return nil
	}
	return c.User
}

func (c *CommentUser) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		c.typ = "User"
		c.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentUser) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "User" || c.User != nil {
		return json.Marshal(c.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CommentUserVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (c *CommentUser) Accept(visitor CommentUserVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "User" || c.User != nil {
		return visitor.VisitUser(c.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type PaginatedCommentList struct {
	Next     *string    `json:"next,omitempty" url:"next,omitempty"`
	Previous *string    `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Comment `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedCommentList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedCommentList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedCommentList) GetResults() []*Comment {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedCommentList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedCommentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedCommentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedCommentList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedCommentList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
