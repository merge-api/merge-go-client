// Code generated by Fern. DO NOT EDIT.

package ticketing

import (
	fmt "fmt"
	time "time"
)

type UsersListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will only return users with emails equal to this value (case insensitive).
	EmailAddress *string `json:"-" url:"email_address,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*UsersListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// If provided, will only return users matching in this team.
	Team *string `json:"-" url:"team,omitempty"`
}

type UsersRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*UsersRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

type UsersListRequestExpandItem string

const (
	UsersListRequestExpandItemRoles UsersListRequestExpandItem = "roles"
	UsersListRequestExpandItemTeams UsersListRequestExpandItem = "teams"
)

func NewUsersListRequestExpandItemFromString(s string) (UsersListRequestExpandItem, error) {
	switch s {
	case "roles":
		return UsersListRequestExpandItemRoles, nil
	case "teams":
		return UsersListRequestExpandItemTeams, nil
	}
	var t UsersListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UsersListRequestExpandItem) Ptr() *UsersListRequestExpandItem {
	return &u
}

type UsersRetrieveRequestExpandItem string

const (
	UsersRetrieveRequestExpandItemRoles UsersRetrieveRequestExpandItem = "roles"
	UsersRetrieveRequestExpandItemTeams UsersRetrieveRequestExpandItem = "teams"
)

func NewUsersRetrieveRequestExpandItemFromString(s string) (UsersRetrieveRequestExpandItem, error) {
	switch s {
	case "roles":
		return UsersRetrieveRequestExpandItemRoles, nil
	case "teams":
		return UsersRetrieveRequestExpandItemTeams, nil
	}
	var t UsersRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UsersRetrieveRequestExpandItem) Ptr() *UsersRetrieveRequestExpandItem {
	return &u
}
