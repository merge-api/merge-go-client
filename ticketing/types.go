// This file was auto-generated by Fern from our API Definition.

package ticketing

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/merge-api/merge-go-client/core"
	time "time"
)

// - `PRIVATE` - PRIVATE
// - `COMPANY` - COMPANY
// - `PUBLIC` - PUBLIC
type AccessLevelEnum string

const (
	AccessLevelEnumPrivate AccessLevelEnum = "PRIVATE"
	AccessLevelEnumCompany AccessLevelEnum = "COMPANY"
	AccessLevelEnumPublic  AccessLevelEnum = "PUBLIC"
)

func NewAccessLevelEnumFromString(s string) (AccessLevelEnum, error) {
	switch s {
	case "PRIVATE":
		return AccessLevelEnumPrivate, nil
	case "COMPANY":
		return AccessLevelEnumCompany, nil
	case "PUBLIC":
		return AccessLevelEnumPublic, nil
	}
	var t AccessLevelEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccessLevelEnum) Ptr() *AccessLevelEnum {
	return &a
}

// # The Account Object
//
// ### Description
//
// The `Account` object is used to represent the account that a ticket is associated with.
//
// The account is a company that may be a customer. This does not represent the company that is receiving the ticket.
//
// ### Usage Example
//
// TODO
type Account struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The account's name.
	Name *string `json:"name,omitempty"`
	// The account's domain names.
	Domains []*string `json:"domains,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (a *Account) UnmarshalJSON(data []byte) error {
	type unmarshaler Account
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Account(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Account) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountDetails struct {
	Id                      *string       `json:"id,omitempty"`
	Integration             *string       `json:"integration,omitempty"`
	IntegrationSlug         *string       `json:"integration_slug,omitempty"`
	Category                *CategoryEnum `json:"category,omitempty"`
	EndUserOriginId         *string       `json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName *string       `json:"end_user_organization_name,omitempty"`
	EndUserEmailAddress     *string       `json:"end_user_email_address,omitempty"`
	Status                  *string       `json:"status,omitempty"`
	WebhookListenerUrl      *string       `json:"webhook_listener_url,omitempty"`
	// Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.
	IsDuplicate *bool   `json:"is_duplicate,omitempty"`
	AccountType *string `json:"account_type,omitempty"`
	// The time at which account completes the linking flow.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountDetails(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountDetails) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The LinkedAccount Object
//
// ### Description
//
// The `LinkedAccount` object is used to represent an end user's link with a specific integration.
//
// ### Usage Example
//
// View a list of your organization's `LinkedAccount` objects.
type AccountDetailsAndActions struct {
	Id                      string                             `json:"id"`
	Category                *CategoryEnum                      `json:"category,omitempty"`
	Status                  AccountDetailsAndActionsStatusEnum `json:"status,omitempty"`
	StatusDetail            *string                            `json:"status_detail,omitempty"`
	EndUserOriginId         *string                            `json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName string                             `json:"end_user_organization_name"`
	EndUserEmailAddress     string                             `json:"end_user_email_address"`
	// The tenant or domain the customer has provided access to.
	Subdomain          *string `json:"subdomain,omitempty"`
	WebhookListenerUrl string  `json:"webhook_listener_url"`
	// Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.
	IsDuplicate *bool                                `json:"is_duplicate,omitempty"`
	Integration *AccountDetailsAndActionsIntegration `json:"integration,omitempty"`
	AccountType string                               `json:"account_type"`
	CompletedAt time.Time                            `json:"completed_at"`

	_rawJSON json.RawMessage
}

func (a *AccountDetailsAndActions) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountDetailsAndActions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountDetailsAndActions(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountDetailsAndActions) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountDetailsAndActionsIntegration struct {
	Name                     string            `json:"name"`
	Categories               []CategoriesEnum  `json:"categories,omitempty"`
	Image                    *string           `json:"image,omitempty"`
	SquareImage              *string           `json:"square_image,omitempty"`
	Color                    string            `json:"color"`
	Slug                     string            `json:"slug"`
	PassthroughAvailable     bool              `json:"passthrough_available"`
	AvailableModelOperations []*ModelOperation `json:"available_model_operations,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountDetailsAndActionsIntegration) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountDetailsAndActionsIntegration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountDetailsAndActionsIntegration(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountDetailsAndActionsIntegration) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// - `COMPLETE` - COMPLETE
// - `INCOMPLETE` - INCOMPLETE
// - `RELINK_NEEDED` - RELINK_NEEDED
// - `IDLE` - IDLE
type AccountDetailsAndActionsStatusEnum string

const (
	AccountDetailsAndActionsStatusEnumComplete     AccountDetailsAndActionsStatusEnum = "COMPLETE"
	AccountDetailsAndActionsStatusEnumIncomplete   AccountDetailsAndActionsStatusEnum = "INCOMPLETE"
	AccountDetailsAndActionsStatusEnumRelinkNeeded AccountDetailsAndActionsStatusEnum = "RELINK_NEEDED"
	AccountDetailsAndActionsStatusEnumIdle         AccountDetailsAndActionsStatusEnum = "IDLE"
)

func NewAccountDetailsAndActionsStatusEnumFromString(s string) (AccountDetailsAndActionsStatusEnum, error) {
	switch s {
	case "COMPLETE":
		return AccountDetailsAndActionsStatusEnumComplete, nil
	case "INCOMPLETE":
		return AccountDetailsAndActionsStatusEnumIncomplete, nil
	case "RELINK_NEEDED":
		return AccountDetailsAndActionsStatusEnumRelinkNeeded, nil
	case "IDLE":
		return AccountDetailsAndActionsStatusEnumIdle, nil
	}
	var t AccountDetailsAndActionsStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountDetailsAndActionsStatusEnum) Ptr() *AccountDetailsAndActionsStatusEnum {
	return &a
}

type AccountIntegration struct {
	// Company name.
	Name string `json:"name"`
	// Optional. This shortened name appears in places with limited space, usually in conjunction with the platform's logo (e.g., Merge Link menu).<br><br>Example: <i>Workforce Now (in lieu of ADP Workforce Now), SuccessFactors (in lieu of SAP SuccessFactors)</i>
	AbbreviatedName *string `json:"abbreviated_name,omitempty"`
	// Category or categories this integration belongs to. Multiple categories should be comma separated, i.e. [ats, hris].
	Categories []CategoriesEnum `json:"categories,omitempty"`
	// Company logo in rectangular shape.
	Image *string `json:"image,omitempty"`
	// Company logo in square shape.
	SquareImage *string `json:"square_image,omitempty"`
	// The color of this integration used for buttons and text throughout the app and landing pages. <b>Choose a darker, saturated color.</b>
	Color *string `json:"color,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	// Mapping of API endpoints to documentation urls for support. Example: {'GET': [['/common-model-scopes', 'https://docs.merge.dev/accounting/common-model-scopes/#common_model_scopes_retrieve'],['/common-model-actions', 'https://docs.merge.dev/accounting/common-model-actions/#common_model_actions_retrieve']], 'POST': []}
	ApiEndpointsToDocumentationUrls map[string]interface{} `json:"api_endpoints_to_documentation_urls,omitempty"`
	// Setup guide URL for third party webhook creation. Exposed in Merge Docs.
	WebhookSetupGuideUrl *string `json:"webhook_setup_guide_url,omitempty"`
	// Category or categories this integration is in beta status for.
	CategoryBetaStatus map[string]interface{} `json:"category_beta_status,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountIntegration) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountIntegration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountIntegration(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountIntegration) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountToken struct {
	AccountToken string              `json:"account_token"`
	Integration  *AccountIntegration `json:"integration,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountToken) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountToken(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountToken) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AdvancedMetadata struct {
	Id           string        `json:"id"`
	DisplayName  *string       `json:"display_name,omitempty"`
	Description  *string       `json:"description,omitempty"`
	IsRequired   *bool         `json:"is_required,omitempty"`
	IsCustom     *bool         `json:"is_custom,omitempty"`
	FieldChoices []interface{} `json:"field_choices,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AdvancedMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler AdvancedMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdvancedMetadata(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdvancedMetadata) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AsyncPassthroughReciept struct {
	AsyncPassthroughReceiptId string `json:"async_passthrough_receipt_id"`

	_rawJSON json.RawMessage
}

func (a *AsyncPassthroughReciept) UnmarshalJSON(data []byte) error {
	type unmarshaler AsyncPassthroughReciept
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AsyncPassthroughReciept(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AsyncPassthroughReciept) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The Attachment Object
//
// ### Description
//
// The `Attachment` object is used to represent an attachment for a ticket.
//
// ### Usage Example
//
// TODO
type Attachment struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The attachment's name. It is required to include the file extension in the attachment's name.
	FileName *string `json:"file_name,omitempty"`
	// The ticket associated with the attachment.
	Ticket *AttachmentTicket `json:"ticket,omitempty"`
	// The attachment's url. It is required to include the file extension in the file's URL.
	FileUrl *string `json:"file_url,omitempty"`
	// The attachment's file format.
	ContentType *string `json:"content_type,omitempty"`
	// The user who uploaded the attachment.
	UploadedBy *string `json:"uploaded_by,omitempty"`
	// When the third party's attachment was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (a *Attachment) UnmarshalJSON(data []byte) error {
	type unmarshaler Attachment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Attachment(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Attachment) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The Attachment Object
//
// ### Description
//
// The `Attachment` object is used to represent an attachment for a ticket.
//
// ### Usage Example
//
// TODO
type AttachmentRequest struct {
	// The attachment's name. It is required to include the file extension in the attachment's name.
	FileName *string `json:"file_name,omitempty"`
	// The ticket associated with the attachment.
	Ticket *AttachmentRequestTicket `json:"ticket,omitempty"`
	// The attachment's url. It is required to include the file extension in the file's URL.
	FileUrl *string `json:"file_url,omitempty"`
	// The attachment's file format.
	ContentType *string `json:"content_type,omitempty"`
	// The user who uploaded the attachment.
	UploadedBy          *string                `json:"uploaded_by,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AttachmentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler AttachmentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttachmentRequest(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttachmentRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The ticket associated with the attachment.
type AttachmentRequestTicket struct {
	typeName string
	String   string
	Ticket   *Ticket
}

func NewAttachmentRequestTicketFromString(value string) *AttachmentRequestTicket {
	return &AttachmentRequestTicket{typeName: "string", String: value}
}

func NewAttachmentRequestTicketFromTicket(value *Ticket) *AttachmentRequestTicket {
	return &AttachmentRequestTicket{typeName: "ticket", Ticket: value}
}

func (a *AttachmentRequestTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		a.typeName = "ticket"
		a.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AttachmentRequestTicket) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "ticket":
		return json.Marshal(a.Ticket)
	}
}

type AttachmentRequestTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (a *AttachmentRequestTicket) Accept(visitor AttachmentRequestTicketVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "ticket":
		return visitor.VisitTicket(a.Ticket)
	}
}

// The ticket associated with the attachment.
type AttachmentTicket struct {
	typeName string
	String   string
	Ticket   *Ticket
}

func NewAttachmentTicketFromString(value string) *AttachmentTicket {
	return &AttachmentTicket{typeName: "string", String: value}
}

func NewAttachmentTicketFromTicket(value *Ticket) *AttachmentTicket {
	return &AttachmentTicket{typeName: "ticket", Ticket: value}
}

func (a *AttachmentTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		a.typeName = "ticket"
		a.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AttachmentTicket) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "ticket":
		return json.Marshal(a.Ticket)
	}
}

type AttachmentTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (a *AttachmentTicket) Accept(visitor AttachmentTicketVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "ticket":
		return visitor.VisitTicket(a.Ticket)
	}
}

type AuditLogEvent struct {
	Id *string `json:"id,omitempty"`
	// The User's full name at the time of this Event occurring.
	UserName *string `json:"user_name,omitempty"`
	// The User's email at the time of this Event occurring.
	UserEmail *string `json:"user_email,omitempty"`
	// Designates the role of the user (or SYSTEM/API if action not taken by a user) at the time of this Event occurring.
	//
	// - `ADMIN` - ADMIN
	// - `DEVELOPER` - DEVELOPER
	// - `MEMBER` - MEMBER
	// - `API` - API
	// - `SYSTEM` - SYSTEM
	// - `MERGE_TEAM` - MERGE_TEAM
	Role      *AuditLogEventRole `json:"role,omitempty"`
	IpAddress string             `json:"ip_address"`
	// Designates the type of event that occurred.
	//
	// - `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
	// - `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
	// - `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
	// - `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
	// - `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
	// - `INVITED_USER` - INVITED_USER
	// - `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
	// - `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
	// - `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
	// - `CREATED_DESTINATION` - CREATED_DESTINATION
	// - `DELETED_DESTINATION` - DELETED_DESTINATION
	// - `CHANGED_DESTINATION` - CHANGED_DESTINATION
	// - `CHANGED_SCOPES` - CHANGED_SCOPES
	// - `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
	// - `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
	// - `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
	// - `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
	// - `ENABLED_CATEGORY` - ENABLED_CATEGORY
	// - `DISABLED_CATEGORY` - DISABLED_CATEGORY
	// - `CHANGED_PASSWORD` - CHANGED_PASSWORD
	// - `RESET_PASSWORD` - RESET_PASSWORD
	// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
	// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
	// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
	// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
	// - `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
	// - `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
	// - `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
	// - `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
	// - `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
	// - `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
	// - `CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
	// - `CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
	// - `DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
	// - `FORCED_LINKED_ACCOUNT_RESYNC` - FORCED_LINKED_ACCOUNT_RESYNC
	// - `MUTED_ISSUE` - MUTED_ISSUE
	// - `GENERATED_MAGIC_LINK` - GENERATED_MAGIC_LINK
	// - `ENABLED_MERGE_WEBHOOK` - ENABLED_MERGE_WEBHOOK
	// - `DISABLED_MERGE_WEBHOOK` - DISABLED_MERGE_WEBHOOK
	// - `MERGE_WEBHOOK_TARGET_CHANGED` - MERGE_WEBHOOK_TARGET_CHANGED
	// - `END_USER_CREDENTIALS_ACCESSED` - END_USER_CREDENTIALS_ACCESSED
	EventType        *AuditLogEventEventType `json:"event_type,omitempty"`
	EventDescription string                  `json:"event_description"`
	CreatedAt        *time.Time              `json:"created_at,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AuditLogEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler AuditLogEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuditLogEvent(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuditLogEvent) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Designates the type of event that occurred.
//
// - `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
// - `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
// - `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
// - `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
// - `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
// - `INVITED_USER` - INVITED_USER
// - `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
// - `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
// - `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
// - `CREATED_DESTINATION` - CREATED_DESTINATION
// - `DELETED_DESTINATION` - DELETED_DESTINATION
// - `CHANGED_DESTINATION` - CHANGED_DESTINATION
// - `CHANGED_SCOPES` - CHANGED_SCOPES
// - `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
// - `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
// - `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
// - `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
// - `ENABLED_CATEGORY` - ENABLED_CATEGORY
// - `DISABLED_CATEGORY` - DISABLED_CATEGORY
// - `CHANGED_PASSWORD` - CHANGED_PASSWORD
// - `RESET_PASSWORD` - RESET_PASSWORD
// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// - `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
// - `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
// - `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
// - `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
// - `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
// - `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
// - `CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `FORCED_LINKED_ACCOUNT_RESYNC` - FORCED_LINKED_ACCOUNT_RESYNC
// - `MUTED_ISSUE` - MUTED_ISSUE
// - `GENERATED_MAGIC_LINK` - GENERATED_MAGIC_LINK
// - `ENABLED_MERGE_WEBHOOK` - ENABLED_MERGE_WEBHOOK
// - `DISABLED_MERGE_WEBHOOK` - DISABLED_MERGE_WEBHOOK
// - `MERGE_WEBHOOK_TARGET_CHANGED` - MERGE_WEBHOOK_TARGET_CHANGED
// - `END_USER_CREDENTIALS_ACCESSED` - END_USER_CREDENTIALS_ACCESSED
type AuditLogEventEventType struct {
	typeName      string
	EventTypeEnum EventTypeEnum
	String        string
}

func NewAuditLogEventEventTypeFromEventTypeEnum(value EventTypeEnum) *AuditLogEventEventType {
	return &AuditLogEventEventType{typeName: "eventTypeEnum", EventTypeEnum: value}
}

func NewAuditLogEventEventTypeFromString(value string) *AuditLogEventEventType {
	return &AuditLogEventEventType{typeName: "string", String: value}
}

func (a *AuditLogEventEventType) UnmarshalJSON(data []byte) error {
	var valueEventTypeEnum EventTypeEnum
	if err := json.Unmarshal(data, &valueEventTypeEnum); err == nil {
		a.typeName = "eventTypeEnum"
		a.EventTypeEnum = valueEventTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AuditLogEventEventType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "eventTypeEnum":
		return json.Marshal(a.EventTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AuditLogEventEventTypeVisitor interface {
	VisitEventTypeEnum(EventTypeEnum) error
	VisitString(string) error
}

func (a *AuditLogEventEventType) Accept(visitor AuditLogEventEventTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "eventTypeEnum":
		return visitor.VisitEventTypeEnum(a.EventTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// Designates the role of the user (or SYSTEM/API if action not taken by a user) at the time of this Event occurring.
//
// - `ADMIN` - ADMIN
// - `DEVELOPER` - DEVELOPER
// - `MEMBER` - MEMBER
// - `API` - API
// - `SYSTEM` - SYSTEM
// - `MERGE_TEAM` - MERGE_TEAM
type AuditLogEventRole struct {
	typeName string
	RoleEnum RoleEnum
	String   string
}

func NewAuditLogEventRoleFromRoleEnum(value RoleEnum) *AuditLogEventRole {
	return &AuditLogEventRole{typeName: "roleEnum", RoleEnum: value}
}

func NewAuditLogEventRoleFromString(value string) *AuditLogEventRole {
	return &AuditLogEventRole{typeName: "string", String: value}
}

func (a *AuditLogEventRole) UnmarshalJSON(data []byte) error {
	var valueRoleEnum RoleEnum
	if err := json.Unmarshal(data, &valueRoleEnum); err == nil {
		a.typeName = "roleEnum"
		a.RoleEnum = valueRoleEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AuditLogEventRole) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "roleEnum":
		return json.Marshal(a.RoleEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AuditLogEventRoleVisitor interface {
	VisitRoleEnum(RoleEnum) error
	VisitString(string) error
}

func (a *AuditLogEventRole) Accept(visitor AuditLogEventRoleVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "roleEnum":
		return visitor.VisitRoleEnum(a.RoleEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// # The AvailableActions Object
//
// ### Description
//
// The `Activity` object is used to see all available model/operation combinations for an integration.
//
// ### Usage Example
//
// Fetch all the actions available for the `Zenefits` integration.
type AvailableActions struct {
	Integration              *AccountIntegration `json:"integration,omitempty"`
	PassthroughAvailable     bool                `json:"passthrough_available"`
	AvailableModelOperations []*ModelOperation   `json:"available_model_operations,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AvailableActions) UnmarshalJSON(data []byte) error {
	type unmarshaler AvailableActions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AvailableActions(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AvailableActions) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// - `hris` - hris
// - `ats` - ats
// - `accounting` - accounting
// - `ticketing` - ticketing
// - `crm` - crm
// - `mktg` - mktg
// - `filestorage` - filestorage
type CategoriesEnum string

const (
	CategoriesEnumHris        CategoriesEnum = "hris"
	CategoriesEnumAts         CategoriesEnum = "ats"
	CategoriesEnumAccounting  CategoriesEnum = "accounting"
	CategoriesEnumTicketing   CategoriesEnum = "ticketing"
	CategoriesEnumCrm         CategoriesEnum = "crm"
	CategoriesEnumMktg        CategoriesEnum = "mktg"
	CategoriesEnumFilestorage CategoriesEnum = "filestorage"
)

func NewCategoriesEnumFromString(s string) (CategoriesEnum, error) {
	switch s {
	case "hris":
		return CategoriesEnumHris, nil
	case "ats":
		return CategoriesEnumAts, nil
	case "accounting":
		return CategoriesEnumAccounting, nil
	case "ticketing":
		return CategoriesEnumTicketing, nil
	case "crm":
		return CategoriesEnumCrm, nil
	case "mktg":
		return CategoriesEnumMktg, nil
	case "filestorage":
		return CategoriesEnumFilestorage, nil
	}
	var t CategoriesEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CategoriesEnum) Ptr() *CategoriesEnum {
	return &c
}

// - `hris` - hris
// - `ats` - ats
// - `accounting` - accounting
// - `ticketing` - ticketing
// - `crm` - crm
// - `mktg` - mktg
// - `filestorage` - filestorage
type CategoryEnum string

const (
	CategoryEnumHris        CategoryEnum = "hris"
	CategoryEnumAts         CategoryEnum = "ats"
	CategoryEnumAccounting  CategoryEnum = "accounting"
	CategoryEnumTicketing   CategoryEnum = "ticketing"
	CategoryEnumCrm         CategoryEnum = "crm"
	CategoryEnumMktg        CategoryEnum = "mktg"
	CategoryEnumFilestorage CategoryEnum = "filestorage"
)

func NewCategoryEnumFromString(s string) (CategoryEnum, error) {
	switch s {
	case "hris":
		return CategoryEnumHris, nil
	case "ats":
		return CategoryEnumAts, nil
	case "accounting":
		return CategoryEnumAccounting, nil
	case "ticketing":
		return CategoryEnumTicketing, nil
	case "crm":
		return CategoryEnumCrm, nil
	case "mktg":
		return CategoryEnumMktg, nil
	case "filestorage":
		return CategoryEnumFilestorage, nil
	}
	var t CategoryEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CategoryEnum) Ptr() *CategoryEnum {
	return &c
}

// # The Collection Object
//
// ### Description
//
// The `Collection` object is used to represent one or more `Tickets`. There can be a hierarchy of `Collections`, in which a sub-collection belongs to a parent-collection.
//
// ### Usage Example
//
// TODO
type Collection struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The collection's name.
	Name *string `json:"name,omitempty"`
	// The collection's description.
	Description *string `json:"description,omitempty"`
	// The collection's type.
	//
	// - `LIST` - LIST
	// - `PROJECT` - PROJECT
	CollectionType *CollectionCollectionType `json:"collection_type,omitempty"`
	// The parent collection for this collection.
	ParentCollection *CollectionParentCollection `json:"parent_collection,omitempty"`
	Teams            []*CollectionTeamsItem      `json:"teams,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// The level of access a User has to the Collection and its sub-objects.
	//
	// - `PRIVATE` - PRIVATE
	// - `COMPANY` - COMPANY
	// - `PUBLIC` - PUBLIC
	AccessLevel   *CollectionAccessLevel `json:"access_level,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (c *Collection) UnmarshalJSON(data []byte) error {
	type unmarshaler Collection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Collection(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Collection) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The level of access a User has to the Collection and its sub-objects.
//
// - `PRIVATE` - PRIVATE
// - `COMPANY` - COMPANY
// - `PUBLIC` - PUBLIC
type CollectionAccessLevel struct {
	typeName        string
	AccessLevelEnum AccessLevelEnum
	String          string
}

func NewCollectionAccessLevelFromAccessLevelEnum(value AccessLevelEnum) *CollectionAccessLevel {
	return &CollectionAccessLevel{typeName: "accessLevelEnum", AccessLevelEnum: value}
}

func NewCollectionAccessLevelFromString(value string) *CollectionAccessLevel {
	return &CollectionAccessLevel{typeName: "string", String: value}
}

func (c *CollectionAccessLevel) UnmarshalJSON(data []byte) error {
	var valueAccessLevelEnum AccessLevelEnum
	if err := json.Unmarshal(data, &valueAccessLevelEnum); err == nil {
		c.typeName = "accessLevelEnum"
		c.AccessLevelEnum = valueAccessLevelEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CollectionAccessLevel) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "accessLevelEnum":
		return json.Marshal(c.AccessLevelEnum)
	case "string":
		return json.Marshal(c.String)
	}
}

type CollectionAccessLevelVisitor interface {
	VisitAccessLevelEnum(AccessLevelEnum) error
	VisitString(string) error
}

func (c *CollectionAccessLevel) Accept(visitor CollectionAccessLevelVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "accessLevelEnum":
		return visitor.VisitAccessLevelEnum(c.AccessLevelEnum)
	case "string":
		return visitor.VisitString(c.String)
	}
}

// The collection's type.
//
// - `LIST` - LIST
// - `PROJECT` - PROJECT
type CollectionCollectionType struct {
	typeName           string
	CollectionTypeEnum CollectionTypeEnum
	String             string
}

func NewCollectionCollectionTypeFromCollectionTypeEnum(value CollectionTypeEnum) *CollectionCollectionType {
	return &CollectionCollectionType{typeName: "collectionTypeEnum", CollectionTypeEnum: value}
}

func NewCollectionCollectionTypeFromString(value string) *CollectionCollectionType {
	return &CollectionCollectionType{typeName: "string", String: value}
}

func (c *CollectionCollectionType) UnmarshalJSON(data []byte) error {
	var valueCollectionTypeEnum CollectionTypeEnum
	if err := json.Unmarshal(data, &valueCollectionTypeEnum); err == nil {
		c.typeName = "collectionTypeEnum"
		c.CollectionTypeEnum = valueCollectionTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CollectionCollectionType) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "collectionTypeEnum":
		return json.Marshal(c.CollectionTypeEnum)
	case "string":
		return json.Marshal(c.String)
	}
}

type CollectionCollectionTypeVisitor interface {
	VisitCollectionTypeEnum(CollectionTypeEnum) error
	VisitString(string) error
}

func (c *CollectionCollectionType) Accept(visitor CollectionCollectionTypeVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "collectionTypeEnum":
		return visitor.VisitCollectionTypeEnum(c.CollectionTypeEnum)
	case "string":
		return visitor.VisitString(c.String)
	}
}

// The parent collection for this collection.
type CollectionParentCollection struct {
	typeName   string
	String     string
	Collection *Collection
}

func NewCollectionParentCollectionFromString(value string) *CollectionParentCollection {
	return &CollectionParentCollection{typeName: "string", String: value}
}

func NewCollectionParentCollectionFromCollection(value *Collection) *CollectionParentCollection {
	return &CollectionParentCollection{typeName: "collection", Collection: value}
}

func (c *CollectionParentCollection) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueCollection := new(Collection)
	if err := json.Unmarshal(data, &valueCollection); err == nil {
		c.typeName = "collection"
		c.Collection = valueCollection
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CollectionParentCollection) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "collection":
		return json.Marshal(c.Collection)
	}
}

type CollectionParentCollectionVisitor interface {
	VisitString(string) error
	VisitCollection(*Collection) error
}

func (c *CollectionParentCollection) Accept(visitor CollectionParentCollectionVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "collection":
		return visitor.VisitCollection(c.Collection)
	}
}

type CollectionTeamsItem struct {
	typeName string
	String   string
	Team     *Team
}

func NewCollectionTeamsItemFromString(value string) *CollectionTeamsItem {
	return &CollectionTeamsItem{typeName: "string", String: value}
}

func NewCollectionTeamsItemFromTeam(value *Team) *CollectionTeamsItem {
	return &CollectionTeamsItem{typeName: "team", Team: value}
}

func (c *CollectionTeamsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueTeam := new(Team)
	if err := json.Unmarshal(data, &valueTeam); err == nil {
		c.typeName = "team"
		c.Team = valueTeam
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CollectionTeamsItem) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "team":
		return json.Marshal(c.Team)
	}
}

type CollectionTeamsItemVisitor interface {
	VisitString(string) error
	VisitTeam(*Team) error
}

func (c *CollectionTeamsItem) Accept(visitor CollectionTeamsItemVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "team":
		return visitor.VisitTeam(c.Team)
	}
}

// - `LIST` - LIST
// - `PROJECT` - PROJECT
type CollectionTypeEnum string

const (
	CollectionTypeEnumList    CollectionTypeEnum = "LIST"
	CollectionTypeEnumProject CollectionTypeEnum = "PROJECT"
)

func NewCollectionTypeEnumFromString(s string) (CollectionTypeEnum, error) {
	switch s {
	case "LIST":
		return CollectionTypeEnumList, nil
	case "PROJECT":
		return CollectionTypeEnumProject, nil
	}
	var t CollectionTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CollectionTypeEnum) Ptr() *CollectionTypeEnum {
	return &c
}

// # The Comment Object
//
// ### Description
//
// The `Comment` object is used to represent a comment on a ticket.
//
// ### Usage Example
//
// TODO
type Comment struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The author of the Comment, if the author is a User. If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
	User *CommentUser `json:"user,omitempty"`
	// The author of the Comment, if the author is a Contact.If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
	Contact *CommentContact `json:"contact,omitempty"`
	// The comment's text body.
	Body *string `json:"body,omitempty"`
	// The comment's text body formatted as html.
	HtmlBody *string `json:"html_body,omitempty"`
	// The ticket associated with the comment.
	Ticket *CommentTicket `json:"ticket,omitempty"`
	// Whether or not the comment is internal.
	IsPrivate *bool `json:"is_private,omitempty"`
	// When the third party's comment was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (c *Comment) UnmarshalJSON(data []byte) error {
	type unmarshaler Comment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Comment(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Comment) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The author of the Comment, if the author is a Contact.If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
type CommentContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewCommentContactFromString(value string) *CommentContact {
	return &CommentContact{typeName: "string", String: value}
}

func NewCommentContactFromContact(value *Contact) *CommentContact {
	return &CommentContact{typeName: "contact", Contact: value}
}

func (c *CommentContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		c.typeName = "contact"
		c.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentContact) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "contact":
		return json.Marshal(c.Contact)
	}
}

type CommentContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (c *CommentContact) Accept(visitor CommentContactVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "contact":
		return visitor.VisitContact(c.Contact)
	}
}

// # The Comment Object
//
// ### Description
//
// The `Comment` object is used to represent a comment on a ticket.
//
// ### Usage Example
//
// TODO
type CommentRequest struct {
	// The author of the Comment, if the author is a User. If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
	User *CommentRequestUser `json:"user,omitempty"`
	// The author of the Comment, if the author is a Contact.If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
	Contact *CommentRequestContact `json:"contact,omitempty"`
	// The comment's text body.
	Body *string `json:"body,omitempty"`
	// The comment's text body formatted as html.
	HtmlBody *string `json:"html_body,omitempty"`
	// The ticket associated with the comment.
	Ticket *CommentRequestTicket `json:"ticket,omitempty"`
	// Whether or not the comment is internal.
	IsPrivate           *bool                  `json:"is_private,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CommentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CommentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommentRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommentRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The author of the Comment, if the author is a Contact.If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
type CommentRequestContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewCommentRequestContactFromString(value string) *CommentRequestContact {
	return &CommentRequestContact{typeName: "string", String: value}
}

func NewCommentRequestContactFromContact(value *Contact) *CommentRequestContact {
	return &CommentRequestContact{typeName: "contact", Contact: value}
}

func (c *CommentRequestContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		c.typeName = "contact"
		c.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentRequestContact) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "contact":
		return json.Marshal(c.Contact)
	}
}

type CommentRequestContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (c *CommentRequestContact) Accept(visitor CommentRequestContactVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "contact":
		return visitor.VisitContact(c.Contact)
	}
}

// The ticket associated with the comment.
type CommentRequestTicket struct {
	typeName string
	String   string
	Ticket   *Ticket
}

func NewCommentRequestTicketFromString(value string) *CommentRequestTicket {
	return &CommentRequestTicket{typeName: "string", String: value}
}

func NewCommentRequestTicketFromTicket(value *Ticket) *CommentRequestTicket {
	return &CommentRequestTicket{typeName: "ticket", Ticket: value}
}

func (c *CommentRequestTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		c.typeName = "ticket"
		c.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentRequestTicket) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "ticket":
		return json.Marshal(c.Ticket)
	}
}

type CommentRequestTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (c *CommentRequestTicket) Accept(visitor CommentRequestTicketVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "ticket":
		return visitor.VisitTicket(c.Ticket)
	}
}

// The author of the Comment, if the author is a User. If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
type CommentRequestUser struct {
	typeName string
	String   string
	User     *User
}

func NewCommentRequestUserFromString(value string) *CommentRequestUser {
	return &CommentRequestUser{typeName: "string", String: value}
}

func NewCommentRequestUserFromUser(value *User) *CommentRequestUser {
	return &CommentRequestUser{typeName: "user", User: value}
}

func (c *CommentRequestUser) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		c.typeName = "user"
		c.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentRequestUser) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "user":
		return json.Marshal(c.User)
	}
}

type CommentRequestUserVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (c *CommentRequestUser) Accept(visitor CommentRequestUserVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "user":
		return visitor.VisitUser(c.User)
	}
}

type CommentResponse struct {
	Model    *Comment                    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CommentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CommentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommentResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommentResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The ticket associated with the comment.
type CommentTicket struct {
	typeName string
	String   string
	Ticket   *Ticket
}

func NewCommentTicketFromString(value string) *CommentTicket {
	return &CommentTicket{typeName: "string", String: value}
}

func NewCommentTicketFromTicket(value *Ticket) *CommentTicket {
	return &CommentTicket{typeName: "ticket", Ticket: value}
}

func (c *CommentTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		c.typeName = "ticket"
		c.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentTicket) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "ticket":
		return json.Marshal(c.Ticket)
	}
}

type CommentTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (c *CommentTicket) Accept(visitor CommentTicketVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "ticket":
		return visitor.VisitTicket(c.Ticket)
	}
}

// The author of the Comment, if the author is a User. If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
type CommentUser struct {
	typeName string
	String   string
	User     *User
}

func NewCommentUserFromString(value string) *CommentUser {
	return &CommentUser{typeName: "string", String: value}
}

func NewCommentUserFromUser(value *User) *CommentUser {
	return &CommentUser{typeName: "user", User: value}
}

func (c *CommentUser) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		c.typeName = "user"
		c.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentUser) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "user":
		return json.Marshal(c.User)
	}
}

type CommentUserVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (c *CommentUser) Accept(visitor CommentUserVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "user":
		return visitor.VisitUser(c.User)
	}
}

type CommonModelScopeApi struct {
	// The common models you want to update the scopes for
	CommonModels []*IndividualCommonModelScopeDeserializer `json:"common_models,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CommonModelScopeApi) UnmarshalJSON(data []byte) error {
	type unmarshaler CommonModelScopeApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommonModelScopeApi(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommonModelScopeApi) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CommonModelScopesBodyRequest struct {
	ModelId        string               `json:"model_id"`
	EnabledActions []EnabledActionsEnum `json:"enabled_actions,omitempty"`
	DisabledFields []string             `json:"disabled_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CommonModelScopesBodyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CommonModelScopesBodyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommonModelScopesBodyRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommonModelScopesBodyRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// # The Contact Object
//
// ### Description
//
// The `Contact` object is used to represent the customer, lead, or external user that a ticket is associated with.
//
// ### Usage Example
//
// TODO
type Contact struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The contact's name.
	Name *string `json:"name,omitempty"`
	// The contact's email address.
	EmailAddress *string `json:"email_address,omitempty"`
	// The contact's phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// The contact's details.
	Details *string `json:"details,omitempty"`
	// The contact's account.
	Account *ContactAccount `json:"account,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (c *Contact) UnmarshalJSON(data []byte) error {
	type unmarshaler Contact
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Contact(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Contact) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The contact's account.
type ContactAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewContactAccountFromString(value string) *ContactAccount {
	return &ContactAccount{typeName: "string", String: value}
}

func NewContactAccountFromAccount(value *Account) *ContactAccount {
	return &ContactAccount{typeName: "account", Account: value}
}

func (c *ContactAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		c.typeName = "account"
		c.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactAccount) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "account":
		return json.Marshal(c.Account)
	}
}

type ContactAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (c *ContactAccount) Accept(visitor ContactAccountVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "account":
		return visitor.VisitAccount(c.Account)
	}
}

// # The Contact Object
//
// ### Description
//
// The `Contact` object is used to represent the customer, lead, or external user that a ticket is associated with.
//
// ### Usage Example
//
// TODO
type ContactRequest struct {
	// The contact's name.
	Name *string `json:"name,omitempty"`
	// The contact's email address.
	EmailAddress *string `json:"email_address,omitempty"`
	// The contact's phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// The contact's details.
	Details *string `json:"details,omitempty"`
	// The contact's account.
	Account             *ContactRequestAccount `json:"account,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ContactRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ContactRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ContactRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContactRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The contact's account.
type ContactRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewContactRequestAccountFromString(value string) *ContactRequestAccount {
	return &ContactRequestAccount{typeName: "string", String: value}
}

func NewContactRequestAccountFromAccount(value *Account) *ContactRequestAccount {
	return &ContactRequestAccount{typeName: "account", Account: value}
}

func (c *ContactRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		c.typeName = "account"
		c.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactRequestAccount) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "account":
		return json.Marshal(c.Account)
	}
}

type ContactRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (c *ContactRequestAccount) Accept(visitor ContactRequestAccountVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "account":
		return visitor.VisitAccount(c.Account)
	}
}

// # The DataPassthrough Object
//
// ### Description
//
// The `DataPassthrough` object is used to send information to an otherwise-unsupported third-party endpoint.
//
// ### Usage Example
//
// Create a `DataPassthrough` to get team hierarchies from your Rippling integration.
type DataPassthroughRequest struct {
	Method MethodEnum `json:"method,omitempty"`
	// The path of the request in the third party's platform.
	Path string `json:"path"`
	// An optional override of the third party's base url for the request.
	BaseUrlOverride *string `json:"base_url_override,omitempty"`
	// The data with the request. You must include a `request_format` parameter matching the data's format
	Data *string `json:"data,omitempty"`
	// Pass an array of `MultipartFormField` objects in here instead of using the `data` param if `request_format` is set to `MULTIPART`.
	MultipartFormData []*MultipartFormFieldRequest `json:"multipart_form_data,omitempty"`
	// The headers to use for the request (Merge will handle the account's authorization headers). `Content-Type` header is required for passthrough. Choose content type corresponding to expected format of receiving server.
	Headers       map[string]interface{} `json:"headers,omitempty"`
	RequestFormat *RequestFormatEnum     `json:"request_format,omitempty"`
	// Optional. If true, the response will always be an object of the form `{"type": T, "value": ...}` where `T` will be one of `string, boolean, number, null, array, object`.
	NormalizeResponse *bool `json:"normalize_response,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DataPassthroughRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler DataPassthroughRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DataPassthroughRequest(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DataPassthroughRequest) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DebugModeLog struct {
	LogId         string                `json:"log_id"`
	DashboardView string                `json:"dashboard_view"`
	LogSummary    *DebugModelLogSummary `json:"log_summary,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DebugModeLog) UnmarshalJSON(data []byte) error {
	type unmarshaler DebugModeLog
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DebugModeLog(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DebugModeLog) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DebugModelLogSummary struct {
	Url        string `json:"url"`
	Method     string `json:"method"`
	StatusCode int    `json:"status_code"`

	_rawJSON json.RawMessage
}

func (d *DebugModelLogSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler DebugModelLogSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DebugModelLogSummary(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DebugModelLogSummary) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// - `READ` - READ
// - `WRITE` - WRITE
type EnabledActionsEnum string

const (
	EnabledActionsEnumRead  EnabledActionsEnum = "READ"
	EnabledActionsEnumWrite EnabledActionsEnum = "WRITE"
)

func NewEnabledActionsEnumFromString(s string) (EnabledActionsEnum, error) {
	switch s {
	case "READ":
		return EnabledActionsEnumRead, nil
	case "WRITE":
		return EnabledActionsEnumWrite, nil
	}
	var t EnabledActionsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EnabledActionsEnum) Ptr() *EnabledActionsEnum {
	return &e
}

// - `RAW` - RAW
// - `BASE64` - BASE64
// - `GZIP_BASE64` - GZIP_BASE64
type EncodingEnum string

const (
	EncodingEnumRaw        EncodingEnum = "RAW"
	EncodingEnumBase64     EncodingEnum = "BASE64"
	EncodingEnumGzipBase64 EncodingEnum = "GZIP_BASE64"
)

func NewEncodingEnumFromString(s string) (EncodingEnum, error) {
	switch s {
	case "RAW":
		return EncodingEnumRaw, nil
	case "BASE64":
		return EncodingEnumBase64, nil
	case "GZIP_BASE64":
		return EncodingEnumGzipBase64, nil
	}
	var t EncodingEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EncodingEnum) Ptr() *EncodingEnum {
	return &e
}

type ErrorValidationProblem struct {
	Source      *ValidationProblemSource `json:"source,omitempty"`
	Title       string                   `json:"title"`
	Detail      string                   `json:"detail"`
	ProblemType string                   `json:"problem_type"`

	_rawJSON json.RawMessage
}

func (e *ErrorValidationProblem) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorValidationProblem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorValidationProblem(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorValidationProblem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// - `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
// - `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
// - `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
// - `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
// - `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
// - `INVITED_USER` - INVITED_USER
// - `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
// - `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
// - `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
// - `CREATED_DESTINATION` - CREATED_DESTINATION
// - `DELETED_DESTINATION` - DELETED_DESTINATION
// - `CHANGED_DESTINATION` - CHANGED_DESTINATION
// - `CHANGED_SCOPES` - CHANGED_SCOPES
// - `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
// - `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
// - `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
// - `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
// - `ENABLED_CATEGORY` - ENABLED_CATEGORY
// - `DISABLED_CATEGORY` - DISABLED_CATEGORY
// - `CHANGED_PASSWORD` - CHANGED_PASSWORD
// - `RESET_PASSWORD` - RESET_PASSWORD
// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// - `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
// - `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
// - `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
// - `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
// - `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
// - `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
// - `CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `FORCED_LINKED_ACCOUNT_RESYNC` - FORCED_LINKED_ACCOUNT_RESYNC
// - `MUTED_ISSUE` - MUTED_ISSUE
// - `GENERATED_MAGIC_LINK` - GENERATED_MAGIC_LINK
// - `ENABLED_MERGE_WEBHOOK` - ENABLED_MERGE_WEBHOOK
// - `DISABLED_MERGE_WEBHOOK` - DISABLED_MERGE_WEBHOOK
// - `MERGE_WEBHOOK_TARGET_CHANGED` - MERGE_WEBHOOK_TARGET_CHANGED
// - `END_USER_CREDENTIALS_ACCESSED` - END_USER_CREDENTIALS_ACCESSED
type EventTypeEnum string

const (
	EventTypeEnumCreatedRemoteProductionApiKey              EventTypeEnum = "CREATED_REMOTE_PRODUCTION_API_KEY"
	EventTypeEnumDeletedRemoteProductionApiKey              EventTypeEnum = "DELETED_REMOTE_PRODUCTION_API_KEY"
	EventTypeEnumCreatedTestApiKey                          EventTypeEnum = "CREATED_TEST_API_KEY"
	EventTypeEnumDeletedTestApiKey                          EventTypeEnum = "DELETED_TEST_API_KEY"
	EventTypeEnumRegeneratedProductionApiKey                EventTypeEnum = "REGENERATED_PRODUCTION_API_KEY"
	EventTypeEnumInvitedUser                                EventTypeEnum = "INVITED_USER"
	EventTypeEnumTwoFactorAuthEnabled                       EventTypeEnum = "TWO_FACTOR_AUTH_ENABLED"
	EventTypeEnumTwoFactorAuthDisabled                      EventTypeEnum = "TWO_FACTOR_AUTH_DISABLED"
	EventTypeEnumDeletedLinkedAccount                       EventTypeEnum = "DELETED_LINKED_ACCOUNT"
	EventTypeEnumCreatedDestination                         EventTypeEnum = "CREATED_DESTINATION"
	EventTypeEnumDeletedDestination                         EventTypeEnum = "DELETED_DESTINATION"
	EventTypeEnumChangedDestination                         EventTypeEnum = "CHANGED_DESTINATION"
	EventTypeEnumChangedScopes                              EventTypeEnum = "CHANGED_SCOPES"
	EventTypeEnumChangedPersonalInformation                 EventTypeEnum = "CHANGED_PERSONAL_INFORMATION"
	EventTypeEnumChangedOrganizationSettings                EventTypeEnum = "CHANGED_ORGANIZATION_SETTINGS"
	EventTypeEnumEnabledIntegration                         EventTypeEnum = "ENABLED_INTEGRATION"
	EventTypeEnumDisabledIntegration                        EventTypeEnum = "DISABLED_INTEGRATION"
	EventTypeEnumEnabledCategory                            EventTypeEnum = "ENABLED_CATEGORY"
	EventTypeEnumDisabledCategory                           EventTypeEnum = "DISABLED_CATEGORY"
	EventTypeEnumChangedPassword                            EventTypeEnum = "CHANGED_PASSWORD"
	EventTypeEnumResetPassword                              EventTypeEnum = "RESET_PASSWORD"
	EventTypeEnumEnabledRedactUnmappedDataForOrganization   EventTypeEnum = "ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION"
	EventTypeEnumEnabledRedactUnmappedDataForLinkedAccount  EventTypeEnum = "ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT"
	EventTypeEnumDisabledRedactUnmappedDataForOrganization  EventTypeEnum = "DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION"
	EventTypeEnumDisabledRedactUnmappedDataForLinkedAccount EventTypeEnum = "DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT"
	EventTypeEnumCreatedIntegrationWideFieldMapping         EventTypeEnum = "CREATED_INTEGRATION_WIDE_FIELD_MAPPING"
	EventTypeEnumCreatedLinkedAccountFieldMapping           EventTypeEnum = "CREATED_LINKED_ACCOUNT_FIELD_MAPPING"
	EventTypeEnumChangedIntegrationWideFieldMapping         EventTypeEnum = "CHANGED_INTEGRATION_WIDE_FIELD_MAPPING"
	EventTypeEnumChangedLinkedAccountFieldMapping           EventTypeEnum = "CHANGED_LINKED_ACCOUNT_FIELD_MAPPING"
	EventTypeEnumDeletedIntegrationWideFieldMapping         EventTypeEnum = "DELETED_INTEGRATION_WIDE_FIELD_MAPPING"
	EventTypeEnumDeletedLinkedAccountFieldMapping           EventTypeEnum = "DELETED_LINKED_ACCOUNT_FIELD_MAPPING"
	EventTypeEnumCreatedLinkedAccountCommonModelOverride    EventTypeEnum = "CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE"
	EventTypeEnumChangedLinkedAccountCommonModelOverride    EventTypeEnum = "CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE"
	EventTypeEnumDeletedLinkedAccountCommonModelOverride    EventTypeEnum = "DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE"
	EventTypeEnumForcedLinkedAccountResync                  EventTypeEnum = "FORCED_LINKED_ACCOUNT_RESYNC"
	EventTypeEnumMutedIssue                                 EventTypeEnum = "MUTED_ISSUE"
	EventTypeEnumGeneratedMagicLink                         EventTypeEnum = "GENERATED_MAGIC_LINK"
	EventTypeEnumEnabledMergeWebhook                        EventTypeEnum = "ENABLED_MERGE_WEBHOOK"
	EventTypeEnumDisabledMergeWebhook                       EventTypeEnum = "DISABLED_MERGE_WEBHOOK"
	EventTypeEnumMergeWebhookTargetChanged                  EventTypeEnum = "MERGE_WEBHOOK_TARGET_CHANGED"
	EventTypeEnumEndUserCredentialsAccessed                 EventTypeEnum = "END_USER_CREDENTIALS_ACCESSED"
)

func NewEventTypeEnumFromString(s string) (EventTypeEnum, error) {
	switch s {
	case "CREATED_REMOTE_PRODUCTION_API_KEY":
		return EventTypeEnumCreatedRemoteProductionApiKey, nil
	case "DELETED_REMOTE_PRODUCTION_API_KEY":
		return EventTypeEnumDeletedRemoteProductionApiKey, nil
	case "CREATED_TEST_API_KEY":
		return EventTypeEnumCreatedTestApiKey, nil
	case "DELETED_TEST_API_KEY":
		return EventTypeEnumDeletedTestApiKey, nil
	case "REGENERATED_PRODUCTION_API_KEY":
		return EventTypeEnumRegeneratedProductionApiKey, nil
	case "INVITED_USER":
		return EventTypeEnumInvitedUser, nil
	case "TWO_FACTOR_AUTH_ENABLED":
		return EventTypeEnumTwoFactorAuthEnabled, nil
	case "TWO_FACTOR_AUTH_DISABLED":
		return EventTypeEnumTwoFactorAuthDisabled, nil
	case "DELETED_LINKED_ACCOUNT":
		return EventTypeEnumDeletedLinkedAccount, nil
	case "CREATED_DESTINATION":
		return EventTypeEnumCreatedDestination, nil
	case "DELETED_DESTINATION":
		return EventTypeEnumDeletedDestination, nil
	case "CHANGED_DESTINATION":
		return EventTypeEnumChangedDestination, nil
	case "CHANGED_SCOPES":
		return EventTypeEnumChangedScopes, nil
	case "CHANGED_PERSONAL_INFORMATION":
		return EventTypeEnumChangedPersonalInformation, nil
	case "CHANGED_ORGANIZATION_SETTINGS":
		return EventTypeEnumChangedOrganizationSettings, nil
	case "ENABLED_INTEGRATION":
		return EventTypeEnumEnabledIntegration, nil
	case "DISABLED_INTEGRATION":
		return EventTypeEnumDisabledIntegration, nil
	case "ENABLED_CATEGORY":
		return EventTypeEnumEnabledCategory, nil
	case "DISABLED_CATEGORY":
		return EventTypeEnumDisabledCategory, nil
	case "CHANGED_PASSWORD":
		return EventTypeEnumChangedPassword, nil
	case "RESET_PASSWORD":
		return EventTypeEnumResetPassword, nil
	case "ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION":
		return EventTypeEnumEnabledRedactUnmappedDataForOrganization, nil
	case "ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT":
		return EventTypeEnumEnabledRedactUnmappedDataForLinkedAccount, nil
	case "DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION":
		return EventTypeEnumDisabledRedactUnmappedDataForOrganization, nil
	case "DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT":
		return EventTypeEnumDisabledRedactUnmappedDataForLinkedAccount, nil
	case "CREATED_INTEGRATION_WIDE_FIELD_MAPPING":
		return EventTypeEnumCreatedIntegrationWideFieldMapping, nil
	case "CREATED_LINKED_ACCOUNT_FIELD_MAPPING":
		return EventTypeEnumCreatedLinkedAccountFieldMapping, nil
	case "CHANGED_INTEGRATION_WIDE_FIELD_MAPPING":
		return EventTypeEnumChangedIntegrationWideFieldMapping, nil
	case "CHANGED_LINKED_ACCOUNT_FIELD_MAPPING":
		return EventTypeEnumChangedLinkedAccountFieldMapping, nil
	case "DELETED_INTEGRATION_WIDE_FIELD_MAPPING":
		return EventTypeEnumDeletedIntegrationWideFieldMapping, nil
	case "DELETED_LINKED_ACCOUNT_FIELD_MAPPING":
		return EventTypeEnumDeletedLinkedAccountFieldMapping, nil
	case "CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE":
		return EventTypeEnumCreatedLinkedAccountCommonModelOverride, nil
	case "CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE":
		return EventTypeEnumChangedLinkedAccountCommonModelOverride, nil
	case "DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE":
		return EventTypeEnumDeletedLinkedAccountCommonModelOverride, nil
	case "FORCED_LINKED_ACCOUNT_RESYNC":
		return EventTypeEnumForcedLinkedAccountResync, nil
	case "MUTED_ISSUE":
		return EventTypeEnumMutedIssue, nil
	case "GENERATED_MAGIC_LINK":
		return EventTypeEnumGeneratedMagicLink, nil
	case "ENABLED_MERGE_WEBHOOK":
		return EventTypeEnumEnabledMergeWebhook, nil
	case "DISABLED_MERGE_WEBHOOK":
		return EventTypeEnumDisabledMergeWebhook, nil
	case "MERGE_WEBHOOK_TARGET_CHANGED":
		return EventTypeEnumMergeWebhookTargetChanged, nil
	case "END_USER_CREDENTIALS_ACCESSED":
		return EventTypeEnumEndUserCredentialsAccessed, nil
	}
	var t EventTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventTypeEnum) Ptr() *EventTypeEnum {
	return &e
}

type ExternalTargetFieldApi struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	IsMapped    *string `json:"is_mapped,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExternalTargetFieldApi) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalTargetFieldApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalTargetFieldApi(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalTargetFieldApi) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExternalTargetFieldApiResponse struct {
	Ticket     []*ExternalTargetFieldApi `json:"Ticket,omitempty"`
	Comment    []*ExternalTargetFieldApi `json:"Comment,omitempty"`
	Project    []*ExternalTargetFieldApi `json:"Project,omitempty"`
	Collection []*ExternalTargetFieldApi `json:"Collection,omitempty"`
	User       []*ExternalTargetFieldApi `json:"User,omitempty"`
	Role       []*ExternalTargetFieldApi `json:"Role,omitempty"`
	Account    []*ExternalTargetFieldApi `json:"Account,omitempty"`
	Team       []*ExternalTargetFieldApi `json:"Team,omitempty"`
	Attachment []*ExternalTargetFieldApi `json:"Attachment,omitempty"`
	Tag        []*ExternalTargetFieldApi `json:"Tag,omitempty"`
	Contact    []*ExternalTargetFieldApi `json:"Contact,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExternalTargetFieldApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalTargetFieldApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalTargetFieldApiResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalTargetFieldApiResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// - `string` - string
// - `number` - number
// - `date` - date
// - `datetime` - datetime
// - `bool` - bool
// - `list` - list
type FieldFormatEnum string

const (
	FieldFormatEnumString   FieldFormatEnum = "string"
	FieldFormatEnumNumber   FieldFormatEnum = "number"
	FieldFormatEnumDate     FieldFormatEnum = "date"
	FieldFormatEnumDatetime FieldFormatEnum = "datetime"
	FieldFormatEnumBool     FieldFormatEnum = "bool"
	FieldFormatEnumList     FieldFormatEnum = "list"
)

func NewFieldFormatEnumFromString(s string) (FieldFormatEnum, error) {
	switch s {
	case "string":
		return FieldFormatEnumString, nil
	case "number":
		return FieldFormatEnumNumber, nil
	case "date":
		return FieldFormatEnumDate, nil
	case "datetime":
		return FieldFormatEnumDatetime, nil
	case "bool":
		return FieldFormatEnumBool, nil
	case "list":
		return FieldFormatEnumList, nil
	}
	var t FieldFormatEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FieldFormatEnum) Ptr() *FieldFormatEnum {
	return &f
}

type FieldMappingApiInstance struct {
	Id                *string                             `json:"id,omitempty"`
	IsIntegrationWide *bool                               `json:"is_integration_wide,omitempty"`
	TargetField       *FieldMappingApiInstanceTargetField `json:"target_field,omitempty"`
	RemoteField       *FieldMappingApiInstanceRemoteField `json:"remote_field,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstance) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstance(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstance) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceRemoteField struct {
	RemoteKeyName      *string                                               `json:"remote_key_name,omitempty"`
	Schema             map[string]interface{}                                `json:"schema,omitempty"`
	RemoteEndpointInfo *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo `json:"remote_endpoint_info,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstanceRemoteField) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceRemoteField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceRemoteField(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceRemoteField) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo struct {
	Method             *string  `json:"method,omitempty"`
	UrlPath            *string  `json:"url_path,omitempty"`
	FieldTraversalPath []string `json:"field_traversal_path,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceResponse struct {
	Ticket     []*FieldMappingApiInstance `json:"Ticket,omitempty"`
	Comment    []*FieldMappingApiInstance `json:"Comment,omitempty"`
	Project    []*FieldMappingApiInstance `json:"Project,omitempty"`
	Collection []*FieldMappingApiInstance `json:"Collection,omitempty"`
	User       []*FieldMappingApiInstance `json:"User,omitempty"`
	Role       []*FieldMappingApiInstance `json:"Role,omitempty"`
	Account    []*FieldMappingApiInstance `json:"Account,omitempty"`
	Team       []*FieldMappingApiInstance `json:"Team,omitempty"`
	Attachment []*FieldMappingApiInstance `json:"Attachment,omitempty"`
	Tag        []*FieldMappingApiInstance `json:"Tag,omitempty"`
	Contact    []*FieldMappingApiInstance `json:"Contact,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstanceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceResponse(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceTargetField struct {
	Name               string `json:"name"`
	Description        string `json:"description"`
	IsOrganizationWide bool   `json:"is_organization_wide"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstanceTargetField) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceTargetField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceTargetField(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceTargetField) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingInstanceResponse struct {
	Model    *FieldMappingApiInstance    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingInstanceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingInstanceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingInstanceResponse(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingInstanceResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldPermissionDeserializer struct {
	EnabledFields  []interface{} `json:"enabled_fields,omitempty"`
	DisabledFields []interface{} `json:"disabled_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldPermissionDeserializer) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldPermissionDeserializer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldPermissionDeserializer(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldPermissionDeserializer) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldPermissionDeserializerRequest struct {
	EnabledFields  []interface{} `json:"enabled_fields,omitempty"`
	DisabledFields []interface{} `json:"disabled_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldPermissionDeserializerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldPermissionDeserializerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldPermissionDeserializerRequest(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldPermissionDeserializerRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// - `string` - string
// - `number` - number
// - `date` - date
// - `datetime` - datetime
// - `bool` - bool
// - `list` - list
type FieldTypeEnum string

const (
	FieldTypeEnumString   FieldTypeEnum = "string"
	FieldTypeEnumNumber   FieldTypeEnum = "number"
	FieldTypeEnumDate     FieldTypeEnum = "date"
	FieldTypeEnumDatetime FieldTypeEnum = "datetime"
	FieldTypeEnumBool     FieldTypeEnum = "bool"
	FieldTypeEnumList     FieldTypeEnum = "list"
)

func NewFieldTypeEnumFromString(s string) (FieldTypeEnum, error) {
	switch s {
	case "string":
		return FieldTypeEnumString, nil
	case "number":
		return FieldTypeEnumNumber, nil
	case "date":
		return FieldTypeEnumDate, nil
	case "datetime":
		return FieldTypeEnumDatetime, nil
	case "bool":
		return FieldTypeEnumBool, nil
	case "list":
		return FieldTypeEnumList, nil
	}
	var t FieldTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FieldTypeEnum) Ptr() *FieldTypeEnum {
	return &f
}

type IndividualCommonModelScopeDeserializer struct {
	ModelName        string                                  `json:"model_name"`
	ModelPermissions map[string]*ModelPermissionDeserializer `json:"model_permissions,omitempty"`
	FieldPermissions *FieldPermissionDeserializer            `json:"field_permissions,omitempty"`

	_rawJSON json.RawMessage
}

func (i *IndividualCommonModelScopeDeserializer) UnmarshalJSON(data []byte) error {
	type unmarshaler IndividualCommonModelScopeDeserializer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IndividualCommonModelScopeDeserializer(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IndividualCommonModelScopeDeserializer) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IndividualCommonModelScopeDeserializerRequest struct {
	ModelName        string                                         `json:"model_name"`
	ModelPermissions map[string]*ModelPermissionDeserializerRequest `json:"model_permissions,omitempty"`
	FieldPermissions *FieldPermissionDeserializerRequest            `json:"field_permissions,omitempty"`

	_rawJSON json.RawMessage
}

func (i *IndividualCommonModelScopeDeserializerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler IndividualCommonModelScopeDeserializerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IndividualCommonModelScopeDeserializerRequest(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IndividualCommonModelScopeDeserializerRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type Issue struct {
	Id *string `json:"id,omitempty"`
	// Status of the issue. Options: ('ONGOING', 'RESOLVED')
	//
	// - `ONGOING` - ONGOING
	// - `RESOLVED` - RESOLVED
	Status            *IssueStatus           `json:"status,omitempty"`
	ErrorDescription  string                 `json:"error_description"`
	EndUser           map[string]interface{} `json:"end_user,omitempty"`
	FirstIncidentTime *time.Time             `json:"first_incident_time,omitempty"`
	LastIncidentTime  *time.Time             `json:"last_incident_time,omitempty"`
	IsMuted           *bool                  `json:"is_muted,omitempty"`
	ErrorDetails      []string               `json:"error_details,omitempty"`

	_rawJSON json.RawMessage
}

func (i *Issue) UnmarshalJSON(data []byte) error {
	type unmarshaler Issue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = Issue(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *Issue) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Status of the issue. Options: ('ONGOING', 'RESOLVED')
//
// - `ONGOING` - ONGOING
// - `RESOLVED` - RESOLVED
type IssueStatus struct {
	typeName        string
	IssueStatusEnum IssueStatusEnum
	String          string
}

func NewIssueStatusFromIssueStatusEnum(value IssueStatusEnum) *IssueStatus {
	return &IssueStatus{typeName: "issueStatusEnum", IssueStatusEnum: value}
}

func NewIssueStatusFromString(value string) *IssueStatus {
	return &IssueStatus{typeName: "string", String: value}
}

func (i *IssueStatus) UnmarshalJSON(data []byte) error {
	var valueIssueStatusEnum IssueStatusEnum
	if err := json.Unmarshal(data, &valueIssueStatusEnum); err == nil {
		i.typeName = "issueStatusEnum"
		i.IssueStatusEnum = valueIssueStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IssueStatus) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "issueStatusEnum":
		return json.Marshal(i.IssueStatusEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type IssueStatusVisitor interface {
	VisitIssueStatusEnum(IssueStatusEnum) error
	VisitString(string) error
}

func (i *IssueStatus) Accept(visitor IssueStatusVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "issueStatusEnum":
		return visitor.VisitIssueStatusEnum(i.IssueStatusEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

// - `ONGOING` - ONGOING
// - `RESOLVED` - RESOLVED
type IssueStatusEnum string

const (
	IssueStatusEnumOngoing  IssueStatusEnum = "ONGOING"
	IssueStatusEnumResolved IssueStatusEnum = "RESOLVED"
)

func NewIssueStatusEnumFromString(s string) (IssueStatusEnum, error) {
	switch s {
	case "ONGOING":
		return IssueStatusEnumOngoing, nil
	case "RESOLVED":
		return IssueStatusEnumResolved, nil
	}
	var t IssueStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IssueStatusEnum) Ptr() *IssueStatusEnum {
	return &i
}

// - `string` - uuid
// - `number` - url
// - `date` - email
// - `datetime` - phone
// - `bool` - currency
// - `list` - decimal
type ItemFormatEnum string

const (
	ItemFormatEnumString   ItemFormatEnum = "string"
	ItemFormatEnumNumber   ItemFormatEnum = "number"
	ItemFormatEnumDate     ItemFormatEnum = "date"
	ItemFormatEnumDatetime ItemFormatEnum = "datetime"
	ItemFormatEnumBool     ItemFormatEnum = "bool"
	ItemFormatEnumList     ItemFormatEnum = "list"
)

func NewItemFormatEnumFromString(s string) (ItemFormatEnum, error) {
	switch s {
	case "string":
		return ItemFormatEnumString, nil
	case "number":
		return ItemFormatEnumNumber, nil
	case "date":
		return ItemFormatEnumDate, nil
	case "datetime":
		return ItemFormatEnumDatetime, nil
	case "bool":
		return ItemFormatEnumBool, nil
	case "list":
		return ItemFormatEnumList, nil
	}
	var t ItemFormatEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i ItemFormatEnum) Ptr() *ItemFormatEnum {
	return &i
}

type ItemSchema struct {
	ItemType    *ItemTypeEnum   `json:"item_type,omitempty"`
	ItemFormat  *ItemFormatEnum `json:"item_format,omitempty"`
	ItemChoices []string        `json:"item_choices,omitempty"`

	_rawJSON json.RawMessage
}

func (i *ItemSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler ItemSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ItemSchema(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ItemSchema) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// - `string` - string
// - `number` - number
// - `date` - date
// - `datetime` - datetime
// - `bool` - bool
// - `list` - list
type ItemTypeEnum string

const (
	ItemTypeEnumString   ItemTypeEnum = "string"
	ItemTypeEnumNumber   ItemTypeEnum = "number"
	ItemTypeEnumDate     ItemTypeEnum = "date"
	ItemTypeEnumDatetime ItemTypeEnum = "datetime"
	ItemTypeEnumBool     ItemTypeEnum = "bool"
	ItemTypeEnumList     ItemTypeEnum = "list"
)

func NewItemTypeEnumFromString(s string) (ItemTypeEnum, error) {
	switch s {
	case "string":
		return ItemTypeEnumString, nil
	case "number":
		return ItemTypeEnumNumber, nil
	case "date":
		return ItemTypeEnumDate, nil
	case "datetime":
		return ItemTypeEnumDatetime, nil
	case "bool":
		return ItemTypeEnumBool, nil
	case "list":
		return ItemTypeEnumList, nil
	}
	var t ItemTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i ItemTypeEnum) Ptr() *ItemTypeEnum {
	return &i
}

// - `en` - en
// - `de` - de
type LanguageEnum string

const (
	LanguageEnumEn LanguageEnum = "en"
	LanguageEnumDe LanguageEnum = "de"
)

func NewLanguageEnumFromString(s string) (LanguageEnum, error) {
	switch s {
	case "en":
		return LanguageEnumEn, nil
	case "de":
		return LanguageEnumDe, nil
	}
	var t LanguageEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LanguageEnum) Ptr() *LanguageEnum {
	return &l
}

type LinkToken struct {
	LinkToken       string  `json:"link_token"`
	IntegrationName *string `json:"integration_name,omitempty"`
	MagicLinkUrl    *string `json:"magic_link_url,omitempty"`

	_rawJSON json.RawMessage
}

func (l *LinkToken) UnmarshalJSON(data []byte) error {
	type unmarshaler LinkToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LinkToken(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LinkToken) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LinkedAccountStatus struct {
	LinkedAccountStatus string `json:"linked_account_status"`
	CanMakeRequest      bool   `json:"can_make_request"`

	_rawJSON json.RawMessage
}

func (l *LinkedAccountStatus) UnmarshalJSON(data []byte) error {
	type unmarshaler LinkedAccountStatus
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LinkedAccountStatus(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LinkedAccountStatus) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type MetaResponse struct {
	RequestSchema                  map[string]interface{} `json:"request_schema,omitempty"`
	RemoteFieldClasses             map[string]interface{} `json:"remote_field_classes,omitempty"`
	Status                         *LinkedAccountStatus   `json:"status,omitempty"`
	HasConditionalParams           bool                   `json:"has_conditional_params"`
	HasRequiredLinkedAccountParams bool                   `json:"has_required_linked_account_params"`

	_rawJSON json.RawMessage
}

func (m *MetaResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MetaResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetaResponse(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetaResponse) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `GET` - GET
// - `OPTIONS` - OPTIONS
// - `HEAD` - HEAD
// - `POST` - POST
// - `PUT` - PUT
// - `PATCH` - PATCH
// - `DELETE` - DELETE
type MethodEnum string

const (
	MethodEnumGet     MethodEnum = "GET"
	MethodEnumOptions MethodEnum = "OPTIONS"
	MethodEnumHead    MethodEnum = "HEAD"
	MethodEnumPost    MethodEnum = "POST"
	MethodEnumPut     MethodEnum = "PUT"
	MethodEnumPatch   MethodEnum = "PATCH"
	MethodEnumDelete  MethodEnum = "DELETE"
)

func NewMethodEnumFromString(s string) (MethodEnum, error) {
	switch s {
	case "GET":
		return MethodEnumGet, nil
	case "OPTIONS":
		return MethodEnumOptions, nil
	case "HEAD":
		return MethodEnumHead, nil
	case "POST":
		return MethodEnumPost, nil
	case "PUT":
		return MethodEnumPut, nil
	case "PATCH":
		return MethodEnumPatch, nil
	case "DELETE":
		return MethodEnumDelete, nil
	}
	var t MethodEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MethodEnum) Ptr() *MethodEnum {
	return &m
}

// # The ModelOperation Object
//
// ### Description
//
// The `ModelOperation` object is used to represent the operations that are currently supported for a given model.
//
// ### Usage Example
//
// View what operations are supported for the `Candidate` endpoint.
type ModelOperation struct {
	ModelName              string   `json:"model_name"`
	AvailableOperations    []string `json:"available_operations,omitempty"`
	RequiredPostParameters []string `json:"required_post_parameters,omitempty"`
	SupportedFields        []string `json:"supported_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelOperation) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelOperation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelOperation(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelOperation) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelPermissionDeserializer struct {
	IsEnabled *bool `json:"is_enabled,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelPermissionDeserializer) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelPermissionDeserializer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelPermissionDeserializer(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelPermissionDeserializer) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelPermissionDeserializerRequest struct {
	IsEnabled *bool `json:"is_enabled,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelPermissionDeserializerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelPermissionDeserializerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelPermissionDeserializerRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelPermissionDeserializerRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// # The MultipartFormField Object
//
// ### Description
//
// The `MultipartFormField` object is used to represent fields in an HTTP request using `multipart/form-data`.
//
// ### Usage Example
//
// Create a `MultipartFormField` to define a multipart form entry.
type MultipartFormFieldRequest struct {
	// The name of the form field
	Name string `json:"name"`
	// The data for the form field.
	Data string `json:"data"`
	// The encoding of the value of `data`. Defaults to `RAW` if not defined.
	//
	// - `RAW` - RAW
	// - `BASE64` - BASE64
	// - `GZIP_BASE64` - GZIP_BASE64
	Encoding *MultipartFormFieldRequestEncoding `json:"encoding,omitempty"`
	// The file name of the form field, if the field is for a file.
	FileName *string `json:"file_name,omitempty"`
	// The MIME type of the file, if the field is for a file.
	ContentType *string `json:"content_type,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MultipartFormFieldRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MultipartFormFieldRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MultipartFormFieldRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MultipartFormFieldRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// The encoding of the value of `data`. Defaults to `RAW` if not defined.
//
// - `RAW` - RAW
// - `BASE64` - BASE64
// - `GZIP_BASE64` - GZIP_BASE64
type MultipartFormFieldRequestEncoding struct {
	typeName     string
	EncodingEnum EncodingEnum
	String       string
}

func NewMultipartFormFieldRequestEncodingFromEncodingEnum(value EncodingEnum) *MultipartFormFieldRequestEncoding {
	return &MultipartFormFieldRequestEncoding{typeName: "encodingEnum", EncodingEnum: value}
}

func NewMultipartFormFieldRequestEncodingFromString(value string) *MultipartFormFieldRequestEncoding {
	return &MultipartFormFieldRequestEncoding{typeName: "string", String: value}
}

func (m *MultipartFormFieldRequestEncoding) UnmarshalJSON(data []byte) error {
	var valueEncodingEnum EncodingEnum
	if err := json.Unmarshal(data, &valueEncodingEnum); err == nil {
		m.typeName = "encodingEnum"
		m.EncodingEnum = valueEncodingEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		m.typeName = "string"
		m.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MultipartFormFieldRequestEncoding) MarshalJSON() ([]byte, error) {
	switch m.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", m.typeName, m)
	case "encodingEnum":
		return json.Marshal(m.EncodingEnum)
	case "string":
		return json.Marshal(m.String)
	}
}

type MultipartFormFieldRequestEncodingVisitor interface {
	VisitEncodingEnum(EncodingEnum) error
	VisitString(string) error
}

func (m *MultipartFormFieldRequestEncoding) Accept(visitor MultipartFormFieldRequestEncodingVisitor) error {
	switch m.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", m.typeName, m)
	case "encodingEnum":
		return visitor.VisitEncodingEnum(m.EncodingEnum)
	case "string":
		return visitor.VisitString(m.String)
	}
}

type PaginatedAccountDetailsAndActionsList struct {
	Next     *string                     `json:"next,omitempty"`
	Previous *string                     `json:"previous,omitempty"`
	Results  []*AccountDetailsAndActions `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedAccountDetailsAndActionsList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAccountDetailsAndActionsList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAccountDetailsAndActionsList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAccountDetailsAndActionsList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedAccountList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Account `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedAccountList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAccountList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAccountList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAccountList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedAttachmentList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*Attachment `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedAttachmentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAttachmentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAttachmentList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAttachmentList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedAuditLogEventList struct {
	Next     *string          `json:"next,omitempty"`
	Previous *string          `json:"previous,omitempty"`
	Results  []*AuditLogEvent `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedAuditLogEventList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAuditLogEventList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAuditLogEventList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAuditLogEventList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedCollectionList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*Collection `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedCollectionList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedCollectionList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedCollectionList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedCollectionList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedCommentList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Comment `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedCommentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedCommentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedCommentList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedCommentList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedContactList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Contact `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedContactList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedContactList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedContactList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedContactList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedIssueList struct {
	Next     *string  `json:"next,omitempty"`
	Previous *string  `json:"previous,omitempty"`
	Results  []*Issue `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedIssueList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedIssueList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedIssueList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedIssueList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedProjectList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Project `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedProjectList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedProjectList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedProjectList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedProjectList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedRemoteFieldClassList struct {
	Next     *string             `json:"next,omitempty"`
	Previous *string             `json:"previous,omitempty"`
	Results  []*RemoteFieldClass `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedRemoteFieldClassList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedRemoteFieldClassList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedRemoteFieldClassList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedRemoteFieldClassList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedRoleList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Role `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedRoleList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedRoleList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedRoleList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedRoleList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedSyncStatusList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*SyncStatus `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedSyncStatusList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSyncStatusList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSyncStatusList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSyncStatusList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedTagList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Tag  `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedTagList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTagList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTagList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTagList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedTeamList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Team `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedTeamList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTeamList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTeamList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTeamList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedTicketList struct {
	Next     *string   `json:"next,omitempty"`
	Previous *string   `json:"previous,omitempty"`
	Results  []*Ticket `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedTicketList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTicketList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTicketList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTicketList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedUserList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*User `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedUserList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedUserList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedUserList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedUserList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedViewerList struct {
	Next     *string   `json:"next,omitempty"`
	Previous *string   `json:"previous,omitempty"`
	Results  []*Viewer `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedViewerList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedViewerList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedViewerList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedViewerList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Ticket Object
//
// ### Description
//
// The `Ticket` object is used to represent a ticket, issue, task or case.
//
// ### Usage Example
//
// TODO
type PatchedTicketRequest struct {
	// The ticket's name.
	Name *string `json:"name,omitempty"`
	// The individual `Users` who are assigned to this ticket. This does not include `Users` who just have view access to this ticket.
	Assignees []*string `json:"assignees,omitempty"`
	// The `Teams` that are assigned to this ticket. This does not include `Teams` who just have view access to this ticket.
	AssignedTeams []*string `json:"assigned_teams,omitempty"`
	// The user who created this ticket.
	Creator *string `json:"creator,omitempty"`
	// The ticket's due date.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The current status of the ticket.
	//
	// - `OPEN` - OPEN
	// - `CLOSED` - CLOSED
	// - `IN_PROGRESS` - IN_PROGRESS
	// - `ON_HOLD` - ON_HOLD
	Status *PatchedTicketRequestStatus `json:"status,omitempty"`
	// The ticket’s description. HTML version of description is mapped if supported by the third-party platform.
	Description *string `json:"description,omitempty"`
	// The `Collections` that this `Ticket` is included in.
	Collections []*string `json:"collections,omitempty"`
	// The sub category of the ticket within the 3rd party system. Examples include incident, task, subtask or to-do.
	TicketType *string `json:"ticket_type,omitempty"`
	// The account associated with the ticket.
	Account *string `json:"account,omitempty"`
	// The contact associated with the ticket.
	Contact *string `json:"contact,omitempty"`
	// The ticket's parent ticket.
	ParentTicket *string   `json:"parent_ticket,omitempty"`
	Tags         []*string `json:"tags,omitempty"`
	Roles        []*string `json:"roles,omitempty"`
	// When the ticket was completed.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// The 3rd party url of the Ticket.
	TicketUrl *string `json:"ticket_url,omitempty"`
	// The priority or urgency of the Ticket.
	//
	// - `URGENT` - URGENT
	// - `HIGH` - HIGH
	// - `NORMAL` - NORMAL
	// - `LOW` - LOW
	Priority            *PatchedTicketRequestPriority `json:"priority,omitempty"`
	IntegrationParams   map[string]interface{}        `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}        `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest         `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PatchedTicketRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PatchedTicketRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatchedTicketRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedTicketRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The priority or urgency of the Ticket.
//
// - `URGENT` - URGENT
// - `HIGH` - HIGH
// - `NORMAL` - NORMAL
// - `LOW` - LOW
type PatchedTicketRequestPriority struct {
	typeName     string
	PriorityEnum PriorityEnum
	String       string
}

func NewPatchedTicketRequestPriorityFromPriorityEnum(value PriorityEnum) *PatchedTicketRequestPriority {
	return &PatchedTicketRequestPriority{typeName: "priorityEnum", PriorityEnum: value}
}

func NewPatchedTicketRequestPriorityFromString(value string) *PatchedTicketRequestPriority {
	return &PatchedTicketRequestPriority{typeName: "string", String: value}
}

func (p *PatchedTicketRequestPriority) UnmarshalJSON(data []byte) error {
	var valuePriorityEnum PriorityEnum
	if err := json.Unmarshal(data, &valuePriorityEnum); err == nil {
		p.typeName = "priorityEnum"
		p.PriorityEnum = valuePriorityEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PatchedTicketRequestPriority) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "priorityEnum":
		return json.Marshal(p.PriorityEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PatchedTicketRequestPriorityVisitor interface {
	VisitPriorityEnum(PriorityEnum) error
	VisitString(string) error
}

func (p *PatchedTicketRequestPriority) Accept(visitor PatchedTicketRequestPriorityVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "priorityEnum":
		return visitor.VisitPriorityEnum(p.PriorityEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// The current status of the ticket.
//
// - `OPEN` - OPEN
// - `CLOSED` - CLOSED
// - `IN_PROGRESS` - IN_PROGRESS
// - `ON_HOLD` - ON_HOLD
type PatchedTicketRequestStatus struct {
	typeName         string
	TicketStatusEnum TicketStatusEnum
	String           string
}

func NewPatchedTicketRequestStatusFromTicketStatusEnum(value TicketStatusEnum) *PatchedTicketRequestStatus {
	return &PatchedTicketRequestStatus{typeName: "ticketStatusEnum", TicketStatusEnum: value}
}

func NewPatchedTicketRequestStatusFromString(value string) *PatchedTicketRequestStatus {
	return &PatchedTicketRequestStatus{typeName: "string", String: value}
}

func (p *PatchedTicketRequestStatus) UnmarshalJSON(data []byte) error {
	var valueTicketStatusEnum TicketStatusEnum
	if err := json.Unmarshal(data, &valueTicketStatusEnum); err == nil {
		p.typeName = "ticketStatusEnum"
		p.TicketStatusEnum = valueTicketStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PatchedTicketRequestStatus) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "ticketStatusEnum":
		return json.Marshal(p.TicketStatusEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PatchedTicketRequestStatusVisitor interface {
	VisitTicketStatusEnum(TicketStatusEnum) error
	VisitString(string) error
}

func (p *PatchedTicketRequestStatus) Accept(visitor PatchedTicketRequestStatusVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "ticketStatusEnum":
		return visitor.VisitTicketStatusEnum(p.TicketStatusEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// - `URGENT` - URGENT
// - `HIGH` - HIGH
// - `NORMAL` - NORMAL
// - `LOW` - LOW
type PriorityEnum string

const (
	PriorityEnumUrgent PriorityEnum = "URGENT"
	PriorityEnumHigh   PriorityEnum = "HIGH"
	PriorityEnumNormal PriorityEnum = "NORMAL"
	PriorityEnumLow    PriorityEnum = "LOW"
)

func NewPriorityEnumFromString(s string) (PriorityEnum, error) {
	switch s {
	case "URGENT":
		return PriorityEnumUrgent, nil
	case "HIGH":
		return PriorityEnumHigh, nil
	case "NORMAL":
		return PriorityEnumNormal, nil
	case "LOW":
		return PriorityEnumLow, nil
	}
	var t PriorityEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PriorityEnum) Ptr() *PriorityEnum {
	return &p
}

// # The Project Object
//
// ### Description
//
// Please use the `Collection` model. This model will be fully deprecated on 3/30/2024.
//
// ### Usage Example
//
// TODO
type Project struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The project's name.
	Name *string `json:"name,omitempty"`
	// The project's description.
	Description *string `json:"description,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (p *Project) UnmarshalJSON(data []byte) error {
	type unmarshaler Project
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Project(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Project) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The RemoteData Object
//
// ### Description
//
// The `RemoteData` object is used to represent the full data pulled from the third-party API for an object.
//
// ### Usage Example
//
// TODO
type RemoteData struct {
	// The third-party API path that is being called.
	Path string      `json:"path"`
	Data interface{} `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteData) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteData(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteEndpointInfo struct {
	Method             string        `json:"method"`
	UrlPath            string        `json:"url_path"`
	FieldTraversalPath []interface{} `json:"field_traversal_path,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteEndpointInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteEndpointInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteEndpointInfo(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteEndpointInfo) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteField struct {
	RemoteFieldClass *RemoteFieldRemoteFieldClass `json:"remote_field_class,omitempty"`
	Value            map[string]interface{}       `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteField) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteField(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteField) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldApi struct {
	Schema             map[string]interface{}  `json:"schema,omitempty"`
	RemoteKeyName      string                  `json:"remote_key_name"`
	RemoteEndpointInfo *RemoteEndpointInfo     `json:"remote_endpoint_info,omitempty"`
	ExampleValues      []interface{}           `json:"example_values,omitempty"`
	AdvancedMetadata   *AdvancedMetadata       `json:"advanced_metadata,omitempty"`
	Coverage           *RemoteFieldApiCoverage `json:"coverage,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldApi) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldApi(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldApi) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldApiCoverage struct {
	typeName string
	Integer  int
	Double   float64
}

func NewRemoteFieldApiCoverageFromInteger(value int) *RemoteFieldApiCoverage {
	return &RemoteFieldApiCoverage{typeName: "integer", Integer: value}
}

func NewRemoteFieldApiCoverageFromDouble(value float64) *RemoteFieldApiCoverage {
	return &RemoteFieldApiCoverage{typeName: "double", Double: value}
}

func (r *RemoteFieldApiCoverage) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		r.typeName = "integer"
		r.Integer = valueInteger
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		r.typeName = "double"
		r.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldApiCoverage) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "integer":
		return json.Marshal(r.Integer)
	case "double":
		return json.Marshal(r.Double)
	}
}

type RemoteFieldApiCoverageVisitor interface {
	VisitInteger(int) error
	VisitDouble(float64) error
}

func (r *RemoteFieldApiCoverage) Accept(visitor RemoteFieldApiCoverageVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "integer":
		return visitor.VisitInteger(r.Integer)
	case "double":
		return visitor.VisitDouble(r.Double)
	}
}

type RemoteFieldApiResponse struct {
	Ticket     []*RemoteFieldApi `json:"Ticket,omitempty"`
	Comment    []*RemoteFieldApi `json:"Comment,omitempty"`
	Project    []*RemoteFieldApi `json:"Project,omitempty"`
	Collection []*RemoteFieldApi `json:"Collection,omitempty"`
	User       []*RemoteFieldApi `json:"User,omitempty"`
	Role       []*RemoteFieldApi `json:"Role,omitempty"`
	Account    []*RemoteFieldApi `json:"Account,omitempty"`
	Team       []*RemoteFieldApi `json:"Team,omitempty"`
	Attachment []*RemoteFieldApi `json:"Attachment,omitempty"`
	Tag        []*RemoteFieldApi `json:"Tag,omitempty"`
	Contact    []*RemoteFieldApi `json:"Contact,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldApiResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldApiResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldClass struct {
	Id            *string                             `json:"id,omitempty"`
	DisplayName   *string                             `json:"display_name,omitempty"`
	RemoteKeyName *string                             `json:"remote_key_name,omitempty"`
	Description   *string                             `json:"description,omitempty"`
	IsCustom      *bool                               `json:"is_custom,omitempty"`
	IsRequired    *bool                               `json:"is_required,omitempty"`
	FieldType     *RemoteFieldClassFieldType          `json:"field_type,omitempty"`
	FieldFormat   *RemoteFieldClassFieldFormat        `json:"field_format,omitempty"`
	FieldChoices  []*RemoteFieldClassFieldChoicesItem `json:"field_choices,omitempty"`
	ItemSchema    *ItemSchema                         `json:"item_schema,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldClass) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldClass
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldClass(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldClass) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldClassFieldChoicesItem struct {
	Value       interface{} `json:"value,omitempty"`
	DisplayName *string     `json:"display_name,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldClassFieldChoicesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldClassFieldChoicesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldClassFieldChoicesItem(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldClassFieldChoicesItem) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldClassFieldFormat struct {
	typeName        string
	String          string
	FieldFormatEnum FieldFormatEnum
}

func NewRemoteFieldClassFieldFormatFromString(value string) *RemoteFieldClassFieldFormat {
	return &RemoteFieldClassFieldFormat{typeName: "string", String: value}
}

func NewRemoteFieldClassFieldFormatFromFieldFormatEnum(value FieldFormatEnum) *RemoteFieldClassFieldFormat {
	return &RemoteFieldClassFieldFormat{typeName: "fieldFormatEnum", FieldFormatEnum: value}
}

func (r *RemoteFieldClassFieldFormat) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	var valueFieldFormatEnum FieldFormatEnum
	if err := json.Unmarshal(data, &valueFieldFormatEnum); err == nil {
		r.typeName = "fieldFormatEnum"
		r.FieldFormatEnum = valueFieldFormatEnum
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldClassFieldFormat) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "fieldFormatEnum":
		return json.Marshal(r.FieldFormatEnum)
	}
}

type RemoteFieldClassFieldFormatVisitor interface {
	VisitString(string) error
	VisitFieldFormatEnum(FieldFormatEnum) error
}

func (r *RemoteFieldClassFieldFormat) Accept(visitor RemoteFieldClassFieldFormatVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "fieldFormatEnum":
		return visitor.VisitFieldFormatEnum(r.FieldFormatEnum)
	}
}

type RemoteFieldClassFieldType struct {
	typeName      string
	String        string
	FieldTypeEnum FieldTypeEnum
}

func NewRemoteFieldClassFieldTypeFromString(value string) *RemoteFieldClassFieldType {
	return &RemoteFieldClassFieldType{typeName: "string", String: value}
}

func NewRemoteFieldClassFieldTypeFromFieldTypeEnum(value FieldTypeEnum) *RemoteFieldClassFieldType {
	return &RemoteFieldClassFieldType{typeName: "fieldTypeEnum", FieldTypeEnum: value}
}

func (r *RemoteFieldClassFieldType) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	var valueFieldTypeEnum FieldTypeEnum
	if err := json.Unmarshal(data, &valueFieldTypeEnum); err == nil {
		r.typeName = "fieldTypeEnum"
		r.FieldTypeEnum = valueFieldTypeEnum
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldClassFieldType) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "fieldTypeEnum":
		return json.Marshal(r.FieldTypeEnum)
	}
}

type RemoteFieldClassFieldTypeVisitor interface {
	VisitString(string) error
	VisitFieldTypeEnum(FieldTypeEnum) error
}

func (r *RemoteFieldClassFieldType) Accept(visitor RemoteFieldClassFieldTypeVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "fieldTypeEnum":
		return visitor.VisitFieldTypeEnum(r.FieldTypeEnum)
	}
}

type RemoteFieldRemoteFieldClass struct {
	typeName         string
	String           string
	RemoteFieldClass *RemoteFieldClass
}

func NewRemoteFieldRemoteFieldClassFromString(value string) *RemoteFieldRemoteFieldClass {
	return &RemoteFieldRemoteFieldClass{typeName: "string", String: value}
}

func NewRemoteFieldRemoteFieldClassFromRemoteFieldClass(value *RemoteFieldClass) *RemoteFieldRemoteFieldClass {
	return &RemoteFieldRemoteFieldClass{typeName: "remoteFieldClass", RemoteFieldClass: value}
}

func (r *RemoteFieldRemoteFieldClass) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	valueRemoteFieldClass := new(RemoteFieldClass)
	if err := json.Unmarshal(data, &valueRemoteFieldClass); err == nil {
		r.typeName = "remoteFieldClass"
		r.RemoteFieldClass = valueRemoteFieldClass
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldRemoteFieldClass) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "remoteFieldClass":
		return json.Marshal(r.RemoteFieldClass)
	}
}

type RemoteFieldRemoteFieldClassVisitor interface {
	VisitString(string) error
	VisitRemoteFieldClass(*RemoteFieldClass) error
}

func (r *RemoteFieldRemoteFieldClass) Accept(visitor RemoteFieldRemoteFieldClassVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "remoteFieldClass":
		return visitor.VisitRemoteFieldClass(r.RemoteFieldClass)
	}
}

type RemoteFieldRequest struct {
	RemoteFieldClass *RemoteFieldRequestRemoteFieldClass `json:"remote_field_class,omitempty"`
	Value            interface{}                         `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldRequest(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldRequestRemoteFieldClass struct {
	typeName         string
	String           string
	RemoteFieldClass *RemoteFieldClass
}

func NewRemoteFieldRequestRemoteFieldClassFromString(value string) *RemoteFieldRequestRemoteFieldClass {
	return &RemoteFieldRequestRemoteFieldClass{typeName: "string", String: value}
}

func NewRemoteFieldRequestRemoteFieldClassFromRemoteFieldClass(value *RemoteFieldClass) *RemoteFieldRequestRemoteFieldClass {
	return &RemoteFieldRequestRemoteFieldClass{typeName: "remoteFieldClass", RemoteFieldClass: value}
}

func (r *RemoteFieldRequestRemoteFieldClass) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	valueRemoteFieldClass := new(RemoteFieldClass)
	if err := json.Unmarshal(data, &valueRemoteFieldClass); err == nil {
		r.typeName = "remoteFieldClass"
		r.RemoteFieldClass = valueRemoteFieldClass
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldRequestRemoteFieldClass) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "remoteFieldClass":
		return json.Marshal(r.RemoteFieldClass)
	}
}

type RemoteFieldRequestRemoteFieldClassVisitor interface {
	VisitString(string) error
	VisitRemoteFieldClass(*RemoteFieldClass) error
}

func (r *RemoteFieldRequestRemoteFieldClass) Accept(visitor RemoteFieldRequestRemoteFieldClassVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "remoteFieldClass":
		return visitor.VisitRemoteFieldClass(r.RemoteFieldClass)
	}
}

// # The RemoteKey Object
//
// ### Description
//
// The `RemoteKey` object is used to represent a request for a new remote key.
//
// ### Usage Example
//
// Post a `GenerateRemoteKey` to receive a new `RemoteKey`.
type RemoteKey struct {
	Name string `json:"name"`
	Key  string `json:"key"`

	_rawJSON json.RawMessage
}

func (r *RemoteKey) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteKey(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteKey) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// # The RemoteResponse Object
//
// ### Description
//
// The `RemoteResponse` object is used to represent information returned from a third-party endpoint.
//
// ### Usage Example
//
// View the `RemoteResponse` returned from your `DataPassthrough`.
type RemoteResponse struct {
	Method          string                 `json:"method"`
	Path            string                 `json:"path"`
	Status          int                    `json:"status"`
	Response        interface{}            `json:"response,omitempty"`
	ResponseHeaders map[string]interface{} `json:"response_headers,omitempty"`
	ResponseType    *ResponseTypeEnum      `json:"response_type,omitempty"`
	Headers         map[string]interface{} `json:"headers,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// - `JSON` - JSON
// - `XML` - XML
// - `MULTIPART` - MULTIPART
type RequestFormatEnum string

const (
	RequestFormatEnumJson      RequestFormatEnum = "JSON"
	RequestFormatEnumXml       RequestFormatEnum = "XML"
	RequestFormatEnumMultipart RequestFormatEnum = "MULTIPART"
)

func NewRequestFormatEnumFromString(s string) (RequestFormatEnum, error) {
	switch s {
	case "JSON":
		return RequestFormatEnumJson, nil
	case "XML":
		return RequestFormatEnumXml, nil
	case "MULTIPART":
		return RequestFormatEnumMultipart, nil
	}
	var t RequestFormatEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestFormatEnum) Ptr() *RequestFormatEnum {
	return &r
}

// - `JSON` - JSON
// - `BASE64_GZIP` - BASE64_GZIP
type ResponseTypeEnum string

const (
	ResponseTypeEnumJson       ResponseTypeEnum = "JSON"
	ResponseTypeEnumBase64Gzip ResponseTypeEnum = "BASE64_GZIP"
)

func NewResponseTypeEnumFromString(s string) (ResponseTypeEnum, error) {
	switch s {
	case "JSON":
		return ResponseTypeEnumJson, nil
	case "BASE64_GZIP":
		return ResponseTypeEnumBase64Gzip, nil
	}
	var t ResponseTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ResponseTypeEnum) Ptr() *ResponseTypeEnum {
	return &r
}

// # The Role Object
//
// ### Description
//
// The `Role` object is used to represent the set of actions & access that a user with this role is allowed to perform.
//
// ### Usage Example
//
// TODO
type Role struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The name of the Role.
	Name *string `json:"name,omitempty"`
	// The set of actions that a User with this Role can perform. Possible enum values include: `VIEW`, `CREATE`, `EDIT`, `DELETE`, `CLOSE`, and `ASSIGN`.
	TicketActions []*RoleTicketActionsItem `json:"ticket_actions,omitempty"`
	// The level of Ticket access that a User with this Role can perform.
	//
	// - `ALL` - ALL
	// - `ASSIGNED_ONLY` - ASSIGNED_ONLY
	// - `TEAM_ONLY` - TEAM_ONLY
	TicketAccess *RoleTicketAccess `json:"ticket_access,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (r *Role) UnmarshalJSON(data []byte) error {
	type unmarshaler Role
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Role(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *Role) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// - `ADMIN` - ADMIN
// - `DEVELOPER` - DEVELOPER
// - `MEMBER` - MEMBER
// - `API` - API
// - `SYSTEM` - SYSTEM
// - `MERGE_TEAM` - MERGE_TEAM
type RoleEnum string

const (
	RoleEnumAdmin     RoleEnum = "ADMIN"
	RoleEnumDeveloper RoleEnum = "DEVELOPER"
	RoleEnumMember    RoleEnum = "MEMBER"
	RoleEnumApi       RoleEnum = "API"
	RoleEnumSystem    RoleEnum = "SYSTEM"
	RoleEnumMergeTeam RoleEnum = "MERGE_TEAM"
)

func NewRoleEnumFromString(s string) (RoleEnum, error) {
	switch s {
	case "ADMIN":
		return RoleEnumAdmin, nil
	case "DEVELOPER":
		return RoleEnumDeveloper, nil
	case "MEMBER":
		return RoleEnumMember, nil
	case "API":
		return RoleEnumApi, nil
	case "SYSTEM":
		return RoleEnumSystem, nil
	case "MERGE_TEAM":
		return RoleEnumMergeTeam, nil
	}
	var t RoleEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RoleEnum) Ptr() *RoleEnum {
	return &r
}

// The level of Ticket access that a User with this Role can perform.
//
// - `ALL` - ALL
// - `ASSIGNED_ONLY` - ASSIGNED_ONLY
// - `TEAM_ONLY` - TEAM_ONLY
type RoleTicketAccess struct {
	typeName         string
	String           string
	TicketAccessEnum TicketAccessEnum
}

func NewRoleTicketAccessFromString(value string) *RoleTicketAccess {
	return &RoleTicketAccess{typeName: "string", String: value}
}

func NewRoleTicketAccessFromTicketAccessEnum(value TicketAccessEnum) *RoleTicketAccess {
	return &RoleTicketAccess{typeName: "ticketAccessEnum", TicketAccessEnum: value}
}

func (r *RoleTicketAccess) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	var valueTicketAccessEnum TicketAccessEnum
	if err := json.Unmarshal(data, &valueTicketAccessEnum); err == nil {
		r.typeName = "ticketAccessEnum"
		r.TicketAccessEnum = valueTicketAccessEnum
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RoleTicketAccess) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "ticketAccessEnum":
		return json.Marshal(r.TicketAccessEnum)
	}
}

type RoleTicketAccessVisitor interface {
	VisitString(string) error
	VisitTicketAccessEnum(TicketAccessEnum) error
}

func (r *RoleTicketAccess) Accept(visitor RoleTicketAccessVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "ticketAccessEnum":
		return visitor.VisitTicketAccessEnum(r.TicketAccessEnum)
	}
}

type RoleTicketActionsItem struct {
	typeName          string
	String            string
	TicketActionsEnum TicketActionsEnum
}

func NewRoleTicketActionsItemFromString(value string) *RoleTicketActionsItem {
	return &RoleTicketActionsItem{typeName: "string", String: value}
}

func NewRoleTicketActionsItemFromTicketActionsEnum(value TicketActionsEnum) *RoleTicketActionsItem {
	return &RoleTicketActionsItem{typeName: "ticketActionsEnum", TicketActionsEnum: value}
}

func (r *RoleTicketActionsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	var valueTicketActionsEnum TicketActionsEnum
	if err := json.Unmarshal(data, &valueTicketActionsEnum); err == nil {
		r.typeName = "ticketActionsEnum"
		r.TicketActionsEnum = valueTicketActionsEnum
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RoleTicketActionsItem) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "ticketActionsEnum":
		return json.Marshal(r.TicketActionsEnum)
	}
}

type RoleTicketActionsItemVisitor interface {
	VisitString(string) error
	VisitTicketActionsEnum(TicketActionsEnum) error
}

func (r *RoleTicketActionsItem) Accept(visitor RoleTicketActionsItemVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "ticketActionsEnum":
		return visitor.VisitTicketActionsEnum(r.TicketActionsEnum)
	}
}

// - `IN_NEXT_SYNC` - IN_NEXT_SYNC
// - `IN_LAST_SYNC` - IN_LAST_SYNC
type SelectiveSyncConfigurationsUsageEnum string

const (
	SelectiveSyncConfigurationsUsageEnumInNextSync SelectiveSyncConfigurationsUsageEnum = "IN_NEXT_SYNC"
	SelectiveSyncConfigurationsUsageEnumInLastSync SelectiveSyncConfigurationsUsageEnum = "IN_LAST_SYNC"
)

func NewSelectiveSyncConfigurationsUsageEnumFromString(s string) (SelectiveSyncConfigurationsUsageEnum, error) {
	switch s {
	case "IN_NEXT_SYNC":
		return SelectiveSyncConfigurationsUsageEnumInNextSync, nil
	case "IN_LAST_SYNC":
		return SelectiveSyncConfigurationsUsageEnumInLastSync, nil
	}
	var t SelectiveSyncConfigurationsUsageEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SelectiveSyncConfigurationsUsageEnum) Ptr() *SelectiveSyncConfigurationsUsageEnum {
	return &s
}

// # The SyncStatus Object
//
// ### Description
//
// # The `SyncStatus` object is used to represent the syncing state of an account
//
// ### Usage Example
//
// View the `SyncStatus` for an account to see how recently its models were synced.
type SyncStatus struct {
	ModelName                        string                                `json:"model_name"`
	ModelId                          string                                `json:"model_id"`
	LastSyncStart                    *time.Time                            `json:"last_sync_start,omitempty"`
	NextSyncStart                    *time.Time                            `json:"next_sync_start,omitempty"`
	Status                           SyncStatusStatusEnum                  `json:"status,omitempty"`
	IsInitialSync                    bool                                  `json:"is_initial_sync"`
	SelectiveSyncConfigurationsUsage *SelectiveSyncConfigurationsUsageEnum `json:"selective_sync_configurations_usage,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SyncStatus) UnmarshalJSON(data []byte) error {
	type unmarshaler SyncStatus
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SyncStatus(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SyncStatus) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// - `SYNCING` - SYNCING
// - `DONE` - DONE
// - `FAILED` - FAILED
// - `DISABLED` - DISABLED
// - `PAUSED` - PAUSED
// - `PARTIALLY_SYNCED` - PARTIALLY_SYNCED
type SyncStatusStatusEnum string

const (
	SyncStatusStatusEnumSyncing         SyncStatusStatusEnum = "SYNCING"
	SyncStatusStatusEnumDone            SyncStatusStatusEnum = "DONE"
	SyncStatusStatusEnumFailed          SyncStatusStatusEnum = "FAILED"
	SyncStatusStatusEnumDisabled        SyncStatusStatusEnum = "DISABLED"
	SyncStatusStatusEnumPaused          SyncStatusStatusEnum = "PAUSED"
	SyncStatusStatusEnumPartiallySynced SyncStatusStatusEnum = "PARTIALLY_SYNCED"
)

func NewSyncStatusStatusEnumFromString(s string) (SyncStatusStatusEnum, error) {
	switch s {
	case "SYNCING":
		return SyncStatusStatusEnumSyncing, nil
	case "DONE":
		return SyncStatusStatusEnumDone, nil
	case "FAILED":
		return SyncStatusStatusEnumFailed, nil
	case "DISABLED":
		return SyncStatusStatusEnumDisabled, nil
	case "PAUSED":
		return SyncStatusStatusEnumPaused, nil
	case "PARTIALLY_SYNCED":
		return SyncStatusStatusEnumPartiallySynced, nil
	}
	var t SyncStatusStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SyncStatusStatusEnum) Ptr() *SyncStatusStatusEnum {
	return &s
}

// # The Tag Object
//
// ### Description
//
// The `Tag` object is used to represent a tag or label for a ticket.
//
// ### Usage Example
//
// TODO
type Tag struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	Id         *string    `json:"id,omitempty"`
	// The tag's name.
	Name *string `json:"name,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (t *Tag) UnmarshalJSON(data []byte) error {
	type unmarshaler Tag
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Tag(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *Tag) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// # The Team Object
//
// ### Description
//
// The `Team` object is used to represent one or more `Users` within the company receiving the ticket.
//
// ### Usage Example
//
// TODO
type Team struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The team's name.
	Name *string `json:"name,omitempty"`
	// The team's description.
	Description *string `json:"description,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (t *Team) UnmarshalJSON(data []byte) error {
	type unmarshaler Team
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Team(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *Team) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// # The Ticket Object
//
// ### Description
//
// The `Ticket` object is used to represent a ticket, issue, task or case.
//
// ### Usage Example
//
// TODO
type Ticket struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The ticket's name.
	Name *string `json:"name,omitempty"`
	// The individual `Users` who are assigned to this ticket. This does not include `Users` who just have view access to this ticket.
	Assignees []*TicketAssigneesItem `json:"assignees,omitempty"`
	// The `Teams` that are assigned to this ticket. This does not include `Teams` who just have view access to this ticket.
	AssignedTeams []*TicketAssignedTeamsItem `json:"assigned_teams,omitempty"`
	// The user who created this ticket.
	Creator *TicketCreator `json:"creator,omitempty"`
	// The ticket's due date.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The current status of the ticket.
	//
	// - `OPEN` - OPEN
	// - `CLOSED` - CLOSED
	// - `IN_PROGRESS` - IN_PROGRESS
	// - `ON_HOLD` - ON_HOLD
	Status *TicketStatus `json:"status,omitempty"`
	// The ticket’s description. HTML version of description is mapped if supported by the third-party platform.
	Description *string `json:"description,omitempty"`
	// The `Collections` that this `Ticket` is included in.
	Collections []*TicketCollectionsItem `json:"collections,omitempty"`
	// The sub category of the ticket within the 3rd party system. Examples include incident, task, subtask or to-do.
	TicketType *string `json:"ticket_type,omitempty"`
	// The account associated with the ticket.
	Account *TicketAccount `json:"account,omitempty"`
	// The contact associated with the ticket.
	Contact *TicketContact `json:"contact,omitempty"`
	// The ticket's parent ticket.
	ParentTicket *TicketParentTicket      `json:"parent_ticket,omitempty"`
	Attachments  []*TicketAttachmentsItem `json:"attachments,omitempty"`
	Tags         []*string                `json:"tags,omitempty"`
	Roles        []*string                `json:"roles,omitempty"`
	// When the third party's ticket was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// When the third party's ticket was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// When the ticket was completed.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// The 3rd party url of the Ticket.
	TicketUrl *string `json:"ticket_url,omitempty"`
	// The priority or urgency of the Ticket.
	//
	// - `URGENT` - URGENT
	// - `HIGH` - HIGH
	// - `NORMAL` - NORMAL
	// - `LOW` - LOW
	Priority      *TicketPriority        `json:"priority,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData          `json:"remote_data,omitempty"`
	RemoteFields  []*RemoteField         `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (t *Ticket) UnmarshalJSON(data []byte) error {
	type unmarshaler Ticket
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Ticket(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *Ticket) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// - `ALL` - ALL
// - `ASSIGNED_ONLY` - ASSIGNED_ONLY
// - `TEAM_ONLY` - TEAM_ONLY
type TicketAccessEnum string

const (
	TicketAccessEnumAll          TicketAccessEnum = "ALL"
	TicketAccessEnumAssignedOnly TicketAccessEnum = "ASSIGNED_ONLY"
	TicketAccessEnumTeamOnly     TicketAccessEnum = "TEAM_ONLY"
)

func NewTicketAccessEnumFromString(s string) (TicketAccessEnum, error) {
	switch s {
	case "ALL":
		return TicketAccessEnumAll, nil
	case "ASSIGNED_ONLY":
		return TicketAccessEnumAssignedOnly, nil
	case "TEAM_ONLY":
		return TicketAccessEnumTeamOnly, nil
	}
	var t TicketAccessEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TicketAccessEnum) Ptr() *TicketAccessEnum {
	return &t
}

// The account associated with the ticket.
type TicketAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewTicketAccountFromString(value string) *TicketAccount {
	return &TicketAccount{typeName: "string", String: value}
}

func NewTicketAccountFromAccount(value *Account) *TicketAccount {
	return &TicketAccount{typeName: "account", Account: value}
}

func (t *TicketAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		t.typeName = "account"
		t.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketAccount) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "account":
		return json.Marshal(t.Account)
	}
}

type TicketAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (t *TicketAccount) Accept(visitor TicketAccountVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "account":
		return visitor.VisitAccount(t.Account)
	}
}

// - `VIEW` - VIEW
// - `CREATE` - CREATE
// - `EDIT` - EDIT
// - `DELETE` - DELETE
// - `CLOSE` - CLOSE
// - `ASSIGN` - ASSIGN
type TicketActionsEnum string

const (
	TicketActionsEnumView   TicketActionsEnum = "VIEW"
	TicketActionsEnumCreate TicketActionsEnum = "CREATE"
	TicketActionsEnumEdit   TicketActionsEnum = "EDIT"
	TicketActionsEnumDelete TicketActionsEnum = "DELETE"
	TicketActionsEnumClose  TicketActionsEnum = "CLOSE"
	TicketActionsEnumAssign TicketActionsEnum = "ASSIGN"
)

func NewTicketActionsEnumFromString(s string) (TicketActionsEnum, error) {
	switch s {
	case "VIEW":
		return TicketActionsEnumView, nil
	case "CREATE":
		return TicketActionsEnumCreate, nil
	case "EDIT":
		return TicketActionsEnumEdit, nil
	case "DELETE":
		return TicketActionsEnumDelete, nil
	case "CLOSE":
		return TicketActionsEnumClose, nil
	case "ASSIGN":
		return TicketActionsEnumAssign, nil
	}
	var t TicketActionsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TicketActionsEnum) Ptr() *TicketActionsEnum {
	return &t
}

type TicketAssignedTeamsItem struct {
	typeName string
	String   string
	Team     *Team
}

func NewTicketAssignedTeamsItemFromString(value string) *TicketAssignedTeamsItem {
	return &TicketAssignedTeamsItem{typeName: "string", String: value}
}

func NewTicketAssignedTeamsItemFromTeam(value *Team) *TicketAssignedTeamsItem {
	return &TicketAssignedTeamsItem{typeName: "team", Team: value}
}

func (t *TicketAssignedTeamsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueTeam := new(Team)
	if err := json.Unmarshal(data, &valueTeam); err == nil {
		t.typeName = "team"
		t.Team = valueTeam
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketAssignedTeamsItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "team":
		return json.Marshal(t.Team)
	}
}

type TicketAssignedTeamsItemVisitor interface {
	VisitString(string) error
	VisitTeam(*Team) error
}

func (t *TicketAssignedTeamsItem) Accept(visitor TicketAssignedTeamsItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "team":
		return visitor.VisitTeam(t.Team)
	}
}

type TicketAssigneesItem struct {
	typeName string
	String   string
	User     *User
}

func NewTicketAssigneesItemFromString(value string) *TicketAssigneesItem {
	return &TicketAssigneesItem{typeName: "string", String: value}
}

func NewTicketAssigneesItemFromUser(value *User) *TicketAssigneesItem {
	return &TicketAssigneesItem{typeName: "user", User: value}
}

func (t *TicketAssigneesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typeName = "user"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketAssigneesItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "user":
		return json.Marshal(t.User)
	}
}

type TicketAssigneesItemVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TicketAssigneesItem) Accept(visitor TicketAssigneesItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "user":
		return visitor.VisitUser(t.User)
	}
}

type TicketAttachmentsItem struct {
	typeName   string
	String     string
	Attachment *Attachment
}

func NewTicketAttachmentsItemFromString(value string) *TicketAttachmentsItem {
	return &TicketAttachmentsItem{typeName: "string", String: value}
}

func NewTicketAttachmentsItemFromAttachment(value *Attachment) *TicketAttachmentsItem {
	return &TicketAttachmentsItem{typeName: "attachment", Attachment: value}
}

func (t *TicketAttachmentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueAttachment := new(Attachment)
	if err := json.Unmarshal(data, &valueAttachment); err == nil {
		t.typeName = "attachment"
		t.Attachment = valueAttachment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketAttachmentsItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "attachment":
		return json.Marshal(t.Attachment)
	}
}

type TicketAttachmentsItemVisitor interface {
	VisitString(string) error
	VisitAttachment(*Attachment) error
}

func (t *TicketAttachmentsItem) Accept(visitor TicketAttachmentsItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "attachment":
		return visitor.VisitAttachment(t.Attachment)
	}
}

type TicketCollectionsItem struct {
	typeName   string
	String     string
	Collection *Collection
}

func NewTicketCollectionsItemFromString(value string) *TicketCollectionsItem {
	return &TicketCollectionsItem{typeName: "string", String: value}
}

func NewTicketCollectionsItemFromCollection(value *Collection) *TicketCollectionsItem {
	return &TicketCollectionsItem{typeName: "collection", Collection: value}
}

func (t *TicketCollectionsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueCollection := new(Collection)
	if err := json.Unmarshal(data, &valueCollection); err == nil {
		t.typeName = "collection"
		t.Collection = valueCollection
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketCollectionsItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "collection":
		return json.Marshal(t.Collection)
	}
}

type TicketCollectionsItemVisitor interface {
	VisitString(string) error
	VisitCollection(*Collection) error
}

func (t *TicketCollectionsItem) Accept(visitor TicketCollectionsItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "collection":
		return visitor.VisitCollection(t.Collection)
	}
}

// The contact associated with the ticket.
type TicketContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewTicketContactFromString(value string) *TicketContact {
	return &TicketContact{typeName: "string", String: value}
}

func NewTicketContactFromContact(value *Contact) *TicketContact {
	return &TicketContact{typeName: "contact", Contact: value}
}

func (t *TicketContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		t.typeName = "contact"
		t.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketContact) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "contact":
		return json.Marshal(t.Contact)
	}
}

type TicketContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (t *TicketContact) Accept(visitor TicketContactVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "contact":
		return visitor.VisitContact(t.Contact)
	}
}

// The user who created this ticket.
type TicketCreator struct {
	typeName string
	String   string
	User     *User
}

func NewTicketCreatorFromString(value string) *TicketCreator {
	return &TicketCreator{typeName: "string", String: value}
}

func NewTicketCreatorFromUser(value *User) *TicketCreator {
	return &TicketCreator{typeName: "user", User: value}
}

func (t *TicketCreator) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typeName = "user"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketCreator) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "user":
		return json.Marshal(t.User)
	}
}

type TicketCreatorVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TicketCreator) Accept(visitor TicketCreatorVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "user":
		return visitor.VisitUser(t.User)
	}
}

// The ticket's parent ticket.
type TicketParentTicket struct {
	typeName string
	String   string
	Ticket   *Ticket
}

func NewTicketParentTicketFromString(value string) *TicketParentTicket {
	return &TicketParentTicket{typeName: "string", String: value}
}

func NewTicketParentTicketFromTicket(value *Ticket) *TicketParentTicket {
	return &TicketParentTicket{typeName: "ticket", Ticket: value}
}

func (t *TicketParentTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		t.typeName = "ticket"
		t.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketParentTicket) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "ticket":
		return json.Marshal(t.Ticket)
	}
}

type TicketParentTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (t *TicketParentTicket) Accept(visitor TicketParentTicketVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "ticket":
		return visitor.VisitTicket(t.Ticket)
	}
}

// The priority or urgency of the Ticket.
//
// - `URGENT` - URGENT
// - `HIGH` - HIGH
// - `NORMAL` - NORMAL
// - `LOW` - LOW
type TicketPriority struct {
	typeName     string
	PriorityEnum PriorityEnum
	String       string
}

func NewTicketPriorityFromPriorityEnum(value PriorityEnum) *TicketPriority {
	return &TicketPriority{typeName: "priorityEnum", PriorityEnum: value}
}

func NewTicketPriorityFromString(value string) *TicketPriority {
	return &TicketPriority{typeName: "string", String: value}
}

func (t *TicketPriority) UnmarshalJSON(data []byte) error {
	var valuePriorityEnum PriorityEnum
	if err := json.Unmarshal(data, &valuePriorityEnum); err == nil {
		t.typeName = "priorityEnum"
		t.PriorityEnum = valuePriorityEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketPriority) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "priorityEnum":
		return json.Marshal(t.PriorityEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TicketPriorityVisitor interface {
	VisitPriorityEnum(PriorityEnum) error
	VisitString(string) error
}

func (t *TicketPriority) Accept(visitor TicketPriorityVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "priorityEnum":
		return visitor.VisitPriorityEnum(t.PriorityEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

// # The Ticket Object
//
// ### Description
//
// The `Ticket` object is used to represent a ticket, issue, task or case.
//
// ### Usage Example
//
// TODO
type TicketRequest struct {
	// The ticket's name.
	Name *string `json:"name,omitempty"`
	// The individual `Users` who are assigned to this ticket. This does not include `Users` who just have view access to this ticket.
	Assignees []*TicketRequestAssigneesItem `json:"assignees,omitempty"`
	// The `Teams` that are assigned to this ticket. This does not include `Teams` who just have view access to this ticket.
	AssignedTeams []*TicketRequestAssignedTeamsItem `json:"assigned_teams,omitempty"`
	// The user who created this ticket.
	Creator *TicketRequestCreator `json:"creator,omitempty"`
	// The ticket's due date.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The current status of the ticket.
	//
	// - `OPEN` - OPEN
	// - `CLOSED` - CLOSED
	// - `IN_PROGRESS` - IN_PROGRESS
	// - `ON_HOLD` - ON_HOLD
	Status *TicketRequestStatus `json:"status,omitempty"`
	// The ticket’s description. HTML version of description is mapped if supported by the third-party platform.
	Description *string `json:"description,omitempty"`
	// The `Collections` that this `Ticket` is included in.
	Collections []*TicketRequestCollectionsItem `json:"collections,omitempty"`
	// The sub category of the ticket within the 3rd party system. Examples include incident, task, subtask or to-do.
	TicketType *string `json:"ticket_type,omitempty"`
	// The account associated with the ticket.
	Account *TicketRequestAccount `json:"account,omitempty"`
	// The contact associated with the ticket.
	Contact *TicketRequestContact `json:"contact,omitempty"`
	// The ticket's parent ticket.
	ParentTicket *TicketRequestParentTicket      `json:"parent_ticket,omitempty"`
	Attachments  []*TicketRequestAttachmentsItem `json:"attachments,omitempty"`
	Tags         []*string                       `json:"tags,omitempty"`
	Roles        []*string                       `json:"roles,omitempty"`
	// When the ticket was completed.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// The 3rd party url of the Ticket.
	TicketUrl *string `json:"ticket_url,omitempty"`
	// The priority or urgency of the Ticket.
	//
	// - `URGENT` - URGENT
	// - `HIGH` - HIGH
	// - `NORMAL` - NORMAL
	// - `LOW` - LOW
	Priority            *TicketRequestPriority `json:"priority,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TicketRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TicketRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TicketRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TicketRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The account associated with the ticket.
type TicketRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewTicketRequestAccountFromString(value string) *TicketRequestAccount {
	return &TicketRequestAccount{typeName: "string", String: value}
}

func NewTicketRequestAccountFromAccount(value *Account) *TicketRequestAccount {
	return &TicketRequestAccount{typeName: "account", Account: value}
}

func (t *TicketRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		t.typeName = "account"
		t.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestAccount) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "account":
		return json.Marshal(t.Account)
	}
}

type TicketRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (t *TicketRequestAccount) Accept(visitor TicketRequestAccountVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "account":
		return visitor.VisitAccount(t.Account)
	}
}

type TicketRequestAssignedTeamsItem struct {
	typeName string
	String   string
	Team     *Team
}

func NewTicketRequestAssignedTeamsItemFromString(value string) *TicketRequestAssignedTeamsItem {
	return &TicketRequestAssignedTeamsItem{typeName: "string", String: value}
}

func NewTicketRequestAssignedTeamsItemFromTeam(value *Team) *TicketRequestAssignedTeamsItem {
	return &TicketRequestAssignedTeamsItem{typeName: "team", Team: value}
}

func (t *TicketRequestAssignedTeamsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueTeam := new(Team)
	if err := json.Unmarshal(data, &valueTeam); err == nil {
		t.typeName = "team"
		t.Team = valueTeam
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestAssignedTeamsItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "team":
		return json.Marshal(t.Team)
	}
}

type TicketRequestAssignedTeamsItemVisitor interface {
	VisitString(string) error
	VisitTeam(*Team) error
}

func (t *TicketRequestAssignedTeamsItem) Accept(visitor TicketRequestAssignedTeamsItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "team":
		return visitor.VisitTeam(t.Team)
	}
}

type TicketRequestAssigneesItem struct {
	typeName string
	String   string
	User     *User
}

func NewTicketRequestAssigneesItemFromString(value string) *TicketRequestAssigneesItem {
	return &TicketRequestAssigneesItem{typeName: "string", String: value}
}

func NewTicketRequestAssigneesItemFromUser(value *User) *TicketRequestAssigneesItem {
	return &TicketRequestAssigneesItem{typeName: "user", User: value}
}

func (t *TicketRequestAssigneesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typeName = "user"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestAssigneesItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "user":
		return json.Marshal(t.User)
	}
}

type TicketRequestAssigneesItemVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TicketRequestAssigneesItem) Accept(visitor TicketRequestAssigneesItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "user":
		return visitor.VisitUser(t.User)
	}
}

type TicketRequestAttachmentsItem struct {
	typeName   string
	String     string
	Attachment *Attachment
}

func NewTicketRequestAttachmentsItemFromString(value string) *TicketRequestAttachmentsItem {
	return &TicketRequestAttachmentsItem{typeName: "string", String: value}
}

func NewTicketRequestAttachmentsItemFromAttachment(value *Attachment) *TicketRequestAttachmentsItem {
	return &TicketRequestAttachmentsItem{typeName: "attachment", Attachment: value}
}

func (t *TicketRequestAttachmentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueAttachment := new(Attachment)
	if err := json.Unmarshal(data, &valueAttachment); err == nil {
		t.typeName = "attachment"
		t.Attachment = valueAttachment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestAttachmentsItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "attachment":
		return json.Marshal(t.Attachment)
	}
}

type TicketRequestAttachmentsItemVisitor interface {
	VisitString(string) error
	VisitAttachment(*Attachment) error
}

func (t *TicketRequestAttachmentsItem) Accept(visitor TicketRequestAttachmentsItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "attachment":
		return visitor.VisitAttachment(t.Attachment)
	}
}

type TicketRequestCollectionsItem struct {
	typeName   string
	String     string
	Collection *Collection
}

func NewTicketRequestCollectionsItemFromString(value string) *TicketRequestCollectionsItem {
	return &TicketRequestCollectionsItem{typeName: "string", String: value}
}

func NewTicketRequestCollectionsItemFromCollection(value *Collection) *TicketRequestCollectionsItem {
	return &TicketRequestCollectionsItem{typeName: "collection", Collection: value}
}

func (t *TicketRequestCollectionsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueCollection := new(Collection)
	if err := json.Unmarshal(data, &valueCollection); err == nil {
		t.typeName = "collection"
		t.Collection = valueCollection
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestCollectionsItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "collection":
		return json.Marshal(t.Collection)
	}
}

type TicketRequestCollectionsItemVisitor interface {
	VisitString(string) error
	VisitCollection(*Collection) error
}

func (t *TicketRequestCollectionsItem) Accept(visitor TicketRequestCollectionsItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "collection":
		return visitor.VisitCollection(t.Collection)
	}
}

// The contact associated with the ticket.
type TicketRequestContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewTicketRequestContactFromString(value string) *TicketRequestContact {
	return &TicketRequestContact{typeName: "string", String: value}
}

func NewTicketRequestContactFromContact(value *Contact) *TicketRequestContact {
	return &TicketRequestContact{typeName: "contact", Contact: value}
}

func (t *TicketRequestContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		t.typeName = "contact"
		t.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestContact) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "contact":
		return json.Marshal(t.Contact)
	}
}

type TicketRequestContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (t *TicketRequestContact) Accept(visitor TicketRequestContactVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "contact":
		return visitor.VisitContact(t.Contact)
	}
}

// The user who created this ticket.
type TicketRequestCreator struct {
	typeName string
	String   string
	User     *User
}

func NewTicketRequestCreatorFromString(value string) *TicketRequestCreator {
	return &TicketRequestCreator{typeName: "string", String: value}
}

func NewTicketRequestCreatorFromUser(value *User) *TicketRequestCreator {
	return &TicketRequestCreator{typeName: "user", User: value}
}

func (t *TicketRequestCreator) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typeName = "user"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestCreator) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "user":
		return json.Marshal(t.User)
	}
}

type TicketRequestCreatorVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TicketRequestCreator) Accept(visitor TicketRequestCreatorVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "user":
		return visitor.VisitUser(t.User)
	}
}

// The ticket's parent ticket.
type TicketRequestParentTicket struct {
	typeName string
	String   string
	Ticket   *Ticket
}

func NewTicketRequestParentTicketFromString(value string) *TicketRequestParentTicket {
	return &TicketRequestParentTicket{typeName: "string", String: value}
}

func NewTicketRequestParentTicketFromTicket(value *Ticket) *TicketRequestParentTicket {
	return &TicketRequestParentTicket{typeName: "ticket", Ticket: value}
}

func (t *TicketRequestParentTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		t.typeName = "ticket"
		t.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestParentTicket) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "ticket":
		return json.Marshal(t.Ticket)
	}
}

type TicketRequestParentTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (t *TicketRequestParentTicket) Accept(visitor TicketRequestParentTicketVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "ticket":
		return visitor.VisitTicket(t.Ticket)
	}
}

// The priority or urgency of the Ticket.
//
// - `URGENT` - URGENT
// - `HIGH` - HIGH
// - `NORMAL` - NORMAL
// - `LOW` - LOW
type TicketRequestPriority struct {
	typeName     string
	PriorityEnum PriorityEnum
	String       string
}

func NewTicketRequestPriorityFromPriorityEnum(value PriorityEnum) *TicketRequestPriority {
	return &TicketRequestPriority{typeName: "priorityEnum", PriorityEnum: value}
}

func NewTicketRequestPriorityFromString(value string) *TicketRequestPriority {
	return &TicketRequestPriority{typeName: "string", String: value}
}

func (t *TicketRequestPriority) UnmarshalJSON(data []byte) error {
	var valuePriorityEnum PriorityEnum
	if err := json.Unmarshal(data, &valuePriorityEnum); err == nil {
		t.typeName = "priorityEnum"
		t.PriorityEnum = valuePriorityEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestPriority) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "priorityEnum":
		return json.Marshal(t.PriorityEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TicketRequestPriorityVisitor interface {
	VisitPriorityEnum(PriorityEnum) error
	VisitString(string) error
}

func (t *TicketRequestPriority) Accept(visitor TicketRequestPriorityVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "priorityEnum":
		return visitor.VisitPriorityEnum(t.PriorityEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

// The current status of the ticket.
//
// - `OPEN` - OPEN
// - `CLOSED` - CLOSED
// - `IN_PROGRESS` - IN_PROGRESS
// - `ON_HOLD` - ON_HOLD
type TicketRequestStatus struct {
	typeName         string
	TicketStatusEnum TicketStatusEnum
	String           string
}

func NewTicketRequestStatusFromTicketStatusEnum(value TicketStatusEnum) *TicketRequestStatus {
	return &TicketRequestStatus{typeName: "ticketStatusEnum", TicketStatusEnum: value}
}

func NewTicketRequestStatusFromString(value string) *TicketRequestStatus {
	return &TicketRequestStatus{typeName: "string", String: value}
}

func (t *TicketRequestStatus) UnmarshalJSON(data []byte) error {
	var valueTicketStatusEnum TicketStatusEnum
	if err := json.Unmarshal(data, &valueTicketStatusEnum); err == nil {
		t.typeName = "ticketStatusEnum"
		t.TicketStatusEnum = valueTicketStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestStatus) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "ticketStatusEnum":
		return json.Marshal(t.TicketStatusEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TicketRequestStatusVisitor interface {
	VisitTicketStatusEnum(TicketStatusEnum) error
	VisitString(string) error
}

func (t *TicketRequestStatus) Accept(visitor TicketRequestStatusVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "ticketStatusEnum":
		return visitor.VisitTicketStatusEnum(t.TicketStatusEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

type TicketResponse struct {
	Model    *Ticket                     `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TicketResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TicketResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TicketResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TicketResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The current status of the ticket.
//
// - `OPEN` - OPEN
// - `CLOSED` - CLOSED
// - `IN_PROGRESS` - IN_PROGRESS
// - `ON_HOLD` - ON_HOLD
type TicketStatus struct {
	typeName         string
	TicketStatusEnum TicketStatusEnum
	String           string
}

func NewTicketStatusFromTicketStatusEnum(value TicketStatusEnum) *TicketStatus {
	return &TicketStatus{typeName: "ticketStatusEnum", TicketStatusEnum: value}
}

func NewTicketStatusFromString(value string) *TicketStatus {
	return &TicketStatus{typeName: "string", String: value}
}

func (t *TicketStatus) UnmarshalJSON(data []byte) error {
	var valueTicketStatusEnum TicketStatusEnum
	if err := json.Unmarshal(data, &valueTicketStatusEnum); err == nil {
		t.typeName = "ticketStatusEnum"
		t.TicketStatusEnum = valueTicketStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketStatus) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "ticketStatusEnum":
		return json.Marshal(t.TicketStatusEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TicketStatusVisitor interface {
	VisitTicketStatusEnum(TicketStatusEnum) error
	VisitString(string) error
}

func (t *TicketStatus) Accept(visitor TicketStatusVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "ticketStatusEnum":
		return visitor.VisitTicketStatusEnum(t.TicketStatusEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

// - `OPEN` - OPEN
// - `CLOSED` - CLOSED
// - `IN_PROGRESS` - IN_PROGRESS
// - `ON_HOLD` - ON_HOLD
type TicketStatusEnum string

const (
	TicketStatusEnumOpen       TicketStatusEnum = "OPEN"
	TicketStatusEnumClosed     TicketStatusEnum = "CLOSED"
	TicketStatusEnumInProgress TicketStatusEnum = "IN_PROGRESS"
	TicketStatusEnumOnHold     TicketStatusEnum = "ON_HOLD"
)

func NewTicketStatusEnumFromString(s string) (TicketStatusEnum, error) {
	switch s {
	case "OPEN":
		return TicketStatusEnumOpen, nil
	case "CLOSED":
		return TicketStatusEnumClosed, nil
	case "IN_PROGRESS":
		return TicketStatusEnumInProgress, nil
	case "ON_HOLD":
		return TicketStatusEnumOnHold, nil
	}
	var t TicketStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TicketStatusEnum) Ptr() *TicketStatusEnum {
	return &t
}

type TicketingAttachmentResponse struct {
	Model    *Attachment                 `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TicketingAttachmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TicketingAttachmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TicketingAttachmentResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TicketingAttachmentResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TicketingContactResponse struct {
	Model    *Contact                    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TicketingContactResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TicketingContactResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TicketingContactResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TicketingContactResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// # The User Object
//
// ### Description
//
// The `User` object is used to represent a user with a login to the ticketing system.
// Users are either assignees who are directly responsible or a viewer on a `Ticket`/ `Collection`.
//
// ### Usage Example
//
// TODO
type User struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The user's name.
	Name *string `json:"name,omitempty"`
	// The user's email address.
	EmailAddress *string `json:"email_address,omitempty"`
	// Whether or not the user is active.
	IsActive *bool            `json:"is_active,omitempty"`
	Teams    []*UserTeamsItem `json:"teams,omitempty"`
	Roles    []*UserRolesItem `json:"roles,omitempty"`
	// The user's avatar picture.
	Avatar *string `json:"avatar,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserRolesItem struct {
	typeName string
	String   string
	Role     *Role
}

func NewUserRolesItemFromString(value string) *UserRolesItem {
	return &UserRolesItem{typeName: "string", String: value}
}

func NewUserRolesItemFromRole(value *Role) *UserRolesItem {
	return &UserRolesItem{typeName: "role", Role: value}
}

func (u *UserRolesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typeName = "string"
		u.String = valueString
		return nil
	}
	valueRole := new(Role)
	if err := json.Unmarshal(data, &valueRole); err == nil {
		u.typeName = "role"
		u.Role = valueRole
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UserRolesItem) MarshalJSON() ([]byte, error) {
	switch u.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "string":
		return json.Marshal(u.String)
	case "role":
		return json.Marshal(u.Role)
	}
}

type UserRolesItemVisitor interface {
	VisitString(string) error
	VisitRole(*Role) error
}

func (u *UserRolesItem) Accept(visitor UserRolesItemVisitor) error {
	switch u.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "string":
		return visitor.VisitString(u.String)
	case "role":
		return visitor.VisitRole(u.Role)
	}
}

type UserTeamsItem struct {
	typeName string
	String   string
	Team     *Team
}

func NewUserTeamsItemFromString(value string) *UserTeamsItem {
	return &UserTeamsItem{typeName: "string", String: value}
}

func NewUserTeamsItemFromTeam(value *Team) *UserTeamsItem {
	return &UserTeamsItem{typeName: "team", Team: value}
}

func (u *UserTeamsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typeName = "string"
		u.String = valueString
		return nil
	}
	valueTeam := new(Team)
	if err := json.Unmarshal(data, &valueTeam); err == nil {
		u.typeName = "team"
		u.Team = valueTeam
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UserTeamsItem) MarshalJSON() ([]byte, error) {
	switch u.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "string":
		return json.Marshal(u.String)
	case "team":
		return json.Marshal(u.Team)
	}
}

type UserTeamsItemVisitor interface {
	VisitString(string) error
	VisitTeam(*Team) error
}

func (u *UserTeamsItem) Accept(visitor UserTeamsItemVisitor) error {
	switch u.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "string":
		return visitor.VisitString(u.String)
	case "team":
		return visitor.VisitTeam(u.Team)
	}
}

type ValidationProblemSource struct {
	Pointer string `json:"pointer"`

	_rawJSON json.RawMessage
}

func (v *ValidationProblemSource) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidationProblemSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidationProblemSource(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidationProblemSource) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// # The Viewer Object
//
// ### Description
//
// The `Viewer` object is used to represent a User or Team within a company.
//
// ### Usage Example
//
// TODO
type Viewer struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The Team this Viewer belongs to.
	Team *ViewerTeam `json:"team,omitempty"`
	// The User this Viewer belongs to.
	User *ViewerUser `json:"user,omitempty"`

	_rawJSON json.RawMessage
}

func (v *Viewer) UnmarshalJSON(data []byte) error {
	type unmarshaler Viewer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = Viewer(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *Viewer) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// The Team this Viewer belongs to.
type ViewerTeam struct {
	typeName string
	String   string
	Team     *Team
}

func NewViewerTeamFromString(value string) *ViewerTeam {
	return &ViewerTeam{typeName: "string", String: value}
}

func NewViewerTeamFromTeam(value *Team) *ViewerTeam {
	return &ViewerTeam{typeName: "team", Team: value}
}

func (v *ViewerTeam) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typeName = "string"
		v.String = valueString
		return nil
	}
	valueTeam := new(Team)
	if err := json.Unmarshal(data, &valueTeam); err == nil {
		v.typeName = "team"
		v.Team = valueTeam
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v ViewerTeam) MarshalJSON() ([]byte, error) {
	switch v.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return json.Marshal(v.String)
	case "team":
		return json.Marshal(v.Team)
	}
}

type ViewerTeamVisitor interface {
	VisitString(string) error
	VisitTeam(*Team) error
}

func (v *ViewerTeam) Accept(visitor ViewerTeamVisitor) error {
	switch v.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return visitor.VisitString(v.String)
	case "team":
		return visitor.VisitTeam(v.Team)
	}
}

// The User this Viewer belongs to.
type ViewerUser struct {
	typeName string
	String   string
	User     *User
}

func NewViewerUserFromString(value string) *ViewerUser {
	return &ViewerUser{typeName: "string", String: value}
}

func NewViewerUserFromUser(value *User) *ViewerUser {
	return &ViewerUser{typeName: "user", User: value}
}

func (v *ViewerUser) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typeName = "string"
		v.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		v.typeName = "user"
		v.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v ViewerUser) MarshalJSON() ([]byte, error) {
	switch v.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return json.Marshal(v.String)
	case "user":
		return json.Marshal(v.User)
	}
}

type ViewerUserVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (v *ViewerUser) Accept(visitor ViewerUserVisitor) error {
	switch v.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return visitor.VisitString(v.String)
	case "user":
		return visitor.VisitUser(v.User)
	}
}

type WarningValidationProblem struct {
	Source      *ValidationProblemSource `json:"source,omitempty"`
	Title       string                   `json:"title"`
	Detail      string                   `json:"detail"`
	ProblemType string                   `json:"problem_type"`

	_rawJSON json.RawMessage
}

func (w *WarningValidationProblem) UnmarshalJSON(data []byte) error {
	type unmarshaler WarningValidationProblem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WarningValidationProblem(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WarningValidationProblem) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookReceiver struct {
	Event    string  `json:"event"`
	IsActive bool    `json:"is_active"`
	Key      *string `json:"key,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WebhookReceiver) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookReceiver
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhookReceiver(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookReceiver) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
