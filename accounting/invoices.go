// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type InvoiceEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool           `json:"-" url:"run_async,omitempty"`
	Model    *InvoiceRequest `json:"model,omitempty" url:"-"`
}

type InvoicesLineItemsRemoteFieldClassesListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return remote field classes with this is_common_model_field value
	IsCommonModelField *bool `json:"-" url:"is_common_model_field,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type InvoicesListRequest struct {
	// If provided, will only return invoices for this company.
	CompanyId *string `json:"-" url:"company_id,omitempty"`
	// If provided, will only return invoices for this contact.
	ContactId *string `json:"-" url:"contact_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*InvoicesListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return objects created after this datetime.
	IssueDateAfter *time.Time `json:"-" url:"issue_date_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	IssueDateBefore *time.Time `json:"-" url:"issue_date_before,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// If provided, will only return Invoices with this number.
	Number *string `json:"-" url:"number,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
	// If provided, will only return Invoices with this status.
	//
	// * `PAID` - PAID
	// * `DRAFT` - DRAFT
	// * `SUBMITTED` - SUBMITTED
	// * `PARTIALLY_PAID` - PARTIALLY_PAID
	// * `OPEN` - OPEN
	// * `VOID` - VOID
	Status *InvoicesListRequestStatus `json:"-" url:"status,omitempty"`
	// If provided, will only return Invoices with this type.
	//
	// * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
	// * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
	Type *InvoicesListRequestType `json:"-" url:"type,omitempty"`
}

type PatchedInvoiceEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool           `json:"-" url:"run_async,omitempty"`
	Model    *InvoiceRequest `json:"model,omitempty" url:"-"`
}

type InvoicesRemoteFieldClassesListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return remote field classes with this is_common_model_field value
	IsCommonModelField *bool `json:"-" url:"is_common_model_field,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type InvoicesRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*InvoicesRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type InvoicesListRequestExpandItem string

const (
	InvoicesListRequestExpandItemAccountingPeriod     InvoicesListRequestExpandItem = "accounting_period"
	InvoicesListRequestExpandItemAppliedCreditNotes   InvoicesListRequestExpandItem = "applied_credit_notes"
	InvoicesListRequestExpandItemAppliedPayments      InvoicesListRequestExpandItem = "applied_payments"
	InvoicesListRequestExpandItemAppliedVendorCredits InvoicesListRequestExpandItem = "applied_vendor_credits"
	InvoicesListRequestExpandItemCompany              InvoicesListRequestExpandItem = "company"
	InvoicesListRequestExpandItemContact              InvoicesListRequestExpandItem = "contact"
	InvoicesListRequestExpandItemEmployee             InvoicesListRequestExpandItem = "employee"
	InvoicesListRequestExpandItemLineItems            InvoicesListRequestExpandItem = "line_items"
	InvoicesListRequestExpandItemPaymentTerm          InvoicesListRequestExpandItem = "payment_term"
	InvoicesListRequestExpandItemPayments             InvoicesListRequestExpandItem = "payments"
	InvoicesListRequestExpandItemPurchaseOrders       InvoicesListRequestExpandItem = "purchase_orders"
	InvoicesListRequestExpandItemTrackingCategories   InvoicesListRequestExpandItem = "tracking_categories"
)

func NewInvoicesListRequestExpandItemFromString(s string) (InvoicesListRequestExpandItem, error) {
	switch s {
	case "accounting_period":
		return InvoicesListRequestExpandItemAccountingPeriod, nil
	case "applied_credit_notes":
		return InvoicesListRequestExpandItemAppliedCreditNotes, nil
	case "applied_payments":
		return InvoicesListRequestExpandItemAppliedPayments, nil
	case "applied_vendor_credits":
		return InvoicesListRequestExpandItemAppliedVendorCredits, nil
	case "company":
		return InvoicesListRequestExpandItemCompany, nil
	case "contact":
		return InvoicesListRequestExpandItemContact, nil
	case "employee":
		return InvoicesListRequestExpandItemEmployee, nil
	case "line_items":
		return InvoicesListRequestExpandItemLineItems, nil
	case "payment_term":
		return InvoicesListRequestExpandItemPaymentTerm, nil
	case "payments":
		return InvoicesListRequestExpandItemPayments, nil
	case "purchase_orders":
		return InvoicesListRequestExpandItemPurchaseOrders, nil
	case "tracking_categories":
		return InvoicesListRequestExpandItemTrackingCategories, nil
	}
	var t InvoicesListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InvoicesListRequestExpandItem) Ptr() *InvoicesListRequestExpandItem {
	return &i
}

type InvoicesListRequestStatus string

const (
	InvoicesListRequestStatusDraft         InvoicesListRequestStatus = "DRAFT"
	InvoicesListRequestStatusOpen          InvoicesListRequestStatus = "OPEN"
	InvoicesListRequestStatusPaid          InvoicesListRequestStatus = "PAID"
	InvoicesListRequestStatusPartiallyPaid InvoicesListRequestStatus = "PARTIALLY_PAID"
	InvoicesListRequestStatusSubmitted     InvoicesListRequestStatus = "SUBMITTED"
	InvoicesListRequestStatusVoid          InvoicesListRequestStatus = "VOID"
)

func NewInvoicesListRequestStatusFromString(s string) (InvoicesListRequestStatus, error) {
	switch s {
	case "DRAFT":
		return InvoicesListRequestStatusDraft, nil
	case "OPEN":
		return InvoicesListRequestStatusOpen, nil
	case "PAID":
		return InvoicesListRequestStatusPaid, nil
	case "PARTIALLY_PAID":
		return InvoicesListRequestStatusPartiallyPaid, nil
	case "SUBMITTED":
		return InvoicesListRequestStatusSubmitted, nil
	case "VOID":
		return InvoicesListRequestStatusVoid, nil
	}
	var t InvoicesListRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InvoicesListRequestStatus) Ptr() *InvoicesListRequestStatus {
	return &i
}

type InvoicesListRequestType string

const (
	InvoicesListRequestTypeAccountsPayable    InvoicesListRequestType = "ACCOUNTS_PAYABLE"
	InvoicesListRequestTypeAccountsReceivable InvoicesListRequestType = "ACCOUNTS_RECEIVABLE"
)

func NewInvoicesListRequestTypeFromString(s string) (InvoicesListRequestType, error) {
	switch s {
	case "ACCOUNTS_PAYABLE":
		return InvoicesListRequestTypeAccountsPayable, nil
	case "ACCOUNTS_RECEIVABLE":
		return InvoicesListRequestTypeAccountsReceivable, nil
	}
	var t InvoicesListRequestType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InvoicesListRequestType) Ptr() *InvoicesListRequestType {
	return &i
}

type InvoicesRetrieveRequestExpandItem string

const (
	InvoicesRetrieveRequestExpandItemAccountingPeriod     InvoicesRetrieveRequestExpandItem = "accounting_period"
	InvoicesRetrieveRequestExpandItemAppliedCreditNotes   InvoicesRetrieveRequestExpandItem = "applied_credit_notes"
	InvoicesRetrieveRequestExpandItemAppliedPayments      InvoicesRetrieveRequestExpandItem = "applied_payments"
	InvoicesRetrieveRequestExpandItemAppliedVendorCredits InvoicesRetrieveRequestExpandItem = "applied_vendor_credits"
	InvoicesRetrieveRequestExpandItemCompany              InvoicesRetrieveRequestExpandItem = "company"
	InvoicesRetrieveRequestExpandItemContact              InvoicesRetrieveRequestExpandItem = "contact"
	InvoicesRetrieveRequestExpandItemEmployee             InvoicesRetrieveRequestExpandItem = "employee"
	InvoicesRetrieveRequestExpandItemLineItems            InvoicesRetrieveRequestExpandItem = "line_items"
	InvoicesRetrieveRequestExpandItemPaymentTerm          InvoicesRetrieveRequestExpandItem = "payment_term"
	InvoicesRetrieveRequestExpandItemPayments             InvoicesRetrieveRequestExpandItem = "payments"
	InvoicesRetrieveRequestExpandItemPurchaseOrders       InvoicesRetrieveRequestExpandItem = "purchase_orders"
	InvoicesRetrieveRequestExpandItemTrackingCategories   InvoicesRetrieveRequestExpandItem = "tracking_categories"
)

func NewInvoicesRetrieveRequestExpandItemFromString(s string) (InvoicesRetrieveRequestExpandItem, error) {
	switch s {
	case "accounting_period":
		return InvoicesRetrieveRequestExpandItemAccountingPeriod, nil
	case "applied_credit_notes":
		return InvoicesRetrieveRequestExpandItemAppliedCreditNotes, nil
	case "applied_payments":
		return InvoicesRetrieveRequestExpandItemAppliedPayments, nil
	case "applied_vendor_credits":
		return InvoicesRetrieveRequestExpandItemAppliedVendorCredits, nil
	case "company":
		return InvoicesRetrieveRequestExpandItemCompany, nil
	case "contact":
		return InvoicesRetrieveRequestExpandItemContact, nil
	case "employee":
		return InvoicesRetrieveRequestExpandItemEmployee, nil
	case "line_items":
		return InvoicesRetrieveRequestExpandItemLineItems, nil
	case "payment_term":
		return InvoicesRetrieveRequestExpandItemPaymentTerm, nil
	case "payments":
		return InvoicesRetrieveRequestExpandItemPayments, nil
	case "purchase_orders":
		return InvoicesRetrieveRequestExpandItemPurchaseOrders, nil
	case "tracking_categories":
		return InvoicesRetrieveRequestExpandItemTrackingCategories, nil
	}
	var t InvoicesRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InvoicesRetrieveRequestExpandItem) Ptr() *InvoicesRetrieveRequestExpandItem {
	return &i
}

// # The InvoiceLineItem Object
// ### Description
// The `InvoiceLineItem` object represents an itemized record of goods and/or services sold to a customer.
//
// ### Usage Example
// Fetch from the `GET Invoice` endpoint and view the invoice's line items.
type InvoiceLineItemRequest struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The line item's description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The line item's unit price.
	UnitPrice *float64 `json:"unit_price,omitempty" url:"unit_price,omitempty"`
	// The line item's quantity.
	Quantity *float64 `json:"quantity,omitempty" url:"quantity,omitempty"`
	// The line item's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty" url:"total_amount,omitempty"`
	// The employee this overall transaction relates to.
	Employee *InvoiceLineItemRequestEmployee `json:"employee,omitempty" url:"employee,omitempty"`
	// The line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *TransactionCurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`
	// The line item's exchange rate.
	ExchangeRate *string                        `json:"exchange_rate,omitempty" url:"exchange_rate,omitempty"`
	Item         *InvoiceLineItemRequestItem    `json:"item,omitempty" url:"item,omitempty"`
	Account      *InvoiceLineItemRequestAccount `json:"account,omitempty" url:"account,omitempty"`
	// The tax rate that applies to this line item.
	TaxRate          *string                                 `json:"tax_rate,omitempty" url:"tax_rate,omitempty"`
	TrackingCategory *InvoiceLineItemRequestTrackingCategory `json:"tracking_category,omitempty" url:"tracking_category,omitempty"`
	// The invoice line item's associated tracking categories.
	TrackingCategories []*InvoiceLineItemRequestTrackingCategoriesItem `json:"tracking_categories,omitempty" url:"tracking_categories,omitempty"`
	// The company the invoice belongs to.
	Company             *string                `json:"company,omitempty" url:"company,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceLineItemRequest) GetRemoteId() *string {
	if i == nil {
		return nil
	}
	return i.RemoteId
}

func (i *InvoiceLineItemRequest) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

func (i *InvoiceLineItemRequest) GetUnitPrice() *float64 {
	if i == nil {
		return nil
	}
	return i.UnitPrice
}

func (i *InvoiceLineItemRequest) GetQuantity() *float64 {
	if i == nil {
		return nil
	}
	return i.Quantity
}

func (i *InvoiceLineItemRequest) GetTotalAmount() *float64 {
	if i == nil {
		return nil
	}
	return i.TotalAmount
}

func (i *InvoiceLineItemRequest) GetEmployee() *InvoiceLineItemRequestEmployee {
	if i == nil {
		return nil
	}
	return i.Employee
}

func (i *InvoiceLineItemRequest) GetCurrency() *TransactionCurrencyEnum {
	if i == nil {
		return nil
	}
	return i.Currency
}

func (i *InvoiceLineItemRequest) GetExchangeRate() *string {
	if i == nil {
		return nil
	}
	return i.ExchangeRate
}

func (i *InvoiceLineItemRequest) GetItem() *InvoiceLineItemRequestItem {
	if i == nil {
		return nil
	}
	return i.Item
}

func (i *InvoiceLineItemRequest) GetAccount() *InvoiceLineItemRequestAccount {
	if i == nil {
		return nil
	}
	return i.Account
}

func (i *InvoiceLineItemRequest) GetTaxRate() *string {
	if i == nil {
		return nil
	}
	return i.TaxRate
}

func (i *InvoiceLineItemRequest) GetTrackingCategory() *InvoiceLineItemRequestTrackingCategory {
	if i == nil {
		return nil
	}
	return i.TrackingCategory
}

func (i *InvoiceLineItemRequest) GetTrackingCategories() []*InvoiceLineItemRequestTrackingCategoriesItem {
	if i == nil {
		return nil
	}
	return i.TrackingCategories
}

func (i *InvoiceLineItemRequest) GetCompany() *string {
	if i == nil {
		return nil
	}
	return i.Company
}

func (i *InvoiceLineItemRequest) GetIntegrationParams() map[string]interface{} {
	if i == nil {
		return nil
	}
	return i.IntegrationParams
}

func (i *InvoiceLineItemRequest) GetLinkedAccountParams() map[string]interface{} {
	if i == nil {
		return nil
	}
	return i.LinkedAccountParams
}

func (i *InvoiceLineItemRequest) GetRemoteFields() []*RemoteFieldRequest {
	if i == nil {
		return nil
	}
	return i.RemoteFields
}

func (i *InvoiceLineItemRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceLineItemRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceLineItemRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceLineItemRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceLineItemRequest) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InvoiceLineItemRequestAccount struct {
	String  string
	Account *Account

	typ string
}

func (i *InvoiceLineItemRequestAccount) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *InvoiceLineItemRequestAccount) GetAccount() *Account {
	if i == nil {
		return nil
	}
	return i.Account
}

func (i *InvoiceLineItemRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		i.typ = "Account"
		i.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemRequestAccount) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "Account" || i.Account != nil {
		return json.Marshal(i.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceLineItemRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (i *InvoiceLineItemRequestAccount) Accept(visitor InvoiceLineItemRequestAccountVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "Account" || i.Account != nil {
		return visitor.VisitAccount(i.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// The employee this overall transaction relates to.
type InvoiceLineItemRequestEmployee struct {
	String   string
	Employee *Employee

	typ string
}

func (i *InvoiceLineItemRequestEmployee) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *InvoiceLineItemRequestEmployee) GetEmployee() *Employee {
	if i == nil {
		return nil
	}
	return i.Employee
}

func (i *InvoiceLineItemRequestEmployee) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		i.typ = "Employee"
		i.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemRequestEmployee) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "Employee" || i.Employee != nil {
		return json.Marshal(i.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceLineItemRequestEmployeeVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (i *InvoiceLineItemRequestEmployee) Accept(visitor InvoiceLineItemRequestEmployeeVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "Employee" || i.Employee != nil {
		return visitor.VisitEmployee(i.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceLineItemRequestItem struct {
	String string
	Item   *Item

	typ string
}

func (i *InvoiceLineItemRequestItem) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *InvoiceLineItemRequestItem) GetItem() *Item {
	if i == nil {
		return nil
	}
	return i.Item
}

func (i *InvoiceLineItemRequestItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueItem := new(Item)
	if err := json.Unmarshal(data, &valueItem); err == nil {
		i.typ = "Item"
		i.Item = valueItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemRequestItem) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "Item" || i.Item != nil {
		return json.Marshal(i.Item)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceLineItemRequestItemVisitor interface {
	VisitString(string) error
	VisitItem(*Item) error
}

func (i *InvoiceLineItemRequestItem) Accept(visitor InvoiceLineItemRequestItemVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "Item" || i.Item != nil {
		return visitor.VisitItem(i.Item)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceLineItemRequestTrackingCategoriesItem struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (i *InvoiceLineItemRequestTrackingCategoriesItem) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *InvoiceLineItemRequestTrackingCategoriesItem) GetTrackingCategory() *TrackingCategory {
	if i == nil {
		return nil
	}
	return i.TrackingCategory
}

func (i *InvoiceLineItemRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		i.typ = "TrackingCategory"
		i.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "TrackingCategory" || i.TrackingCategory != nil {
		return json.Marshal(i.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceLineItemRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (i *InvoiceLineItemRequestTrackingCategoriesItem) Accept(visitor InvoiceLineItemRequestTrackingCategoriesItemVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "TrackingCategory" || i.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(i.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceLineItemRequestTrackingCategory struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (i *InvoiceLineItemRequestTrackingCategory) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *InvoiceLineItemRequestTrackingCategory) GetTrackingCategory() *TrackingCategory {
	if i == nil {
		return nil
	}
	return i.TrackingCategory
}

func (i *InvoiceLineItemRequestTrackingCategory) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		i.typ = "TrackingCategory"
		i.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemRequestTrackingCategory) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "TrackingCategory" || i.TrackingCategory != nil {
		return json.Marshal(i.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceLineItemRequestTrackingCategoryVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (i *InvoiceLineItemRequestTrackingCategory) Accept(visitor InvoiceLineItemRequestTrackingCategoryVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "TrackingCategory" || i.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(i.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// # The Invoice Object
// ### Description
// The `Invoice` object represents an itemized record of goods and/or services sold to a customer or bought from a vendor.
//
// Represents a Bill when the `Invoice` type is `ACCOUNTS_PAYABLE`. References an Invoice when the `Invoice` type is `ACCOUNTS_RECEIVABLE`.
//
// ### Usage Example
// Fetch from the `LIST Invoices` endpoint and view a company's invoices.
type InvoiceRequest struct {
	// Whether the invoice is an accounts receivable or accounts payable. If `type` is `ACCOUNTS_PAYABLE`, the invoice is a bill. If `type` is `ACCOUNTS_RECEIVABLE`, it is an invoice.
	//
	// * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
	// * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
	Type *InvoiceTypeEnum `json:"type,omitempty" url:"type,omitempty"`
	// The invoice's contact.
	Contact *InvoiceRequestContact `json:"contact,omitempty" url:"contact,omitempty"`
	// The invoice's number.
	Number *string `json:"number,omitempty" url:"number,omitempty"`
	// The invoice's issue date.
	IssueDate *time.Time `json:"issue_date,omitempty" url:"issue_date,omitempty"`
	// The invoice's due date.
	DueDate *time.Time `json:"due_date,omitempty" url:"due_date,omitempty"`
	// The invoice's paid date.
	PaidOnDate *time.Time `json:"paid_on_date,omitempty" url:"paid_on_date,omitempty"`
	// The employee this overall transaction relates to.
	Employee *InvoiceRequestEmployee `json:"employee,omitempty" url:"employee,omitempty"`
	// The invoice's private note.
	Memo *string `json:"memo,omitempty" url:"memo,omitempty"`
	// The status of the invoice.
	//
	// * `PAID` - PAID
	// * `DRAFT` - DRAFT
	// * `SUBMITTED` - SUBMITTED
	// * `PARTIALLY_PAID` - PARTIALLY_PAID
	// * `OPEN` - OPEN
	// * `VOID` - VOID
	Status *InvoiceStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The company the invoice belongs to.
	Company *InvoiceRequestCompany `json:"company,omitempty" url:"company,omitempty"`
	// The invoice's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *TransactionCurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`
	// The invoice's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty" url:"exchange_rate,omitempty"`
	// The total discounts applied to the total cost.
	TotalDiscount *float64 `json:"total_discount,omitempty" url:"total_discount,omitempty"`
	// The total amount being paid before taxes.
	SubTotal *float64 `json:"sub_total,omitempty" url:"sub_total,omitempty"`
	// The payment term that applies to this transaction.
	PaymentTerm *InvoiceRequestPaymentTerm `json:"payment_term,omitempty" url:"payment_term,omitempty"`
	// The total amount being paid in taxes.
	TotalTaxAmount *float64 `json:"total_tax_amount,omitempty" url:"total_tax_amount,omitempty"`
	// If the transaction is inclusive or exclusive of tax. `True` if inclusive, `False` if exclusive.
	InclusiveOfTax *bool `json:"inclusive_of_tax,omitempty" url:"inclusive_of_tax,omitempty"`
	// The invoice's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty" url:"total_amount,omitempty"`
	// The invoice's remaining balance.
	Balance *float64 `json:"balance,omitempty" url:"balance,omitempty"`
	// Array of `Payment` object IDs.
	Payments            []*InvoiceRequestPaymentsItem           `json:"payments,omitempty" url:"payments,omitempty"`
	TrackingCategories  []*InvoiceRequestTrackingCategoriesItem `json:"tracking_categories,omitempty" url:"tracking_categories,omitempty"`
	LineItems           []*InvoiceLineItemRequest               `json:"line_items,omitempty" url:"line_items,omitempty"`
	PurchaseOrders      []*InvoiceRequestPurchaseOrdersItem     `json:"purchase_orders,omitempty" url:"purchase_orders,omitempty"`
	IntegrationParams   map[string]interface{}                  `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}                  `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest                   `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceRequest) GetType() *InvoiceTypeEnum {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *InvoiceRequest) GetContact() *InvoiceRequestContact {
	if i == nil {
		return nil
	}
	return i.Contact
}

func (i *InvoiceRequest) GetNumber() *string {
	if i == nil {
		return nil
	}
	return i.Number
}

func (i *InvoiceRequest) GetIssueDate() *time.Time {
	if i == nil {
		return nil
	}
	return i.IssueDate
}

func (i *InvoiceRequest) GetDueDate() *time.Time {
	if i == nil {
		return nil
	}
	return i.DueDate
}

func (i *InvoiceRequest) GetPaidOnDate() *time.Time {
	if i == nil {
		return nil
	}
	return i.PaidOnDate
}

func (i *InvoiceRequest) GetEmployee() *InvoiceRequestEmployee {
	if i == nil {
		return nil
	}
	return i.Employee
}

func (i *InvoiceRequest) GetMemo() *string {
	if i == nil {
		return nil
	}
	return i.Memo
}

func (i *InvoiceRequest) GetStatus() *InvoiceStatusEnum {
	if i == nil {
		return nil
	}
	return i.Status
}

func (i *InvoiceRequest) GetCompany() *InvoiceRequestCompany {
	if i == nil {
		return nil
	}
	return i.Company
}

func (i *InvoiceRequest) GetCurrency() *TransactionCurrencyEnum {
	if i == nil {
		return nil
	}
	return i.Currency
}

func (i *InvoiceRequest) GetExchangeRate() *string {
	if i == nil {
		return nil
	}
	return i.ExchangeRate
}

func (i *InvoiceRequest) GetTotalDiscount() *float64 {
	if i == nil {
		return nil
	}
	return i.TotalDiscount
}

func (i *InvoiceRequest) GetSubTotal() *float64 {
	if i == nil {
		return nil
	}
	return i.SubTotal
}

func (i *InvoiceRequest) GetPaymentTerm() *InvoiceRequestPaymentTerm {
	if i == nil {
		return nil
	}
	return i.PaymentTerm
}

func (i *InvoiceRequest) GetTotalTaxAmount() *float64 {
	if i == nil {
		return nil
	}
	return i.TotalTaxAmount
}

func (i *InvoiceRequest) GetInclusiveOfTax() *bool {
	if i == nil {
		return nil
	}
	return i.InclusiveOfTax
}

func (i *InvoiceRequest) GetTotalAmount() *float64 {
	if i == nil {
		return nil
	}
	return i.TotalAmount
}

func (i *InvoiceRequest) GetBalance() *float64 {
	if i == nil {
		return nil
	}
	return i.Balance
}

func (i *InvoiceRequest) GetPayments() []*InvoiceRequestPaymentsItem {
	if i == nil {
		return nil
	}
	return i.Payments
}

func (i *InvoiceRequest) GetTrackingCategories() []*InvoiceRequestTrackingCategoriesItem {
	if i == nil {
		return nil
	}
	return i.TrackingCategories
}

func (i *InvoiceRequest) GetLineItems() []*InvoiceLineItemRequest {
	if i == nil {
		return nil
	}
	return i.LineItems
}

func (i *InvoiceRequest) GetPurchaseOrders() []*InvoiceRequestPurchaseOrdersItem {
	if i == nil {
		return nil
	}
	return i.PurchaseOrders
}

func (i *InvoiceRequest) GetIntegrationParams() map[string]interface{} {
	if i == nil {
		return nil
	}
	return i.IntegrationParams
}

func (i *InvoiceRequest) GetLinkedAccountParams() map[string]interface{} {
	if i == nil {
		return nil
	}
	return i.LinkedAccountParams
}

func (i *InvoiceRequest) GetRemoteFields() []*RemoteFieldRequest {
	if i == nil {
		return nil
	}
	return i.RemoteFields
}

func (i *InvoiceRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceRequest) UnmarshalJSON(data []byte) error {
	type embed InvoiceRequest
	var unmarshaler = struct {
		embed
		IssueDate  *internal.DateTime `json:"issue_date,omitempty"`
		DueDate    *internal.DateTime `json:"due_date,omitempty"`
		PaidOnDate *internal.DateTime `json:"paid_on_date,omitempty"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = InvoiceRequest(unmarshaler.embed)
	i.IssueDate = unmarshaler.IssueDate.TimePtr()
	i.DueDate = unmarshaler.DueDate.TimePtr()
	i.PaidOnDate = unmarshaler.PaidOnDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceRequest) MarshalJSON() ([]byte, error) {
	type embed InvoiceRequest
	var marshaler = struct {
		embed
		IssueDate  *internal.DateTime `json:"issue_date,omitempty"`
		DueDate    *internal.DateTime `json:"due_date,omitempty"`
		PaidOnDate *internal.DateTime `json:"paid_on_date,omitempty"`
	}{
		embed:      embed(*i),
		IssueDate:  internal.NewOptionalDateTime(i.IssueDate),
		DueDate:    internal.NewOptionalDateTime(i.DueDate),
		PaidOnDate: internal.NewOptionalDateTime(i.PaidOnDate),
	}
	return json.Marshal(marshaler)
}

func (i *InvoiceRequest) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// The company the invoice belongs to.
type InvoiceRequestCompany struct {
	String      string
	CompanyInfo *CompanyInfo

	typ string
}

func (i *InvoiceRequestCompany) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *InvoiceRequestCompany) GetCompanyInfo() *CompanyInfo {
	if i == nil {
		return nil
	}
	return i.CompanyInfo
}

func (i *InvoiceRequestCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		i.typ = "CompanyInfo"
		i.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestCompany) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "CompanyInfo" || i.CompanyInfo != nil {
		return json.Marshal(i.CompanyInfo)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceRequestCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (i *InvoiceRequestCompany) Accept(visitor InvoiceRequestCompanyVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "CompanyInfo" || i.CompanyInfo != nil {
		return visitor.VisitCompanyInfo(i.CompanyInfo)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// The invoice's contact.
type InvoiceRequestContact struct {
	String  string
	Contact *Contact

	typ string
}

func (i *InvoiceRequestContact) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *InvoiceRequestContact) GetContact() *Contact {
	if i == nil {
		return nil
	}
	return i.Contact
}

func (i *InvoiceRequestContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		i.typ = "Contact"
		i.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestContact) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "Contact" || i.Contact != nil {
		return json.Marshal(i.Contact)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceRequestContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (i *InvoiceRequestContact) Accept(visitor InvoiceRequestContactVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "Contact" || i.Contact != nil {
		return visitor.VisitContact(i.Contact)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// The employee this overall transaction relates to.
type InvoiceRequestEmployee struct {
	String   string
	Employee *Employee

	typ string
}

func (i *InvoiceRequestEmployee) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *InvoiceRequestEmployee) GetEmployee() *Employee {
	if i == nil {
		return nil
	}
	return i.Employee
}

func (i *InvoiceRequestEmployee) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		i.typ = "Employee"
		i.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestEmployee) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "Employee" || i.Employee != nil {
		return json.Marshal(i.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceRequestEmployeeVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (i *InvoiceRequestEmployee) Accept(visitor InvoiceRequestEmployeeVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "Employee" || i.Employee != nil {
		return visitor.VisitEmployee(i.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// The payment term that applies to this transaction.
type InvoiceRequestPaymentTerm struct {
	String      string
	PaymentTerm *PaymentTerm

	typ string
}

func (i *InvoiceRequestPaymentTerm) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *InvoiceRequestPaymentTerm) GetPaymentTerm() *PaymentTerm {
	if i == nil {
		return nil
	}
	return i.PaymentTerm
}

func (i *InvoiceRequestPaymentTerm) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valuePaymentTerm := new(PaymentTerm)
	if err := json.Unmarshal(data, &valuePaymentTerm); err == nil {
		i.typ = "PaymentTerm"
		i.PaymentTerm = valuePaymentTerm
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestPaymentTerm) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "PaymentTerm" || i.PaymentTerm != nil {
		return json.Marshal(i.PaymentTerm)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceRequestPaymentTermVisitor interface {
	VisitString(string) error
	VisitPaymentTerm(*PaymentTerm) error
}

func (i *InvoiceRequestPaymentTerm) Accept(visitor InvoiceRequestPaymentTermVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "PaymentTerm" || i.PaymentTerm != nil {
		return visitor.VisitPaymentTerm(i.PaymentTerm)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceRequestPaymentsItem struct {
	String  string
	Payment *Payment

	typ string
}

func (i *InvoiceRequestPaymentsItem) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *InvoiceRequestPaymentsItem) GetPayment() *Payment {
	if i == nil {
		return nil
	}
	return i.Payment
}

func (i *InvoiceRequestPaymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valuePayment := new(Payment)
	if err := json.Unmarshal(data, &valuePayment); err == nil {
		i.typ = "Payment"
		i.Payment = valuePayment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestPaymentsItem) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "Payment" || i.Payment != nil {
		return json.Marshal(i.Payment)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceRequestPaymentsItemVisitor interface {
	VisitString(string) error
	VisitPayment(*Payment) error
}

func (i *InvoiceRequestPaymentsItem) Accept(visitor InvoiceRequestPaymentsItemVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "Payment" || i.Payment != nil {
		return visitor.VisitPayment(i.Payment)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceRequestPurchaseOrdersItem struct {
	String        string
	PurchaseOrder *PurchaseOrder

	typ string
}

func (i *InvoiceRequestPurchaseOrdersItem) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *InvoiceRequestPurchaseOrdersItem) GetPurchaseOrder() *PurchaseOrder {
	if i == nil {
		return nil
	}
	return i.PurchaseOrder
}

func (i *InvoiceRequestPurchaseOrdersItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valuePurchaseOrder := new(PurchaseOrder)
	if err := json.Unmarshal(data, &valuePurchaseOrder); err == nil {
		i.typ = "PurchaseOrder"
		i.PurchaseOrder = valuePurchaseOrder
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestPurchaseOrdersItem) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "PurchaseOrder" || i.PurchaseOrder != nil {
		return json.Marshal(i.PurchaseOrder)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceRequestPurchaseOrdersItemVisitor interface {
	VisitString(string) error
	VisitPurchaseOrder(*PurchaseOrder) error
}

func (i *InvoiceRequestPurchaseOrdersItem) Accept(visitor InvoiceRequestPurchaseOrdersItemVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "PurchaseOrder" || i.PurchaseOrder != nil {
		return visitor.VisitPurchaseOrder(i.PurchaseOrder)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceRequestTrackingCategoriesItem struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (i *InvoiceRequestTrackingCategoriesItem) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *InvoiceRequestTrackingCategoriesItem) GetTrackingCategory() *TrackingCategory {
	if i == nil {
		return nil
	}
	return i.TrackingCategory
}

func (i *InvoiceRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		i.typ = "TrackingCategory"
		i.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "TrackingCategory" || i.TrackingCategory != nil {
		return json.Marshal(i.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (i *InvoiceRequestTrackingCategoriesItem) Accept(visitor InvoiceRequestTrackingCategoriesItemVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "TrackingCategory" || i.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(i.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InvoiceResponse struct {
	Model    *Invoice                    `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceResponse) GetModel() *Invoice {
	if i == nil {
		return nil
	}
	return i.Model
}

func (i *InvoiceResponse) GetWarnings() []*WarningValidationProblem {
	if i == nil {
		return nil
	}
	return i.Warnings
}

func (i *InvoiceResponse) GetErrors() []*ErrorValidationProblem {
	if i == nil {
		return nil
	}
	return i.Errors
}

func (i *InvoiceResponse) GetLogs() []*DebugModeLog {
	if i == nil {
		return nil
	}
	return i.Logs
}

func (i *InvoiceResponse) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceResponse) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type PaginatedInvoiceList struct {
	Next     *string    `json:"next,omitempty" url:"next,omitempty"`
	Previous *string    `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Invoice `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedInvoiceList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedInvoiceList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedInvoiceList) GetResults() []*Invoice {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedInvoiceList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedInvoiceList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedInvoiceList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedInvoiceList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedInvoiceList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
