// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type AccountEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool           `json:"-" url:"run_async,omitempty"`
	Model    *AccountRequest `json:"model,omitempty" url:"-"`
}

type AccountsListRequest struct {
	// If provided, will only return accounts with the passed in enum.
	AccountType *string `json:"-" url:"account_type,omitempty"`
	// If provided, will only return accounts with this classification.
	Classification *string `json:"-" url:"classification,omitempty"`
	// If provided, will only return accounts for this company.
	CompanyId *string `json:"-" url:"company_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// If provided, will only return Accounts with this name.
	Name *string `json:"-" url:"name,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *AccountsListRequestRemoteFields `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *AccountsListRequestShowEnumOrigins `json:"-" url:"show_enum_origins,omitempty"`
	// If provided, will only return accounts with this status.
	Status *string `json:"-" url:"status,omitempty"`
}

type AccountsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *AccountsRetrieveRequestRemoteFields `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *AccountsRetrieveRequestShowEnumOrigins `json:"-" url:"show_enum_origins,omitempty"`
}

type AccountsListRequestRemoteFields string

const (
	AccountsListRequestRemoteFieldsClassification       AccountsListRequestRemoteFields = "classification"
	AccountsListRequestRemoteFieldsClassificationStatus AccountsListRequestRemoteFields = "classification,status"
	AccountsListRequestRemoteFieldsStatus               AccountsListRequestRemoteFields = "status"
)

func NewAccountsListRequestRemoteFieldsFromString(s string) (AccountsListRequestRemoteFields, error) {
	switch s {
	case "classification":
		return AccountsListRequestRemoteFieldsClassification, nil
	case "classification,status":
		return AccountsListRequestRemoteFieldsClassificationStatus, nil
	case "status":
		return AccountsListRequestRemoteFieldsStatus, nil
	}
	var t AccountsListRequestRemoteFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountsListRequestRemoteFields) Ptr() *AccountsListRequestRemoteFields {
	return &a
}

type AccountsListRequestShowEnumOrigins string

const (
	AccountsListRequestShowEnumOriginsClassification       AccountsListRequestShowEnumOrigins = "classification"
	AccountsListRequestShowEnumOriginsClassificationStatus AccountsListRequestShowEnumOrigins = "classification,status"
	AccountsListRequestShowEnumOriginsStatus               AccountsListRequestShowEnumOrigins = "status"
)

func NewAccountsListRequestShowEnumOriginsFromString(s string) (AccountsListRequestShowEnumOrigins, error) {
	switch s {
	case "classification":
		return AccountsListRequestShowEnumOriginsClassification, nil
	case "classification,status":
		return AccountsListRequestShowEnumOriginsClassificationStatus, nil
	case "status":
		return AccountsListRequestShowEnumOriginsStatus, nil
	}
	var t AccountsListRequestShowEnumOrigins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountsListRequestShowEnumOrigins) Ptr() *AccountsListRequestShowEnumOrigins {
	return &a
}

type AccountsRetrieveRequestRemoteFields string

const (
	AccountsRetrieveRequestRemoteFieldsClassification       AccountsRetrieveRequestRemoteFields = "classification"
	AccountsRetrieveRequestRemoteFieldsClassificationStatus AccountsRetrieveRequestRemoteFields = "classification,status"
	AccountsRetrieveRequestRemoteFieldsStatus               AccountsRetrieveRequestRemoteFields = "status"
)

func NewAccountsRetrieveRequestRemoteFieldsFromString(s string) (AccountsRetrieveRequestRemoteFields, error) {
	switch s {
	case "classification":
		return AccountsRetrieveRequestRemoteFieldsClassification, nil
	case "classification,status":
		return AccountsRetrieveRequestRemoteFieldsClassificationStatus, nil
	case "status":
		return AccountsRetrieveRequestRemoteFieldsStatus, nil
	}
	var t AccountsRetrieveRequestRemoteFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountsRetrieveRequestRemoteFields) Ptr() *AccountsRetrieveRequestRemoteFields {
	return &a
}

type AccountsRetrieveRequestShowEnumOrigins string

const (
	AccountsRetrieveRequestShowEnumOriginsClassification       AccountsRetrieveRequestShowEnumOrigins = "classification"
	AccountsRetrieveRequestShowEnumOriginsClassificationStatus AccountsRetrieveRequestShowEnumOrigins = "classification,status"
	AccountsRetrieveRequestShowEnumOriginsStatus               AccountsRetrieveRequestShowEnumOrigins = "status"
)

func NewAccountsRetrieveRequestShowEnumOriginsFromString(s string) (AccountsRetrieveRequestShowEnumOrigins, error) {
	switch s {
	case "classification":
		return AccountsRetrieveRequestShowEnumOriginsClassification, nil
	case "classification,status":
		return AccountsRetrieveRequestShowEnumOriginsClassificationStatus, nil
	case "status":
		return AccountsRetrieveRequestShowEnumOriginsStatus, nil
	}
	var t AccountsRetrieveRequestShowEnumOrigins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountsRetrieveRequestShowEnumOrigins) Ptr() *AccountsRetrieveRequestShowEnumOrigins {
	return &a
}

// # The Account Object
// ### Description
// An `Account` represents a category in a companyâ€™s ledger in which a financial transaction is recorded against. The aggregation of each `Account` object is often referred to as the **Chart of Accounts**.
//
// An `Account` can be classified into one of the following categories, determined through the `classification` field:
// * __Asset:__ Accounts Receivable and Bank Accounts
// * __Liability:__ Accounts Payable and Credit Card Accounts
// * __Equity:__ Treasury Accounts and Retained Earnings
// * __Revenue:__ Income and Other Income
// * __Expense:__ Cost of Goods Sold and Office Expenses
//
// ### Usage Example
// Fetch from the `LIST Accounts` endpoint and view a company's accounts.
type AccountRequest struct {
	// The account's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The account's description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The account's broadest grouping.
	//
	// * `ASSET` - ASSET
	// * `EQUITY` - EQUITY
	// * `EXPENSE` - EXPENSE
	// * `LIABILITY` - LIABILITY
	// * `REVENUE` - REVENUE
	Classification *AccountRequestClassification `json:"classification,omitempty" url:"classification,omitempty"`
	// The account's type is a narrower and more specific grouping within the account's classification.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Normalized account type- which is a narrower and more specific grouping within the account's classification.
	//
	// * `BANK` - BANK
	// * `CREDIT_CARD` - CREDIT_CARD
	// * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
	// * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
	// * `FIXED_ASSET` - FIXED_ASSET
	// * `OTHER_ASSET` - OTHER_ASSET
	// * `OTHER_CURRENT_ASSET` - OTHER_CURRENT_ASSET
	// * `OTHER_EXPENSE` - OTHER_EXPENSE
	// * `OTHER_INCOME` - OTHER_INCOME
	// * `COST_OF_GOODS_SOLD` - COST_OF_GOODS_SOLD
	// * `OTHER_CURRENT_LIABILITY` - OTHER_CURRENT_LIABILITY
	// * `LONG_TERM_LIABILITY` - LONG_TERM_LIABILITY
	// * `NON_POSTING` - NON_POSTING
	AccountType *AccountRequestAccountType `json:"account_type,omitempty" url:"account_type,omitempty"`
	// The account's status.
	//
	// * `ACTIVE` - ACTIVE
	// * `PENDING` - PENDING
	// * `INACTIVE` - INACTIVE
	Status *AccountRequestStatus `json:"status,omitempty" url:"status,omitempty"`
	// The account's current balance.
	CurrentBalance *float64 `json:"current_balance,omitempty" url:"current_balance,omitempty"`
	// The account's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927â€“2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946â€“1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977â€“1991)
	// * `AON` - Angolan New Kwanza (1990â€“2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995â€“1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881â€“1970)
	// * `ARP` - Argentine Peso (1983â€“1985)
	// * `ARL` - Argentine Peso Ley (1970â€“1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993â€“2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994â€“1999)
	// * `BYR` - Belarusian Ruble (2000â€“2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863â€“1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992â€“1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994â€“1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986â€“1989)
	// * `BRZ` - Brazilian Cruzeiro (1942â€“1967)
	// * `BRE` - Brazilian Cruzeiro (1990â€“1993)
	// * `BRR` - Brazilian Cruzeiro (1993â€“1994)
	// * `BRN` - Brazilian New Cruzado (1989â€“1990)
	// * `BRB` - Brazilian New Cruzeiro (1967â€“1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879â€“1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese Peopleâ€™s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican ColÃ³n
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979â€“2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic KrÃ³na
	// * `ISJ` - Icelandic KrÃ³na (1918â€“1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980â€“1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992â€“1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947â€“1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973â€“2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861â€“1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980â€“2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan CÃ³rdoba
	// * `NIC` - Nicaraguan CÃ³rdoba (1988â€“1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863â€“1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950â€“1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952â€“2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991â€“1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran ColÃ³n
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002â€“2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953â€“1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945â€“1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992â€“2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957â€“1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - SÃ£o TomÃ© & PrÃ­ncipe Dobra
	// * `STD` - SÃ£o TomÃ© & PrÃ­ncipe Dobra (1977â€“2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan PaÊ»anga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922â€“2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993â€“2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966â€“1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975â€“1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan BolÃ­var
	// * `VEB` - Venezuelan BolÃ­var (1871â€“2008)
	// * `VEF` - Venezuelan BolÃ­var (2008â€“2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978â€“1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990â€“1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966â€“1990)
	// * `YUM` - Yugoslavian New Dinar (1994â€“2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992â€“1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993â€“1998)
	// * `ZRZ` - Zairean Zaire (1971â€“1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968â€“2012)
	// * `ZWD` - Zimbabwean Dollar (1980â€“2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *AccountRequestCurrency `json:"currency,omitempty" url:"currency,omitempty"`
	// The account's number.
	AccountNumber *string `json:"account_number,omitempty" url:"account_number,omitempty"`
	// ID of the parent account.
	ParentAccount *string `json:"parent_account,omitempty" url:"parent_account,omitempty"`
	// The company the account belongs to.
	Company             *string                `json:"company,omitempty" url:"company,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountRequest) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AccountRequest) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AccountRequest) GetClassification() *AccountRequestClassification {
	if a == nil {
		return nil
	}
	return a.Classification
}

func (a *AccountRequest) GetType() *string {
	if a == nil {
		return nil
	}
	return a.Type
}

func (a *AccountRequest) GetAccountType() *AccountRequestAccountType {
	if a == nil {
		return nil
	}
	return a.AccountType
}

func (a *AccountRequest) GetStatus() *AccountRequestStatus {
	if a == nil {
		return nil
	}
	return a.Status
}

func (a *AccountRequest) GetCurrentBalance() *float64 {
	if a == nil {
		return nil
	}
	return a.CurrentBalance
}

func (a *AccountRequest) GetCurrency() *AccountRequestCurrency {
	if a == nil {
		return nil
	}
	return a.Currency
}

func (a *AccountRequest) GetAccountNumber() *string {
	if a == nil {
		return nil
	}
	return a.AccountNumber
}

func (a *AccountRequest) GetParentAccount() *string {
	if a == nil {
		return nil
	}
	return a.ParentAccount
}

func (a *AccountRequest) GetCompany() *string {
	if a == nil {
		return nil
	}
	return a.Company
}

func (a *AccountRequest) GetIntegrationParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.IntegrationParams
}

func (a *AccountRequest) GetLinkedAccountParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.LinkedAccountParams
}

func (a *AccountRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountRequest) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Normalized account type- which is a narrower and more specific grouping within the account's classification.
//
// * `BANK` - BANK
// * `CREDIT_CARD` - CREDIT_CARD
// * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
// * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
// * `FIXED_ASSET` - FIXED_ASSET
// * `OTHER_ASSET` - OTHER_ASSET
// * `OTHER_CURRENT_ASSET` - OTHER_CURRENT_ASSET
// * `OTHER_EXPENSE` - OTHER_EXPENSE
// * `OTHER_INCOME` - OTHER_INCOME
// * `COST_OF_GOODS_SOLD` - COST_OF_GOODS_SOLD
// * `OTHER_CURRENT_LIABILITY` - OTHER_CURRENT_LIABILITY
// * `LONG_TERM_LIABILITY` - LONG_TERM_LIABILITY
// * `NON_POSTING` - NON_POSTING
type AccountRequestAccountType struct {
	AccountAccountTypeEnum AccountAccountTypeEnum
	String                 string

	typ string
}

func (a *AccountRequestAccountType) GetAccountAccountTypeEnum() AccountAccountTypeEnum {
	if a == nil {
		return ""
	}
	return a.AccountAccountTypeEnum
}

func (a *AccountRequestAccountType) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AccountRequestAccountType) UnmarshalJSON(data []byte) error {
	var valueAccountAccountTypeEnum AccountAccountTypeEnum
	if err := json.Unmarshal(data, &valueAccountAccountTypeEnum); err == nil {
		a.typ = "AccountAccountTypeEnum"
		a.AccountAccountTypeEnum = valueAccountAccountTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountRequestAccountType) MarshalJSON() ([]byte, error) {
	if a.typ == "AccountAccountTypeEnum" || a.AccountAccountTypeEnum != "" {
		return json.Marshal(a.AccountAccountTypeEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AccountRequestAccountTypeVisitor interface {
	VisitAccountAccountTypeEnum(AccountAccountTypeEnum) error
	VisitString(string) error
}

func (a *AccountRequestAccountType) Accept(visitor AccountRequestAccountTypeVisitor) error {
	if a.typ == "AccountAccountTypeEnum" || a.AccountAccountTypeEnum != "" {
		return visitor.VisitAccountAccountTypeEnum(a.AccountAccountTypeEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// The account's broadest grouping.
//
// * `ASSET` - ASSET
// * `EQUITY` - EQUITY
// * `EXPENSE` - EXPENSE
// * `LIABILITY` - LIABILITY
// * `REVENUE` - REVENUE
type AccountRequestClassification struct {
	ClassificationEnum ClassificationEnum
	String             string

	typ string
}

func (a *AccountRequestClassification) GetClassificationEnum() ClassificationEnum {
	if a == nil {
		return ""
	}
	return a.ClassificationEnum
}

func (a *AccountRequestClassification) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AccountRequestClassification) UnmarshalJSON(data []byte) error {
	var valueClassificationEnum ClassificationEnum
	if err := json.Unmarshal(data, &valueClassificationEnum); err == nil {
		a.typ = "ClassificationEnum"
		a.ClassificationEnum = valueClassificationEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountRequestClassification) MarshalJSON() ([]byte, error) {
	if a.typ == "ClassificationEnum" || a.ClassificationEnum != "" {
		return json.Marshal(a.ClassificationEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AccountRequestClassificationVisitor interface {
	VisitClassificationEnum(ClassificationEnum) error
	VisitString(string) error
}

func (a *AccountRequestClassification) Accept(visitor AccountRequestClassificationVisitor) error {
	if a.typ == "ClassificationEnum" || a.ClassificationEnum != "" {
		return visitor.VisitClassificationEnum(a.ClassificationEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// The account's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927â€“2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946â€“1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977â€“1991)
// * `AON` - Angolan New Kwanza (1990â€“2000)
// * `AOR` - Angolan Readjusted Kwanza (1995â€“1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881â€“1970)
// * `ARP` - Argentine Peso (1983â€“1985)
// * `ARL` - Argentine Peso Ley (1970â€“1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993â€“2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994â€“1999)
// * `BYR` - Belarusian Ruble (2000â€“2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863â€“1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992â€“1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994â€“1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986â€“1989)
// * `BRZ` - Brazilian Cruzeiro (1942â€“1967)
// * `BRE` - Brazilian Cruzeiro (1990â€“1993)
// * `BRR` - Brazilian Cruzeiro (1993â€“1994)
// * `BRN` - Brazilian New Cruzado (1989â€“1990)
// * `BRB` - Brazilian New Cruzeiro (1967â€“1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879â€“1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese Peopleâ€™s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican ColÃ³n
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979â€“2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic KrÃ³na
// * `ISJ` - Icelandic KrÃ³na (1918â€“1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980â€“1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992â€“1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947â€“1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973â€“2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861â€“1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980â€“2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan CÃ³rdoba
// * `NIC` - Nicaraguan CÃ³rdoba (1988â€“1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863â€“1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950â€“1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952â€“2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991â€“1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran ColÃ³n
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002â€“2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953â€“1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945â€“1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992â€“2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957â€“1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - SÃ£o TomÃ© & PrÃ­ncipe Dobra
// * `STD` - SÃ£o TomÃ© & PrÃ­ncipe Dobra (1977â€“2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan PaÊ»anga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922â€“2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993â€“2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966â€“1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975â€“1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan BolÃ­var
// * `VEB` - Venezuelan BolÃ­var (1871â€“2008)
// * `VEF` - Venezuelan BolÃ­var (2008â€“2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978â€“1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990â€“1992)
// * `YUD` - Yugoslavian Hard Dinar (1966â€“1990)
// * `YUM` - Yugoslavian New Dinar (1994â€“2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992â€“1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993â€“1998)
// * `ZRZ` - Zairean Zaire (1971â€“1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968â€“2012)
// * `ZWD` - Zimbabwean Dollar (1980â€“2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type AccountRequestCurrency struct {
	TransactionCurrencyEnum TransactionCurrencyEnum
	String                  string

	typ string
}

func (a *AccountRequestCurrency) GetTransactionCurrencyEnum() TransactionCurrencyEnum {
	if a == nil {
		return ""
	}
	return a.TransactionCurrencyEnum
}

func (a *AccountRequestCurrency) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AccountRequestCurrency) UnmarshalJSON(data []byte) error {
	var valueTransactionCurrencyEnum TransactionCurrencyEnum
	if err := json.Unmarshal(data, &valueTransactionCurrencyEnum); err == nil {
		a.typ = "TransactionCurrencyEnum"
		a.TransactionCurrencyEnum = valueTransactionCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountRequestCurrency) MarshalJSON() ([]byte, error) {
	if a.typ == "TransactionCurrencyEnum" || a.TransactionCurrencyEnum != "" {
		return json.Marshal(a.TransactionCurrencyEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AccountRequestCurrencyVisitor interface {
	VisitTransactionCurrencyEnum(TransactionCurrencyEnum) error
	VisitString(string) error
}

func (a *AccountRequestCurrency) Accept(visitor AccountRequestCurrencyVisitor) error {
	if a.typ == "TransactionCurrencyEnum" || a.TransactionCurrencyEnum != "" {
		return visitor.VisitTransactionCurrencyEnum(a.TransactionCurrencyEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// The account's status.
//
// * `ACTIVE` - ACTIVE
// * `PENDING` - PENDING
// * `INACTIVE` - INACTIVE
type AccountRequestStatus struct {
	AccountStatusEnum AccountStatusEnum
	String            string

	typ string
}

func (a *AccountRequestStatus) GetAccountStatusEnum() AccountStatusEnum {
	if a == nil {
		return ""
	}
	return a.AccountStatusEnum
}

func (a *AccountRequestStatus) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AccountRequestStatus) UnmarshalJSON(data []byte) error {
	var valueAccountStatusEnum AccountStatusEnum
	if err := json.Unmarshal(data, &valueAccountStatusEnum); err == nil {
		a.typ = "AccountStatusEnum"
		a.AccountStatusEnum = valueAccountStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountRequestStatus) MarshalJSON() ([]byte, error) {
	if a.typ == "AccountStatusEnum" || a.AccountStatusEnum != "" {
		return json.Marshal(a.AccountStatusEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AccountRequestStatusVisitor interface {
	VisitAccountStatusEnum(AccountStatusEnum) error
	VisitString(string) error
}

func (a *AccountRequestStatus) Accept(visitor AccountRequestStatusVisitor) error {
	if a.typ == "AccountStatusEnum" || a.AccountStatusEnum != "" {
		return visitor.VisitAccountStatusEnum(a.AccountStatusEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AccountResponse struct {
	Model    *Account                    `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountResponse) GetModel() *Account {
	if a == nil {
		return nil
	}
	return a.Model
}

func (a *AccountResponse) GetWarnings() []*WarningValidationProblem {
	if a == nil {
		return nil
	}
	return a.Warnings
}

func (a *AccountResponse) GetErrors() []*ErrorValidationProblem {
	if a == nil {
		return nil
	}
	return a.Errors
}

func (a *AccountResponse) GetLogs() []*DebugModeLog {
	if a == nil {
		return nil
	}
	return a.Logs
}

func (a *AccountResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type PaginatedAccountList struct {
	Next     *string    `json:"next,omitempty" url:"next,omitempty"`
	Previous *string    `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Account `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedAccountList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedAccountList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedAccountList) GetResults() []*Account {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedAccountList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedAccountList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAccountList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAccountList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAccountList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
