// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type VendorCreditEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool                `json:"-" url:"run_async,omitempty"`
	Model    *VendorCreditRequest `json:"model,omitempty" url:"-"`
}

type VendorCreditsListRequest struct {
	// If provided, will only return vendor credits for this company.
	CompanyId *string `json:"-" url:"company_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*VendorCreditsListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	TransactionDateAfter *time.Time `json:"-" url:"transaction_date_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	TransactionDateBefore *time.Time `json:"-" url:"transaction_date_before,omitempty"`
}

type VendorCreditsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*VendorCreditsRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

type VendorCreditsListRequestExpandItem string

const (
	VendorCreditsListRequestExpandItemAccountingPeriod   VendorCreditsListRequestExpandItem = "accounting_period"
	VendorCreditsListRequestExpandItemCompany            VendorCreditsListRequestExpandItem = "company"
	VendorCreditsListRequestExpandItemLines              VendorCreditsListRequestExpandItem = "lines"
	VendorCreditsListRequestExpandItemTrackingCategories VendorCreditsListRequestExpandItem = "tracking_categories"
	VendorCreditsListRequestExpandItemVendor             VendorCreditsListRequestExpandItem = "vendor"
)

func NewVendorCreditsListRequestExpandItemFromString(s string) (VendorCreditsListRequestExpandItem, error) {
	switch s {
	case "accounting_period":
		return VendorCreditsListRequestExpandItemAccountingPeriod, nil
	case "company":
		return VendorCreditsListRequestExpandItemCompany, nil
	case "lines":
		return VendorCreditsListRequestExpandItemLines, nil
	case "tracking_categories":
		return VendorCreditsListRequestExpandItemTrackingCategories, nil
	case "vendor":
		return VendorCreditsListRequestExpandItemVendor, nil
	}
	var t VendorCreditsListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VendorCreditsListRequestExpandItem) Ptr() *VendorCreditsListRequestExpandItem {
	return &v
}

type VendorCreditsRetrieveRequestExpandItem string

const (
	VendorCreditsRetrieveRequestExpandItemAccountingPeriod   VendorCreditsRetrieveRequestExpandItem = "accounting_period"
	VendorCreditsRetrieveRequestExpandItemCompany            VendorCreditsRetrieveRequestExpandItem = "company"
	VendorCreditsRetrieveRequestExpandItemLines              VendorCreditsRetrieveRequestExpandItem = "lines"
	VendorCreditsRetrieveRequestExpandItemTrackingCategories VendorCreditsRetrieveRequestExpandItem = "tracking_categories"
	VendorCreditsRetrieveRequestExpandItemVendor             VendorCreditsRetrieveRequestExpandItem = "vendor"
)

func NewVendorCreditsRetrieveRequestExpandItemFromString(s string) (VendorCreditsRetrieveRequestExpandItem, error) {
	switch s {
	case "accounting_period":
		return VendorCreditsRetrieveRequestExpandItemAccountingPeriod, nil
	case "company":
		return VendorCreditsRetrieveRequestExpandItemCompany, nil
	case "lines":
		return VendorCreditsRetrieveRequestExpandItemLines, nil
	case "tracking_categories":
		return VendorCreditsRetrieveRequestExpandItemTrackingCategories, nil
	case "vendor":
		return VendorCreditsRetrieveRequestExpandItemVendor, nil
	}
	var t VendorCreditsRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VendorCreditsRetrieveRequestExpandItem) Ptr() *VendorCreditsRetrieveRequestExpandItem {
	return &v
}

type PaginatedVendorCreditList struct {
	Next     *string         `json:"next,omitempty" url:"next,omitempty"`
	Previous *string         `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*VendorCredit `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedVendorCreditList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedVendorCreditList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedVendorCreditList) GetResults() []*VendorCredit {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedVendorCreditList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedVendorCreditList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedVendorCreditList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedVendorCreditList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedVendorCreditList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The VendorCreditApplyLine Object
// ### Description
// The `VendorCreditApplyLine` object is used to represent a applied vendor credit.
//
// ### Usage Example
// Fetch from the `GET VendorCredit` endpoint and view the vendor credit's applied to lines.
type VendorCreditApplyLineForVendorCreditRequest struct {
	// The third-party API ID of the matching object.
	RemoteId *string                                             `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	Invoice  *VendorCreditApplyLineForVendorCreditRequestInvoice `json:"invoice,omitempty" url:"invoice,omitempty"`
	// Date that the vendor credit is applied to the invoice.
	AppliedDate *time.Time `json:"applied_date,omitempty" url:"applied_date,omitempty"`
	// The amount of the VendorCredit applied to the invoice.
	AppliedAmount       *string                `json:"applied_amount,omitempty" url:"applied_amount,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VendorCreditApplyLineForVendorCreditRequest) GetRemoteId() *string {
	if v == nil {
		return nil
	}
	return v.RemoteId
}

func (v *VendorCreditApplyLineForVendorCreditRequest) GetInvoice() *VendorCreditApplyLineForVendorCreditRequestInvoice {
	if v == nil {
		return nil
	}
	return v.Invoice
}

func (v *VendorCreditApplyLineForVendorCreditRequest) GetAppliedDate() *time.Time {
	if v == nil {
		return nil
	}
	return v.AppliedDate
}

func (v *VendorCreditApplyLineForVendorCreditRequest) GetAppliedAmount() *string {
	if v == nil {
		return nil
	}
	return v.AppliedAmount
}

func (v *VendorCreditApplyLineForVendorCreditRequest) GetIntegrationParams() map[string]interface{} {
	if v == nil {
		return nil
	}
	return v.IntegrationParams
}

func (v *VendorCreditApplyLineForVendorCreditRequest) GetLinkedAccountParams() map[string]interface{} {
	if v == nil {
		return nil
	}
	return v.LinkedAccountParams
}

func (v *VendorCreditApplyLineForVendorCreditRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VendorCreditApplyLineForVendorCreditRequest) UnmarshalJSON(data []byte) error {
	type embed VendorCreditApplyLineForVendorCreditRequest
	var unmarshaler = struct {
		embed
		AppliedDate *internal.DateTime `json:"applied_date,omitempty"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VendorCreditApplyLineForVendorCreditRequest(unmarshaler.embed)
	v.AppliedDate = unmarshaler.AppliedDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VendorCreditApplyLineForVendorCreditRequest) MarshalJSON() ([]byte, error) {
	type embed VendorCreditApplyLineForVendorCreditRequest
	var marshaler = struct {
		embed
		AppliedDate *internal.DateTime `json:"applied_date,omitempty"`
	}{
		embed:       embed(*v),
		AppliedDate: internal.NewOptionalDateTime(v.AppliedDate),
	}
	return json.Marshal(marshaler)
}

func (v *VendorCreditApplyLineForVendorCreditRequest) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VendorCreditApplyLineForVendorCreditRequestInvoice struct {
	String  string
	Invoice *Invoice

	typ string
}

func (v *VendorCreditApplyLineForVendorCreditRequestInvoice) GetString() string {
	if v == nil {
		return ""
	}
	return v.String
}

func (v *VendorCreditApplyLineForVendorCreditRequestInvoice) GetInvoice() *Invoice {
	if v == nil {
		return nil
	}
	return v.Invoice
}

func (v *VendorCreditApplyLineForVendorCreditRequestInvoice) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typ = "String"
		v.String = valueString
		return nil
	}
	valueInvoice := new(Invoice)
	if err := json.Unmarshal(data, &valueInvoice); err == nil {
		v.typ = "Invoice"
		v.Invoice = valueInvoice
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VendorCreditApplyLineForVendorCreditRequestInvoice) MarshalJSON() ([]byte, error) {
	if v.typ == "String" || v.String != "" {
		return json.Marshal(v.String)
	}
	if v.typ == "Invoice" || v.Invoice != nil {
		return json.Marshal(v.Invoice)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VendorCreditApplyLineForVendorCreditRequestInvoiceVisitor interface {
	VisitString(string) error
	VisitInvoice(*Invoice) error
}

func (v *VendorCreditApplyLineForVendorCreditRequestInvoice) Accept(visitor VendorCreditApplyLineForVendorCreditRequestInvoiceVisitor) error {
	if v.typ == "String" || v.String != "" {
		return visitor.VisitString(v.String)
	}
	if v.typ == "Invoice" || v.Invoice != nil {
		return visitor.VisitInvoice(v.Invoice)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

// # The VendorCredit Object
// ### Description
// A `VendorCredit` is transaction issued by a vendor to the accounting company, indicating a reduction or cancellation of the amount owed to the vendor. It is most generally used as an adjustment note used to rectify errors, returns, or overpayments related to a purchasing transaction. A `VendorCredit` can be applied to `Accounts Payable` Invoices to decrease the overall amount of the `Invoice`.
//
// ### Usage Example
// Fetch from the `GET VendorCredit` endpoint and view a company's vendor credits.
type VendorCreditRequest struct {
	// The vendor credit's number.
	Number *string `json:"number,omitempty" url:"number,omitempty"`
	// The vendor credit's transaction date.
	TransactionDate *time.Time `json:"transaction_date,omitempty" url:"transaction_date,omitempty"`
	// The vendor that owes the gift or refund.
	Vendor *VendorCreditRequestVendor `json:"vendor,omitempty" url:"vendor,omitempty"`
	// The vendor credit's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty" url:"total_amount,omitempty"`
	// The vendor credit's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *VendorCreditRequestCurrency `json:"currency,omitempty" url:"currency,omitempty"`
	// The vendor credit's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty" url:"exchange_rate,omitempty"`
	// If the transaction is inclusive or exclusive of tax. `True` if inclusive, `False` if exclusive.
	InclusiveOfTax *bool `json:"inclusive_of_tax,omitempty" url:"inclusive_of_tax,omitempty"`
	// The company the vendor credit belongs to.
	Company            *VendorCreditRequestCompany                  `json:"company,omitempty" url:"company,omitempty"`
	TrackingCategories []*VendorCreditRequestTrackingCategoriesItem `json:"tracking_categories,omitempty" url:"tracking_categories,omitempty"`
	// A list of VendorCredit Applied to Lines objects.
	AppliedToLines []*VendorCreditApplyLineForVendorCreditRequest `json:"applied_to_lines,omitempty" url:"applied_to_lines,omitempty"`
	// The accounting period that the VendorCredit was generated in.
	AccountingPeriod    *VendorCreditRequestAccountingPeriod `json:"accounting_period,omitempty" url:"accounting_period,omitempty"`
	IntegrationParams   map[string]interface{}               `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}               `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VendorCreditRequest) GetNumber() *string {
	if v == nil {
		return nil
	}
	return v.Number
}

func (v *VendorCreditRequest) GetTransactionDate() *time.Time {
	if v == nil {
		return nil
	}
	return v.TransactionDate
}

func (v *VendorCreditRequest) GetVendor() *VendorCreditRequestVendor {
	if v == nil {
		return nil
	}
	return v.Vendor
}

func (v *VendorCreditRequest) GetTotalAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.TotalAmount
}

func (v *VendorCreditRequest) GetCurrency() *VendorCreditRequestCurrency {
	if v == nil {
		return nil
	}
	return v.Currency
}

func (v *VendorCreditRequest) GetExchangeRate() *string {
	if v == nil {
		return nil
	}
	return v.ExchangeRate
}

func (v *VendorCreditRequest) GetInclusiveOfTax() *bool {
	if v == nil {
		return nil
	}
	return v.InclusiveOfTax
}

func (v *VendorCreditRequest) GetCompany() *VendorCreditRequestCompany {
	if v == nil {
		return nil
	}
	return v.Company
}

func (v *VendorCreditRequest) GetTrackingCategories() []*VendorCreditRequestTrackingCategoriesItem {
	if v == nil {
		return nil
	}
	return v.TrackingCategories
}

func (v *VendorCreditRequest) GetAppliedToLines() []*VendorCreditApplyLineForVendorCreditRequest {
	if v == nil {
		return nil
	}
	return v.AppliedToLines
}

func (v *VendorCreditRequest) GetAccountingPeriod() *VendorCreditRequestAccountingPeriod {
	if v == nil {
		return nil
	}
	return v.AccountingPeriod
}

func (v *VendorCreditRequest) GetIntegrationParams() map[string]interface{} {
	if v == nil {
		return nil
	}
	return v.IntegrationParams
}

func (v *VendorCreditRequest) GetLinkedAccountParams() map[string]interface{} {
	if v == nil {
		return nil
	}
	return v.LinkedAccountParams
}

func (v *VendorCreditRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VendorCreditRequest) UnmarshalJSON(data []byte) error {
	type embed VendorCreditRequest
	var unmarshaler = struct {
		embed
		TransactionDate *internal.DateTime `json:"transaction_date,omitempty"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VendorCreditRequest(unmarshaler.embed)
	v.TransactionDate = unmarshaler.TransactionDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VendorCreditRequest) MarshalJSON() ([]byte, error) {
	type embed VendorCreditRequest
	var marshaler = struct {
		embed
		TransactionDate *internal.DateTime `json:"transaction_date,omitempty"`
	}{
		embed:           embed(*v),
		TransactionDate: internal.NewOptionalDateTime(v.TransactionDate),
	}
	return json.Marshal(marshaler)
}

func (v *VendorCreditRequest) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// The accounting period that the VendorCredit was generated in.
type VendorCreditRequestAccountingPeriod struct {
	String           string
	AccountingPeriod *AccountingPeriod

	typ string
}

func (v *VendorCreditRequestAccountingPeriod) GetString() string {
	if v == nil {
		return ""
	}
	return v.String
}

func (v *VendorCreditRequestAccountingPeriod) GetAccountingPeriod() *AccountingPeriod {
	if v == nil {
		return nil
	}
	return v.AccountingPeriod
}

func (v *VendorCreditRequestAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typ = "String"
		v.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		v.typ = "AccountingPeriod"
		v.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VendorCreditRequestAccountingPeriod) MarshalJSON() ([]byte, error) {
	if v.typ == "String" || v.String != "" {
		return json.Marshal(v.String)
	}
	if v.typ == "AccountingPeriod" || v.AccountingPeriod != nil {
		return json.Marshal(v.AccountingPeriod)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VendorCreditRequestAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (v *VendorCreditRequestAccountingPeriod) Accept(visitor VendorCreditRequestAccountingPeriodVisitor) error {
	if v.typ == "String" || v.String != "" {
		return visitor.VisitString(v.String)
	}
	if v.typ == "AccountingPeriod" || v.AccountingPeriod != nil {
		return visitor.VisitAccountingPeriod(v.AccountingPeriod)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

// The company the vendor credit belongs to.
type VendorCreditRequestCompany struct {
	String      string
	CompanyInfo *CompanyInfo

	typ string
}

func (v *VendorCreditRequestCompany) GetString() string {
	if v == nil {
		return ""
	}
	return v.String
}

func (v *VendorCreditRequestCompany) GetCompanyInfo() *CompanyInfo {
	if v == nil {
		return nil
	}
	return v.CompanyInfo
}

func (v *VendorCreditRequestCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typ = "String"
		v.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		v.typ = "CompanyInfo"
		v.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VendorCreditRequestCompany) MarshalJSON() ([]byte, error) {
	if v.typ == "String" || v.String != "" {
		return json.Marshal(v.String)
	}
	if v.typ == "CompanyInfo" || v.CompanyInfo != nil {
		return json.Marshal(v.CompanyInfo)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VendorCreditRequestCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (v *VendorCreditRequestCompany) Accept(visitor VendorCreditRequestCompanyVisitor) error {
	if v.typ == "String" || v.String != "" {
		return visitor.VisitString(v.String)
	}
	if v.typ == "CompanyInfo" || v.CompanyInfo != nil {
		return visitor.VisitCompanyInfo(v.CompanyInfo)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

// The vendor credit's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type VendorCreditRequestCurrency struct {
	TransactionCurrencyEnum TransactionCurrencyEnum
	String                  string

	typ string
}

func (v *VendorCreditRequestCurrency) GetTransactionCurrencyEnum() TransactionCurrencyEnum {
	if v == nil {
		return ""
	}
	return v.TransactionCurrencyEnum
}

func (v *VendorCreditRequestCurrency) GetString() string {
	if v == nil {
		return ""
	}
	return v.String
}

func (v *VendorCreditRequestCurrency) UnmarshalJSON(data []byte) error {
	var valueTransactionCurrencyEnum TransactionCurrencyEnum
	if err := json.Unmarshal(data, &valueTransactionCurrencyEnum); err == nil {
		v.typ = "TransactionCurrencyEnum"
		v.TransactionCurrencyEnum = valueTransactionCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typ = "String"
		v.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VendorCreditRequestCurrency) MarshalJSON() ([]byte, error) {
	if v.typ == "TransactionCurrencyEnum" || v.TransactionCurrencyEnum != "" {
		return json.Marshal(v.TransactionCurrencyEnum)
	}
	if v.typ == "String" || v.String != "" {
		return json.Marshal(v.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VendorCreditRequestCurrencyVisitor interface {
	VisitTransactionCurrencyEnum(TransactionCurrencyEnum) error
	VisitString(string) error
}

func (v *VendorCreditRequestCurrency) Accept(visitor VendorCreditRequestCurrencyVisitor) error {
	if v.typ == "TransactionCurrencyEnum" || v.TransactionCurrencyEnum != "" {
		return visitor.VisitTransactionCurrencyEnum(v.TransactionCurrencyEnum)
	}
	if v.typ == "String" || v.String != "" {
		return visitor.VisitString(v.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VendorCreditRequestTrackingCategoriesItem struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (v *VendorCreditRequestTrackingCategoriesItem) GetString() string {
	if v == nil {
		return ""
	}
	return v.String
}

func (v *VendorCreditRequestTrackingCategoriesItem) GetTrackingCategory() *TrackingCategory {
	if v == nil {
		return nil
	}
	return v.TrackingCategory
}

func (v *VendorCreditRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typ = "String"
		v.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		v.typ = "TrackingCategory"
		v.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VendorCreditRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	if v.typ == "String" || v.String != "" {
		return json.Marshal(v.String)
	}
	if v.typ == "TrackingCategory" || v.TrackingCategory != nil {
		return json.Marshal(v.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VendorCreditRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (v *VendorCreditRequestTrackingCategoriesItem) Accept(visitor VendorCreditRequestTrackingCategoriesItemVisitor) error {
	if v.typ == "String" || v.String != "" {
		return visitor.VisitString(v.String)
	}
	if v.typ == "TrackingCategory" || v.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(v.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

// The vendor that owes the gift or refund.
type VendorCreditRequestVendor struct {
	String  string
	Contact *Contact

	typ string
}

func (v *VendorCreditRequestVendor) GetString() string {
	if v == nil {
		return ""
	}
	return v.String
}

func (v *VendorCreditRequestVendor) GetContact() *Contact {
	if v == nil {
		return nil
	}
	return v.Contact
}

func (v *VendorCreditRequestVendor) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typ = "String"
		v.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		v.typ = "Contact"
		v.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VendorCreditRequestVendor) MarshalJSON() ([]byte, error) {
	if v.typ == "String" || v.String != "" {
		return json.Marshal(v.String)
	}
	if v.typ == "Contact" || v.Contact != nil {
		return json.Marshal(v.Contact)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VendorCreditRequestVendorVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (v *VendorCreditRequestVendor) Accept(visitor VendorCreditRequestVendorVisitor) error {
	if v.typ == "String" || v.String != "" {
		return visitor.VisitString(v.String)
	}
	if v.typ == "Contact" || v.Contact != nil {
		return visitor.VisitContact(v.Contact)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VendorCreditResponse struct {
	Model    *VendorCredit               `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VendorCreditResponse) GetModel() *VendorCredit {
	if v == nil {
		return nil
	}
	return v.Model
}

func (v *VendorCreditResponse) GetWarnings() []*WarningValidationProblem {
	if v == nil {
		return nil
	}
	return v.Warnings
}

func (v *VendorCreditResponse) GetErrors() []*ErrorValidationProblem {
	if v == nil {
		return nil
	}
	return v.Errors
}

func (v *VendorCreditResponse) GetLogs() []*DebugModeLog {
	if v == nil {
		return nil
	}
	return v.Logs
}

func (v *VendorCreditResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VendorCreditResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler VendorCreditResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VendorCreditResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VendorCreditResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
