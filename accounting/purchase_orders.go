// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type PurchaseOrderEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool                 `json:"-" url:"run_async,omitempty"`
	Model    *PurchaseOrderRequest `json:"model,omitempty" url:"-"`
}

type PurchaseOrdersLineItemsRemoteFieldClassesListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return remote field classes with this is_common_model_field value
	IsCommonModelField *bool `json:"-" url:"is_common_model_field,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type PurchaseOrdersListRequest struct {
	// If provided, will only return purchase orders for this company.
	CompanyId *string `json:"-" url:"company_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*PurchaseOrdersListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return objects created after this datetime.
	IssueDateAfter *time.Time `json:"-" url:"issue_date_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	IssueDateBefore *time.Time `json:"-" url:"issue_date_before,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type PurchaseOrdersRemoteFieldClassesListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return remote field classes with this is_common_model_field value
	IsCommonModelField *bool `json:"-" url:"is_common_model_field,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type PurchaseOrdersRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*PurchaseOrdersRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type PurchaseOrdersListRequestExpandItem string

const (
	PurchaseOrdersListRequestExpandItemAccountingPeriod   PurchaseOrdersListRequestExpandItem = "accounting_period"
	PurchaseOrdersListRequestExpandItemCompany            PurchaseOrdersListRequestExpandItem = "company"
	PurchaseOrdersListRequestExpandItemDeliveryAddress    PurchaseOrdersListRequestExpandItem = "delivery_address"
	PurchaseOrdersListRequestExpandItemLineItems          PurchaseOrdersListRequestExpandItem = "line_items"
	PurchaseOrdersListRequestExpandItemPaymentTerm        PurchaseOrdersListRequestExpandItem = "payment_term"
	PurchaseOrdersListRequestExpandItemTrackingCategories PurchaseOrdersListRequestExpandItem = "tracking_categories"
	PurchaseOrdersListRequestExpandItemVendor             PurchaseOrdersListRequestExpandItem = "vendor"
)

func NewPurchaseOrdersListRequestExpandItemFromString(s string) (PurchaseOrdersListRequestExpandItem, error) {
	switch s {
	case "accounting_period":
		return PurchaseOrdersListRequestExpandItemAccountingPeriod, nil
	case "company":
		return PurchaseOrdersListRequestExpandItemCompany, nil
	case "delivery_address":
		return PurchaseOrdersListRequestExpandItemDeliveryAddress, nil
	case "line_items":
		return PurchaseOrdersListRequestExpandItemLineItems, nil
	case "payment_term":
		return PurchaseOrdersListRequestExpandItemPaymentTerm, nil
	case "tracking_categories":
		return PurchaseOrdersListRequestExpandItemTrackingCategories, nil
	case "vendor":
		return PurchaseOrdersListRequestExpandItemVendor, nil
	}
	var t PurchaseOrdersListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PurchaseOrdersListRequestExpandItem) Ptr() *PurchaseOrdersListRequestExpandItem {
	return &p
}

type PurchaseOrdersRetrieveRequestExpandItem string

const (
	PurchaseOrdersRetrieveRequestExpandItemAccountingPeriod   PurchaseOrdersRetrieveRequestExpandItem = "accounting_period"
	PurchaseOrdersRetrieveRequestExpandItemCompany            PurchaseOrdersRetrieveRequestExpandItem = "company"
	PurchaseOrdersRetrieveRequestExpandItemDeliveryAddress    PurchaseOrdersRetrieveRequestExpandItem = "delivery_address"
	PurchaseOrdersRetrieveRequestExpandItemLineItems          PurchaseOrdersRetrieveRequestExpandItem = "line_items"
	PurchaseOrdersRetrieveRequestExpandItemPaymentTerm        PurchaseOrdersRetrieveRequestExpandItem = "payment_term"
	PurchaseOrdersRetrieveRequestExpandItemTrackingCategories PurchaseOrdersRetrieveRequestExpandItem = "tracking_categories"
	PurchaseOrdersRetrieveRequestExpandItemVendor             PurchaseOrdersRetrieveRequestExpandItem = "vendor"
)

func NewPurchaseOrdersRetrieveRequestExpandItemFromString(s string) (PurchaseOrdersRetrieveRequestExpandItem, error) {
	switch s {
	case "accounting_period":
		return PurchaseOrdersRetrieveRequestExpandItemAccountingPeriod, nil
	case "company":
		return PurchaseOrdersRetrieveRequestExpandItemCompany, nil
	case "delivery_address":
		return PurchaseOrdersRetrieveRequestExpandItemDeliveryAddress, nil
	case "line_items":
		return PurchaseOrdersRetrieveRequestExpandItemLineItems, nil
	case "payment_term":
		return PurchaseOrdersRetrieveRequestExpandItemPaymentTerm, nil
	case "tracking_categories":
		return PurchaseOrdersRetrieveRequestExpandItemTrackingCategories, nil
	case "vendor":
		return PurchaseOrdersRetrieveRequestExpandItemVendor, nil
	}
	var t PurchaseOrdersRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PurchaseOrdersRetrieveRequestExpandItem) Ptr() *PurchaseOrdersRetrieveRequestExpandItem {
	return &p
}

type PaginatedPurchaseOrderList struct {
	Next     *string          `json:"next,omitempty" url:"next,omitempty"`
	Previous *string          `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*PurchaseOrder `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedPurchaseOrderList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedPurchaseOrderList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedPurchaseOrderList) GetResults() []*PurchaseOrder {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedPurchaseOrderList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedPurchaseOrderList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedPurchaseOrderList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedPurchaseOrderList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedPurchaseOrderList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The PurchaseOrderLineItem Object
// ### Description
// The `PurchaseOrderLineItem` object is used to represent a purchase order's line item.
//
// ### Usage Example
// Fetch from the `GET PurchaseOrder` endpoint and view a company's purchase orders.
type PurchaseOrderLineItemRequest struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// A description of the good being purchased.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The line item's unit price.
	UnitPrice *float64 `json:"unit_price,omitempty" url:"unit_price,omitempty"`
	// The line item's quantity.
	Quantity *float64                          `json:"quantity,omitempty" url:"quantity,omitempty"`
	Item     *PurchaseOrderLineItemRequestItem `json:"item,omitempty" url:"item,omitempty"`
	// The purchase order line item's account.
	Account *string `json:"account,omitempty" url:"account,omitempty"`
	// The purchase order line item's associated tracking category.
	TrackingCategory *string `json:"tracking_category,omitempty" url:"tracking_category,omitempty"`
	// The purchase order line item's associated tracking categories.
	TrackingCategories []*string `json:"tracking_categories,omitempty" url:"tracking_categories,omitempty"`
	// The purchase order line item's tax amount.
	TaxAmount *string `json:"tax_amount,omitempty" url:"tax_amount,omitempty"`
	// The purchase order line item's total amount.
	TotalLineAmount *string `json:"total_line_amount,omitempty" url:"total_line_amount,omitempty"`
	// The purchase order line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *TransactionCurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`
	// The tax rate that applies to this line item.
	TaxRate *string `json:"tax_rate,omitempty" url:"tax_rate,omitempty"`
	// The purchase order line item's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty" url:"exchange_rate,omitempty"`
	// The company the purchase order line item belongs to.
	Company             *string                `json:"company,omitempty" url:"company,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderLineItemRequest) GetRemoteId() *string {
	if p == nil {
		return nil
	}
	return p.RemoteId
}

func (p *PurchaseOrderLineItemRequest) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PurchaseOrderLineItemRequest) GetUnitPrice() *float64 {
	if p == nil {
		return nil
	}
	return p.UnitPrice
}

func (p *PurchaseOrderLineItemRequest) GetQuantity() *float64 {
	if p == nil {
		return nil
	}
	return p.Quantity
}

func (p *PurchaseOrderLineItemRequest) GetItem() *PurchaseOrderLineItemRequestItem {
	if p == nil {
		return nil
	}
	return p.Item
}

func (p *PurchaseOrderLineItemRequest) GetAccount() *string {
	if p == nil {
		return nil
	}
	return p.Account
}

func (p *PurchaseOrderLineItemRequest) GetTrackingCategory() *string {
	if p == nil {
		return nil
	}
	return p.TrackingCategory
}

func (p *PurchaseOrderLineItemRequest) GetTrackingCategories() []*string {
	if p == nil {
		return nil
	}
	return p.TrackingCategories
}

func (p *PurchaseOrderLineItemRequest) GetTaxAmount() *string {
	if p == nil {
		return nil
	}
	return p.TaxAmount
}

func (p *PurchaseOrderLineItemRequest) GetTotalLineAmount() *string {
	if p == nil {
		return nil
	}
	return p.TotalLineAmount
}

func (p *PurchaseOrderLineItemRequest) GetCurrency() *TransactionCurrencyEnum {
	if p == nil {
		return nil
	}
	return p.Currency
}

func (p *PurchaseOrderLineItemRequest) GetTaxRate() *string {
	if p == nil {
		return nil
	}
	return p.TaxRate
}

func (p *PurchaseOrderLineItemRequest) GetExchangeRate() *string {
	if p == nil {
		return nil
	}
	return p.ExchangeRate
}

func (p *PurchaseOrderLineItemRequest) GetCompany() *string {
	if p == nil {
		return nil
	}
	return p.Company
}

func (p *PurchaseOrderLineItemRequest) GetIntegrationParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.IntegrationParams
}

func (p *PurchaseOrderLineItemRequest) GetLinkedAccountParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.LinkedAccountParams
}

func (p *PurchaseOrderLineItemRequest) GetRemoteFields() []*RemoteFieldRequest {
	if p == nil {
		return nil
	}
	return p.RemoteFields
}

func (p *PurchaseOrderLineItemRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderLineItemRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PurchaseOrderLineItemRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PurchaseOrderLineItemRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderLineItemRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PurchaseOrderLineItemRequestItem struct {
	String string
	Item   *Item

	typ string
}

func (p *PurchaseOrderLineItemRequestItem) GetString() string {
	if p == nil {
		return ""
	}
	return p.String
}

func (p *PurchaseOrderLineItemRequestItem) GetItem() *Item {
	if p == nil {
		return nil
	}
	return p.Item
}

func (p *PurchaseOrderLineItemRequestItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typ = "String"
		p.String = valueString
		return nil
	}
	valueItem := new(Item)
	if err := json.Unmarshal(data, &valueItem); err == nil {
		p.typ = "Item"
		p.Item = valueItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderLineItemRequestItem) MarshalJSON() ([]byte, error) {
	if p.typ == "String" || p.String != "" {
		return json.Marshal(p.String)
	}
	if p.typ == "Item" || p.Item != nil {
		return json.Marshal(p.Item)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PurchaseOrderLineItemRequestItemVisitor interface {
	VisitString(string) error
	VisitItem(*Item) error
}

func (p *PurchaseOrderLineItemRequestItem) Accept(visitor PurchaseOrderLineItemRequestItemVisitor) error {
	if p.typ == "String" || p.String != "" {
		return visitor.VisitString(p.String)
	}
	if p.typ == "Item" || p.Item != nil {
		return visitor.VisitItem(p.Item)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// # The PurchaseOrder Object
// ### Description
// The `PurchaseOrder` object is a record of request for a product or service between a buyer and seller.
//
// ### Usage Example
// Fetch from the `LIST PurchaseOrders` endpoint and view a company's purchase orders.
type PurchaseOrderRequest struct {
	// The purchase order's status.
	//
	// * `DRAFT` - DRAFT
	// * `SUBMITTED` - SUBMITTED
	// * `AUTHORIZED` - AUTHORIZED
	// * `BILLED` - BILLED
	// * `DELETED` - DELETED
	Status *PurchaseOrderStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The purchase order's issue date.
	IssueDate *time.Time `json:"issue_date,omitempty" url:"issue_date,omitempty"`
	// The purchase order's delivery date.
	DeliveryDate *time.Time `json:"delivery_date,omitempty" url:"delivery_date,omitempty"`
	// The purchase order's delivery address.
	DeliveryAddress *PurchaseOrderRequestDeliveryAddress `json:"delivery_address,omitempty" url:"delivery_address,omitempty"`
	// The contact making the purchase order.
	Customer *string `json:"customer,omitempty" url:"customer,omitempty"`
	// The party fulfilling the purchase order.
	Vendor *PurchaseOrderRequestVendor `json:"vendor,omitempty" url:"vendor,omitempty"`
	// A memo attached to the purchase order.
	Memo *string `json:"memo,omitempty" url:"memo,omitempty"`
	// The company the purchase order belongs to.
	Company *PurchaseOrderRequestCompany `json:"company,omitempty" url:"company,omitempty"`
	// The purchase order's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty" url:"total_amount,omitempty"`
	// The payment term that applies to this transaction.
	PaymentTerm *PurchaseOrderRequestPaymentTerm `json:"payment_term,omitempty" url:"payment_term,omitempty"`
	// The purchase order's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *TransactionCurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`
	// If the transaction is inclusive or exclusive of tax. `True` if inclusive, `False` if exclusive.
	InclusiveOfTax *bool `json:"inclusive_of_tax,omitempty" url:"inclusive_of_tax,omitempty"`
	// The purchase order's exchange rate.
	ExchangeRate        *string                                       `json:"exchange_rate,omitempty" url:"exchange_rate,omitempty"`
	TrackingCategories  []*PurchaseOrderRequestTrackingCategoriesItem `json:"tracking_categories,omitempty" url:"tracking_categories,omitempty"`
	LineItems           []*PurchaseOrderLineItemRequest               `json:"line_items,omitempty" url:"line_items,omitempty"`
	IntegrationParams   map[string]interface{}                        `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}                        `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest                         `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderRequest) GetStatus() *PurchaseOrderStatusEnum {
	if p == nil {
		return nil
	}
	return p.Status
}

func (p *PurchaseOrderRequest) GetIssueDate() *time.Time {
	if p == nil {
		return nil
	}
	return p.IssueDate
}

func (p *PurchaseOrderRequest) GetDeliveryDate() *time.Time {
	if p == nil {
		return nil
	}
	return p.DeliveryDate
}

func (p *PurchaseOrderRequest) GetDeliveryAddress() *PurchaseOrderRequestDeliveryAddress {
	if p == nil {
		return nil
	}
	return p.DeliveryAddress
}

func (p *PurchaseOrderRequest) GetCustomer() *string {
	if p == nil {
		return nil
	}
	return p.Customer
}

func (p *PurchaseOrderRequest) GetVendor() *PurchaseOrderRequestVendor {
	if p == nil {
		return nil
	}
	return p.Vendor
}

func (p *PurchaseOrderRequest) GetMemo() *string {
	if p == nil {
		return nil
	}
	return p.Memo
}

func (p *PurchaseOrderRequest) GetCompany() *PurchaseOrderRequestCompany {
	if p == nil {
		return nil
	}
	return p.Company
}

func (p *PurchaseOrderRequest) GetTotalAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.TotalAmount
}

func (p *PurchaseOrderRequest) GetPaymentTerm() *PurchaseOrderRequestPaymentTerm {
	if p == nil {
		return nil
	}
	return p.PaymentTerm
}

func (p *PurchaseOrderRequest) GetCurrency() *TransactionCurrencyEnum {
	if p == nil {
		return nil
	}
	return p.Currency
}

func (p *PurchaseOrderRequest) GetInclusiveOfTax() *bool {
	if p == nil {
		return nil
	}
	return p.InclusiveOfTax
}

func (p *PurchaseOrderRequest) GetExchangeRate() *string {
	if p == nil {
		return nil
	}
	return p.ExchangeRate
}

func (p *PurchaseOrderRequest) GetTrackingCategories() []*PurchaseOrderRequestTrackingCategoriesItem {
	if p == nil {
		return nil
	}
	return p.TrackingCategories
}

func (p *PurchaseOrderRequest) GetLineItems() []*PurchaseOrderLineItemRequest {
	if p == nil {
		return nil
	}
	return p.LineItems
}

func (p *PurchaseOrderRequest) GetIntegrationParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.IntegrationParams
}

func (p *PurchaseOrderRequest) GetLinkedAccountParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.LinkedAccountParams
}

func (p *PurchaseOrderRequest) GetRemoteFields() []*RemoteFieldRequest {
	if p == nil {
		return nil
	}
	return p.RemoteFields
}

func (p *PurchaseOrderRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderRequest) UnmarshalJSON(data []byte) error {
	type embed PurchaseOrderRequest
	var unmarshaler = struct {
		embed
		IssueDate    *internal.DateTime `json:"issue_date,omitempty"`
		DeliveryDate *internal.DateTime `json:"delivery_date,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PurchaseOrderRequest(unmarshaler.embed)
	p.IssueDate = unmarshaler.IssueDate.TimePtr()
	p.DeliveryDate = unmarshaler.DeliveryDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderRequest) MarshalJSON() ([]byte, error) {
	type embed PurchaseOrderRequest
	var marshaler = struct {
		embed
		IssueDate    *internal.DateTime `json:"issue_date,omitempty"`
		DeliveryDate *internal.DateTime `json:"delivery_date,omitempty"`
	}{
		embed:        embed(*p),
		IssueDate:    internal.NewOptionalDateTime(p.IssueDate),
		DeliveryDate: internal.NewOptionalDateTime(p.DeliveryDate),
	}
	return json.Marshal(marshaler)
}

func (p *PurchaseOrderRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The company the purchase order belongs to.
type PurchaseOrderRequestCompany struct {
	String      string
	CompanyInfo *CompanyInfo

	typ string
}

func (p *PurchaseOrderRequestCompany) GetString() string {
	if p == nil {
		return ""
	}
	return p.String
}

func (p *PurchaseOrderRequestCompany) GetCompanyInfo() *CompanyInfo {
	if p == nil {
		return nil
	}
	return p.CompanyInfo
}

func (p *PurchaseOrderRequestCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typ = "String"
		p.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		p.typ = "CompanyInfo"
		p.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderRequestCompany) MarshalJSON() ([]byte, error) {
	if p.typ == "String" || p.String != "" {
		return json.Marshal(p.String)
	}
	if p.typ == "CompanyInfo" || p.CompanyInfo != nil {
		return json.Marshal(p.CompanyInfo)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PurchaseOrderRequestCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (p *PurchaseOrderRequestCompany) Accept(visitor PurchaseOrderRequestCompanyVisitor) error {
	if p.typ == "String" || p.String != "" {
		return visitor.VisitString(p.String)
	}
	if p.typ == "CompanyInfo" || p.CompanyInfo != nil {
		return visitor.VisitCompanyInfo(p.CompanyInfo)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// The purchase order's delivery address.
type PurchaseOrderRequestDeliveryAddress struct {
	String  string
	Address *Address

	typ string
}

func (p *PurchaseOrderRequestDeliveryAddress) GetString() string {
	if p == nil {
		return ""
	}
	return p.String
}

func (p *PurchaseOrderRequestDeliveryAddress) GetAddress() *Address {
	if p == nil {
		return nil
	}
	return p.Address
}

func (p *PurchaseOrderRequestDeliveryAddress) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typ = "String"
		p.String = valueString
		return nil
	}
	valueAddress := new(Address)
	if err := json.Unmarshal(data, &valueAddress); err == nil {
		p.typ = "Address"
		p.Address = valueAddress
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderRequestDeliveryAddress) MarshalJSON() ([]byte, error) {
	if p.typ == "String" || p.String != "" {
		return json.Marshal(p.String)
	}
	if p.typ == "Address" || p.Address != nil {
		return json.Marshal(p.Address)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PurchaseOrderRequestDeliveryAddressVisitor interface {
	VisitString(string) error
	VisitAddress(*Address) error
}

func (p *PurchaseOrderRequestDeliveryAddress) Accept(visitor PurchaseOrderRequestDeliveryAddressVisitor) error {
	if p.typ == "String" || p.String != "" {
		return visitor.VisitString(p.String)
	}
	if p.typ == "Address" || p.Address != nil {
		return visitor.VisitAddress(p.Address)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// The payment term that applies to this transaction.
type PurchaseOrderRequestPaymentTerm struct {
	String      string
	PaymentTerm *PaymentTerm

	typ string
}

func (p *PurchaseOrderRequestPaymentTerm) GetString() string {
	if p == nil {
		return ""
	}
	return p.String
}

func (p *PurchaseOrderRequestPaymentTerm) GetPaymentTerm() *PaymentTerm {
	if p == nil {
		return nil
	}
	return p.PaymentTerm
}

func (p *PurchaseOrderRequestPaymentTerm) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typ = "String"
		p.String = valueString
		return nil
	}
	valuePaymentTerm := new(PaymentTerm)
	if err := json.Unmarshal(data, &valuePaymentTerm); err == nil {
		p.typ = "PaymentTerm"
		p.PaymentTerm = valuePaymentTerm
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderRequestPaymentTerm) MarshalJSON() ([]byte, error) {
	if p.typ == "String" || p.String != "" {
		return json.Marshal(p.String)
	}
	if p.typ == "PaymentTerm" || p.PaymentTerm != nil {
		return json.Marshal(p.PaymentTerm)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PurchaseOrderRequestPaymentTermVisitor interface {
	VisitString(string) error
	VisitPaymentTerm(*PaymentTerm) error
}

func (p *PurchaseOrderRequestPaymentTerm) Accept(visitor PurchaseOrderRequestPaymentTermVisitor) error {
	if p.typ == "String" || p.String != "" {
		return visitor.VisitString(p.String)
	}
	if p.typ == "PaymentTerm" || p.PaymentTerm != nil {
		return visitor.VisitPaymentTerm(p.PaymentTerm)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PurchaseOrderRequestTrackingCategoriesItem struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (p *PurchaseOrderRequestTrackingCategoriesItem) GetString() string {
	if p == nil {
		return ""
	}
	return p.String
}

func (p *PurchaseOrderRequestTrackingCategoriesItem) GetTrackingCategory() *TrackingCategory {
	if p == nil {
		return nil
	}
	return p.TrackingCategory
}

func (p *PurchaseOrderRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typ = "String"
		p.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		p.typ = "TrackingCategory"
		p.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	if p.typ == "String" || p.String != "" {
		return json.Marshal(p.String)
	}
	if p.typ == "TrackingCategory" || p.TrackingCategory != nil {
		return json.Marshal(p.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PurchaseOrderRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (p *PurchaseOrderRequestTrackingCategoriesItem) Accept(visitor PurchaseOrderRequestTrackingCategoriesItemVisitor) error {
	if p.typ == "String" || p.String != "" {
		return visitor.VisitString(p.String)
	}
	if p.typ == "TrackingCategory" || p.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(p.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// The party fulfilling the purchase order.
type PurchaseOrderRequestVendor struct {
	String  string
	Contact *Contact

	typ string
}

func (p *PurchaseOrderRequestVendor) GetString() string {
	if p == nil {
		return ""
	}
	return p.String
}

func (p *PurchaseOrderRequestVendor) GetContact() *Contact {
	if p == nil {
		return nil
	}
	return p.Contact
}

func (p *PurchaseOrderRequestVendor) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typ = "String"
		p.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		p.typ = "Contact"
		p.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderRequestVendor) MarshalJSON() ([]byte, error) {
	if p.typ == "String" || p.String != "" {
		return json.Marshal(p.String)
	}
	if p.typ == "Contact" || p.Contact != nil {
		return json.Marshal(p.Contact)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PurchaseOrderRequestVendorVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (p *PurchaseOrderRequestVendor) Accept(visitor PurchaseOrderRequestVendorVisitor) error {
	if p.typ == "String" || p.String != "" {
		return visitor.VisitString(p.String)
	}
	if p.typ == "Contact" || p.Contact != nil {
		return visitor.VisitContact(p.Contact)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PurchaseOrderResponse struct {
	Model    *PurchaseOrder              `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderResponse) GetModel() *PurchaseOrder {
	if p == nil {
		return nil
	}
	return p.Model
}

func (p *PurchaseOrderResponse) GetWarnings() []*WarningValidationProblem {
	if p == nil {
		return nil
	}
	return p.Warnings
}

func (p *PurchaseOrderResponse) GetErrors() []*ErrorValidationProblem {
	if p == nil {
		return nil
	}
	return p.Errors
}

func (p *PurchaseOrderResponse) GetLogs() []*DebugModeLog {
	if p == nil {
		return nil
	}
	return p.Logs
}

func (p *PurchaseOrderResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PurchaseOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PurchaseOrderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
