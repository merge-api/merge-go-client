// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type GeneralLedgerTransactionsListRequest struct {
	// If provided, will only return general ledger transactions for this company.
	CompanyId *string `json:"-" url:"company_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*GeneralLedgerTransactionsListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// If provided, will only return objects posted after this datetime.
	PostedDateAfter *time.Time `json:"-" url:"posted_date_after,omitempty"`
	// If provided, will only return objects posted before this datetime.
	PostedDateBefore *time.Time `json:"-" url:"posted_date_before,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
}

type GeneralLedgerTransactionsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*GeneralLedgerTransactionsRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

type GeneralLedgerTransactionsListRequestExpandItem string

const (
	GeneralLedgerTransactionsListRequestExpandItemAccountingPeriod              GeneralLedgerTransactionsListRequestExpandItem = "accounting_period"
	GeneralLedgerTransactionsListRequestExpandItemCompany                       GeneralLedgerTransactionsListRequestExpandItem = "company"
	GeneralLedgerTransactionsListRequestExpandItemGeneralLedgerTransactionLines GeneralLedgerTransactionsListRequestExpandItem = "general_ledger_transaction_lines"
	GeneralLedgerTransactionsListRequestExpandItemTrackingCategories            GeneralLedgerTransactionsListRequestExpandItem = "tracking_categories"
)

func NewGeneralLedgerTransactionsListRequestExpandItemFromString(s string) (GeneralLedgerTransactionsListRequestExpandItem, error) {
	switch s {
	case "accounting_period":
		return GeneralLedgerTransactionsListRequestExpandItemAccountingPeriod, nil
	case "company":
		return GeneralLedgerTransactionsListRequestExpandItemCompany, nil
	case "general_ledger_transaction_lines":
		return GeneralLedgerTransactionsListRequestExpandItemGeneralLedgerTransactionLines, nil
	case "tracking_categories":
		return GeneralLedgerTransactionsListRequestExpandItemTrackingCategories, nil
	}
	var t GeneralLedgerTransactionsListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GeneralLedgerTransactionsListRequestExpandItem) Ptr() *GeneralLedgerTransactionsListRequestExpandItem {
	return &g
}

type GeneralLedgerTransactionsRetrieveRequestExpandItem string

const (
	GeneralLedgerTransactionsRetrieveRequestExpandItemAccountingPeriod              GeneralLedgerTransactionsRetrieveRequestExpandItem = "accounting_period"
	GeneralLedgerTransactionsRetrieveRequestExpandItemCompany                       GeneralLedgerTransactionsRetrieveRequestExpandItem = "company"
	GeneralLedgerTransactionsRetrieveRequestExpandItemGeneralLedgerTransactionLines GeneralLedgerTransactionsRetrieveRequestExpandItem = "general_ledger_transaction_lines"
	GeneralLedgerTransactionsRetrieveRequestExpandItemTrackingCategories            GeneralLedgerTransactionsRetrieveRequestExpandItem = "tracking_categories"
)

func NewGeneralLedgerTransactionsRetrieveRequestExpandItemFromString(s string) (GeneralLedgerTransactionsRetrieveRequestExpandItem, error) {
	switch s {
	case "accounting_period":
		return GeneralLedgerTransactionsRetrieveRequestExpandItemAccountingPeriod, nil
	case "company":
		return GeneralLedgerTransactionsRetrieveRequestExpandItemCompany, nil
	case "general_ledger_transaction_lines":
		return GeneralLedgerTransactionsRetrieveRequestExpandItemGeneralLedgerTransactionLines, nil
	case "tracking_categories":
		return GeneralLedgerTransactionsRetrieveRequestExpandItemTrackingCategories, nil
	}
	var t GeneralLedgerTransactionsRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GeneralLedgerTransactionsRetrieveRequestExpandItem) Ptr() *GeneralLedgerTransactionsRetrieveRequestExpandItem {
	return &g
}

// # The GeneralLedgerTransaction Object
// ### Description
// A General Ledger Entry is a record of a financial transaction that is posted to the general ledger, the central repository of a company’s financial data.
//
// The `GeneralLedgerTransaction` object is a singular endpoint to pull all transactions posted to a company’s general ledger. The transaction that generated the `GeneralLedgerTransaction` can be found by referencing the `underlying_transaction_type` and `underlying_transaction_remote_id` fields.
//
// The lines of a `GeneralLedgerTransaction` object will always have equal amounts of debits and credits.
//
// ### Usage Example
// Fetch from the `GET GeneralLedgerTransaction` endpoint and view a general ledger transaction.
type GeneralLedgerTransaction struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The third party remote ID of the underlying transaction.
	UnderlyingTransactionRemoteId *string `json:"underlying_transaction_remote_id,omitempty" url:"underlying_transaction_remote_id,omitempty"`
	// The type of the underlying transaction.
	//
	// * `INVOICE` - INVOICE
	// * `EXPENSE` - EXPENSE
	// * `TRANSACTION` - TRANSACTION
	// * `JOURNAL_ENTRY` - JOURNAL_ENTRY
	// * `PAYMENT` - PAYMENT
	// * `VENDOR_CREDIT` - VENDOR_CREDIT
	// * `CREDIT_NOTE` - CREDIT_NOTE
	UnderlyingTransactionType *UnderlyingTransactionTypeEnum `json:"underlying_transaction_type,omitempty" url:"underlying_transaction_type,omitempty"`
	// The accounting period that the GeneralLedgerTransaction was generated in.
	AccountingPeriod *GeneralLedgerTransactionAccountingPeriod `json:"accounting_period,omitempty" url:"accounting_period,omitempty"`
	// The company the GeneralLedgerTransaction belongs to.
	Company *GeneralLedgerTransactionCompany `json:"company,omitempty" url:"company,omitempty"`
	// When the third party's GeneralLedgerTransaction entry was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty" url:"remote_updated_at,omitempty"`
	// When the third party's GeneralLedgerTransaction entry was created.
	RemoteCreatedAt    *time.Time                                        `json:"remote_created_at,omitempty" url:"remote_created_at,omitempty"`
	TrackingCategories []*GeneralLedgerTransactionTrackingCategoriesItem `json:"tracking_categories,omitempty" url:"tracking_categories,omitempty"`
	// The date that the transaction was posted to the general ledger.
	PostingDate *time.Time `json:"posting_date,omitempty" url:"posting_date,omitempty"`
	// A list of “General Ledger Transaction Applied to Lines” objects.
	GeneralLedgerTransactionLines []*GeneralLedgerTransactionGeneralLedgerTransactionLinesItem `json:"general_ledger_transaction_lines,omitempty" url:"general_ledger_transaction_lines,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GeneralLedgerTransaction) GetId() *string {
	if g == nil {
		return nil
	}
	return g.Id
}

func (g *GeneralLedgerTransaction) GetRemoteId() *string {
	if g == nil {
		return nil
	}
	return g.RemoteId
}

func (g *GeneralLedgerTransaction) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GeneralLedgerTransaction) GetModifiedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.ModifiedAt
}

func (g *GeneralLedgerTransaction) GetUnderlyingTransactionRemoteId() *string {
	if g == nil {
		return nil
	}
	return g.UnderlyingTransactionRemoteId
}

func (g *GeneralLedgerTransaction) GetUnderlyingTransactionType() *UnderlyingTransactionTypeEnum {
	if g == nil {
		return nil
	}
	return g.UnderlyingTransactionType
}

func (g *GeneralLedgerTransaction) GetAccountingPeriod() *GeneralLedgerTransactionAccountingPeriod {
	if g == nil {
		return nil
	}
	return g.AccountingPeriod
}

func (g *GeneralLedgerTransaction) GetCompany() *GeneralLedgerTransactionCompany {
	if g == nil {
		return nil
	}
	return g.Company
}

func (g *GeneralLedgerTransaction) GetRemoteUpdatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.RemoteUpdatedAt
}

func (g *GeneralLedgerTransaction) GetRemoteCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.RemoteCreatedAt
}

func (g *GeneralLedgerTransaction) GetTrackingCategories() []*GeneralLedgerTransactionTrackingCategoriesItem {
	if g == nil {
		return nil
	}
	return g.TrackingCategories
}

func (g *GeneralLedgerTransaction) GetPostingDate() *time.Time {
	if g == nil {
		return nil
	}
	return g.PostingDate
}

func (g *GeneralLedgerTransaction) GetGeneralLedgerTransactionLines() []*GeneralLedgerTransactionGeneralLedgerTransactionLinesItem {
	if g == nil {
		return nil
	}
	return g.GeneralLedgerTransactionLines
}

func (g *GeneralLedgerTransaction) GetRemoteWasDeleted() *bool {
	if g == nil {
		return nil
	}
	return g.RemoteWasDeleted
}

func (g *GeneralLedgerTransaction) GetFieldMappings() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.FieldMappings
}

func (g *GeneralLedgerTransaction) GetRemoteData() []*RemoteData {
	if g == nil {
		return nil
	}
	return g.RemoteData
}

func (g *GeneralLedgerTransaction) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GeneralLedgerTransaction) UnmarshalJSON(data []byte) error {
	type embed GeneralLedgerTransaction
	var unmarshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		RemoteUpdatedAt *internal.DateTime `json:"remote_updated_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
		PostingDate     *internal.DateTime `json:"posting_date,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GeneralLedgerTransaction(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	g.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	g.RemoteUpdatedAt = unmarshaler.RemoteUpdatedAt.TimePtr()
	g.RemoteCreatedAt = unmarshaler.RemoteCreatedAt.TimePtr()
	g.PostingDate = unmarshaler.PostingDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GeneralLedgerTransaction) MarshalJSON() ([]byte, error) {
	type embed GeneralLedgerTransaction
	var marshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		RemoteUpdatedAt *internal.DateTime `json:"remote_updated_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
		PostingDate     *internal.DateTime `json:"posting_date,omitempty"`
	}{
		embed:           embed(*g),
		CreatedAt:       internal.NewOptionalDateTime(g.CreatedAt),
		ModifiedAt:      internal.NewOptionalDateTime(g.ModifiedAt),
		RemoteUpdatedAt: internal.NewOptionalDateTime(g.RemoteUpdatedAt),
		RemoteCreatedAt: internal.NewOptionalDateTime(g.RemoteCreatedAt),
		PostingDate:     internal.NewOptionalDateTime(g.PostingDate),
	}
	return json.Marshal(marshaler)
}

func (g *GeneralLedgerTransaction) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// The accounting period that the GeneralLedgerTransaction was generated in.
type GeneralLedgerTransactionAccountingPeriod struct {
	String           string
	AccountingPeriod *AccountingPeriod

	typ string
}

func (g *GeneralLedgerTransactionAccountingPeriod) GetString() string {
	if g == nil {
		return ""
	}
	return g.String
}

func (g *GeneralLedgerTransactionAccountingPeriod) GetAccountingPeriod() *AccountingPeriod {
	if g == nil {
		return nil
	}
	return g.AccountingPeriod
}

func (g *GeneralLedgerTransactionAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		g.typ = "String"
		g.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		g.typ = "AccountingPeriod"
		g.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, g)
}

func (g GeneralLedgerTransactionAccountingPeriod) MarshalJSON() ([]byte, error) {
	if g.typ == "String" || g.String != "" {
		return json.Marshal(g.String)
	}
	if g.typ == "AccountingPeriod" || g.AccountingPeriod != nil {
		return json.Marshal(g.AccountingPeriod)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (g *GeneralLedgerTransactionAccountingPeriod) Accept(visitor GeneralLedgerTransactionAccountingPeriodVisitor) error {
	if g.typ == "String" || g.String != "" {
		return visitor.VisitString(g.String)
	}
	if g.typ == "AccountingPeriod" || g.AccountingPeriod != nil {
		return visitor.VisitAccountingPeriod(g.AccountingPeriod)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", g)
}

// The company the GeneralLedgerTransaction belongs to.
type GeneralLedgerTransactionCompany struct {
	String      string
	CompanyInfo *CompanyInfo

	typ string
}

func (g *GeneralLedgerTransactionCompany) GetString() string {
	if g == nil {
		return ""
	}
	return g.String
}

func (g *GeneralLedgerTransactionCompany) GetCompanyInfo() *CompanyInfo {
	if g == nil {
		return nil
	}
	return g.CompanyInfo
}

func (g *GeneralLedgerTransactionCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		g.typ = "String"
		g.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		g.typ = "CompanyInfo"
		g.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, g)
}

func (g GeneralLedgerTransactionCompany) MarshalJSON() ([]byte, error) {
	if g.typ == "String" || g.String != "" {
		return json.Marshal(g.String)
	}
	if g.typ == "CompanyInfo" || g.CompanyInfo != nil {
		return json.Marshal(g.CompanyInfo)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (g *GeneralLedgerTransactionCompany) Accept(visitor GeneralLedgerTransactionCompanyVisitor) error {
	if g.typ == "String" || g.String != "" {
		return visitor.VisitString(g.String)
	}
	if g.typ == "CompanyInfo" || g.CompanyInfo != nil {
		return visitor.VisitCompanyInfo(g.CompanyInfo)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionGeneralLedgerTransactionLinesItem struct {
	String                       string
	GeneralLedgerTransactionLine *GeneralLedgerTransactionLine

	typ string
}

func (g *GeneralLedgerTransactionGeneralLedgerTransactionLinesItem) GetString() string {
	if g == nil {
		return ""
	}
	return g.String
}

func (g *GeneralLedgerTransactionGeneralLedgerTransactionLinesItem) GetGeneralLedgerTransactionLine() *GeneralLedgerTransactionLine {
	if g == nil {
		return nil
	}
	return g.GeneralLedgerTransactionLine
}

func (g *GeneralLedgerTransactionGeneralLedgerTransactionLinesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		g.typ = "String"
		g.String = valueString
		return nil
	}
	valueGeneralLedgerTransactionLine := new(GeneralLedgerTransactionLine)
	if err := json.Unmarshal(data, &valueGeneralLedgerTransactionLine); err == nil {
		g.typ = "GeneralLedgerTransactionLine"
		g.GeneralLedgerTransactionLine = valueGeneralLedgerTransactionLine
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, g)
}

func (g GeneralLedgerTransactionGeneralLedgerTransactionLinesItem) MarshalJSON() ([]byte, error) {
	if g.typ == "String" || g.String != "" {
		return json.Marshal(g.String)
	}
	if g.typ == "GeneralLedgerTransactionLine" || g.GeneralLedgerTransactionLine != nil {
		return json.Marshal(g.GeneralLedgerTransactionLine)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionGeneralLedgerTransactionLinesItemVisitor interface {
	VisitString(string) error
	VisitGeneralLedgerTransactionLine(*GeneralLedgerTransactionLine) error
}

func (g *GeneralLedgerTransactionGeneralLedgerTransactionLinesItem) Accept(visitor GeneralLedgerTransactionGeneralLedgerTransactionLinesItemVisitor) error {
	if g.typ == "String" || g.String != "" {
		return visitor.VisitString(g.String)
	}
	if g.typ == "GeneralLedgerTransactionLine" || g.GeneralLedgerTransactionLine != nil {
		return visitor.VisitGeneralLedgerTransactionLine(g.GeneralLedgerTransactionLine)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", g)
}

// # The GeneralLedgerTransactionLineSerializer Object
// ### Description
// The `GeneralLedgerTransactionLineSerializer` object represents general ledger transaction line item.
//
// ### Usage Example Fetch from the `GET GeneralLedgerTransactionLineSerializer` endpoint and view an
// `GeneralLedgerTransaction` line item.
type GeneralLedgerTransactionLine struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time                           `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	Account    *GeneralLedgerTransactionLineAccount `json:"account,omitempty" url:"account,omitempty"`
	// The company the GeneralLedgerTransaction belongs to.
	Company  *GeneralLedgerTransactionLineCompany  `json:"company,omitempty" url:"company,omitempty"`
	Employee *GeneralLedgerTransactionLineEmployee `json:"employee,omitempty" url:"employee,omitempty"`
	Contact  *GeneralLedgerTransactionLineContact  `json:"contact,omitempty" url:"contact,omitempty"`
	// The base currency of the transaction
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	BaseCurrency *TransactionCurrencyEnum `json:"base_currency,omitempty" url:"base_currency,omitempty"`
	// The transaction currency that the transaction is made in.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	TransactionCurrency *TransactionCurrencyEnum `json:"transaction_currency,omitempty" url:"transaction_currency,omitempty"`
	// The exchange rate between the base currency and the transaction currency.
	ExchangeRate *string `json:"exchange_rate,omitempty" url:"exchange_rate,omitempty"`
	// A description of the line item.
	Description         *string                                               `json:"description,omitempty" url:"description,omitempty"`
	TrackingCategories  []*GeneralLedgerTransactionLineTrackingCategoriesItem `json:"tracking_categories,omitempty" url:"tracking_categories,omitempty"`
	DebitAmount         string                                                `json:"debit_amount" url:"debit_amount"`
	CreditAmount        string                                                `json:"credit_amount" url:"credit_amount"`
	Item                *GeneralLedgerTransactionLineItem                     `json:"item,omitempty" url:"item,omitempty"`
	ForeignDebitAmount  string                                                `json:"foreign_debit_amount" url:"foreign_debit_amount"`
	ForeignCreditAmount string                                                `json:"foreign_credit_amount" url:"foreign_credit_amount"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GeneralLedgerTransactionLine) GetId() *string {
	if g == nil {
		return nil
	}
	return g.Id
}

func (g *GeneralLedgerTransactionLine) GetRemoteId() *string {
	if g == nil {
		return nil
	}
	return g.RemoteId
}

func (g *GeneralLedgerTransactionLine) GetCreatedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAt
}

func (g *GeneralLedgerTransactionLine) GetModifiedAt() *time.Time {
	if g == nil {
		return nil
	}
	return g.ModifiedAt
}

func (g *GeneralLedgerTransactionLine) GetAccount() *GeneralLedgerTransactionLineAccount {
	if g == nil {
		return nil
	}
	return g.Account
}

func (g *GeneralLedgerTransactionLine) GetCompany() *GeneralLedgerTransactionLineCompany {
	if g == nil {
		return nil
	}
	return g.Company
}

func (g *GeneralLedgerTransactionLine) GetEmployee() *GeneralLedgerTransactionLineEmployee {
	if g == nil {
		return nil
	}
	return g.Employee
}

func (g *GeneralLedgerTransactionLine) GetContact() *GeneralLedgerTransactionLineContact {
	if g == nil {
		return nil
	}
	return g.Contact
}

func (g *GeneralLedgerTransactionLine) GetBaseCurrency() *TransactionCurrencyEnum {
	if g == nil {
		return nil
	}
	return g.BaseCurrency
}

func (g *GeneralLedgerTransactionLine) GetTransactionCurrency() *TransactionCurrencyEnum {
	if g == nil {
		return nil
	}
	return g.TransactionCurrency
}

func (g *GeneralLedgerTransactionLine) GetExchangeRate() *string {
	if g == nil {
		return nil
	}
	return g.ExchangeRate
}

func (g *GeneralLedgerTransactionLine) GetDescription() *string {
	if g == nil {
		return nil
	}
	return g.Description
}

func (g *GeneralLedgerTransactionLine) GetTrackingCategories() []*GeneralLedgerTransactionLineTrackingCategoriesItem {
	if g == nil {
		return nil
	}
	return g.TrackingCategories
}

func (g *GeneralLedgerTransactionLine) GetDebitAmount() string {
	if g == nil {
		return ""
	}
	return g.DebitAmount
}

func (g *GeneralLedgerTransactionLine) GetCreditAmount() string {
	if g == nil {
		return ""
	}
	return g.CreditAmount
}

func (g *GeneralLedgerTransactionLine) GetItem() *GeneralLedgerTransactionLineItem {
	if g == nil {
		return nil
	}
	return g.Item
}

func (g *GeneralLedgerTransactionLine) GetForeignDebitAmount() string {
	if g == nil {
		return ""
	}
	return g.ForeignDebitAmount
}

func (g *GeneralLedgerTransactionLine) GetForeignCreditAmount() string {
	if g == nil {
		return ""
	}
	return g.ForeignCreditAmount
}

func (g *GeneralLedgerTransactionLine) GetRemoteWasDeleted() *bool {
	if g == nil {
		return nil
	}
	return g.RemoteWasDeleted
}

func (g *GeneralLedgerTransactionLine) GetFieldMappings() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.FieldMappings
}

func (g *GeneralLedgerTransactionLine) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GeneralLedgerTransactionLine) UnmarshalJSON(data []byte) error {
	type embed GeneralLedgerTransactionLine
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GeneralLedgerTransactionLine(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	g.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GeneralLedgerTransactionLine) MarshalJSON() ([]byte, error) {
	type embed GeneralLedgerTransactionLine
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*g),
		CreatedAt:  internal.NewOptionalDateTime(g.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(g.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (g *GeneralLedgerTransactionLine) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GeneralLedgerTransactionLineAccount struct {
	String  string
	Account *Account

	typ string
}

func (g *GeneralLedgerTransactionLineAccount) GetString() string {
	if g == nil {
		return ""
	}
	return g.String
}

func (g *GeneralLedgerTransactionLineAccount) GetAccount() *Account {
	if g == nil {
		return nil
	}
	return g.Account
}

func (g *GeneralLedgerTransactionLineAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		g.typ = "String"
		g.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		g.typ = "Account"
		g.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, g)
}

func (g GeneralLedgerTransactionLineAccount) MarshalJSON() ([]byte, error) {
	if g.typ == "String" || g.String != "" {
		return json.Marshal(g.String)
	}
	if g.typ == "Account" || g.Account != nil {
		return json.Marshal(g.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionLineAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (g *GeneralLedgerTransactionLineAccount) Accept(visitor GeneralLedgerTransactionLineAccountVisitor) error {
	if g.typ == "String" || g.String != "" {
		return visitor.VisitString(g.String)
	}
	if g.typ == "Account" || g.Account != nil {
		return visitor.VisitAccount(g.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", g)
}

// The company the GeneralLedgerTransaction belongs to.
type GeneralLedgerTransactionLineCompany struct {
	String      string
	CompanyInfo *CompanyInfo

	typ string
}

func (g *GeneralLedgerTransactionLineCompany) GetString() string {
	if g == nil {
		return ""
	}
	return g.String
}

func (g *GeneralLedgerTransactionLineCompany) GetCompanyInfo() *CompanyInfo {
	if g == nil {
		return nil
	}
	return g.CompanyInfo
}

func (g *GeneralLedgerTransactionLineCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		g.typ = "String"
		g.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		g.typ = "CompanyInfo"
		g.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, g)
}

func (g GeneralLedgerTransactionLineCompany) MarshalJSON() ([]byte, error) {
	if g.typ == "String" || g.String != "" {
		return json.Marshal(g.String)
	}
	if g.typ == "CompanyInfo" || g.CompanyInfo != nil {
		return json.Marshal(g.CompanyInfo)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionLineCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (g *GeneralLedgerTransactionLineCompany) Accept(visitor GeneralLedgerTransactionLineCompanyVisitor) error {
	if g.typ == "String" || g.String != "" {
		return visitor.VisitString(g.String)
	}
	if g.typ == "CompanyInfo" || g.CompanyInfo != nil {
		return visitor.VisitCompanyInfo(g.CompanyInfo)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionLineContact struct {
	String  string
	Contact *Contact

	typ string
}

func (g *GeneralLedgerTransactionLineContact) GetString() string {
	if g == nil {
		return ""
	}
	return g.String
}

func (g *GeneralLedgerTransactionLineContact) GetContact() *Contact {
	if g == nil {
		return nil
	}
	return g.Contact
}

func (g *GeneralLedgerTransactionLineContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		g.typ = "String"
		g.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		g.typ = "Contact"
		g.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, g)
}

func (g GeneralLedgerTransactionLineContact) MarshalJSON() ([]byte, error) {
	if g.typ == "String" || g.String != "" {
		return json.Marshal(g.String)
	}
	if g.typ == "Contact" || g.Contact != nil {
		return json.Marshal(g.Contact)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionLineContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (g *GeneralLedgerTransactionLineContact) Accept(visitor GeneralLedgerTransactionLineContactVisitor) error {
	if g.typ == "String" || g.String != "" {
		return visitor.VisitString(g.String)
	}
	if g.typ == "Contact" || g.Contact != nil {
		return visitor.VisitContact(g.Contact)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionLineEmployee struct {
	String   string
	Employee *Employee

	typ string
}

func (g *GeneralLedgerTransactionLineEmployee) GetString() string {
	if g == nil {
		return ""
	}
	return g.String
}

func (g *GeneralLedgerTransactionLineEmployee) GetEmployee() *Employee {
	if g == nil {
		return nil
	}
	return g.Employee
}

func (g *GeneralLedgerTransactionLineEmployee) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		g.typ = "String"
		g.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		g.typ = "Employee"
		g.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, g)
}

func (g GeneralLedgerTransactionLineEmployee) MarshalJSON() ([]byte, error) {
	if g.typ == "String" || g.String != "" {
		return json.Marshal(g.String)
	}
	if g.typ == "Employee" || g.Employee != nil {
		return json.Marshal(g.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionLineEmployeeVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (g *GeneralLedgerTransactionLineEmployee) Accept(visitor GeneralLedgerTransactionLineEmployeeVisitor) error {
	if g.typ == "String" || g.String != "" {
		return visitor.VisitString(g.String)
	}
	if g.typ == "Employee" || g.Employee != nil {
		return visitor.VisitEmployee(g.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionLineItem struct {
	String string
	Item   *Item

	typ string
}

func (g *GeneralLedgerTransactionLineItem) GetString() string {
	if g == nil {
		return ""
	}
	return g.String
}

func (g *GeneralLedgerTransactionLineItem) GetItem() *Item {
	if g == nil {
		return nil
	}
	return g.Item
}

func (g *GeneralLedgerTransactionLineItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		g.typ = "String"
		g.String = valueString
		return nil
	}
	valueItem := new(Item)
	if err := json.Unmarshal(data, &valueItem); err == nil {
		g.typ = "Item"
		g.Item = valueItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, g)
}

func (g GeneralLedgerTransactionLineItem) MarshalJSON() ([]byte, error) {
	if g.typ == "String" || g.String != "" {
		return json.Marshal(g.String)
	}
	if g.typ == "Item" || g.Item != nil {
		return json.Marshal(g.Item)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionLineItemVisitor interface {
	VisitString(string) error
	VisitItem(*Item) error
}

func (g *GeneralLedgerTransactionLineItem) Accept(visitor GeneralLedgerTransactionLineItemVisitor) error {
	if g.typ == "String" || g.String != "" {
		return visitor.VisitString(g.String)
	}
	if g.typ == "Item" || g.Item != nil {
		return visitor.VisitItem(g.Item)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionLineTrackingCategoriesItem struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (g *GeneralLedgerTransactionLineTrackingCategoriesItem) GetString() string {
	if g == nil {
		return ""
	}
	return g.String
}

func (g *GeneralLedgerTransactionLineTrackingCategoriesItem) GetTrackingCategory() *TrackingCategory {
	if g == nil {
		return nil
	}
	return g.TrackingCategory
}

func (g *GeneralLedgerTransactionLineTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		g.typ = "String"
		g.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		g.typ = "TrackingCategory"
		g.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, g)
}

func (g GeneralLedgerTransactionLineTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	if g.typ == "String" || g.String != "" {
		return json.Marshal(g.String)
	}
	if g.typ == "TrackingCategory" || g.TrackingCategory != nil {
		return json.Marshal(g.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionLineTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (g *GeneralLedgerTransactionLineTrackingCategoriesItem) Accept(visitor GeneralLedgerTransactionLineTrackingCategoriesItemVisitor) error {
	if g.typ == "String" || g.String != "" {
		return visitor.VisitString(g.String)
	}
	if g.typ == "TrackingCategory" || g.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(g.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionTrackingCategoriesItem struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (g *GeneralLedgerTransactionTrackingCategoriesItem) GetString() string {
	if g == nil {
		return ""
	}
	return g.String
}

func (g *GeneralLedgerTransactionTrackingCategoriesItem) GetTrackingCategory() *TrackingCategory {
	if g == nil {
		return nil
	}
	return g.TrackingCategory
}

func (g *GeneralLedgerTransactionTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		g.typ = "String"
		g.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		g.typ = "TrackingCategory"
		g.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, g)
}

func (g GeneralLedgerTransactionTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	if g.typ == "String" || g.String != "" {
		return json.Marshal(g.String)
	}
	if g.typ == "TrackingCategory" || g.TrackingCategory != nil {
		return json.Marshal(g.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GeneralLedgerTransactionTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (g *GeneralLedgerTransactionTrackingCategoriesItem) Accept(visitor GeneralLedgerTransactionTrackingCategoriesItemVisitor) error {
	if g.typ == "String" || g.String != "" {
		return visitor.VisitString(g.String)
	}
	if g.typ == "TrackingCategory" || g.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(g.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", g)
}

type PaginatedGeneralLedgerTransactionList struct {
	Next     *string                     `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                     `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*GeneralLedgerTransaction `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedGeneralLedgerTransactionList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedGeneralLedgerTransactionList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedGeneralLedgerTransactionList) GetResults() []*GeneralLedgerTransaction {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedGeneralLedgerTransactionList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedGeneralLedgerTransactionList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedGeneralLedgerTransactionList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedGeneralLedgerTransactionList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedGeneralLedgerTransactionList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// * `INVOICE` - INVOICE
// * `EXPENSE` - EXPENSE
// * `TRANSACTION` - TRANSACTION
// * `JOURNAL_ENTRY` - JOURNAL_ENTRY
// * `PAYMENT` - PAYMENT
// * `VENDOR_CREDIT` - VENDOR_CREDIT
// * `CREDIT_NOTE` - CREDIT_NOTE
type UnderlyingTransactionTypeEnum string

const (
	UnderlyingTransactionTypeEnumInvoice      UnderlyingTransactionTypeEnum = "INVOICE"
	UnderlyingTransactionTypeEnumExpense      UnderlyingTransactionTypeEnum = "EXPENSE"
	UnderlyingTransactionTypeEnumTransaction  UnderlyingTransactionTypeEnum = "TRANSACTION"
	UnderlyingTransactionTypeEnumJournalEntry UnderlyingTransactionTypeEnum = "JOURNAL_ENTRY"
	UnderlyingTransactionTypeEnumPayment      UnderlyingTransactionTypeEnum = "PAYMENT"
	UnderlyingTransactionTypeEnumVendorCredit UnderlyingTransactionTypeEnum = "VENDOR_CREDIT"
	UnderlyingTransactionTypeEnumCreditNote   UnderlyingTransactionTypeEnum = "CREDIT_NOTE"
)

func NewUnderlyingTransactionTypeEnumFromString(s string) (UnderlyingTransactionTypeEnum, error) {
	switch s {
	case "INVOICE":
		return UnderlyingTransactionTypeEnumInvoice, nil
	case "EXPENSE":
		return UnderlyingTransactionTypeEnumExpense, nil
	case "TRANSACTION":
		return UnderlyingTransactionTypeEnumTransaction, nil
	case "JOURNAL_ENTRY":
		return UnderlyingTransactionTypeEnumJournalEntry, nil
	case "PAYMENT":
		return UnderlyingTransactionTypeEnumPayment, nil
	case "VENDOR_CREDIT":
		return UnderlyingTransactionTypeEnumVendorCredit, nil
	case "CREDIT_NOTE":
		return UnderlyingTransactionTypeEnumCreditNote, nil
	}
	var t UnderlyingTransactionTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UnderlyingTransactionTypeEnum) Ptr() *UnderlyingTransactionTypeEnum {
	return &u
}
