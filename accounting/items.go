// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type ItemEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool               `json:"-" url:"run_async,omitempty"`
	Model    *ItemRequestRequest `json:"model,omitempty" url:"-"`
}

type ItemsListRequest struct {
	// If provided, will only return items for this company.
	CompanyId *string `json:"-" url:"company_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*ItemsListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type PatchedItemEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool                      `json:"-" url:"run_async,omitempty"`
	Model    *PatchedItemRequestRequest `json:"model,omitempty" url:"-"`
}

type ItemsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*ItemsRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type ItemsListRequestExpandItem string

const (
	ItemsListRequestExpandItemCompany         ItemsListRequestExpandItem = "company"
	ItemsListRequestExpandItemPurchaseAccount ItemsListRequestExpandItem = "purchase_account"
	ItemsListRequestExpandItemPurchaseTaxRate ItemsListRequestExpandItem = "purchase_tax_rate"
	ItemsListRequestExpandItemSalesAccount    ItemsListRequestExpandItem = "sales_account"
	ItemsListRequestExpandItemSalesTaxRate    ItemsListRequestExpandItem = "sales_tax_rate"
)

func NewItemsListRequestExpandItemFromString(s string) (ItemsListRequestExpandItem, error) {
	switch s {
	case "company":
		return ItemsListRequestExpandItemCompany, nil
	case "purchase_account":
		return ItemsListRequestExpandItemPurchaseAccount, nil
	case "purchase_tax_rate":
		return ItemsListRequestExpandItemPurchaseTaxRate, nil
	case "sales_account":
		return ItemsListRequestExpandItemSalesAccount, nil
	case "sales_tax_rate":
		return ItemsListRequestExpandItemSalesTaxRate, nil
	}
	var t ItemsListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i ItemsListRequestExpandItem) Ptr() *ItemsListRequestExpandItem {
	return &i
}

type ItemsRetrieveRequestExpandItem string

const (
	ItemsRetrieveRequestExpandItemCompany         ItemsRetrieveRequestExpandItem = "company"
	ItemsRetrieveRequestExpandItemPurchaseAccount ItemsRetrieveRequestExpandItem = "purchase_account"
	ItemsRetrieveRequestExpandItemPurchaseTaxRate ItemsRetrieveRequestExpandItem = "purchase_tax_rate"
	ItemsRetrieveRequestExpandItemSalesAccount    ItemsRetrieveRequestExpandItem = "sales_account"
	ItemsRetrieveRequestExpandItemSalesTaxRate    ItemsRetrieveRequestExpandItem = "sales_tax_rate"
)

func NewItemsRetrieveRequestExpandItemFromString(s string) (ItemsRetrieveRequestExpandItem, error) {
	switch s {
	case "company":
		return ItemsRetrieveRequestExpandItemCompany, nil
	case "purchase_account":
		return ItemsRetrieveRequestExpandItemPurchaseAccount, nil
	case "purchase_tax_rate":
		return ItemsRetrieveRequestExpandItemPurchaseTaxRate, nil
	case "sales_account":
		return ItemsRetrieveRequestExpandItemSalesAccount, nil
	case "sales_tax_rate":
		return ItemsRetrieveRequestExpandItemSalesTaxRate, nil
	}
	var t ItemsRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i ItemsRetrieveRequestExpandItem) Ptr() *ItemsRetrieveRequestExpandItem {
	return &i
}

// # The Item Object
// ### Description
// The `Item` object refers to the goods involved in a transaction.
//
// ### Usage Example
// Fetch from the `LIST Items` endpoint and view a company's items.
type ItemRequestRequest struct {
	// The item's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The item's status.
	//
	// * `ACTIVE` - ACTIVE
	// * `ARCHIVED` - ARCHIVED
	Status *ItemRequestRequestStatus `json:"status,omitempty" url:"status,omitempty"`
	// The item's type.
	//
	// * `INVENTORY` - INVENTORY
	// * `NON_INVENTORY` - NON_INVENTORY
	// * `SERVICE` - SERVICE
	// * `UNKNOWN` - UNKNOWN
	Type *ItemRequestRequestType `json:"type,omitempty" url:"type,omitempty"`
	// The item's unit price.
	UnitPrice *float64 `json:"unit_price,omitempty" url:"unit_price,omitempty"`
	// The price at which the item is purchased from a vendor.
	PurchasePrice *float64 `json:"purchase_price,omitempty" url:"purchase_price,omitempty"`
	// References the default account used to record a purchase of the item.
	PurchaseAccount *ItemRequestRequestPurchaseAccount `json:"purchase_account,omitempty" url:"purchase_account,omitempty"`
	// References the default account used to record a sale.
	SalesAccount *ItemRequestRequestSalesAccount `json:"sales_account,omitempty" url:"sales_account,omitempty"`
	// The company the item belongs to.
	Company *ItemRequestRequestCompany `json:"company,omitempty" url:"company,omitempty"`
	// The default purchase tax rate for this item.
	PurchaseTaxRate *ItemRequestRequestPurchaseTaxRate `json:"purchase_tax_rate,omitempty" url:"purchase_tax_rate,omitempty"`
	// The default sales tax rate for this item.
	SalesTaxRate        *ItemRequestRequestSalesTaxRate `json:"sales_tax_rate,omitempty" url:"sales_tax_rate,omitempty"`
	IntegrationParams   map[string]interface{}          `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}          `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *ItemRequestRequest) GetName() *string {
	if i == nil {
		return nil
	}
	return i.Name
}

func (i *ItemRequestRequest) GetStatus() *ItemRequestRequestStatus {
	if i == nil {
		return nil
	}
	return i.Status
}

func (i *ItemRequestRequest) GetType() *ItemRequestRequestType {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *ItemRequestRequest) GetUnitPrice() *float64 {
	if i == nil {
		return nil
	}
	return i.UnitPrice
}

func (i *ItemRequestRequest) GetPurchasePrice() *float64 {
	if i == nil {
		return nil
	}
	return i.PurchasePrice
}

func (i *ItemRequestRequest) GetPurchaseAccount() *ItemRequestRequestPurchaseAccount {
	if i == nil {
		return nil
	}
	return i.PurchaseAccount
}

func (i *ItemRequestRequest) GetSalesAccount() *ItemRequestRequestSalesAccount {
	if i == nil {
		return nil
	}
	return i.SalesAccount
}

func (i *ItemRequestRequest) GetCompany() *ItemRequestRequestCompany {
	if i == nil {
		return nil
	}
	return i.Company
}

func (i *ItemRequestRequest) GetPurchaseTaxRate() *ItemRequestRequestPurchaseTaxRate {
	if i == nil {
		return nil
	}
	return i.PurchaseTaxRate
}

func (i *ItemRequestRequest) GetSalesTaxRate() *ItemRequestRequestSalesTaxRate {
	if i == nil {
		return nil
	}
	return i.SalesTaxRate
}

func (i *ItemRequestRequest) GetIntegrationParams() map[string]interface{} {
	if i == nil {
		return nil
	}
	return i.IntegrationParams
}

func (i *ItemRequestRequest) GetLinkedAccountParams() map[string]interface{} {
	if i == nil {
		return nil
	}
	return i.LinkedAccountParams
}

func (i *ItemRequestRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ItemRequestRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ItemRequestRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ItemRequestRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *ItemRequestRequest) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// The company the item belongs to.
type ItemRequestRequestCompany struct {
	String      string
	CompanyInfo *CompanyInfo

	typ string
}

func (i *ItemRequestRequestCompany) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *ItemRequestRequestCompany) GetCompanyInfo() *CompanyInfo {
	if i == nil {
		return nil
	}
	return i.CompanyInfo
}

func (i *ItemRequestRequestCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		i.typ = "CompanyInfo"
		i.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i ItemRequestRequestCompany) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "CompanyInfo" || i.CompanyInfo != nil {
		return json.Marshal(i.CompanyInfo)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type ItemRequestRequestCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (i *ItemRequestRequestCompany) Accept(visitor ItemRequestRequestCompanyVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "CompanyInfo" || i.CompanyInfo != nil {
		return visitor.VisitCompanyInfo(i.CompanyInfo)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// References the default account used to record a purchase of the item.
type ItemRequestRequestPurchaseAccount struct {
	String  string
	Account *Account

	typ string
}

func (i *ItemRequestRequestPurchaseAccount) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *ItemRequestRequestPurchaseAccount) GetAccount() *Account {
	if i == nil {
		return nil
	}
	return i.Account
}

func (i *ItemRequestRequestPurchaseAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		i.typ = "Account"
		i.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i ItemRequestRequestPurchaseAccount) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "Account" || i.Account != nil {
		return json.Marshal(i.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type ItemRequestRequestPurchaseAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (i *ItemRequestRequestPurchaseAccount) Accept(visitor ItemRequestRequestPurchaseAccountVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "Account" || i.Account != nil {
		return visitor.VisitAccount(i.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// The default purchase tax rate for this item.
type ItemRequestRequestPurchaseTaxRate struct {
	String  string
	TaxRate *TaxRate

	typ string
}

func (i *ItemRequestRequestPurchaseTaxRate) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *ItemRequestRequestPurchaseTaxRate) GetTaxRate() *TaxRate {
	if i == nil {
		return nil
	}
	return i.TaxRate
}

func (i *ItemRequestRequestPurchaseTaxRate) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueTaxRate := new(TaxRate)
	if err := json.Unmarshal(data, &valueTaxRate); err == nil {
		i.typ = "TaxRate"
		i.TaxRate = valueTaxRate
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i ItemRequestRequestPurchaseTaxRate) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "TaxRate" || i.TaxRate != nil {
		return json.Marshal(i.TaxRate)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type ItemRequestRequestPurchaseTaxRateVisitor interface {
	VisitString(string) error
	VisitTaxRate(*TaxRate) error
}

func (i *ItemRequestRequestPurchaseTaxRate) Accept(visitor ItemRequestRequestPurchaseTaxRateVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "TaxRate" || i.TaxRate != nil {
		return visitor.VisitTaxRate(i.TaxRate)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// References the default account used to record a sale.
type ItemRequestRequestSalesAccount struct {
	String  string
	Account *Account

	typ string
}

func (i *ItemRequestRequestSalesAccount) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *ItemRequestRequestSalesAccount) GetAccount() *Account {
	if i == nil {
		return nil
	}
	return i.Account
}

func (i *ItemRequestRequestSalesAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		i.typ = "Account"
		i.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i ItemRequestRequestSalesAccount) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "Account" || i.Account != nil {
		return json.Marshal(i.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type ItemRequestRequestSalesAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (i *ItemRequestRequestSalesAccount) Accept(visitor ItemRequestRequestSalesAccountVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "Account" || i.Account != nil {
		return visitor.VisitAccount(i.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// The default sales tax rate for this item.
type ItemRequestRequestSalesTaxRate struct {
	String  string
	TaxRate *TaxRate

	typ string
}

func (i *ItemRequestRequestSalesTaxRate) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *ItemRequestRequestSalesTaxRate) GetTaxRate() *TaxRate {
	if i == nil {
		return nil
	}
	return i.TaxRate
}

func (i *ItemRequestRequestSalesTaxRate) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	valueTaxRate := new(TaxRate)
	if err := json.Unmarshal(data, &valueTaxRate); err == nil {
		i.typ = "TaxRate"
		i.TaxRate = valueTaxRate
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i ItemRequestRequestSalesTaxRate) MarshalJSON() ([]byte, error) {
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	if i.typ == "TaxRate" || i.TaxRate != nil {
		return json.Marshal(i.TaxRate)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type ItemRequestRequestSalesTaxRateVisitor interface {
	VisitString(string) error
	VisitTaxRate(*TaxRate) error
}

func (i *ItemRequestRequestSalesTaxRate) Accept(visitor ItemRequestRequestSalesTaxRateVisitor) error {
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	if i.typ == "TaxRate" || i.TaxRate != nil {
		return visitor.VisitTaxRate(i.TaxRate)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// The item's status.
//
// * `ACTIVE` - ACTIVE
// * `ARCHIVED` - ARCHIVED
type ItemRequestRequestStatus struct {
	Status7D1Enum Status7D1Enum
	String        string

	typ string
}

func (i *ItemRequestRequestStatus) GetStatus7D1Enum() Status7D1Enum {
	if i == nil {
		return ""
	}
	return i.Status7D1Enum
}

func (i *ItemRequestRequestStatus) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *ItemRequestRequestStatus) UnmarshalJSON(data []byte) error {
	var valueStatus7D1Enum Status7D1Enum
	if err := json.Unmarshal(data, &valueStatus7D1Enum); err == nil {
		i.typ = "Status7D1Enum"
		i.Status7D1Enum = valueStatus7D1Enum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i ItemRequestRequestStatus) MarshalJSON() ([]byte, error) {
	if i.typ == "Status7D1Enum" || i.Status7D1Enum != "" {
		return json.Marshal(i.Status7D1Enum)
	}
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type ItemRequestRequestStatusVisitor interface {
	VisitStatus7D1Enum(Status7D1Enum) error
	VisitString(string) error
}

func (i *ItemRequestRequestStatus) Accept(visitor ItemRequestRequestStatusVisitor) error {
	if i.typ == "Status7D1Enum" || i.Status7D1Enum != "" {
		return visitor.VisitStatus7D1Enum(i.Status7D1Enum)
	}
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// The item's type.
//
// * `INVENTORY` - INVENTORY
// * `NON_INVENTORY` - NON_INVENTORY
// * `SERVICE` - SERVICE
// * `UNKNOWN` - UNKNOWN
type ItemRequestRequestType struct {
	Type2BbEnum Type2BbEnum
	String      string

	typ string
}

func (i *ItemRequestRequestType) GetType2BbEnum() Type2BbEnum {
	if i == nil {
		return ""
	}
	return i.Type2BbEnum
}

func (i *ItemRequestRequestType) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *ItemRequestRequestType) UnmarshalJSON(data []byte) error {
	var valueType2BbEnum Type2BbEnum
	if err := json.Unmarshal(data, &valueType2BbEnum); err == nil {
		i.typ = "Type2BbEnum"
		i.Type2BbEnum = valueType2BbEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i ItemRequestRequestType) MarshalJSON() ([]byte, error) {
	if i.typ == "Type2BbEnum" || i.Type2BbEnum != "" {
		return json.Marshal(i.Type2BbEnum)
	}
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type ItemRequestRequestTypeVisitor interface {
	VisitType2BbEnum(Type2BbEnum) error
	VisitString(string) error
}

func (i *ItemRequestRequestType) Accept(visitor ItemRequestRequestTypeVisitor) error {
	if i.typ == "Type2BbEnum" || i.Type2BbEnum != "" {
		return visitor.VisitType2BbEnum(i.Type2BbEnum)
	}
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type ItemResponse struct {
	Model    *Item                       `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *ItemResponse) GetModel() *Item {
	if i == nil {
		return nil
	}
	return i.Model
}

func (i *ItemResponse) GetWarnings() []*WarningValidationProblem {
	if i == nil {
		return nil
	}
	return i.Warnings
}

func (i *ItemResponse) GetErrors() []*ErrorValidationProblem {
	if i == nil {
		return nil
	}
	return i.Errors
}

func (i *ItemResponse) GetLogs() []*DebugModeLog {
	if i == nil {
		return nil
	}
	return i.Logs
}

func (i *ItemResponse) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ItemResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ItemResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ItemResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *ItemResponse) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type PaginatedItemList struct {
	Next     *string `json:"next,omitempty" url:"next,omitempty"`
	Previous *string `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Item `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedItemList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedItemList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedItemList) GetResults() []*Item {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedItemList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedItemList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedItemList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedItemList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedItemList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Item Object
// ### Description
// The `Item` object refers to the goods involved in a transaction.
//
// ### Usage Example
// Fetch from the `LIST Items` endpoint and view a company's items.
type PatchedItemRequestRequest struct {
	// The item's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The item's status.
	//
	// * `ACTIVE` - ACTIVE
	// * `ARCHIVED` - ARCHIVED
	Status *PatchedItemRequestRequestStatus `json:"status,omitempty" url:"status,omitempty"`
	// The item's type.
	//
	// * `INVENTORY` - INVENTORY
	// * `NON_INVENTORY` - NON_INVENTORY
	// * `SERVICE` - SERVICE
	// * `UNKNOWN` - UNKNOWN
	Type *PatchedItemRequestRequestType `json:"type,omitempty" url:"type,omitempty"`
	// The item's unit price.
	UnitPrice *float64 `json:"unit_price,omitempty" url:"unit_price,omitempty"`
	// The price at which the item is purchased from a vendor.
	PurchasePrice *float64 `json:"purchase_price,omitempty" url:"purchase_price,omitempty"`
	// References the default account used to record a purchase of the item.
	PurchaseAccount *string `json:"purchase_account,omitempty" url:"purchase_account,omitempty"`
	// References the default account used to record a sale.
	SalesAccount *string `json:"sales_account,omitempty" url:"sales_account,omitempty"`
	// The company the item belongs to.
	Company *string `json:"company,omitempty" url:"company,omitempty"`
	// The default purchase tax rate for this item.
	PurchaseTaxRate *string `json:"purchase_tax_rate,omitempty" url:"purchase_tax_rate,omitempty"`
	// The default sales tax rate for this item.
	SalesTaxRate        *string                `json:"sales_tax_rate,omitempty" url:"sales_tax_rate,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PatchedItemRequestRequest) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PatchedItemRequestRequest) GetStatus() *PatchedItemRequestRequestStatus {
	if p == nil {
		return nil
	}
	return p.Status
}

func (p *PatchedItemRequestRequest) GetType() *PatchedItemRequestRequestType {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *PatchedItemRequestRequest) GetUnitPrice() *float64 {
	if p == nil {
		return nil
	}
	return p.UnitPrice
}

func (p *PatchedItemRequestRequest) GetPurchasePrice() *float64 {
	if p == nil {
		return nil
	}
	return p.PurchasePrice
}

func (p *PatchedItemRequestRequest) GetPurchaseAccount() *string {
	if p == nil {
		return nil
	}
	return p.PurchaseAccount
}

func (p *PatchedItemRequestRequest) GetSalesAccount() *string {
	if p == nil {
		return nil
	}
	return p.SalesAccount
}

func (p *PatchedItemRequestRequest) GetCompany() *string {
	if p == nil {
		return nil
	}
	return p.Company
}

func (p *PatchedItemRequestRequest) GetPurchaseTaxRate() *string {
	if p == nil {
		return nil
	}
	return p.PurchaseTaxRate
}

func (p *PatchedItemRequestRequest) GetSalesTaxRate() *string {
	if p == nil {
		return nil
	}
	return p.SalesTaxRate
}

func (p *PatchedItemRequestRequest) GetIntegrationParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.IntegrationParams
}

func (p *PatchedItemRequestRequest) GetLinkedAccountParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.LinkedAccountParams
}

func (p *PatchedItemRequestRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PatchedItemRequestRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PatchedItemRequestRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatchedItemRequestRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedItemRequestRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The item's status.
//
// * `ACTIVE` - ACTIVE
// * `ARCHIVED` - ARCHIVED
type PatchedItemRequestRequestStatus struct {
	Status7D1Enum Status7D1Enum
	String        string

	typ string
}

func (p *PatchedItemRequestRequestStatus) GetStatus7D1Enum() Status7D1Enum {
	if p == nil {
		return ""
	}
	return p.Status7D1Enum
}

func (p *PatchedItemRequestRequestStatus) GetString() string {
	if p == nil {
		return ""
	}
	return p.String
}

func (p *PatchedItemRequestRequestStatus) UnmarshalJSON(data []byte) error {
	var valueStatus7D1Enum Status7D1Enum
	if err := json.Unmarshal(data, &valueStatus7D1Enum); err == nil {
		p.typ = "Status7D1Enum"
		p.Status7D1Enum = valueStatus7D1Enum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typ = "String"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PatchedItemRequestRequestStatus) MarshalJSON() ([]byte, error) {
	if p.typ == "Status7D1Enum" || p.Status7D1Enum != "" {
		return json.Marshal(p.Status7D1Enum)
	}
	if p.typ == "String" || p.String != "" {
		return json.Marshal(p.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PatchedItemRequestRequestStatusVisitor interface {
	VisitStatus7D1Enum(Status7D1Enum) error
	VisitString(string) error
}

func (p *PatchedItemRequestRequestStatus) Accept(visitor PatchedItemRequestRequestStatusVisitor) error {
	if p.typ == "Status7D1Enum" || p.Status7D1Enum != "" {
		return visitor.VisitStatus7D1Enum(p.Status7D1Enum)
	}
	if p.typ == "String" || p.String != "" {
		return visitor.VisitString(p.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// The item's type.
//
// * `INVENTORY` - INVENTORY
// * `NON_INVENTORY` - NON_INVENTORY
// * `SERVICE` - SERVICE
// * `UNKNOWN` - UNKNOWN
type PatchedItemRequestRequestType struct {
	Type2BbEnum Type2BbEnum
	String      string

	typ string
}

func (p *PatchedItemRequestRequestType) GetType2BbEnum() Type2BbEnum {
	if p == nil {
		return ""
	}
	return p.Type2BbEnum
}

func (p *PatchedItemRequestRequestType) GetString() string {
	if p == nil {
		return ""
	}
	return p.String
}

func (p *PatchedItemRequestRequestType) UnmarshalJSON(data []byte) error {
	var valueType2BbEnum Type2BbEnum
	if err := json.Unmarshal(data, &valueType2BbEnum); err == nil {
		p.typ = "Type2BbEnum"
		p.Type2BbEnum = valueType2BbEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typ = "String"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PatchedItemRequestRequestType) MarshalJSON() ([]byte, error) {
	if p.typ == "Type2BbEnum" || p.Type2BbEnum != "" {
		return json.Marshal(p.Type2BbEnum)
	}
	if p.typ == "String" || p.String != "" {
		return json.Marshal(p.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PatchedItemRequestRequestTypeVisitor interface {
	VisitType2BbEnum(Type2BbEnum) error
	VisitString(string) error
}

func (p *PatchedItemRequestRequestType) Accept(visitor PatchedItemRequestRequestTypeVisitor) error {
	if p.typ == "Type2BbEnum" || p.Type2BbEnum != "" {
		return visitor.VisitType2BbEnum(p.Type2BbEnum)
	}
	if p.typ == "String" || p.String != "" {
		return visitor.VisitString(p.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}
