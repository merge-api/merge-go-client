// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
)

type AsyncPassthroughRetrieveResponse struct {
	RemoteResponse *RemoteResponse
	String         string

	typ string
}

func (a *AsyncPassthroughRetrieveResponse) GetRemoteResponse() *RemoteResponse {
	if a == nil {
		return nil
	}
	return a.RemoteResponse
}

func (a *AsyncPassthroughRetrieveResponse) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AsyncPassthroughRetrieveResponse) UnmarshalJSON(data []byte) error {
	valueRemoteResponse := new(RemoteResponse)
	if err := json.Unmarshal(data, &valueRemoteResponse); err == nil {
		a.typ = "RemoteResponse"
		a.RemoteResponse = valueRemoteResponse
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AsyncPassthroughRetrieveResponse) MarshalJSON() ([]byte, error) {
	if a.typ == "RemoteResponse" || a.RemoteResponse != nil {
		return json.Marshal(a.RemoteResponse)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AsyncPassthroughRetrieveResponseVisitor interface {
	VisitRemoteResponse(*RemoteResponse) error
	VisitString(string) error
}

func (a *AsyncPassthroughRetrieveResponse) Accept(visitor AsyncPassthroughRetrieveResponseVisitor) error {
	if a.typ == "RemoteResponse" || a.RemoteResponse != nil {
		return visitor.VisitRemoteResponse(a.RemoteResponse)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AsyncPassthroughReciept struct {
	AsyncPassthroughReceiptId string `json:"async_passthrough_receipt_id" url:"async_passthrough_receipt_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AsyncPassthroughReciept) GetAsyncPassthroughReceiptId() string {
	if a == nil {
		return ""
	}
	return a.AsyncPassthroughReceiptId
}

func (a *AsyncPassthroughReciept) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AsyncPassthroughReciept) UnmarshalJSON(data []byte) error {
	type unmarshaler AsyncPassthroughReciept
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AsyncPassthroughReciept(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AsyncPassthroughReciept) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}
