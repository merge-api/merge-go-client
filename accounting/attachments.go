// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type AccountingAttachmentEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool                        `json:"-" url:"run_async,omitempty"`
	Model    *AccountingAttachmentRequest `json:"model,omitempty" url:"-"`
}

type AttachmentsListRequest struct {
	// If provided, will only return accounting attachments for this company.
	CompanyId *string `json:"-" url:"company_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
}

type AttachmentsRetrieveRequest struct {
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

// # The Accounting Attachment Object
// ### Description
// The `AccountingAttachment` object is used to represent a company's attachments.
//
// ### Usage Example
// Fetch from the `LIST AccountingAttachments` endpoint and view a company's attachments.
type AccountingAttachment struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The attachment's name.
	FileName *string `json:"file_name,omitempty" url:"file_name,omitempty"`
	// The attachment's url.
	FileUrl *string `json:"file_url,omitempty" url:"file_url,omitempty"`
	// The company the accounting attachment belongs to.
	Company *string `json:"company,omitempty" url:"company,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingAttachment) GetId() *string {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountingAttachment) GetRemoteId() *string {
	if a == nil {
		return nil
	}
	return a.RemoteId
}

func (a *AccountingAttachment) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AccountingAttachment) GetModifiedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ModifiedAt
}

func (a *AccountingAttachment) GetFileName() *string {
	if a == nil {
		return nil
	}
	return a.FileName
}

func (a *AccountingAttachment) GetFileUrl() *string {
	if a == nil {
		return nil
	}
	return a.FileUrl
}

func (a *AccountingAttachment) GetCompany() *string {
	if a == nil {
		return nil
	}
	return a.Company
}

func (a *AccountingAttachment) GetRemoteWasDeleted() *bool {
	if a == nil {
		return nil
	}
	return a.RemoteWasDeleted
}

func (a *AccountingAttachment) GetFieldMappings() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.FieldMappings
}

func (a *AccountingAttachment) GetRemoteData() []*RemoteData {
	if a == nil {
		return nil
	}
	return a.RemoteData
}

func (a *AccountingAttachment) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingAttachment) UnmarshalJSON(data []byte) error {
	type embed AccountingAttachment
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AccountingAttachment(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingAttachment) MarshalJSON() ([]byte, error) {
	type embed AccountingAttachment
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*a),
		CreatedAt:  internal.NewOptionalDateTime(a.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(a.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (a *AccountingAttachment) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The Accounting Attachment Object
// ### Description
// The `AccountingAttachment` object is used to represent a company's attachments.
//
// ### Usage Example
// Fetch from the `LIST AccountingAttachments` endpoint and view a company's attachments.
type AccountingAttachmentRequest struct {
	// The attachment's name.
	FileName *string `json:"file_name,omitempty" url:"file_name,omitempty"`
	// The attachment's url.
	FileUrl *string `json:"file_url,omitempty" url:"file_url,omitempty"`
	// The company the accounting attachment belongs to.
	Company             *string                `json:"company,omitempty" url:"company,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingAttachmentRequest) GetFileName() *string {
	if a == nil {
		return nil
	}
	return a.FileName
}

func (a *AccountingAttachmentRequest) GetFileUrl() *string {
	if a == nil {
		return nil
	}
	return a.FileUrl
}

func (a *AccountingAttachmentRequest) GetCompany() *string {
	if a == nil {
		return nil
	}
	return a.Company
}

func (a *AccountingAttachmentRequest) GetIntegrationParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.IntegrationParams
}

func (a *AccountingAttachmentRequest) GetLinkedAccountParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.LinkedAccountParams
}

func (a *AccountingAttachmentRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingAttachmentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingAttachmentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingAttachmentRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingAttachmentRequest) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountingAttachmentResponse struct {
	Model    *AccountingAttachment       `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingAttachmentResponse) GetModel() *AccountingAttachment {
	if a == nil {
		return nil
	}
	return a.Model
}

func (a *AccountingAttachmentResponse) GetWarnings() []*WarningValidationProblem {
	if a == nil {
		return nil
	}
	return a.Warnings
}

func (a *AccountingAttachmentResponse) GetErrors() []*ErrorValidationProblem {
	if a == nil {
		return nil
	}
	return a.Errors
}

func (a *AccountingAttachmentResponse) GetLogs() []*DebugModeLog {
	if a == nil {
		return nil
	}
	return a.Logs
}

func (a *AccountingAttachmentResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingAttachmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingAttachmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingAttachmentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingAttachmentResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type PaginatedAccountingAttachmentList struct {
	Next     *string                 `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                 `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*AccountingAttachment `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedAccountingAttachmentList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedAccountingAttachmentList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedAccountingAttachmentList) GetResults() []*AccountingAttachment {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedAccountingAttachmentList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedAccountingAttachmentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAccountingAttachmentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAccountingAttachmentList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAccountingAttachmentList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
