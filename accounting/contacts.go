// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type ContactEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool           `json:"-" url:"run_async,omitempty"`
	Model    *ContactRequest `json:"model,omitempty" url:"-"`
}

type ContactsListRequest struct {
	// If provided, will only return contacts for this company.
	CompanyId *string `json:"-" url:"company_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will only return Contacts that match this email.
	EmailAddress *string `json:"-" url:"email_address,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*ContactsListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return Contacts that are denoted as customers.
	IsCustomer *string `json:"-" url:"is_customer,omitempty"`
	// If provided, will only return Contacts that are denoted as suppliers.
	IsSupplier *string `json:"-" url:"is_supplier,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// If provided, will only return Contacts that match this name.
	Name *string `json:"-" url:"name,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
	// If provided, will only return Contacts that match this status.
	Status *string `json:"-" url:"status,omitempty"`
}

type ContactsRemoteFieldClassesListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return remote field classes with this is_common_model_field value
	IsCommonModelField *bool `json:"-" url:"is_common_model_field,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type ContactsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*ContactsRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type ContactsListRequestExpandItem string

const (
	ContactsListRequestExpandItemAddresses    ContactsListRequestExpandItem = "addresses"
	ContactsListRequestExpandItemCompany      ContactsListRequestExpandItem = "company"
	ContactsListRequestExpandItemPhoneNumbers ContactsListRequestExpandItem = "phone_numbers"
)

func NewContactsListRequestExpandItemFromString(s string) (ContactsListRequestExpandItem, error) {
	switch s {
	case "addresses":
		return ContactsListRequestExpandItemAddresses, nil
	case "company":
		return ContactsListRequestExpandItemCompany, nil
	case "phone_numbers":
		return ContactsListRequestExpandItemPhoneNumbers, nil
	}
	var t ContactsListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ContactsListRequestExpandItem) Ptr() *ContactsListRequestExpandItem {
	return &c
}

type ContactsRetrieveRequestExpandItem string

const (
	ContactsRetrieveRequestExpandItemAddresses    ContactsRetrieveRequestExpandItem = "addresses"
	ContactsRetrieveRequestExpandItemCompany      ContactsRetrieveRequestExpandItem = "company"
	ContactsRetrieveRequestExpandItemPhoneNumbers ContactsRetrieveRequestExpandItem = "phone_numbers"
)

func NewContactsRetrieveRequestExpandItemFromString(s string) (ContactsRetrieveRequestExpandItem, error) {
	switch s {
	case "addresses":
		return ContactsRetrieveRequestExpandItemAddresses, nil
	case "company":
		return ContactsRetrieveRequestExpandItemCompany, nil
	case "phone_numbers":
		return ContactsRetrieveRequestExpandItemPhoneNumbers, nil
	}
	var t ContactsRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ContactsRetrieveRequestExpandItem) Ptr() *ContactsRetrieveRequestExpandItem {
	return &c
}

// # The AccountingPhoneNumber Object
// ### Description
// The `AccountingPhoneNumber` object is used to represent a contact's or company's phone number.
//
// ### Usage Example
// Fetch from the `GET CompanyInfo` endpoint and view the company's phone numbers.
type AccountingPhoneNumberRequest struct {
	// The phone number.
	Number *string `json:"number,omitempty" url:"number,omitempty"`
	// The phone number's type.
	Type                *string                `json:"type,omitempty" url:"type,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingPhoneNumberRequest) GetNumber() *string {
	if a == nil {
		return nil
	}
	return a.Number
}

func (a *AccountingPhoneNumberRequest) GetType() *string {
	if a == nil {
		return nil
	}
	return a.Type
}

func (a *AccountingPhoneNumberRequest) GetIntegrationParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.IntegrationParams
}

func (a *AccountingPhoneNumberRequest) GetLinkedAccountParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.LinkedAccountParams
}

func (a *AccountingPhoneNumberRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingPhoneNumberRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingPhoneNumberRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingPhoneNumberRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingPhoneNumberRequest) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The Contact Object
// ### Description
// A `Contact` is an individual or business entity to which products and services are sold to or purchased from. The `Contact` model contains both Customers, in which products and services are sold to, and Vendors (or Suppliers), in which products and services are purchased from.
// * A `Contact` is a Vendor/Supplier if the `is_supplier` property is true.
// * A `Contact` is a customer if the `is_customer` property is true.
//
// ### Usage Example
// Fetch from the `LIST Contacts` endpoint and view a company's contacts.
type ContactRequest struct {
	// The contact's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether the contact is a supplier.
	IsSupplier *bool `json:"is_supplier,omitempty" url:"is_supplier,omitempty"`
	// Whether the contact is a customer.
	IsCustomer *bool `json:"is_customer,omitempty" url:"is_customer,omitempty"`
	// The contact's email address.
	EmailAddress *string `json:"email_address,omitempty" url:"email_address,omitempty"`
	// The contact's tax number.
	TaxNumber *string `json:"tax_number,omitempty" url:"tax_number,omitempty"`
	// The contact's status
	//
	// * `ACTIVE` - ACTIVE
	// * `ARCHIVED` - ARCHIVED
	Status *Status7D1Enum `json:"status,omitempty" url:"status,omitempty"`
	// The currency the contact's transactions are in.
	Currency *string `json:"currency,omitempty" url:"currency,omitempty"`
	// The company the contact belongs to.
	Company *string `json:"company,omitempty" url:"company,omitempty"`
	// `Address` object IDs for the given `Contacts` object.
	Addresses []*ContactRequestAddressesItem `json:"addresses,omitempty" url:"addresses,omitempty"`
	// `AccountingPhoneNumber` object for the given `Contacts` object.
	PhoneNumbers        []*AccountingPhoneNumberRequest `json:"phone_numbers,omitempty" url:"phone_numbers,omitempty"`
	IntegrationParams   map[string]interface{}          `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}          `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest           `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ContactRequest) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *ContactRequest) GetIsSupplier() *bool {
	if c == nil {
		return nil
	}
	return c.IsSupplier
}

func (c *ContactRequest) GetIsCustomer() *bool {
	if c == nil {
		return nil
	}
	return c.IsCustomer
}

func (c *ContactRequest) GetEmailAddress() *string {
	if c == nil {
		return nil
	}
	return c.EmailAddress
}

func (c *ContactRequest) GetTaxNumber() *string {
	if c == nil {
		return nil
	}
	return c.TaxNumber
}

func (c *ContactRequest) GetStatus() *Status7D1Enum {
	if c == nil {
		return nil
	}
	return c.Status
}

func (c *ContactRequest) GetCurrency() *string {
	if c == nil {
		return nil
	}
	return c.Currency
}

func (c *ContactRequest) GetCompany() *string {
	if c == nil {
		return nil
	}
	return c.Company
}

func (c *ContactRequest) GetAddresses() []*ContactRequestAddressesItem {
	if c == nil {
		return nil
	}
	return c.Addresses
}

func (c *ContactRequest) GetPhoneNumbers() []*AccountingPhoneNumberRequest {
	if c == nil {
		return nil
	}
	return c.PhoneNumbers
}

func (c *ContactRequest) GetIntegrationParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.IntegrationParams
}

func (c *ContactRequest) GetLinkedAccountParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.LinkedAccountParams
}

func (c *ContactRequest) GetRemoteFields() []*RemoteFieldRequest {
	if c == nil {
		return nil
	}
	return c.RemoteFields
}

func (c *ContactRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ContactRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ContactRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ContactRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContactRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ContactRequestAddressesItem struct {
	String  string
	Address *Address

	typ string
}

func (c *ContactRequestAddressesItem) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *ContactRequestAddressesItem) GetAddress() *Address {
	if c == nil {
		return nil
	}
	return c.Address
}

func (c *ContactRequestAddressesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueAddress := new(Address)
	if err := json.Unmarshal(data, &valueAddress); err == nil {
		c.typ = "Address"
		c.Address = valueAddress
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactRequestAddressesItem) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "Address" || c.Address != nil {
		return json.Marshal(c.Address)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ContactRequestAddressesItemVisitor interface {
	VisitString(string) error
	VisitAddress(*Address) error
}

func (c *ContactRequestAddressesItem) Accept(visitor ContactRequestAddressesItemVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "Address" || c.Address != nil {
		return visitor.VisitAddress(c.Address)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ContactResponse struct {
	Model    *Contact                    `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ContactResponse) GetModel() *Contact {
	if c == nil {
		return nil
	}
	return c.Model
}

func (c *ContactResponse) GetWarnings() []*WarningValidationProblem {
	if c == nil {
		return nil
	}
	return c.Warnings
}

func (c *ContactResponse) GetErrors() []*ErrorValidationProblem {
	if c == nil {
		return nil
	}
	return c.Errors
}

func (c *ContactResponse) GetLogs() []*DebugModeLog {
	if c == nil {
		return nil
	}
	return c.Logs
}

func (c *ContactResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ContactResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ContactResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ContactResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContactResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type PaginatedContactList struct {
	Next     *string    `json:"next,omitempty" url:"next,omitempty"`
	Previous *string    `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Contact `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedContactList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedContactList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedContactList) GetResults() []*Contact {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedContactList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedContactList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedContactList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedContactList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedContactList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
