// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
)

type AsyncPostTask struct {
	Status AsyncPostTaskStatusEnum `json:"status" url:"status"`
	Result *AsyncPostTaskResult    `json:"result" url:"result"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AsyncPostTask) GetStatus() AsyncPostTaskStatusEnum {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *AsyncPostTask) GetResult() *AsyncPostTaskResult {
	if a == nil {
		return nil
	}
	return a.Result
}

func (a *AsyncPostTask) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AsyncPostTask) UnmarshalJSON(data []byte) error {
	type unmarshaler AsyncPostTask
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AsyncPostTask(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AsyncPostTask) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AsyncPostTaskResult struct {
	StatusCode *int                   `json:"status_code,omitempty" url:"status_code,omitempty"`
	Response   map[string]interface{} `json:"response,omitempty" url:"response,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AsyncPostTaskResult) GetStatusCode() *int {
	if a == nil {
		return nil
	}
	return a.StatusCode
}

func (a *AsyncPostTaskResult) GetResponse() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Response
}

func (a *AsyncPostTaskResult) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AsyncPostTaskResult) UnmarshalJSON(data []byte) error {
	type unmarshaler AsyncPostTaskResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AsyncPostTaskResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AsyncPostTaskResult) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// * `QUEUED` - QUEUED
// * `IN_PROGRESS` - IN_PROGRESS
// * `COMPLETED` - COMPLETED
// * `FAILURE` - FAILURE
type AsyncPostTaskStatusEnum string

const (
	AsyncPostTaskStatusEnumQueued     AsyncPostTaskStatusEnum = "QUEUED"
	AsyncPostTaskStatusEnumInProgress AsyncPostTaskStatusEnum = "IN_PROGRESS"
	AsyncPostTaskStatusEnumCompleted  AsyncPostTaskStatusEnum = "COMPLETED"
	AsyncPostTaskStatusEnumFailure    AsyncPostTaskStatusEnum = "FAILURE"
)

func NewAsyncPostTaskStatusEnumFromString(s string) (AsyncPostTaskStatusEnum, error) {
	switch s {
	case "QUEUED":
		return AsyncPostTaskStatusEnumQueued, nil
	case "IN_PROGRESS":
		return AsyncPostTaskStatusEnumInProgress, nil
	case "COMPLETED":
		return AsyncPostTaskStatusEnumCompleted, nil
	case "FAILURE":
		return AsyncPostTaskStatusEnumFailure, nil
	}
	var t AsyncPostTaskStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AsyncPostTaskStatusEnum) Ptr() *AsyncPostTaskStatusEnum {
	return &a
}
