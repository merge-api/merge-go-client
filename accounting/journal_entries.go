// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type JournalEntryEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool                `json:"-" url:"run_async,omitempty"`
	Model    *JournalEntryRequest `json:"model,omitempty" url:"-"`
}

type JournalEntriesLinesRemoteFieldClassesListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return remote field classes with this is_common_model_field value
	IsCommonModelField *bool `json:"-" url:"is_common_model_field,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type JournalEntriesListRequest struct {
	// If provided, will only return journal entries for this company.
	CompanyId *string `json:"-" url:"company_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*JournalEntriesListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	TransactionDateAfter *time.Time `json:"-" url:"transaction_date_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	TransactionDateBefore *time.Time `json:"-" url:"transaction_date_before,omitempty"`
}

type JournalEntriesRemoteFieldClassesListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return remote field classes with this is_common_model_field value
	IsCommonModelField *bool `json:"-" url:"is_common_model_field,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type JournalEntriesRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*JournalEntriesRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

type JournalEntriesListRequestExpandItem string

const (
	JournalEntriesListRequestExpandItemAccountingPeriod   JournalEntriesListRequestExpandItem = "accounting_period"
	JournalEntriesListRequestExpandItemAppliedPayments    JournalEntriesListRequestExpandItem = "applied_payments"
	JournalEntriesListRequestExpandItemCompany            JournalEntriesListRequestExpandItem = "company"
	JournalEntriesListRequestExpandItemLines              JournalEntriesListRequestExpandItem = "lines"
	JournalEntriesListRequestExpandItemPayments           JournalEntriesListRequestExpandItem = "payments"
	JournalEntriesListRequestExpandItemTrackingCategories JournalEntriesListRequestExpandItem = "tracking_categories"
)

func NewJournalEntriesListRequestExpandItemFromString(s string) (JournalEntriesListRequestExpandItem, error) {
	switch s {
	case "accounting_period":
		return JournalEntriesListRequestExpandItemAccountingPeriod, nil
	case "applied_payments":
		return JournalEntriesListRequestExpandItemAppliedPayments, nil
	case "company":
		return JournalEntriesListRequestExpandItemCompany, nil
	case "lines":
		return JournalEntriesListRequestExpandItemLines, nil
	case "payments":
		return JournalEntriesListRequestExpandItemPayments, nil
	case "tracking_categories":
		return JournalEntriesListRequestExpandItemTrackingCategories, nil
	}
	var t JournalEntriesListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (j JournalEntriesListRequestExpandItem) Ptr() *JournalEntriesListRequestExpandItem {
	return &j
}

type JournalEntriesRetrieveRequestExpandItem string

const (
	JournalEntriesRetrieveRequestExpandItemAccountingPeriod   JournalEntriesRetrieveRequestExpandItem = "accounting_period"
	JournalEntriesRetrieveRequestExpandItemAppliedPayments    JournalEntriesRetrieveRequestExpandItem = "applied_payments"
	JournalEntriesRetrieveRequestExpandItemCompany            JournalEntriesRetrieveRequestExpandItem = "company"
	JournalEntriesRetrieveRequestExpandItemLines              JournalEntriesRetrieveRequestExpandItem = "lines"
	JournalEntriesRetrieveRequestExpandItemPayments           JournalEntriesRetrieveRequestExpandItem = "payments"
	JournalEntriesRetrieveRequestExpandItemTrackingCategories JournalEntriesRetrieveRequestExpandItem = "tracking_categories"
)

func NewJournalEntriesRetrieveRequestExpandItemFromString(s string) (JournalEntriesRetrieveRequestExpandItem, error) {
	switch s {
	case "accounting_period":
		return JournalEntriesRetrieveRequestExpandItemAccountingPeriod, nil
	case "applied_payments":
		return JournalEntriesRetrieveRequestExpandItemAppliedPayments, nil
	case "company":
		return JournalEntriesRetrieveRequestExpandItemCompany, nil
	case "lines":
		return JournalEntriesRetrieveRequestExpandItemLines, nil
	case "payments":
		return JournalEntriesRetrieveRequestExpandItemPayments, nil
	case "tracking_categories":
		return JournalEntriesRetrieveRequestExpandItemTrackingCategories, nil
	}
	var t JournalEntriesRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (j JournalEntriesRetrieveRequestExpandItem) Ptr() *JournalEntriesRetrieveRequestExpandItem {
	return &j
}

// # The JournalEntry Object
// ### Description
// A `JournalEntry` is a record of a transaction or event that is entered into a company's accounting system.
//
// The `JournalEntry` common model contains records that are automatically created as a result of a certain type of transaction, like an Invoice, and records that are manually created against a companyâ€™s ledger.
//
// The lines of a given `JournalEntry` object should always sum to 0. A positive `net_amount` means the line represents a debit and a negative net_amount represents a credit.
//
// ### Usage Example
// Fetch from the `GET JournalEntry` endpoint and view a company's journey entry.
type JournalEntry struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The journal entry's transaction date.
	TransactionDate *time.Time `json:"transaction_date,omitempty" url:"transaction_date,omitempty"`
	// Array of `Payment` object IDs.
	Payments []*JournalEntryPaymentsItem `json:"payments,omitempty" url:"payments,omitempty"`
	// A list of the Payment Applied to Lines common models related to a given Invoice, Credit Note, or Journal Entry.
	AppliedPayments []*JournalEntryAppliedPaymentsItem `json:"applied_payments,omitempty" url:"applied_payments,omitempty"`
	// The journal entry's private note.
	Memo *string `json:"memo,omitempty" url:"memo,omitempty"`
	// The journal's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927â€“2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946â€“1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977â€“1991)
	// * `AON` - Angolan New Kwanza (1990â€“2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995â€“1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881â€“1970)
	// * `ARP` - Argentine Peso (1983â€“1985)
	// * `ARL` - Argentine Peso Ley (1970â€“1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993â€“2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994â€“1999)
	// * `BYR` - Belarusian Ruble (2000â€“2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863â€“1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992â€“1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994â€“1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986â€“1989)
	// * `BRZ` - Brazilian Cruzeiro (1942â€“1967)
	// * `BRE` - Brazilian Cruzeiro (1990â€“1993)
	// * `BRR` - Brazilian Cruzeiro (1993â€“1994)
	// * `BRN` - Brazilian New Cruzado (1989â€“1990)
	// * `BRB` - Brazilian New Cruzeiro (1967â€“1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879â€“1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese Peopleâ€™s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican ColÃ³n
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979â€“2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic KrÃ³na
	// * `ISJ` - Icelandic KrÃ³na (1918â€“1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980â€“1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992â€“1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947â€“1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973â€“2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861â€“1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980â€“2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan CÃ³rdoba
	// * `NIC` - Nicaraguan CÃ³rdoba (1988â€“1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863â€“1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950â€“1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952â€“2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991â€“1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran ColÃ³n
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002â€“2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953â€“1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945â€“1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992â€“2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957â€“1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - SÃ£o TomÃ© & PrÃ­ncipe Dobra
	// * `STD` - SÃ£o TomÃ© & PrÃ­ncipe Dobra (1977â€“2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan PaÊ»anga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922â€“2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993â€“2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966â€“1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975â€“1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan BolÃ­var
	// * `VEB` - Venezuelan BolÃ­var (1871â€“2008)
	// * `VEF` - Venezuelan BolÃ­var (2008â€“2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978â€“1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990â€“1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966â€“1990)
	// * `YUM` - Yugoslavian New Dinar (1994â€“2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992â€“1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993â€“1998)
	// * `ZRZ` - Zairean Zaire (1971â€“1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968â€“2012)
	// * `ZWD` - Zimbabwean Dollar (1980â€“2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *TransactionCurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`
	// The journal entry's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty" url:"exchange_rate,omitempty"`
	// The company the journal entry belongs to.
	Company *JournalEntryCompany `json:"company,omitempty" url:"company,omitempty"`
	// If the transaction is inclusive or exclusive of tax. `True` if inclusive, `False` if exclusive.
	InclusiveOfTax *bool          `json:"inclusive_of_tax,omitempty" url:"inclusive_of_tax,omitempty"`
	Lines          []*JournalLine `json:"lines,omitempty" url:"lines,omitempty"`
	// Reference number for identifying journal entries.
	JournalNumber      *string                               `json:"journal_number,omitempty" url:"journal_number,omitempty"`
	TrackingCategories []*JournalEntryTrackingCategoriesItem `json:"tracking_categories,omitempty" url:"tracking_categories,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	// The journal's posting status.
	//
	// * `UNPOSTED` - UNPOSTED
	// * `POSTED` - POSTED
	PostingStatus *PostingStatusEnum `json:"posting_status,omitempty" url:"posting_status,omitempty"`
	// The accounting period that the JournalEntry was generated in.
	AccountingPeriod *JournalEntryAccountingPeriod `json:"accounting_period,omitempty" url:"accounting_period,omitempty"`
	// When the third party's journal entry was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty" url:"remote_created_at,omitempty"`
	// When the third party's journal entry was updated.
	RemoteUpdatedAt *time.Time             `json:"remote_updated_at,omitempty" url:"remote_updated_at,omitempty"`
	FieldMappings   map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData      []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`
	RemoteFields    []*RemoteField         `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *JournalEntry) GetId() *string {
	if j == nil {
		return nil
	}
	return j.Id
}

func (j *JournalEntry) GetRemoteId() *string {
	if j == nil {
		return nil
	}
	return j.RemoteId
}

func (j *JournalEntry) GetCreatedAt() *time.Time {
	if j == nil {
		return nil
	}
	return j.CreatedAt
}

func (j *JournalEntry) GetModifiedAt() *time.Time {
	if j == nil {
		return nil
	}
	return j.ModifiedAt
}

func (j *JournalEntry) GetTransactionDate() *time.Time {
	if j == nil {
		return nil
	}
	return j.TransactionDate
}

func (j *JournalEntry) GetPayments() []*JournalEntryPaymentsItem {
	if j == nil {
		return nil
	}
	return j.Payments
}

func (j *JournalEntry) GetAppliedPayments() []*JournalEntryAppliedPaymentsItem {
	if j == nil {
		return nil
	}
	return j.AppliedPayments
}

func (j *JournalEntry) GetMemo() *string {
	if j == nil {
		return nil
	}
	return j.Memo
}

func (j *JournalEntry) GetCurrency() *TransactionCurrencyEnum {
	if j == nil {
		return nil
	}
	return j.Currency
}

func (j *JournalEntry) GetExchangeRate() *string {
	if j == nil {
		return nil
	}
	return j.ExchangeRate
}

func (j *JournalEntry) GetCompany() *JournalEntryCompany {
	if j == nil {
		return nil
	}
	return j.Company
}

func (j *JournalEntry) GetInclusiveOfTax() *bool {
	if j == nil {
		return nil
	}
	return j.InclusiveOfTax
}

func (j *JournalEntry) GetLines() []*JournalLine {
	if j == nil {
		return nil
	}
	return j.Lines
}

func (j *JournalEntry) GetJournalNumber() *string {
	if j == nil {
		return nil
	}
	return j.JournalNumber
}

func (j *JournalEntry) GetTrackingCategories() []*JournalEntryTrackingCategoriesItem {
	if j == nil {
		return nil
	}
	return j.TrackingCategories
}

func (j *JournalEntry) GetRemoteWasDeleted() *bool {
	if j == nil {
		return nil
	}
	return j.RemoteWasDeleted
}

func (j *JournalEntry) GetPostingStatus() *PostingStatusEnum {
	if j == nil {
		return nil
	}
	return j.PostingStatus
}

func (j *JournalEntry) GetAccountingPeriod() *JournalEntryAccountingPeriod {
	if j == nil {
		return nil
	}
	return j.AccountingPeriod
}

func (j *JournalEntry) GetRemoteCreatedAt() *time.Time {
	if j == nil {
		return nil
	}
	return j.RemoteCreatedAt
}

func (j *JournalEntry) GetRemoteUpdatedAt() *time.Time {
	if j == nil {
		return nil
	}
	return j.RemoteUpdatedAt
}

func (j *JournalEntry) GetFieldMappings() map[string]interface{} {
	if j == nil {
		return nil
	}
	return j.FieldMappings
}

func (j *JournalEntry) GetRemoteData() []*RemoteData {
	if j == nil {
		return nil
	}
	return j.RemoteData
}

func (j *JournalEntry) GetRemoteFields() []*RemoteField {
	if j == nil {
		return nil
	}
	return j.RemoteFields
}

func (j *JournalEntry) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JournalEntry) UnmarshalJSON(data []byte) error {
	type embed JournalEntry
	var unmarshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		TransactionDate *internal.DateTime `json:"transaction_date,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
		RemoteUpdatedAt *internal.DateTime `json:"remote_updated_at,omitempty"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JournalEntry(unmarshaler.embed)
	j.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	j.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	j.TransactionDate = unmarshaler.TransactionDate.TimePtr()
	j.RemoteCreatedAt = unmarshaler.RemoteCreatedAt.TimePtr()
	j.RemoteUpdatedAt = unmarshaler.RemoteUpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *JournalEntry) MarshalJSON() ([]byte, error) {
	type embed JournalEntry
	var marshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		TransactionDate *internal.DateTime `json:"transaction_date,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
		RemoteUpdatedAt *internal.DateTime `json:"remote_updated_at,omitempty"`
	}{
		embed:           embed(*j),
		CreatedAt:       internal.NewOptionalDateTime(j.CreatedAt),
		ModifiedAt:      internal.NewOptionalDateTime(j.ModifiedAt),
		TransactionDate: internal.NewOptionalDateTime(j.TransactionDate),
		RemoteCreatedAt: internal.NewOptionalDateTime(j.RemoteCreatedAt),
		RemoteUpdatedAt: internal.NewOptionalDateTime(j.RemoteUpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (j *JournalEntry) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// The accounting period that the JournalEntry was generated in.
type JournalEntryAccountingPeriod struct {
	String           string
	AccountingPeriod *AccountingPeriod

	typ string
}

func (j *JournalEntryAccountingPeriod) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalEntryAccountingPeriod) GetAccountingPeriod() *AccountingPeriod {
	if j == nil {
		return nil
	}
	return j.AccountingPeriod
}

func (j *JournalEntryAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		j.typ = "AccountingPeriod"
		j.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryAccountingPeriod) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "AccountingPeriod" || j.AccountingPeriod != nil {
		return json.Marshal(j.AccountingPeriod)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (j *JournalEntryAccountingPeriod) Accept(visitor JournalEntryAccountingPeriodVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "AccountingPeriod" || j.AccountingPeriod != nil {
		return visitor.VisitAccountingPeriod(j.AccountingPeriod)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryAppliedPaymentsItem struct {
	String          string
	PaymentLineItem *PaymentLineItem

	typ string
}

func (j *JournalEntryAppliedPaymentsItem) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalEntryAppliedPaymentsItem) GetPaymentLineItem() *PaymentLineItem {
	if j == nil {
		return nil
	}
	return j.PaymentLineItem
}

func (j *JournalEntryAppliedPaymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valuePaymentLineItem := new(PaymentLineItem)
	if err := json.Unmarshal(data, &valuePaymentLineItem); err == nil {
		j.typ = "PaymentLineItem"
		j.PaymentLineItem = valuePaymentLineItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryAppliedPaymentsItem) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "PaymentLineItem" || j.PaymentLineItem != nil {
		return json.Marshal(j.PaymentLineItem)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryAppliedPaymentsItemVisitor interface {
	VisitString(string) error
	VisitPaymentLineItem(*PaymentLineItem) error
}

func (j *JournalEntryAppliedPaymentsItem) Accept(visitor JournalEntryAppliedPaymentsItemVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "PaymentLineItem" || j.PaymentLineItem != nil {
		return visitor.VisitPaymentLineItem(j.PaymentLineItem)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

// The company the journal entry belongs to.
type JournalEntryCompany struct {
	String      string
	CompanyInfo *CompanyInfo

	typ string
}

func (j *JournalEntryCompany) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalEntryCompany) GetCompanyInfo() *CompanyInfo {
	if j == nil {
		return nil
	}
	return j.CompanyInfo
}

func (j *JournalEntryCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		j.typ = "CompanyInfo"
		j.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryCompany) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "CompanyInfo" || j.CompanyInfo != nil {
		return json.Marshal(j.CompanyInfo)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (j *JournalEntryCompany) Accept(visitor JournalEntryCompanyVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "CompanyInfo" || j.CompanyInfo != nil {
		return visitor.VisitCompanyInfo(j.CompanyInfo)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryPaymentsItem struct {
	String  string
	Payment *Payment

	typ string
}

func (j *JournalEntryPaymentsItem) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalEntryPaymentsItem) GetPayment() *Payment {
	if j == nil {
		return nil
	}
	return j.Payment
}

func (j *JournalEntryPaymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valuePayment := new(Payment)
	if err := json.Unmarshal(data, &valuePayment); err == nil {
		j.typ = "Payment"
		j.Payment = valuePayment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryPaymentsItem) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "Payment" || j.Payment != nil {
		return json.Marshal(j.Payment)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryPaymentsItemVisitor interface {
	VisitString(string) error
	VisitPayment(*Payment) error
}

func (j *JournalEntryPaymentsItem) Accept(visitor JournalEntryPaymentsItemVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "Payment" || j.Payment != nil {
		return visitor.VisitPayment(j.Payment)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

// # The JournalEntry Object
// ### Description
// The `JournalEntry` object is used to get a record of all manually created entries made in a companyâ€™s general ledger. The journal line items for each journal entry should sum to zero.
//
// ### Usage Example
// Fetch from the `GET JournalEntry` endpoint and view a company's journey entry.
type JournalEntryRequest struct {
	// The journal entry's transaction date.
	TransactionDate *time.Time `json:"transaction_date,omitempty" url:"transaction_date,omitempty"`
	// Array of `Payment` object IDs.
	Payments []*JournalEntryRequestPaymentsItem `json:"payments,omitempty" url:"payments,omitempty"`
	// The journal entry's private note.
	Memo *string `json:"memo,omitempty" url:"memo,omitempty"`
	// The journal's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927â€“2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946â€“1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977â€“1991)
	// * `AON` - Angolan New Kwanza (1990â€“2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995â€“1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881â€“1970)
	// * `ARP` - Argentine Peso (1983â€“1985)
	// * `ARL` - Argentine Peso Ley (1970â€“1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993â€“2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994â€“1999)
	// * `BYR` - Belarusian Ruble (2000â€“2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863â€“1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992â€“1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994â€“1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986â€“1989)
	// * `BRZ` - Brazilian Cruzeiro (1942â€“1967)
	// * `BRE` - Brazilian Cruzeiro (1990â€“1993)
	// * `BRR` - Brazilian Cruzeiro (1993â€“1994)
	// * `BRN` - Brazilian New Cruzado (1989â€“1990)
	// * `BRB` - Brazilian New Cruzeiro (1967â€“1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879â€“1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese Peopleâ€™s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican ColÃ³n
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979â€“2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic KrÃ³na
	// * `ISJ` - Icelandic KrÃ³na (1918â€“1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980â€“1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992â€“1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947â€“1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973â€“2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861â€“1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980â€“2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan CÃ³rdoba
	// * `NIC` - Nicaraguan CÃ³rdoba (1988â€“1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863â€“1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950â€“1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952â€“2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991â€“1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran ColÃ³n
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002â€“2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953â€“1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945â€“1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992â€“2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957â€“1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - SÃ£o TomÃ© & PrÃ­ncipe Dobra
	// * `STD` - SÃ£o TomÃ© & PrÃ­ncipe Dobra (1977â€“2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan PaÊ»anga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922â€“2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993â€“2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966â€“1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975â€“1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan BolÃ­var
	// * `VEB` - Venezuelan BolÃ­var (1871â€“2008)
	// * `VEF` - Venezuelan BolÃ­var (2008â€“2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978â€“1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990â€“1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966â€“1990)
	// * `YUM` - Yugoslavian New Dinar (1994â€“2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992â€“1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993â€“1998)
	// * `ZRZ` - Zairean Zaire (1971â€“1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968â€“2012)
	// * `ZWD` - Zimbabwean Dollar (1980â€“2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *TransactionCurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`
	// The journal entry's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty" url:"exchange_rate,omitempty"`
	// The company the journal entry belongs to.
	Company            *JournalEntryRequestCompany                  `json:"company,omitempty" url:"company,omitempty"`
	TrackingCategories []*JournalEntryRequestTrackingCategoriesItem `json:"tracking_categories,omitempty" url:"tracking_categories,omitempty"`
	// If the transaction is inclusive or exclusive of tax. `True` if inclusive, `False` if exclusive.
	InclusiveOfTax *bool                 `json:"inclusive_of_tax,omitempty" url:"inclusive_of_tax,omitempty"`
	Lines          []*JournalLineRequest `json:"lines,omitempty" url:"lines,omitempty"`
	// Reference number for identifying journal entries.
	JournalNumber *string `json:"journal_number,omitempty" url:"journal_number,omitempty"`
	// The journal's posting status.
	//
	// * `UNPOSTED` - UNPOSTED
	// * `POSTED` - POSTED
	PostingStatus       *PostingStatusEnum     `json:"posting_status,omitempty" url:"posting_status,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *JournalEntryRequest) GetTransactionDate() *time.Time {
	if j == nil {
		return nil
	}
	return j.TransactionDate
}

func (j *JournalEntryRequest) GetPayments() []*JournalEntryRequestPaymentsItem {
	if j == nil {
		return nil
	}
	return j.Payments
}

func (j *JournalEntryRequest) GetMemo() *string {
	if j == nil {
		return nil
	}
	return j.Memo
}

func (j *JournalEntryRequest) GetCurrency() *TransactionCurrencyEnum {
	if j == nil {
		return nil
	}
	return j.Currency
}

func (j *JournalEntryRequest) GetExchangeRate() *string {
	if j == nil {
		return nil
	}
	return j.ExchangeRate
}

func (j *JournalEntryRequest) GetCompany() *JournalEntryRequestCompany {
	if j == nil {
		return nil
	}
	return j.Company
}

func (j *JournalEntryRequest) GetTrackingCategories() []*JournalEntryRequestTrackingCategoriesItem {
	if j == nil {
		return nil
	}
	return j.TrackingCategories
}

func (j *JournalEntryRequest) GetInclusiveOfTax() *bool {
	if j == nil {
		return nil
	}
	return j.InclusiveOfTax
}

func (j *JournalEntryRequest) GetLines() []*JournalLineRequest {
	if j == nil {
		return nil
	}
	return j.Lines
}

func (j *JournalEntryRequest) GetJournalNumber() *string {
	if j == nil {
		return nil
	}
	return j.JournalNumber
}

func (j *JournalEntryRequest) GetPostingStatus() *PostingStatusEnum {
	if j == nil {
		return nil
	}
	return j.PostingStatus
}

func (j *JournalEntryRequest) GetIntegrationParams() map[string]interface{} {
	if j == nil {
		return nil
	}
	return j.IntegrationParams
}

func (j *JournalEntryRequest) GetLinkedAccountParams() map[string]interface{} {
	if j == nil {
		return nil
	}
	return j.LinkedAccountParams
}

func (j *JournalEntryRequest) GetRemoteFields() []*RemoteFieldRequest {
	if j == nil {
		return nil
	}
	return j.RemoteFields
}

func (j *JournalEntryRequest) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JournalEntryRequest) UnmarshalJSON(data []byte) error {
	type embed JournalEntryRequest
	var unmarshaler = struct {
		embed
		TransactionDate *internal.DateTime `json:"transaction_date,omitempty"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JournalEntryRequest(unmarshaler.embed)
	j.TransactionDate = unmarshaler.TransactionDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *JournalEntryRequest) MarshalJSON() ([]byte, error) {
	type embed JournalEntryRequest
	var marshaler = struct {
		embed
		TransactionDate *internal.DateTime `json:"transaction_date,omitempty"`
	}{
		embed:           embed(*j),
		TransactionDate: internal.NewOptionalDateTime(j.TransactionDate),
	}
	return json.Marshal(marshaler)
}

func (j *JournalEntryRequest) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// The company the journal entry belongs to.
type JournalEntryRequestCompany struct {
	String      string
	CompanyInfo *CompanyInfo

	typ string
}

func (j *JournalEntryRequestCompany) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalEntryRequestCompany) GetCompanyInfo() *CompanyInfo {
	if j == nil {
		return nil
	}
	return j.CompanyInfo
}

func (j *JournalEntryRequestCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		j.typ = "CompanyInfo"
		j.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryRequestCompany) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "CompanyInfo" || j.CompanyInfo != nil {
		return json.Marshal(j.CompanyInfo)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryRequestCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (j *JournalEntryRequestCompany) Accept(visitor JournalEntryRequestCompanyVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "CompanyInfo" || j.CompanyInfo != nil {
		return visitor.VisitCompanyInfo(j.CompanyInfo)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryRequestPaymentsItem struct {
	String  string
	Payment *Payment

	typ string
}

func (j *JournalEntryRequestPaymentsItem) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalEntryRequestPaymentsItem) GetPayment() *Payment {
	if j == nil {
		return nil
	}
	return j.Payment
}

func (j *JournalEntryRequestPaymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valuePayment := new(Payment)
	if err := json.Unmarshal(data, &valuePayment); err == nil {
		j.typ = "Payment"
		j.Payment = valuePayment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryRequestPaymentsItem) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "Payment" || j.Payment != nil {
		return json.Marshal(j.Payment)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryRequestPaymentsItemVisitor interface {
	VisitString(string) error
	VisitPayment(*Payment) error
}

func (j *JournalEntryRequestPaymentsItem) Accept(visitor JournalEntryRequestPaymentsItemVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "Payment" || j.Payment != nil {
		return visitor.VisitPayment(j.Payment)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryRequestTrackingCategoriesItem struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (j *JournalEntryRequestTrackingCategoriesItem) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalEntryRequestTrackingCategoriesItem) GetTrackingCategory() *TrackingCategory {
	if j == nil {
		return nil
	}
	return j.TrackingCategory
}

func (j *JournalEntryRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		j.typ = "TrackingCategory"
		j.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "TrackingCategory" || j.TrackingCategory != nil {
		return json.Marshal(j.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (j *JournalEntryRequestTrackingCategoriesItem) Accept(visitor JournalEntryRequestTrackingCategoriesItemVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "TrackingCategory" || j.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(j.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryResponse struct {
	Model    *JournalEntry               `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *JournalEntryResponse) GetModel() *JournalEntry {
	if j == nil {
		return nil
	}
	return j.Model
}

func (j *JournalEntryResponse) GetWarnings() []*WarningValidationProblem {
	if j == nil {
		return nil
	}
	return j.Warnings
}

func (j *JournalEntryResponse) GetErrors() []*ErrorValidationProblem {
	if j == nil {
		return nil
	}
	return j.Errors
}

func (j *JournalEntryResponse) GetLogs() []*DebugModeLog {
	if j == nil {
		return nil
	}
	return j.Logs
}

func (j *JournalEntryResponse) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JournalEntryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler JournalEntryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JournalEntryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *JournalEntryResponse) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type JournalEntryTrackingCategoriesItem struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (j *JournalEntryTrackingCategoriesItem) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalEntryTrackingCategoriesItem) GetTrackingCategory() *TrackingCategory {
	if j == nil {
		return nil
	}
	return j.TrackingCategory
}

func (j *JournalEntryTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		j.typ = "TrackingCategory"
		j.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "TrackingCategory" || j.TrackingCategory != nil {
		return json.Marshal(j.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalEntryTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (j *JournalEntryTrackingCategoriesItem) Accept(visitor JournalEntryTrackingCategoriesItemVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "TrackingCategory" || j.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(j.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

// # The JournalLine Object
// ### Description
// The `JournalLine` object is used to represent a journal entry's line items.
//
// ### Usage Example
// Fetch from the `GET JournalEntry` endpoint and view the journal entry's line items.
type JournalLine struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time          `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	Account    *JournalLineAccount `json:"account,omitempty" url:"account,omitempty"`
	// The value of the line item including taxes and other fees.
	NetAmount        *float64                     `json:"net_amount,omitempty" url:"net_amount,omitempty"`
	TrackingCategory *JournalLineTrackingCategory `json:"tracking_category,omitempty" url:"tracking_category,omitempty"`
	// The journal line item's associated tracking categories.
	TrackingCategories []*JournalLineTrackingCategoriesItem `json:"tracking_categories,omitempty" url:"tracking_categories,omitempty"`
	// The journal line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927â€“2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946â€“1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977â€“1991)
	// * `AON` - Angolan New Kwanza (1990â€“2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995â€“1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881â€“1970)
	// * `ARP` - Argentine Peso (1983â€“1985)
	// * `ARL` - Argentine Peso Ley (1970â€“1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993â€“2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994â€“1999)
	// * `BYR` - Belarusian Ruble (2000â€“2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863â€“1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992â€“1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994â€“1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986â€“1989)
	// * `BRZ` - Brazilian Cruzeiro (1942â€“1967)
	// * `BRE` - Brazilian Cruzeiro (1990â€“1993)
	// * `BRR` - Brazilian Cruzeiro (1993â€“1994)
	// * `BRN` - Brazilian New Cruzado (1989â€“1990)
	// * `BRB` - Brazilian New Cruzeiro (1967â€“1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879â€“1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese Peopleâ€™s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican ColÃ³n
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979â€“2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic KrÃ³na
	// * `ISJ` - Icelandic KrÃ³na (1918â€“1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980â€“1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992â€“1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947â€“1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973â€“2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861â€“1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980â€“2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan CÃ³rdoba
	// * `NIC` - Nicaraguan CÃ³rdoba (1988â€“1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863â€“1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950â€“1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952â€“2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991â€“1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran ColÃ³n
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002â€“2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953â€“1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945â€“1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992â€“2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957â€“1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - SÃ£o TomÃ© & PrÃ­ncipe Dobra
	// * `STD` - SÃ£o TomÃ© & PrÃ­ncipe Dobra (1977â€“2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan PaÊ»anga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922â€“2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993â€“2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966â€“1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975â€“1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan BolÃ­var
	// * `VEB` - Venezuelan BolÃ­var (1871â€“2008)
	// * `VEF` - Venezuelan BolÃ­var (2008â€“2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978â€“1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990â€“1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966â€“1990)
	// * `YUM` - Yugoslavian New Dinar (1994â€“2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992â€“1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993â€“1998)
	// * `ZRZ` - Zairean Zaire (1971â€“1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968â€“2012)
	// * `ZWD` - Zimbabwean Dollar (1980â€“2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *TransactionCurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`
	// The company the journal entry belongs to.
	Company  *string `json:"company,omitempty" url:"company,omitempty"`
	Employee *string `json:"employee,omitempty" url:"employee,omitempty"`
	Contact  *string `json:"contact,omitempty" url:"contact,omitempty"`
	// The tax rate that applies to this line item.
	TaxRate *string `json:"tax_rate,omitempty" url:"tax_rate,omitempty"`
	// The line's description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The journal line item's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty" url:"exchange_rate,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool          `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	RemoteFields     []*RemoteField `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *JournalLine) GetId() *string {
	if j == nil {
		return nil
	}
	return j.Id
}

func (j *JournalLine) GetRemoteId() *string {
	if j == nil {
		return nil
	}
	return j.RemoteId
}

func (j *JournalLine) GetCreatedAt() *time.Time {
	if j == nil {
		return nil
	}
	return j.CreatedAt
}

func (j *JournalLine) GetModifiedAt() *time.Time {
	if j == nil {
		return nil
	}
	return j.ModifiedAt
}

func (j *JournalLine) GetAccount() *JournalLineAccount {
	if j == nil {
		return nil
	}
	return j.Account
}

func (j *JournalLine) GetNetAmount() *float64 {
	if j == nil {
		return nil
	}
	return j.NetAmount
}

func (j *JournalLine) GetTrackingCategory() *JournalLineTrackingCategory {
	if j == nil {
		return nil
	}
	return j.TrackingCategory
}

func (j *JournalLine) GetTrackingCategories() []*JournalLineTrackingCategoriesItem {
	if j == nil {
		return nil
	}
	return j.TrackingCategories
}

func (j *JournalLine) GetCurrency() *TransactionCurrencyEnum {
	if j == nil {
		return nil
	}
	return j.Currency
}

func (j *JournalLine) GetCompany() *string {
	if j == nil {
		return nil
	}
	return j.Company
}

func (j *JournalLine) GetEmployee() *string {
	if j == nil {
		return nil
	}
	return j.Employee
}

func (j *JournalLine) GetContact() *string {
	if j == nil {
		return nil
	}
	return j.Contact
}

func (j *JournalLine) GetTaxRate() *string {
	if j == nil {
		return nil
	}
	return j.TaxRate
}

func (j *JournalLine) GetDescription() *string {
	if j == nil {
		return nil
	}
	return j.Description
}

func (j *JournalLine) GetExchangeRate() *string {
	if j == nil {
		return nil
	}
	return j.ExchangeRate
}

func (j *JournalLine) GetRemoteWasDeleted() *bool {
	if j == nil {
		return nil
	}
	return j.RemoteWasDeleted
}

func (j *JournalLine) GetRemoteFields() []*RemoteField {
	if j == nil {
		return nil
	}
	return j.RemoteFields
}

func (j *JournalLine) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JournalLine) UnmarshalJSON(data []byte) error {
	type embed JournalLine
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JournalLine(unmarshaler.embed)
	j.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	j.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *JournalLine) MarshalJSON() ([]byte, error) {
	type embed JournalLine
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*j),
		CreatedAt:  internal.NewOptionalDateTime(j.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(j.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (j *JournalLine) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type JournalLineAccount struct {
	String  string
	Account *Account

	typ string
}

func (j *JournalLineAccount) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalLineAccount) GetAccount() *Account {
	if j == nil {
		return nil
	}
	return j.Account
}

func (j *JournalLineAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		j.typ = "Account"
		j.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineAccount) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "Account" || j.Account != nil {
		return json.Marshal(j.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalLineAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (j *JournalLineAccount) Accept(visitor JournalLineAccountVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "Account" || j.Account != nil {
		return visitor.VisitAccount(j.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

// # The JournalLine Object
// ### Description
// The `JournalLine` object is used to represent a journal entry's line items.
//
// ### Usage Example
// Fetch from the `GET JournalEntry` endpoint and view the journal entry's line items.
type JournalLineRequest struct {
	// The third-party API ID of the matching object.
	RemoteId *string                    `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	Account  *JournalLineRequestAccount `json:"account,omitempty" url:"account,omitempty"`
	// The value of the line item including taxes and other fees.
	NetAmount        *float64                            `json:"net_amount,omitempty" url:"net_amount,omitempty"`
	TrackingCategory *JournalLineRequestTrackingCategory `json:"tracking_category,omitempty" url:"tracking_category,omitempty"`
	// The journal line item's associated tracking categories.
	TrackingCategories []*JournalLineRequestTrackingCategoriesItem `json:"tracking_categories,omitempty" url:"tracking_categories,omitempty"`
	// The journal line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927â€“2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946â€“1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977â€“1991)
	// * `AON` - Angolan New Kwanza (1990â€“2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995â€“1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881â€“1970)
	// * `ARP` - Argentine Peso (1983â€“1985)
	// * `ARL` - Argentine Peso Ley (1970â€“1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993â€“2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994â€“1999)
	// * `BYR` - Belarusian Ruble (2000â€“2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863â€“1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992â€“1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994â€“1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986â€“1989)
	// * `BRZ` - Brazilian Cruzeiro (1942â€“1967)
	// * `BRE` - Brazilian Cruzeiro (1990â€“1993)
	// * `BRR` - Brazilian Cruzeiro (1993â€“1994)
	// * `BRN` - Brazilian New Cruzado (1989â€“1990)
	// * `BRB` - Brazilian New Cruzeiro (1967â€“1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879â€“1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese Peopleâ€™s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican ColÃ³n
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979â€“2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic KrÃ³na
	// * `ISJ` - Icelandic KrÃ³na (1918â€“1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980â€“1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992â€“1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947â€“1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973â€“2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861â€“1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980â€“2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan CÃ³rdoba
	// * `NIC` - Nicaraguan CÃ³rdoba (1988â€“1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863â€“1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950â€“1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952â€“2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991â€“1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran ColÃ³n
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002â€“2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953â€“1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945â€“1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992â€“2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957â€“1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - SÃ£o TomÃ© & PrÃ­ncipe Dobra
	// * `STD` - SÃ£o TomÃ© & PrÃ­ncipe Dobra (1977â€“2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan PaÊ»anga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922â€“2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993â€“2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966â€“1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975â€“1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan BolÃ­var
	// * `VEB` - Venezuelan BolÃ­var (1871â€“2008)
	// * `VEF` - Venezuelan BolÃ­var (2008â€“2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978â€“1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990â€“1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966â€“1990)
	// * `YUM` - Yugoslavian New Dinar (1994â€“2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992â€“1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993â€“1998)
	// * `ZRZ` - Zairean Zaire (1971â€“1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968â€“2012)
	// * `ZWD` - Zimbabwean Dollar (1980â€“2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *TransactionCurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`
	// The company the journal entry belongs to.
	Company  *string `json:"company,omitempty" url:"company,omitempty"`
	Employee *string `json:"employee,omitempty" url:"employee,omitempty"`
	Contact  *string `json:"contact,omitempty" url:"contact,omitempty"`
	// The tax rate that applies to this line item.
	TaxRate *string `json:"tax_rate,omitempty" url:"tax_rate,omitempty"`
	// The line's description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The journal line item's exchange rate.
	ExchangeRate        *string                `json:"exchange_rate,omitempty" url:"exchange_rate,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *JournalLineRequest) GetRemoteId() *string {
	if j == nil {
		return nil
	}
	return j.RemoteId
}

func (j *JournalLineRequest) GetAccount() *JournalLineRequestAccount {
	if j == nil {
		return nil
	}
	return j.Account
}

func (j *JournalLineRequest) GetNetAmount() *float64 {
	if j == nil {
		return nil
	}
	return j.NetAmount
}

func (j *JournalLineRequest) GetTrackingCategory() *JournalLineRequestTrackingCategory {
	if j == nil {
		return nil
	}
	return j.TrackingCategory
}

func (j *JournalLineRequest) GetTrackingCategories() []*JournalLineRequestTrackingCategoriesItem {
	if j == nil {
		return nil
	}
	return j.TrackingCategories
}

func (j *JournalLineRequest) GetCurrency() *TransactionCurrencyEnum {
	if j == nil {
		return nil
	}
	return j.Currency
}

func (j *JournalLineRequest) GetCompany() *string {
	if j == nil {
		return nil
	}
	return j.Company
}

func (j *JournalLineRequest) GetEmployee() *string {
	if j == nil {
		return nil
	}
	return j.Employee
}

func (j *JournalLineRequest) GetContact() *string {
	if j == nil {
		return nil
	}
	return j.Contact
}

func (j *JournalLineRequest) GetTaxRate() *string {
	if j == nil {
		return nil
	}
	return j.TaxRate
}

func (j *JournalLineRequest) GetDescription() *string {
	if j == nil {
		return nil
	}
	return j.Description
}

func (j *JournalLineRequest) GetExchangeRate() *string {
	if j == nil {
		return nil
	}
	return j.ExchangeRate
}

func (j *JournalLineRequest) GetIntegrationParams() map[string]interface{} {
	if j == nil {
		return nil
	}
	return j.IntegrationParams
}

func (j *JournalLineRequest) GetLinkedAccountParams() map[string]interface{} {
	if j == nil {
		return nil
	}
	return j.LinkedAccountParams
}

func (j *JournalLineRequest) GetRemoteFields() []*RemoteFieldRequest {
	if j == nil {
		return nil
	}
	return j.RemoteFields
}

func (j *JournalLineRequest) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JournalLineRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler JournalLineRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JournalLineRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *JournalLineRequest) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type JournalLineRequestAccount struct {
	String  string
	Account *Account

	typ string
}

func (j *JournalLineRequestAccount) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalLineRequestAccount) GetAccount() *Account {
	if j == nil {
		return nil
	}
	return j.Account
}

func (j *JournalLineRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		j.typ = "Account"
		j.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineRequestAccount) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "Account" || j.Account != nil {
		return json.Marshal(j.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalLineRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (j *JournalLineRequestAccount) Accept(visitor JournalLineRequestAccountVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "Account" || j.Account != nil {
		return visitor.VisitAccount(j.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalLineRequestTrackingCategoriesItem struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (j *JournalLineRequestTrackingCategoriesItem) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalLineRequestTrackingCategoriesItem) GetTrackingCategory() *TrackingCategory {
	if j == nil {
		return nil
	}
	return j.TrackingCategory
}

func (j *JournalLineRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		j.typ = "TrackingCategory"
		j.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "TrackingCategory" || j.TrackingCategory != nil {
		return json.Marshal(j.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalLineRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (j *JournalLineRequestTrackingCategoriesItem) Accept(visitor JournalLineRequestTrackingCategoriesItemVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "TrackingCategory" || j.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(j.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalLineRequestTrackingCategory struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (j *JournalLineRequestTrackingCategory) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalLineRequestTrackingCategory) GetTrackingCategory() *TrackingCategory {
	if j == nil {
		return nil
	}
	return j.TrackingCategory
}

func (j *JournalLineRequestTrackingCategory) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		j.typ = "TrackingCategory"
		j.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineRequestTrackingCategory) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "TrackingCategory" || j.TrackingCategory != nil {
		return json.Marshal(j.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalLineRequestTrackingCategoryVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (j *JournalLineRequestTrackingCategory) Accept(visitor JournalLineRequestTrackingCategoryVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "TrackingCategory" || j.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(j.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalLineTrackingCategoriesItem struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (j *JournalLineTrackingCategoriesItem) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalLineTrackingCategoriesItem) GetTrackingCategory() *TrackingCategory {
	if j == nil {
		return nil
	}
	return j.TrackingCategory
}

func (j *JournalLineTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		j.typ = "TrackingCategory"
		j.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "TrackingCategory" || j.TrackingCategory != nil {
		return json.Marshal(j.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalLineTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (j *JournalLineTrackingCategoriesItem) Accept(visitor JournalLineTrackingCategoriesItemVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "TrackingCategory" || j.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(j.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalLineTrackingCategory struct {
	String           string
	TrackingCategory *TrackingCategory

	typ string
}

func (j *JournalLineTrackingCategory) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JournalLineTrackingCategory) GetTrackingCategory() *TrackingCategory {
	if j == nil {
		return nil
	}
	return j.TrackingCategory
}

func (j *JournalLineTrackingCategory) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		j.typ = "TrackingCategory"
		j.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineTrackingCategory) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "TrackingCategory" || j.TrackingCategory != nil {
		return json.Marshal(j.TrackingCategory)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JournalLineTrackingCategoryVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (j *JournalLineTrackingCategory) Accept(visitor JournalLineTrackingCategoryVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "TrackingCategory" || j.TrackingCategory != nil {
		return visitor.VisitTrackingCategory(j.TrackingCategory)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

type PaginatedJournalEntryList struct {
	Next     *string         `json:"next,omitempty" url:"next,omitempty"`
	Previous *string         `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*JournalEntry `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedJournalEntryList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedJournalEntryList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedJournalEntryList) GetResults() []*JournalEntry {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedJournalEntryList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedJournalEntryList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedJournalEntryList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedJournalEntryList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedJournalEntryList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// * `UNPOSTED` - UNPOSTED
// * `POSTED` - POSTED
type PostingStatusEnum string

const (
	PostingStatusEnumUnposted PostingStatusEnum = "UNPOSTED"
	PostingStatusEnumPosted   PostingStatusEnum = "POSTED"
)

func NewPostingStatusEnumFromString(s string) (PostingStatusEnum, error) {
	switch s {
	case "UNPOSTED":
		return PostingStatusEnumUnposted, nil
	case "POSTED":
		return PostingStatusEnumPosted, nil
	}
	var t PostingStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PostingStatusEnum) Ptr() *PostingStatusEnum {
	return &p
}
