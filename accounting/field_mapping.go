// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
)

type CreateFieldMappingRequest struct {
	// If `true`, remote fields metadata is excluded from each field mapping instance (i.e. `remote_fields.remote_key_name` and `remote_fields.schema` will be null). This will increase the speed of the request since these fields require some calculations.
	ExcludeRemoteFieldMetadata *bool `json:"-" url:"exclude_remote_field_metadata,omitempty"`
	// The name of the target field you want this remote field to map to.
	TargetFieldName string `json:"target_field_name" url:"-"`
	// The description of the target field you want this remote field to map to.
	TargetFieldDescription string `json:"target_field_description" url:"-"`
	// The field traversal path of the remote field listed when you hit the GET /remote-fields endpoint.
	RemoteFieldTraversalPath []interface{} `json:"remote_field_traversal_path,omitempty" url:"-"`
	// The method of the remote endpoint where the remote field is coming from.
	RemoteMethod string `json:"remote_method" url:"-"`
	// The path of the remote endpoint where the remote field is coming from.
	RemoteUrlPath string `json:"remote_url_path" url:"-"`
	// The name of the Common Model that the remote field corresponds to in a given category.
	CommonModelName string `json:"common_model_name" url:"-"`
}

type PatchedEditFieldMappingRequest struct {
	// The field traversal path of the remote field listed when you hit the GET /remote-fields endpoint.
	RemoteFieldTraversalPath []interface{} `json:"remote_field_traversal_path,omitempty" url:"-"`
	// The method of the remote endpoint where the remote field is coming from.
	RemoteMethod *string `json:"remote_method,omitempty" url:"-"`
	// The path of the remote endpoint where the remote field is coming from.
	RemoteUrlPath *string `json:"remote_url_path,omitempty" url:"-"`
}

type FieldMappingsRetrieveRequest struct {
	// If `true`, remote fields metadata is excluded from each field mapping instance (i.e. `remote_fields.remote_key_name` and `remote_fields.schema` will be null). This will increase the speed of the request since these fields require some calculations.
	ExcludeRemoteFieldMetadata *bool `json:"-" url:"exclude_remote_field_metadata,omitempty"`
}

type RemoteFieldsRetrieveRequest struct {
	// A comma seperated list of Common Model names. If included, will only return Remote Fields for those Common Models.
	CommonModels *string `json:"-" url:"common_models,omitempty"`
	// If true, will include example values, where available, for remote fields in the 3rd party platform. These examples come from active data from your customers.
	IncludeExampleValues *string `json:"-" url:"include_example_values,omitempty"`
}

type AdvancedMetadata struct {
	Id           string        `json:"id" url:"id"`
	DisplayName  *string       `json:"display_name,omitempty" url:"display_name,omitempty"`
	Description  *string       `json:"description,omitempty" url:"description,omitempty"`
	IsRequired   *bool         `json:"is_required,omitempty" url:"is_required,omitempty"`
	IsCustom     *bool         `json:"is_custom,omitempty" url:"is_custom,omitempty"`
	FieldChoices []interface{} `json:"field_choices,omitempty" url:"field_choices,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AdvancedMetadata) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AdvancedMetadata) GetDisplayName() *string {
	if a == nil {
		return nil
	}
	return a.DisplayName
}

func (a *AdvancedMetadata) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AdvancedMetadata) GetIsRequired() *bool {
	if a == nil {
		return nil
	}
	return a.IsRequired
}

func (a *AdvancedMetadata) GetIsCustom() *bool {
	if a == nil {
		return nil
	}
	return a.IsCustom
}

func (a *AdvancedMetadata) GetFieldChoices() []interface{} {
	if a == nil {
		return nil
	}
	return a.FieldChoices
}

func (a *AdvancedMetadata) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AdvancedMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler AdvancedMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdvancedMetadata(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdvancedMetadata) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ExternalTargetFieldApi struct {
	Name        *string `json:"name,omitempty" url:"name,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	IsMapped    *string `json:"is_mapped,omitempty" url:"is_mapped,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ExternalTargetFieldApi) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *ExternalTargetFieldApi) GetDescription() *string {
	if e == nil {
		return nil
	}
	return e.Description
}

func (e *ExternalTargetFieldApi) GetIsMapped() *string {
	if e == nil {
		return nil
	}
	return e.IsMapped
}

func (e *ExternalTargetFieldApi) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExternalTargetFieldApi) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalTargetFieldApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalTargetFieldApi(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalTargetFieldApi) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExternalTargetFieldApiResponse struct {
	Account                  []*ExternalTargetFieldApi `json:"Account,omitempty" url:"Account,omitempty"`
	AccountingAttachment     []*ExternalTargetFieldApi `json:"AccountingAttachment,omitempty" url:"AccountingAttachment,omitempty"`
	BalanceSheet             []*ExternalTargetFieldApi `json:"BalanceSheet,omitempty" url:"BalanceSheet,omitempty"`
	CashFlowStatement        []*ExternalTargetFieldApi `json:"CashFlowStatement,omitempty" url:"CashFlowStatement,omitempty"`
	CompanyInfo              []*ExternalTargetFieldApi `json:"CompanyInfo,omitempty" url:"CompanyInfo,omitempty"`
	Contact                  []*ExternalTargetFieldApi `json:"Contact,omitempty" url:"Contact,omitempty"`
	IncomeStatement          []*ExternalTargetFieldApi `json:"IncomeStatement,omitempty" url:"IncomeStatement,omitempty"`
	CreditNote               []*ExternalTargetFieldApi `json:"CreditNote,omitempty" url:"CreditNote,omitempty"`
	Item                     []*ExternalTargetFieldApi `json:"Item,omitempty" url:"Item,omitempty"`
	PurchaseOrder            []*ExternalTargetFieldApi `json:"PurchaseOrder,omitempty" url:"PurchaseOrder,omitempty"`
	TrackingCategory         []*ExternalTargetFieldApi `json:"TrackingCategory,omitempty" url:"TrackingCategory,omitempty"`
	JournalEntry             []*ExternalTargetFieldApi `json:"JournalEntry,omitempty" url:"JournalEntry,omitempty"`
	TaxRate                  []*ExternalTargetFieldApi `json:"TaxRate,omitempty" url:"TaxRate,omitempty"`
	Invoice                  []*ExternalTargetFieldApi `json:"Invoice,omitempty" url:"Invoice,omitempty"`
	Payment                  []*ExternalTargetFieldApi `json:"Payment,omitempty" url:"Payment,omitempty"`
	Expense                  []*ExternalTargetFieldApi `json:"Expense,omitempty" url:"Expense,omitempty"`
	VendorCredit             []*ExternalTargetFieldApi `json:"VendorCredit,omitempty" url:"VendorCredit,omitempty"`
	Transaction              []*ExternalTargetFieldApi `json:"Transaction,omitempty" url:"Transaction,omitempty"`
	AccountingPeriod         []*ExternalTargetFieldApi `json:"AccountingPeriod,omitempty" url:"AccountingPeriod,omitempty"`
	GeneralLedgerTransaction []*ExternalTargetFieldApi `json:"GeneralLedgerTransaction,omitempty" url:"GeneralLedgerTransaction,omitempty"`
	BankFeedAccount          []*ExternalTargetFieldApi `json:"BankFeedAccount,omitempty" url:"BankFeedAccount,omitempty"`
	Employee                 []*ExternalTargetFieldApi `json:"Employee,omitempty" url:"Employee,omitempty"`
	PaymentMethod            []*ExternalTargetFieldApi `json:"PaymentMethod,omitempty" url:"PaymentMethod,omitempty"`
	PaymentTerm              []*ExternalTargetFieldApi `json:"PaymentTerm,omitempty" url:"PaymentTerm,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ExternalTargetFieldApiResponse) GetAccount() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.Account
}

func (e *ExternalTargetFieldApiResponse) GetAccountingAttachment() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.AccountingAttachment
}

func (e *ExternalTargetFieldApiResponse) GetBalanceSheet() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.BalanceSheet
}

func (e *ExternalTargetFieldApiResponse) GetCashFlowStatement() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.CashFlowStatement
}

func (e *ExternalTargetFieldApiResponse) GetCompanyInfo() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.CompanyInfo
}

func (e *ExternalTargetFieldApiResponse) GetContact() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.Contact
}

func (e *ExternalTargetFieldApiResponse) GetIncomeStatement() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.IncomeStatement
}

func (e *ExternalTargetFieldApiResponse) GetCreditNote() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.CreditNote
}

func (e *ExternalTargetFieldApiResponse) GetItem() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.Item
}

func (e *ExternalTargetFieldApiResponse) GetPurchaseOrder() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.PurchaseOrder
}

func (e *ExternalTargetFieldApiResponse) GetTrackingCategory() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.TrackingCategory
}

func (e *ExternalTargetFieldApiResponse) GetJournalEntry() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.JournalEntry
}

func (e *ExternalTargetFieldApiResponse) GetTaxRate() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.TaxRate
}

func (e *ExternalTargetFieldApiResponse) GetInvoice() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.Invoice
}

func (e *ExternalTargetFieldApiResponse) GetPayment() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.Payment
}

func (e *ExternalTargetFieldApiResponse) GetExpense() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.Expense
}

func (e *ExternalTargetFieldApiResponse) GetVendorCredit() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.VendorCredit
}

func (e *ExternalTargetFieldApiResponse) GetTransaction() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.Transaction
}

func (e *ExternalTargetFieldApiResponse) GetAccountingPeriod() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.AccountingPeriod
}

func (e *ExternalTargetFieldApiResponse) GetGeneralLedgerTransaction() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.GeneralLedgerTransaction
}

func (e *ExternalTargetFieldApiResponse) GetBankFeedAccount() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.BankFeedAccount
}

func (e *ExternalTargetFieldApiResponse) GetEmployee() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.Employee
}

func (e *ExternalTargetFieldApiResponse) GetPaymentMethod() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.PaymentMethod
}

func (e *ExternalTargetFieldApiResponse) GetPaymentTerm() []*ExternalTargetFieldApi {
	if e == nil {
		return nil
	}
	return e.PaymentTerm
}

func (e *ExternalTargetFieldApiResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExternalTargetFieldApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalTargetFieldApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalTargetFieldApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalTargetFieldApiResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type FieldMappingApiInstance struct {
	Id                *string                             `json:"id,omitempty" url:"id,omitempty"`
	IsIntegrationWide *bool                               `json:"is_integration_wide,omitempty" url:"is_integration_wide,omitempty"`
	TargetField       *FieldMappingApiInstanceTargetField `json:"target_field,omitempty" url:"target_field,omitempty"`
	RemoteField       *FieldMappingApiInstanceRemoteField `json:"remote_field,omitempty" url:"remote_field,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FieldMappingApiInstance) GetId() *string {
	if f == nil {
		return nil
	}
	return f.Id
}

func (f *FieldMappingApiInstance) GetIsIntegrationWide() *bool {
	if f == nil {
		return nil
	}
	return f.IsIntegrationWide
}

func (f *FieldMappingApiInstance) GetTargetField() *FieldMappingApiInstanceTargetField {
	if f == nil {
		return nil
	}
	return f.TargetField
}

func (f *FieldMappingApiInstance) GetRemoteField() *FieldMappingApiInstanceRemoteField {
	if f == nil {
		return nil
	}
	return f.RemoteField
}

func (f *FieldMappingApiInstance) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FieldMappingApiInstance) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstance(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstance) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceRemoteField struct {
	RemoteKeyName      *string                                               `json:"remote_key_name,omitempty" url:"remote_key_name,omitempty"`
	Schema             map[string]interface{}                                `json:"schema,omitempty" url:"schema,omitempty"`
	RemoteEndpointInfo *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo `json:"remote_endpoint_info" url:"remote_endpoint_info"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FieldMappingApiInstanceRemoteField) GetRemoteKeyName() *string {
	if f == nil {
		return nil
	}
	return f.RemoteKeyName
}

func (f *FieldMappingApiInstanceRemoteField) GetSchema() map[string]interface{} {
	if f == nil {
		return nil
	}
	return f.Schema
}

func (f *FieldMappingApiInstanceRemoteField) GetRemoteEndpointInfo() *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo {
	if f == nil {
		return nil
	}
	return f.RemoteEndpointInfo
}

func (f *FieldMappingApiInstanceRemoteField) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FieldMappingApiInstanceRemoteField) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceRemoteField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceRemoteField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceRemoteField) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo struct {
	Method             *string  `json:"method,omitempty" url:"method,omitempty"`
	UrlPath            *string  `json:"url_path,omitempty" url:"url_path,omitempty"`
	FieldTraversalPath []string `json:"field_traversal_path,omitempty" url:"field_traversal_path,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo) GetMethod() *string {
	if f == nil {
		return nil
	}
	return f.Method
}

func (f *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo) GetUrlPath() *string {
	if f == nil {
		return nil
	}
	return f.UrlPath
}

func (f *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo) GetFieldTraversalPath() []string {
	if f == nil {
		return nil
	}
	return f.FieldTraversalPath
}

func (f *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceResponse struct {
	Account                  []*FieldMappingApiInstance `json:"Account,omitempty" url:"Account,omitempty"`
	AccountingAttachment     []*FieldMappingApiInstance `json:"AccountingAttachment,omitempty" url:"AccountingAttachment,omitempty"`
	BalanceSheet             []*FieldMappingApiInstance `json:"BalanceSheet,omitempty" url:"BalanceSheet,omitempty"`
	CashFlowStatement        []*FieldMappingApiInstance `json:"CashFlowStatement,omitempty" url:"CashFlowStatement,omitempty"`
	CompanyInfo              []*FieldMappingApiInstance `json:"CompanyInfo,omitempty" url:"CompanyInfo,omitempty"`
	Contact                  []*FieldMappingApiInstance `json:"Contact,omitempty" url:"Contact,omitempty"`
	IncomeStatement          []*FieldMappingApiInstance `json:"IncomeStatement,omitempty" url:"IncomeStatement,omitempty"`
	CreditNote               []*FieldMappingApiInstance `json:"CreditNote,omitempty" url:"CreditNote,omitempty"`
	Item                     []*FieldMappingApiInstance `json:"Item,omitempty" url:"Item,omitempty"`
	PurchaseOrder            []*FieldMappingApiInstance `json:"PurchaseOrder,omitempty" url:"PurchaseOrder,omitempty"`
	TrackingCategory         []*FieldMappingApiInstance `json:"TrackingCategory,omitempty" url:"TrackingCategory,omitempty"`
	JournalEntry             []*FieldMappingApiInstance `json:"JournalEntry,omitempty" url:"JournalEntry,omitempty"`
	TaxRate                  []*FieldMappingApiInstance `json:"TaxRate,omitempty" url:"TaxRate,omitempty"`
	Invoice                  []*FieldMappingApiInstance `json:"Invoice,omitempty" url:"Invoice,omitempty"`
	Payment                  []*FieldMappingApiInstance `json:"Payment,omitempty" url:"Payment,omitempty"`
	Expense                  []*FieldMappingApiInstance `json:"Expense,omitempty" url:"Expense,omitempty"`
	VendorCredit             []*FieldMappingApiInstance `json:"VendorCredit,omitempty" url:"VendorCredit,omitempty"`
	Transaction              []*FieldMappingApiInstance `json:"Transaction,omitempty" url:"Transaction,omitempty"`
	AccountingPeriod         []*FieldMappingApiInstance `json:"AccountingPeriod,omitempty" url:"AccountingPeriod,omitempty"`
	GeneralLedgerTransaction []*FieldMappingApiInstance `json:"GeneralLedgerTransaction,omitempty" url:"GeneralLedgerTransaction,omitempty"`
	BankFeedAccount          []*FieldMappingApiInstance `json:"BankFeedAccount,omitempty" url:"BankFeedAccount,omitempty"`
	Employee                 []*FieldMappingApiInstance `json:"Employee,omitempty" url:"Employee,omitempty"`
	PaymentMethod            []*FieldMappingApiInstance `json:"PaymentMethod,omitempty" url:"PaymentMethod,omitempty"`
	PaymentTerm              []*FieldMappingApiInstance `json:"PaymentTerm,omitempty" url:"PaymentTerm,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FieldMappingApiInstanceResponse) GetAccount() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.Account
}

func (f *FieldMappingApiInstanceResponse) GetAccountingAttachment() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.AccountingAttachment
}

func (f *FieldMappingApiInstanceResponse) GetBalanceSheet() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.BalanceSheet
}

func (f *FieldMappingApiInstanceResponse) GetCashFlowStatement() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.CashFlowStatement
}

func (f *FieldMappingApiInstanceResponse) GetCompanyInfo() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.CompanyInfo
}

func (f *FieldMappingApiInstanceResponse) GetContact() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.Contact
}

func (f *FieldMappingApiInstanceResponse) GetIncomeStatement() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.IncomeStatement
}

func (f *FieldMappingApiInstanceResponse) GetCreditNote() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.CreditNote
}

func (f *FieldMappingApiInstanceResponse) GetItem() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.Item
}

func (f *FieldMappingApiInstanceResponse) GetPurchaseOrder() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.PurchaseOrder
}

func (f *FieldMappingApiInstanceResponse) GetTrackingCategory() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.TrackingCategory
}

func (f *FieldMappingApiInstanceResponse) GetJournalEntry() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.JournalEntry
}

func (f *FieldMappingApiInstanceResponse) GetTaxRate() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.TaxRate
}

func (f *FieldMappingApiInstanceResponse) GetInvoice() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.Invoice
}

func (f *FieldMappingApiInstanceResponse) GetPayment() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.Payment
}

func (f *FieldMappingApiInstanceResponse) GetExpense() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.Expense
}

func (f *FieldMappingApiInstanceResponse) GetVendorCredit() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.VendorCredit
}

func (f *FieldMappingApiInstanceResponse) GetTransaction() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.Transaction
}

func (f *FieldMappingApiInstanceResponse) GetAccountingPeriod() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.AccountingPeriod
}

func (f *FieldMappingApiInstanceResponse) GetGeneralLedgerTransaction() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.GeneralLedgerTransaction
}

func (f *FieldMappingApiInstanceResponse) GetBankFeedAccount() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.BankFeedAccount
}

func (f *FieldMappingApiInstanceResponse) GetEmployee() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.Employee
}

func (f *FieldMappingApiInstanceResponse) GetPaymentMethod() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.PaymentMethod
}

func (f *FieldMappingApiInstanceResponse) GetPaymentTerm() []*FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.PaymentTerm
}

func (f *FieldMappingApiInstanceResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FieldMappingApiInstanceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceResponse) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceTargetField struct {
	Name               string `json:"name" url:"name"`
	Description        string `json:"description" url:"description"`
	IsOrganizationWide bool   `json:"is_organization_wide" url:"is_organization_wide"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FieldMappingApiInstanceTargetField) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FieldMappingApiInstanceTargetField) GetDescription() string {
	if f == nil {
		return ""
	}
	return f.Description
}

func (f *FieldMappingApiInstanceTargetField) GetIsOrganizationWide() bool {
	if f == nil {
		return false
	}
	return f.IsOrganizationWide
}

func (f *FieldMappingApiInstanceTargetField) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FieldMappingApiInstanceTargetField) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceTargetField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceTargetField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceTargetField) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingInstanceResponse struct {
	Model    *FieldMappingApiInstance    `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FieldMappingInstanceResponse) GetModel() *FieldMappingApiInstance {
	if f == nil {
		return nil
	}
	return f.Model
}

func (f *FieldMappingInstanceResponse) GetWarnings() []*WarningValidationProblem {
	if f == nil {
		return nil
	}
	return f.Warnings
}

func (f *FieldMappingInstanceResponse) GetErrors() []*ErrorValidationProblem {
	if f == nil {
		return nil
	}
	return f.Errors
}

func (f *FieldMappingInstanceResponse) GetLogs() []*DebugModeLog {
	if f == nil {
		return nil
	}
	return f.Logs
}

func (f *FieldMappingInstanceResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FieldMappingInstanceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingInstanceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingInstanceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingInstanceResponse) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type RemoteEndpointInfo struct {
	Method             string        `json:"method" url:"method"`
	UrlPath            string        `json:"url_path" url:"url_path"`
	FieldTraversalPath []interface{} `json:"field_traversal_path" url:"field_traversal_path"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoteEndpointInfo) GetMethod() string {
	if r == nil {
		return ""
	}
	return r.Method
}

func (r *RemoteEndpointInfo) GetUrlPath() string {
	if r == nil {
		return ""
	}
	return r.UrlPath
}

func (r *RemoteEndpointInfo) GetFieldTraversalPath() []interface{} {
	if r == nil {
		return nil
	}
	return r.FieldTraversalPath
}

func (r *RemoteEndpointInfo) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoteEndpointInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteEndpointInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteEndpointInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteEndpointInfo) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldApi struct {
	Schema             map[string]interface{}  `json:"schema" url:"schema"`
	RemoteKeyName      string                  `json:"remote_key_name" url:"remote_key_name"`
	RemoteEndpointInfo *RemoteEndpointInfo     `json:"remote_endpoint_info" url:"remote_endpoint_info"`
	ExampleValues      []interface{}           `json:"example_values,omitempty" url:"example_values,omitempty"`
	AdvancedMetadata   *AdvancedMetadata       `json:"advanced_metadata,omitempty" url:"advanced_metadata,omitempty"`
	Coverage           *RemoteFieldApiCoverage `json:"coverage,omitempty" url:"coverage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoteFieldApi) GetSchema() map[string]interface{} {
	if r == nil {
		return nil
	}
	return r.Schema
}

func (r *RemoteFieldApi) GetRemoteKeyName() string {
	if r == nil {
		return ""
	}
	return r.RemoteKeyName
}

func (r *RemoteFieldApi) GetRemoteEndpointInfo() *RemoteEndpointInfo {
	if r == nil {
		return nil
	}
	return r.RemoteEndpointInfo
}

func (r *RemoteFieldApi) GetExampleValues() []interface{} {
	if r == nil {
		return nil
	}
	return r.ExampleValues
}

func (r *RemoteFieldApi) GetAdvancedMetadata() *AdvancedMetadata {
	if r == nil {
		return nil
	}
	return r.AdvancedMetadata
}

func (r *RemoteFieldApi) GetCoverage() *RemoteFieldApiCoverage {
	if r == nil {
		return nil
	}
	return r.Coverage
}

func (r *RemoteFieldApi) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoteFieldApi) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldApi(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldApi) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldApiCoverage struct {
	Integer int
	Double  float64

	typ string
}

func (r *RemoteFieldApiCoverage) GetInteger() int {
	if r == nil {
		return 0
	}
	return r.Integer
}

func (r *RemoteFieldApiCoverage) GetDouble() float64 {
	if r == nil {
		return 0
	}
	return r.Double
}

func (r *RemoteFieldApiCoverage) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		r.typ = "Integer"
		r.Integer = valueInteger
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		r.typ = "Double"
		r.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldApiCoverage) MarshalJSON() ([]byte, error) {
	if r.typ == "Integer" || r.Integer != 0 {
		return json.Marshal(r.Integer)
	}
	if r.typ == "Double" || r.Double != 0 {
		return json.Marshal(r.Double)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RemoteFieldApiCoverageVisitor interface {
	VisitInteger(int) error
	VisitDouble(float64) error
}

func (r *RemoteFieldApiCoverage) Accept(visitor RemoteFieldApiCoverageVisitor) error {
	if r.typ == "Integer" || r.Integer != 0 {
		return visitor.VisitInteger(r.Integer)
	}
	if r.typ == "Double" || r.Double != 0 {
		return visitor.VisitDouble(r.Double)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RemoteFieldApiResponse struct {
	Account                  []*RemoteFieldApi `json:"Account,omitempty" url:"Account,omitempty"`
	AccountingAttachment     []*RemoteFieldApi `json:"AccountingAttachment,omitempty" url:"AccountingAttachment,omitempty"`
	BalanceSheet             []*RemoteFieldApi `json:"BalanceSheet,omitempty" url:"BalanceSheet,omitempty"`
	CashFlowStatement        []*RemoteFieldApi `json:"CashFlowStatement,omitempty" url:"CashFlowStatement,omitempty"`
	CompanyInfo              []*RemoteFieldApi `json:"CompanyInfo,omitempty" url:"CompanyInfo,omitempty"`
	Contact                  []*RemoteFieldApi `json:"Contact,omitempty" url:"Contact,omitempty"`
	IncomeStatement          []*RemoteFieldApi `json:"IncomeStatement,omitempty" url:"IncomeStatement,omitempty"`
	CreditNote               []*RemoteFieldApi `json:"CreditNote,omitempty" url:"CreditNote,omitempty"`
	Item                     []*RemoteFieldApi `json:"Item,omitempty" url:"Item,omitempty"`
	PurchaseOrder            []*RemoteFieldApi `json:"PurchaseOrder,omitempty" url:"PurchaseOrder,omitempty"`
	TrackingCategory         []*RemoteFieldApi `json:"TrackingCategory,omitempty" url:"TrackingCategory,omitempty"`
	JournalEntry             []*RemoteFieldApi `json:"JournalEntry,omitempty" url:"JournalEntry,omitempty"`
	TaxRate                  []*RemoteFieldApi `json:"TaxRate,omitempty" url:"TaxRate,omitempty"`
	Invoice                  []*RemoteFieldApi `json:"Invoice,omitempty" url:"Invoice,omitempty"`
	Payment                  []*RemoteFieldApi `json:"Payment,omitempty" url:"Payment,omitempty"`
	Expense                  []*RemoteFieldApi `json:"Expense,omitempty" url:"Expense,omitempty"`
	VendorCredit             []*RemoteFieldApi `json:"VendorCredit,omitempty" url:"VendorCredit,omitempty"`
	Transaction              []*RemoteFieldApi `json:"Transaction,omitempty" url:"Transaction,omitempty"`
	AccountingPeriod         []*RemoteFieldApi `json:"AccountingPeriod,omitempty" url:"AccountingPeriod,omitempty"`
	GeneralLedgerTransaction []*RemoteFieldApi `json:"GeneralLedgerTransaction,omitempty" url:"GeneralLedgerTransaction,omitempty"`
	BankFeedAccount          []*RemoteFieldApi `json:"BankFeedAccount,omitempty" url:"BankFeedAccount,omitempty"`
	Employee                 []*RemoteFieldApi `json:"Employee,omitempty" url:"Employee,omitempty"`
	PaymentMethod            []*RemoteFieldApi `json:"PaymentMethod,omitempty" url:"PaymentMethod,omitempty"`
	PaymentTerm              []*RemoteFieldApi `json:"PaymentTerm,omitempty" url:"PaymentTerm,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoteFieldApiResponse) GetAccount() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.Account
}

func (r *RemoteFieldApiResponse) GetAccountingAttachment() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.AccountingAttachment
}

func (r *RemoteFieldApiResponse) GetBalanceSheet() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.BalanceSheet
}

func (r *RemoteFieldApiResponse) GetCashFlowStatement() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.CashFlowStatement
}

func (r *RemoteFieldApiResponse) GetCompanyInfo() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.CompanyInfo
}

func (r *RemoteFieldApiResponse) GetContact() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.Contact
}

func (r *RemoteFieldApiResponse) GetIncomeStatement() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.IncomeStatement
}

func (r *RemoteFieldApiResponse) GetCreditNote() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.CreditNote
}

func (r *RemoteFieldApiResponse) GetItem() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.Item
}

func (r *RemoteFieldApiResponse) GetPurchaseOrder() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.PurchaseOrder
}

func (r *RemoteFieldApiResponse) GetTrackingCategory() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.TrackingCategory
}

func (r *RemoteFieldApiResponse) GetJournalEntry() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.JournalEntry
}

func (r *RemoteFieldApiResponse) GetTaxRate() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.TaxRate
}

func (r *RemoteFieldApiResponse) GetInvoice() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.Invoice
}

func (r *RemoteFieldApiResponse) GetPayment() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.Payment
}

func (r *RemoteFieldApiResponse) GetExpense() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.Expense
}

func (r *RemoteFieldApiResponse) GetVendorCredit() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.VendorCredit
}

func (r *RemoteFieldApiResponse) GetTransaction() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.Transaction
}

func (r *RemoteFieldApiResponse) GetAccountingPeriod() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.AccountingPeriod
}

func (r *RemoteFieldApiResponse) GetGeneralLedgerTransaction() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.GeneralLedgerTransaction
}

func (r *RemoteFieldApiResponse) GetBankFeedAccount() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.BankFeedAccount
}

func (r *RemoteFieldApiResponse) GetEmployee() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.Employee
}

func (r *RemoteFieldApiResponse) GetPaymentMethod() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.PaymentMethod
}

func (r *RemoteFieldApiResponse) GetPaymentTerm() []*RemoteFieldApi {
	if r == nil {
		return nil
	}
	return r.PaymentTerm
}

func (r *RemoteFieldApiResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoteFieldApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldApiResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldApiResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
