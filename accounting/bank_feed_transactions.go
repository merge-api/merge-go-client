// Code generated by Fern. DO NOT EDIT.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type BankFeedTransactionEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool                              `json:"-" url:"run_async,omitempty"`
	Model    *BankFeedTransactionRequestRequest `json:"model,omitempty" url:"-"`
}

type BankFeedTransactionsListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return bank feed transactions with this is_processed value
	IsProcessed *bool `json:"-" url:"is_processed,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
}

type BankFeedTransactionsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

// # The BankFeedTransaction Object
// ### Description
// The `BankFeedTransaction` object is used to represent transactions linked to a bank feed account. This includes details about the transaction such as the date, amount, description, and type.
//
// ### Usage Example
// Fetch from the `GET BankFeedTransaction` endpoint to view details of a transaction associated with a bank feed account.
type BankFeedTransaction struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The bank feed account associated with the transaction.
	BankFeedAccount *BankFeedTransactionBankFeedAccount `json:"bank_feed_account,omitempty" url:"bank_feed_account,omitempty"`
	// The date that the transaction occurred.
	TransactionDate *time.Time `json:"transaction_date,omitempty" url:"transaction_date,omitempty"`
	// The date the transaction was posted to the bank account.
	PostedDate *time.Time `json:"posted_date,omitempty" url:"posted_date,omitempty"`
	// The amount of the transaction.
	Amount *float64 `json:"amount,omitempty" url:"amount,omitempty"`
	// The description of the transaction.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The underlying type of the transaction.
	TransactionType *string `json:"transaction_type,omitempty" url:"transaction_type,omitempty"`
	// The person or merchant who initiated the transaction, or alternatively, to whom the transaction was paid.
	Payee *string `json:"payee,omitempty" url:"payee,omitempty"`
	// If the transaction is of type debit or credit.
	//
	// * `CREDIT` - CREDIT
	// * `DEBIT` - DEBIT
	CreditOrDebit *CreditOrDebitEnum `json:"credit_or_debit,omitempty" url:"credit_or_debit,omitempty"`
	// The customerâ€™s identifier for the transaction.
	SourceTransactionId *string `json:"source_transaction_id,omitempty" url:"source_transaction_id,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	// Whether or not this transaction has been processed by the external system. For example, NetSuite writes this field as True when the SuiteApp has processed the transaction.
	IsProcessed *bool `json:"is_processed,omitempty" url:"is_processed,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BankFeedTransaction) GetId() *string {
	if b == nil {
		return nil
	}
	return b.Id
}

func (b *BankFeedTransaction) GetRemoteId() *string {
	if b == nil {
		return nil
	}
	return b.RemoteId
}

func (b *BankFeedTransaction) GetCreatedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.CreatedAt
}

func (b *BankFeedTransaction) GetModifiedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.ModifiedAt
}

func (b *BankFeedTransaction) GetBankFeedAccount() *BankFeedTransactionBankFeedAccount {
	if b == nil {
		return nil
	}
	return b.BankFeedAccount
}

func (b *BankFeedTransaction) GetTransactionDate() *time.Time {
	if b == nil {
		return nil
	}
	return b.TransactionDate
}

func (b *BankFeedTransaction) GetPostedDate() *time.Time {
	if b == nil {
		return nil
	}
	return b.PostedDate
}

func (b *BankFeedTransaction) GetAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.Amount
}

func (b *BankFeedTransaction) GetDescription() *string {
	if b == nil {
		return nil
	}
	return b.Description
}

func (b *BankFeedTransaction) GetTransactionType() *string {
	if b == nil {
		return nil
	}
	return b.TransactionType
}

func (b *BankFeedTransaction) GetPayee() *string {
	if b == nil {
		return nil
	}
	return b.Payee
}

func (b *BankFeedTransaction) GetCreditOrDebit() *CreditOrDebitEnum {
	if b == nil {
		return nil
	}
	return b.CreditOrDebit
}

func (b *BankFeedTransaction) GetSourceTransactionId() *string {
	if b == nil {
		return nil
	}
	return b.SourceTransactionId
}

func (b *BankFeedTransaction) GetRemoteWasDeleted() *bool {
	if b == nil {
		return nil
	}
	return b.RemoteWasDeleted
}

func (b *BankFeedTransaction) GetIsProcessed() *bool {
	if b == nil {
		return nil
	}
	return b.IsProcessed
}

func (b *BankFeedTransaction) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BankFeedTransaction) UnmarshalJSON(data []byte) error {
	type embed BankFeedTransaction
	var unmarshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		TransactionDate *internal.DateTime `json:"transaction_date,omitempty"`
		PostedDate      *internal.DateTime `json:"posted_date,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BankFeedTransaction(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	b.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	b.TransactionDate = unmarshaler.TransactionDate.TimePtr()
	b.PostedDate = unmarshaler.PostedDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BankFeedTransaction) MarshalJSON() ([]byte, error) {
	type embed BankFeedTransaction
	var marshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		TransactionDate *internal.DateTime `json:"transaction_date,omitempty"`
		PostedDate      *internal.DateTime `json:"posted_date,omitempty"`
	}{
		embed:           embed(*b),
		CreatedAt:       internal.NewOptionalDateTime(b.CreatedAt),
		ModifiedAt:      internal.NewOptionalDateTime(b.ModifiedAt),
		TransactionDate: internal.NewOptionalDateTime(b.TransactionDate),
		PostedDate:      internal.NewOptionalDateTime(b.PostedDate),
	}
	return json.Marshal(marshaler)
}

func (b *BankFeedTransaction) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The bank feed account associated with the transaction.
type BankFeedTransactionBankFeedAccount struct {
	String          string
	BankFeedAccount *BankFeedAccount

	typ string
}

func (b *BankFeedTransactionBankFeedAccount) GetString() string {
	if b == nil {
		return ""
	}
	return b.String
}

func (b *BankFeedTransactionBankFeedAccount) GetBankFeedAccount() *BankFeedAccount {
	if b == nil {
		return nil
	}
	return b.BankFeedAccount
}

func (b *BankFeedTransactionBankFeedAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		b.typ = "String"
		b.String = valueString
		return nil
	}
	valueBankFeedAccount := new(BankFeedAccount)
	if err := json.Unmarshal(data, &valueBankFeedAccount); err == nil {
		b.typ = "BankFeedAccount"
		b.BankFeedAccount = valueBankFeedAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BankFeedTransactionBankFeedAccount) MarshalJSON() ([]byte, error) {
	if b.typ == "String" || b.String != "" {
		return json.Marshal(b.String)
	}
	if b.typ == "BankFeedAccount" || b.BankFeedAccount != nil {
		return json.Marshal(b.BankFeedAccount)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", b)
}

type BankFeedTransactionBankFeedAccountVisitor interface {
	VisitString(string) error
	VisitBankFeedAccount(*BankFeedAccount) error
}

func (b *BankFeedTransactionBankFeedAccount) Accept(visitor BankFeedTransactionBankFeedAccountVisitor) error {
	if b.typ == "String" || b.String != "" {
		return visitor.VisitString(b.String)
	}
	if b.typ == "BankFeedAccount" || b.BankFeedAccount != nil {
		return visitor.VisitBankFeedAccount(b.BankFeedAccount)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", b)
}

// # The BankFeedTransaction Object
// ### Description
// The `BankFeedTransaction` object is used to represent transactions linked to a bank feed account. This includes details about the transaction such as the date, amount, description, and type.
//
// ### Usage Example
// Fetch from the `GET BankFeedTransaction` endpoint to view details of a transaction associated with a bank feed account.
type BankFeedTransactionRequestRequest struct {
	// The bank feed account associated with the transaction.
	BankFeedAccount *BankFeedTransactionRequestRequestBankFeedAccount `json:"bank_feed_account,omitempty" url:"bank_feed_account,omitempty"`
	// The date that the transaction occurred.
	TransactionDate *time.Time `json:"transaction_date,omitempty" url:"transaction_date,omitempty"`
	// The date the transaction was posted to the bank account.
	PostedDate *time.Time `json:"posted_date,omitempty" url:"posted_date,omitempty"`
	// The amount of the transaction.
	Amount *float64 `json:"amount,omitempty" url:"amount,omitempty"`
	// The description of the transaction.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The underlying type of the transaction.
	TransactionType *string `json:"transaction_type,omitempty" url:"transaction_type,omitempty"`
	// The person or merchant who initiated the transaction, or alternatively, to whom the transaction was paid.
	Payee *string `json:"payee,omitempty" url:"payee,omitempty"`
	// If the transaction is of type debit or credit.
	//
	// * `CREDIT` - CREDIT
	// * `DEBIT` - DEBIT
	CreditOrDebit *CreditOrDebitEnum `json:"credit_or_debit,omitempty" url:"credit_or_debit,omitempty"`
	// The customerâ€™s identifier for the transaction.
	SourceTransactionId *string                `json:"source_transaction_id,omitempty" url:"source_transaction_id,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BankFeedTransactionRequestRequest) GetBankFeedAccount() *BankFeedTransactionRequestRequestBankFeedAccount {
	if b == nil {
		return nil
	}
	return b.BankFeedAccount
}

func (b *BankFeedTransactionRequestRequest) GetTransactionDate() *time.Time {
	if b == nil {
		return nil
	}
	return b.TransactionDate
}

func (b *BankFeedTransactionRequestRequest) GetPostedDate() *time.Time {
	if b == nil {
		return nil
	}
	return b.PostedDate
}

func (b *BankFeedTransactionRequestRequest) GetAmount() *float64 {
	if b == nil {
		return nil
	}
	return b.Amount
}

func (b *BankFeedTransactionRequestRequest) GetDescription() *string {
	if b == nil {
		return nil
	}
	return b.Description
}

func (b *BankFeedTransactionRequestRequest) GetTransactionType() *string {
	if b == nil {
		return nil
	}
	return b.TransactionType
}

func (b *BankFeedTransactionRequestRequest) GetPayee() *string {
	if b == nil {
		return nil
	}
	return b.Payee
}

func (b *BankFeedTransactionRequestRequest) GetCreditOrDebit() *CreditOrDebitEnum {
	if b == nil {
		return nil
	}
	return b.CreditOrDebit
}

func (b *BankFeedTransactionRequestRequest) GetSourceTransactionId() *string {
	if b == nil {
		return nil
	}
	return b.SourceTransactionId
}

func (b *BankFeedTransactionRequestRequest) GetIntegrationParams() map[string]interface{} {
	if b == nil {
		return nil
	}
	return b.IntegrationParams
}

func (b *BankFeedTransactionRequestRequest) GetLinkedAccountParams() map[string]interface{} {
	if b == nil {
		return nil
	}
	return b.LinkedAccountParams
}

func (b *BankFeedTransactionRequestRequest) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BankFeedTransactionRequestRequest) UnmarshalJSON(data []byte) error {
	type embed BankFeedTransactionRequestRequest
	var unmarshaler = struct {
		embed
		TransactionDate *internal.DateTime `json:"transaction_date,omitempty"`
		PostedDate      *internal.DateTime `json:"posted_date,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BankFeedTransactionRequestRequest(unmarshaler.embed)
	b.TransactionDate = unmarshaler.TransactionDate.TimePtr()
	b.PostedDate = unmarshaler.PostedDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BankFeedTransactionRequestRequest) MarshalJSON() ([]byte, error) {
	type embed BankFeedTransactionRequestRequest
	var marshaler = struct {
		embed
		TransactionDate *internal.DateTime `json:"transaction_date,omitempty"`
		PostedDate      *internal.DateTime `json:"posted_date,omitempty"`
	}{
		embed:           embed(*b),
		TransactionDate: internal.NewOptionalDateTime(b.TransactionDate),
		PostedDate:      internal.NewOptionalDateTime(b.PostedDate),
	}
	return json.Marshal(marshaler)
}

func (b *BankFeedTransactionRequestRequest) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The bank feed account associated with the transaction.
type BankFeedTransactionRequestRequestBankFeedAccount struct {
	String          string
	BankFeedAccount *BankFeedAccount

	typ string
}

func (b *BankFeedTransactionRequestRequestBankFeedAccount) GetString() string {
	if b == nil {
		return ""
	}
	return b.String
}

func (b *BankFeedTransactionRequestRequestBankFeedAccount) GetBankFeedAccount() *BankFeedAccount {
	if b == nil {
		return nil
	}
	return b.BankFeedAccount
}

func (b *BankFeedTransactionRequestRequestBankFeedAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		b.typ = "String"
		b.String = valueString
		return nil
	}
	valueBankFeedAccount := new(BankFeedAccount)
	if err := json.Unmarshal(data, &valueBankFeedAccount); err == nil {
		b.typ = "BankFeedAccount"
		b.BankFeedAccount = valueBankFeedAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BankFeedTransactionRequestRequestBankFeedAccount) MarshalJSON() ([]byte, error) {
	if b.typ == "String" || b.String != "" {
		return json.Marshal(b.String)
	}
	if b.typ == "BankFeedAccount" || b.BankFeedAccount != nil {
		return json.Marshal(b.BankFeedAccount)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", b)
}

type BankFeedTransactionRequestRequestBankFeedAccountVisitor interface {
	VisitString(string) error
	VisitBankFeedAccount(*BankFeedAccount) error
}

func (b *BankFeedTransactionRequestRequestBankFeedAccount) Accept(visitor BankFeedTransactionRequestRequestBankFeedAccountVisitor) error {
	if b.typ == "String" || b.String != "" {
		return visitor.VisitString(b.String)
	}
	if b.typ == "BankFeedAccount" || b.BankFeedAccount != nil {
		return visitor.VisitBankFeedAccount(b.BankFeedAccount)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", b)
}

type BankFeedTransactionResponse struct {
	Model    *BankFeedTransaction        `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BankFeedTransactionResponse) GetModel() *BankFeedTransaction {
	if b == nil {
		return nil
	}
	return b.Model
}

func (b *BankFeedTransactionResponse) GetWarnings() []*WarningValidationProblem {
	if b == nil {
		return nil
	}
	return b.Warnings
}

func (b *BankFeedTransactionResponse) GetErrors() []*ErrorValidationProblem {
	if b == nil {
		return nil
	}
	return b.Errors
}

func (b *BankFeedTransactionResponse) GetLogs() []*DebugModeLog {
	if b == nil {
		return nil
	}
	return b.Logs
}

func (b *BankFeedTransactionResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BankFeedTransactionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BankFeedTransactionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BankFeedTransactionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BankFeedTransactionResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// * `CREDIT` - CREDIT
// * `DEBIT` - DEBIT
type CreditOrDebitEnum string

const (
	CreditOrDebitEnumCredit CreditOrDebitEnum = "CREDIT"
	CreditOrDebitEnumDebit  CreditOrDebitEnum = "DEBIT"
)

func NewCreditOrDebitEnumFromString(s string) (CreditOrDebitEnum, error) {
	switch s {
	case "CREDIT":
		return CreditOrDebitEnumCredit, nil
	case "DEBIT":
		return CreditOrDebitEnumDebit, nil
	}
	var t CreditOrDebitEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreditOrDebitEnum) Ptr() *CreditOrDebitEnum {
	return &c
}

type PaginatedBankFeedTransactionList struct {
	Next     *string                `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*BankFeedTransaction `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedBankFeedTransactionList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedBankFeedTransactionList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedBankFeedTransactionList) GetResults() []*BankFeedTransaction {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedBankFeedTransactionList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedBankFeedTransactionList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedBankFeedTransactionList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedBankFeedTransactionList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedBankFeedTransactionList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
