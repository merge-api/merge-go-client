// Code generated by Fern. DO NOT EDIT.

package client

import (
	core "github.com/merge-api/merge-go-client/v2/core"
	accountdetails "github.com/merge-api/merge-go-client/v2/hris/accountdetails"
	accounttoken "github.com/merge-api/merge-go-client/v2/hris/accounttoken"
	asyncpassthrough "github.com/merge-api/merge-go-client/v2/hris/asyncpassthrough"
	audittrail "github.com/merge-api/merge-go-client/v2/hris/audittrail"
	availableactions "github.com/merge-api/merge-go-client/v2/hris/availableactions"
	bankinfo "github.com/merge-api/merge-go-client/v2/hris/bankinfo"
	benefits "github.com/merge-api/merge-go-client/v2/hris/benefits"
	companies "github.com/merge-api/merge-go-client/v2/hris/companies"
	deleteaccount "github.com/merge-api/merge-go-client/v2/hris/deleteaccount"
	dependents "github.com/merge-api/merge-go-client/v2/hris/dependents"
	employeepayrollruns "github.com/merge-api/merge-go-client/v2/hris/employeepayrollruns"
	employees "github.com/merge-api/merge-go-client/v2/hris/employees"
	employerbenefits "github.com/merge-api/merge-go-client/v2/hris/employerbenefits"
	employments "github.com/merge-api/merge-go-client/v2/hris/employments"
	fieldmapping "github.com/merge-api/merge-go-client/v2/hris/fieldmapping"
	forceresync "github.com/merge-api/merge-go-client/v2/hris/forceresync"
	generatekey "github.com/merge-api/merge-go-client/v2/hris/generatekey"
	groups "github.com/merge-api/merge-go-client/v2/hris/groups"
	issues "github.com/merge-api/merge-go-client/v2/hris/issues"
	linkedaccounts "github.com/merge-api/merge-go-client/v2/hris/linkedaccounts"
	linktoken "github.com/merge-api/merge-go-client/v2/hris/linktoken"
	locations "github.com/merge-api/merge-go-client/v2/hris/locations"
	passthrough "github.com/merge-api/merge-go-client/v2/hris/passthrough"
	paygroups "github.com/merge-api/merge-go-client/v2/hris/paygroups"
	payrollruns "github.com/merge-api/merge-go-client/v2/hris/payrollruns"
	regeneratekey "github.com/merge-api/merge-go-client/v2/hris/regeneratekey"
	scopes "github.com/merge-api/merge-go-client/v2/hris/scopes"
	syncstatus "github.com/merge-api/merge-go-client/v2/hris/syncstatus"
	teams "github.com/merge-api/merge-go-client/v2/hris/teams"
	timeoff "github.com/merge-api/merge-go-client/v2/hris/timeoff"
	timeoffbalances "github.com/merge-api/merge-go-client/v2/hris/timeoffbalances"
	timesheetentries "github.com/merge-api/merge-go-client/v2/hris/timesheetentries"
	webhookreceivers "github.com/merge-api/merge-go-client/v2/hris/webhookreceivers"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	option "github.com/merge-api/merge-go-client/v2/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header

	AccountDetails      *accountdetails.Client
	AccountToken        *accounttoken.Client
	AsyncPassthrough    *asyncpassthrough.Client
	AuditTrail          *audittrail.Client
	AvailableActions    *availableactions.Client
	BankInfo            *bankinfo.Client
	Benefits            *benefits.Client
	Companies           *companies.Client
	Scopes              *scopes.Client
	DeleteAccount       *deleteaccount.Client
	Dependents          *dependents.Client
	EmployeePayrollRuns *employeepayrollruns.Client
	Employees           *employees.Client
	EmployerBenefits    *employerbenefits.Client
	Employments         *employments.Client
	FieldMapping        *fieldmapping.Client
	GenerateKey         *generatekey.Client
	Groups              *groups.Client
	Issues              *issues.Client
	LinkToken           *linktoken.Client
	LinkedAccounts      *linkedaccounts.Client
	Locations           *locations.Client
	Passthrough         *passthrough.Client
	PayGroups           *paygroups.Client
	PayrollRuns         *payrollruns.Client
	RegenerateKey       *regeneratekey.Client
	SyncStatus          *syncstatus.Client
	ForceResync         *forceresync.Client
	Teams               *teams.Client
	TimeOff             *timeoff.Client
	TimeOffBalances     *timeoffbalances.Client
	TimesheetEntries    *timesheetentries.Client
	WebhookReceivers    *webhookreceivers.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:              options.ToHeader(),
		AccountDetails:      accountdetails.NewClient(opts...),
		AccountToken:        accounttoken.NewClient(opts...),
		AsyncPassthrough:    asyncpassthrough.NewClient(opts...),
		AuditTrail:          audittrail.NewClient(opts...),
		AvailableActions:    availableactions.NewClient(opts...),
		BankInfo:            bankinfo.NewClient(opts...),
		Benefits:            benefits.NewClient(opts...),
		Companies:           companies.NewClient(opts...),
		Scopes:              scopes.NewClient(opts...),
		DeleteAccount:       deleteaccount.NewClient(opts...),
		Dependents:          dependents.NewClient(opts...),
		EmployeePayrollRuns: employeepayrollruns.NewClient(opts...),
		Employees:           employees.NewClient(opts...),
		EmployerBenefits:    employerbenefits.NewClient(opts...),
		Employments:         employments.NewClient(opts...),
		FieldMapping:        fieldmapping.NewClient(opts...),
		GenerateKey:         generatekey.NewClient(opts...),
		Groups:              groups.NewClient(opts...),
		Issues:              issues.NewClient(opts...),
		LinkToken:           linktoken.NewClient(opts...),
		LinkedAccounts:      linkedaccounts.NewClient(opts...),
		Locations:           locations.NewClient(opts...),
		Passthrough:         passthrough.NewClient(opts...),
		PayGroups:           paygroups.NewClient(opts...),
		PayrollRuns:         payrollruns.NewClient(opts...),
		RegenerateKey:       regeneratekey.NewClient(opts...),
		SyncStatus:          syncstatus.NewClient(opts...),
		ForceResync:         forceresync.NewClient(opts...),
		Teams:               teams.NewClient(opts...),
		TimeOff:             timeoff.NewClient(opts...),
		TimeOffBalances:     timeoffbalances.NewClient(opts...),
		TimesheetEntries:    timesheetentries.NewClient(opts...),
		WebhookReceivers:    webhookreceivers.NewClient(opts...),
	}
}
