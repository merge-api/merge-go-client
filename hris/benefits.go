// Code generated by Fern. DO NOT EDIT.

package hris

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type BenefitsListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will return the benefits associated with the employee.
	EmployeeId *string `json:"-" url:"employee_id,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
}

type BenefitsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

// # The Benefit Object
// ### Description
// The `Benefit` object is used to represent a benefit that an employee has enrolled in.
//
// ### Usage Example
// Fetch from the `LIST Benefits` endpoint and filter by `ID` to show all benefits.
type Benefit struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The employee on the plan.
	Employee *BenefitEmployee `json:"employee,omitempty" url:"employee,omitempty"`
	// The name of the benefit provider.
	ProviderName *string `json:"provider_name,omitempty" url:"provider_name,omitempty"`
	// The type of benefit plan
	BenefitPlanType *string `json:"benefit_plan_type,omitempty" url:"benefit_plan_type,omitempty"`
	// The employee's contribution.
	EmployeeContribution *float64 `json:"employee_contribution,omitempty" url:"employee_contribution,omitempty"`
	// The company's contribution.
	CompanyContribution *float64 `json:"company_contribution,omitempty" url:"company_contribution,omitempty"`
	// The day and time the benefit started.
	StartDate *time.Time `json:"start_date,omitempty" url:"start_date,omitempty"`
	// The day and time the benefit ended.
	EndDate *time.Time `json:"end_date,omitempty" url:"end_date,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	// The employer benefit plan the employee is enrolled in.
	EmployerBenefit *string                `json:"employer_benefit,omitempty" url:"employer_benefit,omitempty"`
	FieldMappings   map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData      []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *Benefit) GetId() *string {
	if b == nil {
		return nil
	}
	return b.Id
}

func (b *Benefit) GetRemoteId() *string {
	if b == nil {
		return nil
	}
	return b.RemoteId
}

func (b *Benefit) GetCreatedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.CreatedAt
}

func (b *Benefit) GetModifiedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.ModifiedAt
}

func (b *Benefit) GetEmployee() *BenefitEmployee {
	if b == nil {
		return nil
	}
	return b.Employee
}

func (b *Benefit) GetProviderName() *string {
	if b == nil {
		return nil
	}
	return b.ProviderName
}

func (b *Benefit) GetBenefitPlanType() *string {
	if b == nil {
		return nil
	}
	return b.BenefitPlanType
}

func (b *Benefit) GetEmployeeContribution() *float64 {
	if b == nil {
		return nil
	}
	return b.EmployeeContribution
}

func (b *Benefit) GetCompanyContribution() *float64 {
	if b == nil {
		return nil
	}
	return b.CompanyContribution
}

func (b *Benefit) GetStartDate() *time.Time {
	if b == nil {
		return nil
	}
	return b.StartDate
}

func (b *Benefit) GetEndDate() *time.Time {
	if b == nil {
		return nil
	}
	return b.EndDate
}

func (b *Benefit) GetRemoteWasDeleted() *bool {
	if b == nil {
		return nil
	}
	return b.RemoteWasDeleted
}

func (b *Benefit) GetEmployerBenefit() *string {
	if b == nil {
		return nil
	}
	return b.EmployerBenefit
}

func (b *Benefit) GetFieldMappings() map[string]interface{} {
	if b == nil {
		return nil
	}
	return b.FieldMappings
}

func (b *Benefit) GetRemoteData() []*RemoteData {
	if b == nil {
		return nil
	}
	return b.RemoteData
}

func (b *Benefit) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *Benefit) UnmarshalJSON(data []byte) error {
	type embed Benefit
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
		StartDate  *internal.DateTime `json:"start_date,omitempty"`
		EndDate    *internal.DateTime `json:"end_date,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = Benefit(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	b.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	b.StartDate = unmarshaler.StartDate.TimePtr()
	b.EndDate = unmarshaler.EndDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *Benefit) MarshalJSON() ([]byte, error) {
	type embed Benefit
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
		StartDate  *internal.DateTime `json:"start_date,omitempty"`
		EndDate    *internal.DateTime `json:"end_date,omitempty"`
	}{
		embed:      embed(*b),
		CreatedAt:  internal.NewOptionalDateTime(b.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(b.ModifiedAt),
		StartDate:  internal.NewOptionalDateTime(b.StartDate),
		EndDate:    internal.NewOptionalDateTime(b.EndDate),
	}
	return json.Marshal(marshaler)
}

func (b *Benefit) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The employee on the plan.
type BenefitEmployee struct {
	String   string
	Employee *Employee

	typ string
}

func (b *BenefitEmployee) GetString() string {
	if b == nil {
		return ""
	}
	return b.String
}

func (b *BenefitEmployee) GetEmployee() *Employee {
	if b == nil {
		return nil
	}
	return b.Employee
}

func (b *BenefitEmployee) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		b.typ = "String"
		b.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		b.typ = "Employee"
		b.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BenefitEmployee) MarshalJSON() ([]byte, error) {
	if b.typ == "String" || b.String != "" {
		return json.Marshal(b.String)
	}
	if b.typ == "Employee" || b.Employee != nil {
		return json.Marshal(b.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", b)
}

type BenefitEmployeeVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (b *BenefitEmployee) Accept(visitor BenefitEmployeeVisitor) error {
	if b.typ == "String" || b.String != "" {
		return visitor.VisitString(b.String)
	}
	if b.typ == "Employee" || b.Employee != nil {
		return visitor.VisitEmployee(b.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", b)
}

type PaginatedBenefitList struct {
	Next     *string    `json:"next,omitempty" url:"next,omitempty"`
	Previous *string    `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Benefit `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedBenefitList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedBenefitList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedBenefitList) GetResults() []*Benefit {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedBenefitList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedBenefitList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedBenefitList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedBenefitList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedBenefitList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
