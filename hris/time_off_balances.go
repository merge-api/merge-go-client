// Code generated by Fern. DO NOT EDIT.

package hris

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type TimeOffBalancesListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will only return time off balances for this employee.
	EmployeeId *string `json:"-" url:"employee_id,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// If provided, will only return TimeOffBalance with this policy type. Options: ('VACATION', 'SICK', 'PERSONAL', 'JURY_DUTY', 'VOLUNTEER', 'BEREAVEMENT')
	//
	// * `VACATION` - VACATION
	// * `SICK` - SICK
	// * `PERSONAL` - PERSONAL
	// * `JURY_DUTY` - JURY_DUTY
	// * `VOLUNTEER` - VOLUNTEER
	// * `BEREAVEMENT` - BEREAVEMENT
	PolicyType *TimeOffBalancesListRequestPolicyType `json:"-" url:"policy_type,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type TimeOffBalancesRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type TimeOffBalancesListRequestPolicyType string

const (
	TimeOffBalancesListRequestPolicyTypeBereavement TimeOffBalancesListRequestPolicyType = "BEREAVEMENT"
	TimeOffBalancesListRequestPolicyTypeJuryDuty    TimeOffBalancesListRequestPolicyType = "JURY_DUTY"
	TimeOffBalancesListRequestPolicyTypePersonal    TimeOffBalancesListRequestPolicyType = "PERSONAL"
	TimeOffBalancesListRequestPolicyTypeSick        TimeOffBalancesListRequestPolicyType = "SICK"
	TimeOffBalancesListRequestPolicyTypeVacation    TimeOffBalancesListRequestPolicyType = "VACATION"
	TimeOffBalancesListRequestPolicyTypeVolunteer   TimeOffBalancesListRequestPolicyType = "VOLUNTEER"
)

func NewTimeOffBalancesListRequestPolicyTypeFromString(s string) (TimeOffBalancesListRequestPolicyType, error) {
	switch s {
	case "BEREAVEMENT":
		return TimeOffBalancesListRequestPolicyTypeBereavement, nil
	case "JURY_DUTY":
		return TimeOffBalancesListRequestPolicyTypeJuryDuty, nil
	case "PERSONAL":
		return TimeOffBalancesListRequestPolicyTypePersonal, nil
	case "SICK":
		return TimeOffBalancesListRequestPolicyTypeSick, nil
	case "VACATION":
		return TimeOffBalancesListRequestPolicyTypeVacation, nil
	case "VOLUNTEER":
		return TimeOffBalancesListRequestPolicyTypeVolunteer, nil
	}
	var t TimeOffBalancesListRequestPolicyType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TimeOffBalancesListRequestPolicyType) Ptr() *TimeOffBalancesListRequestPolicyType {
	return &t
}

type PaginatedTimeOffBalanceList struct {
	Next     *string           `json:"next,omitempty" url:"next,omitempty"`
	Previous *string           `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*TimeOffBalance `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedTimeOffBalanceList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedTimeOffBalanceList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedTimeOffBalanceList) GetResults() []*TimeOffBalance {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedTimeOffBalanceList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedTimeOffBalanceList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTimeOffBalanceList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTimeOffBalanceList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTimeOffBalanceList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// * `VACATION` - VACATION
// * `SICK` - SICK
// * `PERSONAL` - PERSONAL
// * `JURY_DUTY` - JURY_DUTY
// * `VOLUNTEER` - VOLUNTEER
// * `BEREAVEMENT` - BEREAVEMENT
type PolicyTypeEnum string

const (
	PolicyTypeEnumVacation    PolicyTypeEnum = "VACATION"
	PolicyTypeEnumSick        PolicyTypeEnum = "SICK"
	PolicyTypeEnumPersonal    PolicyTypeEnum = "PERSONAL"
	PolicyTypeEnumJuryDuty    PolicyTypeEnum = "JURY_DUTY"
	PolicyTypeEnumVolunteer   PolicyTypeEnum = "VOLUNTEER"
	PolicyTypeEnumBereavement PolicyTypeEnum = "BEREAVEMENT"
)

func NewPolicyTypeEnumFromString(s string) (PolicyTypeEnum, error) {
	switch s {
	case "VACATION":
		return PolicyTypeEnumVacation, nil
	case "SICK":
		return PolicyTypeEnumSick, nil
	case "PERSONAL":
		return PolicyTypeEnumPersonal, nil
	case "JURY_DUTY":
		return PolicyTypeEnumJuryDuty, nil
	case "VOLUNTEER":
		return PolicyTypeEnumVolunteer, nil
	case "BEREAVEMENT":
		return PolicyTypeEnumBereavement, nil
	}
	var t PolicyTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PolicyTypeEnum) Ptr() *PolicyTypeEnum {
	return &p
}

// # The TimeOffBalance Object
// ### Description
// The `TimeOffBalance` object is used to represent current balances for an employee's Time Off plan.
//
// ### Usage Example
// Fetch from the `LIST TimeOffBalances` endpoint and filter by `ID` to show all time off balances.
type TimeOffBalance struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The employee the balance belongs to.
	Employee *TimeOffBalanceEmployee `json:"employee,omitempty" url:"employee,omitempty"`
	// The current remaining PTO balance, measured in hours. For integrations that return this value in days, Merge multiplies by 8 to calculate hours.
	Balance *float64 `json:"balance,omitempty" url:"balance,omitempty"`
	// The amount of PTO used in terms of hours. For integrations that return this value in days, Merge multiplies by 8 to calculate hours.
	Used *float64 `json:"used,omitempty" url:"used,omitempty"`
	// The policy type of this time off balance.
	//
	// * `VACATION` - VACATION
	// * `SICK` - SICK
	// * `PERSONAL` - PERSONAL
	// * `JURY_DUTY` - JURY_DUTY
	// * `VOLUNTEER` - VOLUNTEER
	// * `BEREAVEMENT` - BEREAVEMENT
	PolicyType *TimeOffBalancePolicyType `json:"policy_type,omitempty" url:"policy_type,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TimeOffBalance) GetId() *string {
	if t == nil {
		return nil
	}
	return t.Id
}

func (t *TimeOffBalance) GetRemoteId() *string {
	if t == nil {
		return nil
	}
	return t.RemoteId
}

func (t *TimeOffBalance) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TimeOffBalance) GetModifiedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.ModifiedAt
}

func (t *TimeOffBalance) GetEmployee() *TimeOffBalanceEmployee {
	if t == nil {
		return nil
	}
	return t.Employee
}

func (t *TimeOffBalance) GetBalance() *float64 {
	if t == nil {
		return nil
	}
	return t.Balance
}

func (t *TimeOffBalance) GetUsed() *float64 {
	if t == nil {
		return nil
	}
	return t.Used
}

func (t *TimeOffBalance) GetPolicyType() *TimeOffBalancePolicyType {
	if t == nil {
		return nil
	}
	return t.PolicyType
}

func (t *TimeOffBalance) GetRemoteWasDeleted() *bool {
	if t == nil {
		return nil
	}
	return t.RemoteWasDeleted
}

func (t *TimeOffBalance) GetFieldMappings() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.FieldMappings
}

func (t *TimeOffBalance) GetRemoteData() []*RemoteData {
	if t == nil {
		return nil
	}
	return t.RemoteData
}

func (t *TimeOffBalance) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TimeOffBalance) UnmarshalJSON(data []byte) error {
	type embed TimeOffBalance
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TimeOffBalance(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TimeOffBalance) MarshalJSON() ([]byte, error) {
	type embed TimeOffBalance
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*t),
		CreatedAt:  internal.NewOptionalDateTime(t.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(t.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TimeOffBalance) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The employee the balance belongs to.
type TimeOffBalanceEmployee struct {
	String   string
	Employee *Employee

	typ string
}

func (t *TimeOffBalanceEmployee) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TimeOffBalanceEmployee) GetEmployee() *Employee {
	if t == nil {
		return nil
	}
	return t.Employee
}

func (t *TimeOffBalanceEmployee) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		t.typ = "Employee"
		t.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TimeOffBalanceEmployee) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return json.Marshal(t.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TimeOffBalanceEmployeeVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (t *TimeOffBalanceEmployee) Accept(visitor TimeOffBalanceEmployeeVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return visitor.VisitEmployee(t.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// The policy type of this time off balance.
//
// * `VACATION` - VACATION
// * `SICK` - SICK
// * `PERSONAL` - PERSONAL
// * `JURY_DUTY` - JURY_DUTY
// * `VOLUNTEER` - VOLUNTEER
// * `BEREAVEMENT` - BEREAVEMENT
type TimeOffBalancePolicyType struct {
	PolicyTypeEnum PolicyTypeEnum
	String         string

	typ string
}

func (t *TimeOffBalancePolicyType) GetPolicyTypeEnum() PolicyTypeEnum {
	if t == nil {
		return ""
	}
	return t.PolicyTypeEnum
}

func (t *TimeOffBalancePolicyType) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TimeOffBalancePolicyType) UnmarshalJSON(data []byte) error {
	var valuePolicyTypeEnum PolicyTypeEnum
	if err := json.Unmarshal(data, &valuePolicyTypeEnum); err == nil {
		t.typ = "PolicyTypeEnum"
		t.PolicyTypeEnum = valuePolicyTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TimeOffBalancePolicyType) MarshalJSON() ([]byte, error) {
	if t.typ == "PolicyTypeEnum" || t.PolicyTypeEnum != "" {
		return json.Marshal(t.PolicyTypeEnum)
	}
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TimeOffBalancePolicyTypeVisitor interface {
	VisitPolicyTypeEnum(PolicyTypeEnum) error
	VisitString(string) error
}

func (t *TimeOffBalancePolicyType) Accept(visitor TimeOffBalancePolicyTypeVisitor) error {
	if t.typ == "PolicyTypeEnum" || t.PolicyTypeEnum != "" {
		return visitor.VisitPolicyTypeEnum(t.PolicyTypeEnum)
	}
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}
