// Code generated by Fern. DO NOT EDIT.

package hris

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type TimeOffEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool           `json:"-" url:"run_async,omitempty"`
	Model    *TimeOffRequest `json:"model,omitempty" url:"-"`
}

type TimeOffListRequest struct {
	// If provided, will only return time off for this approver.
	ApproverId *string `json:"-" url:"approver_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will only return time off for this employee.
	EmployeeId *string `json:"-" url:"employee_id,omitempty"`
	// If provided, will only return employees that ended after this datetime.
	EndedAfter *time.Time `json:"-" url:"ended_after,omitempty"`
	// If provided, will only return time-offs that ended before this datetime.
	EndedBefore *time.Time `json:"-" url:"ended_before,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*TimeOffListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *TimeOffListRequestRemoteFields `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// If provided, will only return TimeOff with this request type. Options: ('VACATION', 'SICK', 'PERSONAL', 'JURY_DUTY', 'VOLUNTEER', 'BEREAVEMENT')
	//
	// * `VACATION` - VACATION
	// * `SICK` - SICK
	// * `PERSONAL` - PERSONAL
	// * `JURY_DUTY` - JURY_DUTY
	// * `VOLUNTEER` - VOLUNTEER
	// * `BEREAVEMENT` - BEREAVEMENT
	RequestType *TimeOffListRequestRequestType `json:"-" url:"request_type,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *TimeOffListRequestShowEnumOrigins `json:"-" url:"show_enum_origins,omitempty"`
	// If provided, will only return time-offs that started after this datetime.
	StartedAfter *time.Time `json:"-" url:"started_after,omitempty"`
	// If provided, will only return time-offs that started before this datetime.
	StartedBefore *time.Time `json:"-" url:"started_before,omitempty"`
	// If provided, will only return TimeOff with this status. Options: ('REQUESTED', 'APPROVED', 'DECLINED', 'CANCELLED', 'DELETED')
	//
	// * `REQUESTED` - REQUESTED
	// * `APPROVED` - APPROVED
	// * `DECLINED` - DECLINED
	// * `CANCELLED` - CANCELLED
	// * `DELETED` - DELETED
	Status *TimeOffListRequestStatus `json:"-" url:"status,omitempty"`
}

type TimeOffRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*TimeOffRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *TimeOffRetrieveRequestRemoteFields `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *TimeOffRetrieveRequestShowEnumOrigins `json:"-" url:"show_enum_origins,omitempty"`
}

type TimeOffListRequestExpandItem string

const (
	TimeOffListRequestExpandItemApprover TimeOffListRequestExpandItem = "approver"
	TimeOffListRequestExpandItemEmployee TimeOffListRequestExpandItem = "employee"
)

func NewTimeOffListRequestExpandItemFromString(s string) (TimeOffListRequestExpandItem, error) {
	switch s {
	case "approver":
		return TimeOffListRequestExpandItemApprover, nil
	case "employee":
		return TimeOffListRequestExpandItemEmployee, nil
	}
	var t TimeOffListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TimeOffListRequestExpandItem) Ptr() *TimeOffListRequestExpandItem {
	return &t
}

type TimeOffListRequestRemoteFields string

const (
	TimeOffListRequestRemoteFieldsRequestType            TimeOffListRequestRemoteFields = "request_type"
	TimeOffListRequestRemoteFieldsRequestTypeStatus      TimeOffListRequestRemoteFields = "request_type,status"
	TimeOffListRequestRemoteFieldsRequestTypeStatusUnits TimeOffListRequestRemoteFields = "request_type,status,units"
	TimeOffListRequestRemoteFieldsRequestTypeUnits       TimeOffListRequestRemoteFields = "request_type,units"
	TimeOffListRequestRemoteFieldsStatus                 TimeOffListRequestRemoteFields = "status"
	TimeOffListRequestRemoteFieldsStatusUnits            TimeOffListRequestRemoteFields = "status,units"
	TimeOffListRequestRemoteFieldsUnits                  TimeOffListRequestRemoteFields = "units"
)

func NewTimeOffListRequestRemoteFieldsFromString(s string) (TimeOffListRequestRemoteFields, error) {
	switch s {
	case "request_type":
		return TimeOffListRequestRemoteFieldsRequestType, nil
	case "request_type,status":
		return TimeOffListRequestRemoteFieldsRequestTypeStatus, nil
	case "request_type,status,units":
		return TimeOffListRequestRemoteFieldsRequestTypeStatusUnits, nil
	case "request_type,units":
		return TimeOffListRequestRemoteFieldsRequestTypeUnits, nil
	case "status":
		return TimeOffListRequestRemoteFieldsStatus, nil
	case "status,units":
		return TimeOffListRequestRemoteFieldsStatusUnits, nil
	case "units":
		return TimeOffListRequestRemoteFieldsUnits, nil
	}
	var t TimeOffListRequestRemoteFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TimeOffListRequestRemoteFields) Ptr() *TimeOffListRequestRemoteFields {
	return &t
}

type TimeOffListRequestRequestType string

const (
	TimeOffListRequestRequestTypeBereavement TimeOffListRequestRequestType = "BEREAVEMENT"
	TimeOffListRequestRequestTypeJuryDuty    TimeOffListRequestRequestType = "JURY_DUTY"
	TimeOffListRequestRequestTypePersonal    TimeOffListRequestRequestType = "PERSONAL"
	TimeOffListRequestRequestTypeSick        TimeOffListRequestRequestType = "SICK"
	TimeOffListRequestRequestTypeVacation    TimeOffListRequestRequestType = "VACATION"
	TimeOffListRequestRequestTypeVolunteer   TimeOffListRequestRequestType = "VOLUNTEER"
)

func NewTimeOffListRequestRequestTypeFromString(s string) (TimeOffListRequestRequestType, error) {
	switch s {
	case "BEREAVEMENT":
		return TimeOffListRequestRequestTypeBereavement, nil
	case "JURY_DUTY":
		return TimeOffListRequestRequestTypeJuryDuty, nil
	case "PERSONAL":
		return TimeOffListRequestRequestTypePersonal, nil
	case "SICK":
		return TimeOffListRequestRequestTypeSick, nil
	case "VACATION":
		return TimeOffListRequestRequestTypeVacation, nil
	case "VOLUNTEER":
		return TimeOffListRequestRequestTypeVolunteer, nil
	}
	var t TimeOffListRequestRequestType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TimeOffListRequestRequestType) Ptr() *TimeOffListRequestRequestType {
	return &t
}

type TimeOffListRequestShowEnumOrigins string

const (
	TimeOffListRequestShowEnumOriginsRequestType            TimeOffListRequestShowEnumOrigins = "request_type"
	TimeOffListRequestShowEnumOriginsRequestTypeStatus      TimeOffListRequestShowEnumOrigins = "request_type,status"
	TimeOffListRequestShowEnumOriginsRequestTypeStatusUnits TimeOffListRequestShowEnumOrigins = "request_type,status,units"
	TimeOffListRequestShowEnumOriginsRequestTypeUnits       TimeOffListRequestShowEnumOrigins = "request_type,units"
	TimeOffListRequestShowEnumOriginsStatus                 TimeOffListRequestShowEnumOrigins = "status"
	TimeOffListRequestShowEnumOriginsStatusUnits            TimeOffListRequestShowEnumOrigins = "status,units"
	TimeOffListRequestShowEnumOriginsUnits                  TimeOffListRequestShowEnumOrigins = "units"
)

func NewTimeOffListRequestShowEnumOriginsFromString(s string) (TimeOffListRequestShowEnumOrigins, error) {
	switch s {
	case "request_type":
		return TimeOffListRequestShowEnumOriginsRequestType, nil
	case "request_type,status":
		return TimeOffListRequestShowEnumOriginsRequestTypeStatus, nil
	case "request_type,status,units":
		return TimeOffListRequestShowEnumOriginsRequestTypeStatusUnits, nil
	case "request_type,units":
		return TimeOffListRequestShowEnumOriginsRequestTypeUnits, nil
	case "status":
		return TimeOffListRequestShowEnumOriginsStatus, nil
	case "status,units":
		return TimeOffListRequestShowEnumOriginsStatusUnits, nil
	case "units":
		return TimeOffListRequestShowEnumOriginsUnits, nil
	}
	var t TimeOffListRequestShowEnumOrigins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TimeOffListRequestShowEnumOrigins) Ptr() *TimeOffListRequestShowEnumOrigins {
	return &t
}

type TimeOffListRequestStatus string

const (
	TimeOffListRequestStatusApproved  TimeOffListRequestStatus = "APPROVED"
	TimeOffListRequestStatusCancelled TimeOffListRequestStatus = "CANCELLED"
	TimeOffListRequestStatusDeclined  TimeOffListRequestStatus = "DECLINED"
	TimeOffListRequestStatusDeleted   TimeOffListRequestStatus = "DELETED"
	TimeOffListRequestStatusRequested TimeOffListRequestStatus = "REQUESTED"
)

func NewTimeOffListRequestStatusFromString(s string) (TimeOffListRequestStatus, error) {
	switch s {
	case "APPROVED":
		return TimeOffListRequestStatusApproved, nil
	case "CANCELLED":
		return TimeOffListRequestStatusCancelled, nil
	case "DECLINED":
		return TimeOffListRequestStatusDeclined, nil
	case "DELETED":
		return TimeOffListRequestStatusDeleted, nil
	case "REQUESTED":
		return TimeOffListRequestStatusRequested, nil
	}
	var t TimeOffListRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TimeOffListRequestStatus) Ptr() *TimeOffListRequestStatus {
	return &t
}

type TimeOffRetrieveRequestExpandItem string

const (
	TimeOffRetrieveRequestExpandItemApprover TimeOffRetrieveRequestExpandItem = "approver"
	TimeOffRetrieveRequestExpandItemEmployee TimeOffRetrieveRequestExpandItem = "employee"
)

func NewTimeOffRetrieveRequestExpandItemFromString(s string) (TimeOffRetrieveRequestExpandItem, error) {
	switch s {
	case "approver":
		return TimeOffRetrieveRequestExpandItemApprover, nil
	case "employee":
		return TimeOffRetrieveRequestExpandItemEmployee, nil
	}
	var t TimeOffRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TimeOffRetrieveRequestExpandItem) Ptr() *TimeOffRetrieveRequestExpandItem {
	return &t
}

type TimeOffRetrieveRequestRemoteFields string

const (
	TimeOffRetrieveRequestRemoteFieldsRequestType            TimeOffRetrieveRequestRemoteFields = "request_type"
	TimeOffRetrieveRequestRemoteFieldsRequestTypeStatus      TimeOffRetrieveRequestRemoteFields = "request_type,status"
	TimeOffRetrieveRequestRemoteFieldsRequestTypeStatusUnits TimeOffRetrieveRequestRemoteFields = "request_type,status,units"
	TimeOffRetrieveRequestRemoteFieldsRequestTypeUnits       TimeOffRetrieveRequestRemoteFields = "request_type,units"
	TimeOffRetrieveRequestRemoteFieldsStatus                 TimeOffRetrieveRequestRemoteFields = "status"
	TimeOffRetrieveRequestRemoteFieldsStatusUnits            TimeOffRetrieveRequestRemoteFields = "status,units"
	TimeOffRetrieveRequestRemoteFieldsUnits                  TimeOffRetrieveRequestRemoteFields = "units"
)

func NewTimeOffRetrieveRequestRemoteFieldsFromString(s string) (TimeOffRetrieveRequestRemoteFields, error) {
	switch s {
	case "request_type":
		return TimeOffRetrieveRequestRemoteFieldsRequestType, nil
	case "request_type,status":
		return TimeOffRetrieveRequestRemoteFieldsRequestTypeStatus, nil
	case "request_type,status,units":
		return TimeOffRetrieveRequestRemoteFieldsRequestTypeStatusUnits, nil
	case "request_type,units":
		return TimeOffRetrieveRequestRemoteFieldsRequestTypeUnits, nil
	case "status":
		return TimeOffRetrieveRequestRemoteFieldsStatus, nil
	case "status,units":
		return TimeOffRetrieveRequestRemoteFieldsStatusUnits, nil
	case "units":
		return TimeOffRetrieveRequestRemoteFieldsUnits, nil
	}
	var t TimeOffRetrieveRequestRemoteFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TimeOffRetrieveRequestRemoteFields) Ptr() *TimeOffRetrieveRequestRemoteFields {
	return &t
}

type TimeOffRetrieveRequestShowEnumOrigins string

const (
	TimeOffRetrieveRequestShowEnumOriginsRequestType            TimeOffRetrieveRequestShowEnumOrigins = "request_type"
	TimeOffRetrieveRequestShowEnumOriginsRequestTypeStatus      TimeOffRetrieveRequestShowEnumOrigins = "request_type,status"
	TimeOffRetrieveRequestShowEnumOriginsRequestTypeStatusUnits TimeOffRetrieveRequestShowEnumOrigins = "request_type,status,units"
	TimeOffRetrieveRequestShowEnumOriginsRequestTypeUnits       TimeOffRetrieveRequestShowEnumOrigins = "request_type,units"
	TimeOffRetrieveRequestShowEnumOriginsStatus                 TimeOffRetrieveRequestShowEnumOrigins = "status"
	TimeOffRetrieveRequestShowEnumOriginsStatusUnits            TimeOffRetrieveRequestShowEnumOrigins = "status,units"
	TimeOffRetrieveRequestShowEnumOriginsUnits                  TimeOffRetrieveRequestShowEnumOrigins = "units"
)

func NewTimeOffRetrieveRequestShowEnumOriginsFromString(s string) (TimeOffRetrieveRequestShowEnumOrigins, error) {
	switch s {
	case "request_type":
		return TimeOffRetrieveRequestShowEnumOriginsRequestType, nil
	case "request_type,status":
		return TimeOffRetrieveRequestShowEnumOriginsRequestTypeStatus, nil
	case "request_type,status,units":
		return TimeOffRetrieveRequestShowEnumOriginsRequestTypeStatusUnits, nil
	case "request_type,units":
		return TimeOffRetrieveRequestShowEnumOriginsRequestTypeUnits, nil
	case "status":
		return TimeOffRetrieveRequestShowEnumOriginsStatus, nil
	case "status,units":
		return TimeOffRetrieveRequestShowEnumOriginsStatusUnits, nil
	case "units":
		return TimeOffRetrieveRequestShowEnumOriginsUnits, nil
	}
	var t TimeOffRetrieveRequestShowEnumOrigins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TimeOffRetrieveRequestShowEnumOrigins) Ptr() *TimeOffRetrieveRequestShowEnumOrigins {
	return &t
}

type PaginatedTimeOffList struct {
	Next     *string    `json:"next,omitempty" url:"next,omitempty"`
	Previous *string    `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*TimeOff `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedTimeOffList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedTimeOffList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedTimeOffList) GetResults() []*TimeOff {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedTimeOffList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedTimeOffList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTimeOffList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTimeOffList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTimeOffList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// * `VACATION` - VACATION
// * `SICK` - SICK
// * `PERSONAL` - PERSONAL
// * `JURY_DUTY` - JURY_DUTY
// * `VOLUNTEER` - VOLUNTEER
// * `BEREAVEMENT` - BEREAVEMENT
type RequestTypeEnum string

const (
	RequestTypeEnumVacation    RequestTypeEnum = "VACATION"
	RequestTypeEnumSick        RequestTypeEnum = "SICK"
	RequestTypeEnumPersonal    RequestTypeEnum = "PERSONAL"
	RequestTypeEnumJuryDuty    RequestTypeEnum = "JURY_DUTY"
	RequestTypeEnumVolunteer   RequestTypeEnum = "VOLUNTEER"
	RequestTypeEnumBereavement RequestTypeEnum = "BEREAVEMENT"
)

func NewRequestTypeEnumFromString(s string) (RequestTypeEnum, error) {
	switch s {
	case "VACATION":
		return RequestTypeEnumVacation, nil
	case "SICK":
		return RequestTypeEnumSick, nil
	case "PERSONAL":
		return RequestTypeEnumPersonal, nil
	case "JURY_DUTY":
		return RequestTypeEnumJuryDuty, nil
	case "VOLUNTEER":
		return RequestTypeEnumVolunteer, nil
	case "BEREAVEMENT":
		return RequestTypeEnumBereavement, nil
	}
	var t RequestTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestTypeEnum) Ptr() *RequestTypeEnum {
	return &r
}

// # The TimeOff Object
// ### Description
// The `TimeOff` object is used to represent all employees' Time Off entries.
//
// ### Usage Example
// Fetch from the `LIST TimeOffs` endpoint and filter by `ID` to show all time off requests.
type TimeOff struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The employee requesting time off.
	Employee *TimeOffEmployee `json:"employee,omitempty" url:"employee,omitempty"`
	// The Merge ID of the employee with the ability to approve the time off request.
	Approver *TimeOffApprover `json:"approver,omitempty" url:"approver,omitempty"`
	// The status of this time off request.
	//
	// * `REQUESTED` - REQUESTED
	// * `APPROVED` - APPROVED
	// * `DECLINED` - DECLINED
	// * `CANCELLED` - CANCELLED
	// * `DELETED` - DELETED
	Status *TimeOffStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The employee note for this time off request.
	EmployeeNote *string `json:"employee_note,omitempty" url:"employee_note,omitempty"`
	// The measurement that the third-party integration uses to count time requested.
	//
	// * `HOURS` - HOURS
	// * `DAYS` - DAYS
	Units *UnitsEnum `json:"units,omitempty" url:"units,omitempty"`
	// The time off quantity measured by the prescribed “units”.
	Amount *float64 `json:"amount,omitempty" url:"amount,omitempty"`
	// The type of time off request.
	//
	// * `VACATION` - VACATION
	// * `SICK` - SICK
	// * `PERSONAL` - PERSONAL
	// * `JURY_DUTY` - JURY_DUTY
	// * `VOLUNTEER` - VOLUNTEER
	// * `BEREAVEMENT` - BEREAVEMENT
	RequestType *RequestTypeEnum `json:"request_type,omitempty" url:"request_type,omitempty"`
	// The day and time of the start of the time requested off.
	StartTime *time.Time `json:"start_time,omitempty" url:"start_time,omitempty"`
	// The day and time of the end of the time requested off.
	EndTime *time.Time `json:"end_time,omitempty" url:"end_time,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TimeOff) GetId() *string {
	if t == nil {
		return nil
	}
	return t.Id
}

func (t *TimeOff) GetRemoteId() *string {
	if t == nil {
		return nil
	}
	return t.RemoteId
}

func (t *TimeOff) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TimeOff) GetModifiedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.ModifiedAt
}

func (t *TimeOff) GetEmployee() *TimeOffEmployee {
	if t == nil {
		return nil
	}
	return t.Employee
}

func (t *TimeOff) GetApprover() *TimeOffApprover {
	if t == nil {
		return nil
	}
	return t.Approver
}

func (t *TimeOff) GetStatus() *TimeOffStatusEnum {
	if t == nil {
		return nil
	}
	return t.Status
}

func (t *TimeOff) GetEmployeeNote() *string {
	if t == nil {
		return nil
	}
	return t.EmployeeNote
}

func (t *TimeOff) GetUnits() *UnitsEnum {
	if t == nil {
		return nil
	}
	return t.Units
}

func (t *TimeOff) GetAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.Amount
}

func (t *TimeOff) GetRequestType() *RequestTypeEnum {
	if t == nil {
		return nil
	}
	return t.RequestType
}

func (t *TimeOff) GetStartTime() *time.Time {
	if t == nil {
		return nil
	}
	return t.StartTime
}

func (t *TimeOff) GetEndTime() *time.Time {
	if t == nil {
		return nil
	}
	return t.EndTime
}

func (t *TimeOff) GetRemoteWasDeleted() *bool {
	if t == nil {
		return nil
	}
	return t.RemoteWasDeleted
}

func (t *TimeOff) GetFieldMappings() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.FieldMappings
}

func (t *TimeOff) GetRemoteData() []*RemoteData {
	if t == nil {
		return nil
	}
	return t.RemoteData
}

func (t *TimeOff) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TimeOff) UnmarshalJSON(data []byte) error {
	type embed TimeOff
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
		StartTime  *internal.DateTime `json:"start_time,omitempty"`
		EndTime    *internal.DateTime `json:"end_time,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TimeOff(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	t.StartTime = unmarshaler.StartTime.TimePtr()
	t.EndTime = unmarshaler.EndTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TimeOff) MarshalJSON() ([]byte, error) {
	type embed TimeOff
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
		StartTime  *internal.DateTime `json:"start_time,omitempty"`
		EndTime    *internal.DateTime `json:"end_time,omitempty"`
	}{
		embed:      embed(*t),
		CreatedAt:  internal.NewOptionalDateTime(t.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(t.ModifiedAt),
		StartTime:  internal.NewOptionalDateTime(t.StartTime),
		EndTime:    internal.NewOptionalDateTime(t.EndTime),
	}
	return json.Marshal(marshaler)
}

func (t *TimeOff) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The Merge ID of the employee with the ability to approve the time off request.
type TimeOffApprover struct {
	String   string
	Employee *Employee

	typ string
}

func (t *TimeOffApprover) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TimeOffApprover) GetEmployee() *Employee {
	if t == nil {
		return nil
	}
	return t.Employee
}

func (t *TimeOffApprover) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		t.typ = "Employee"
		t.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TimeOffApprover) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return json.Marshal(t.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TimeOffApproverVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (t *TimeOffApprover) Accept(visitor TimeOffApproverVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return visitor.VisitEmployee(t.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// The employee requesting time off.
type TimeOffEmployee struct {
	String   string
	Employee *Employee

	typ string
}

func (t *TimeOffEmployee) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TimeOffEmployee) GetEmployee() *Employee {
	if t == nil {
		return nil
	}
	return t.Employee
}

func (t *TimeOffEmployee) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		t.typ = "Employee"
		t.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TimeOffEmployee) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return json.Marshal(t.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TimeOffEmployeeVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (t *TimeOffEmployee) Accept(visitor TimeOffEmployeeVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return visitor.VisitEmployee(t.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// # The TimeOff Object
// ### Description
// The `TimeOff` object is used to represent all employees' Time Off entries.
//
// ### Usage Example
// Fetch from the `LIST TimeOffs` endpoint and filter by `ID` to show all time off requests.
type TimeOffRequest struct {
	// The employee requesting time off.
	Employee *TimeOffRequestEmployee `json:"employee,omitempty" url:"employee,omitempty"`
	// The Merge ID of the employee with the ability to approve the time off request.
	Approver *TimeOffRequestApprover `json:"approver,omitempty" url:"approver,omitempty"`
	// The status of this time off request.
	//
	// * `REQUESTED` - REQUESTED
	// * `APPROVED` - APPROVED
	// * `DECLINED` - DECLINED
	// * `CANCELLED` - CANCELLED
	// * `DELETED` - DELETED
	Status *TimeOffStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The employee note for this time off request.
	EmployeeNote *string `json:"employee_note,omitempty" url:"employee_note,omitempty"`
	// The measurement that the third-party integration uses to count time requested.
	//
	// * `HOURS` - HOURS
	// * `DAYS` - DAYS
	Units *UnitsEnum `json:"units,omitempty" url:"units,omitempty"`
	// The time off quantity measured by the prescribed “units”.
	Amount *float64 `json:"amount,omitempty" url:"amount,omitempty"`
	// The type of time off request.
	//
	// * `VACATION` - VACATION
	// * `SICK` - SICK
	// * `PERSONAL` - PERSONAL
	// * `JURY_DUTY` - JURY_DUTY
	// * `VOLUNTEER` - VOLUNTEER
	// * `BEREAVEMENT` - BEREAVEMENT
	RequestType *RequestTypeEnum `json:"request_type,omitempty" url:"request_type,omitempty"`
	// The day and time of the start of the time requested off.
	StartTime *time.Time `json:"start_time,omitempty" url:"start_time,omitempty"`
	// The day and time of the end of the time requested off.
	EndTime             *time.Time             `json:"end_time,omitempty" url:"end_time,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TimeOffRequest) GetEmployee() *TimeOffRequestEmployee {
	if t == nil {
		return nil
	}
	return t.Employee
}

func (t *TimeOffRequest) GetApprover() *TimeOffRequestApprover {
	if t == nil {
		return nil
	}
	return t.Approver
}

func (t *TimeOffRequest) GetStatus() *TimeOffStatusEnum {
	if t == nil {
		return nil
	}
	return t.Status
}

func (t *TimeOffRequest) GetEmployeeNote() *string {
	if t == nil {
		return nil
	}
	return t.EmployeeNote
}

func (t *TimeOffRequest) GetUnits() *UnitsEnum {
	if t == nil {
		return nil
	}
	return t.Units
}

func (t *TimeOffRequest) GetAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.Amount
}

func (t *TimeOffRequest) GetRequestType() *RequestTypeEnum {
	if t == nil {
		return nil
	}
	return t.RequestType
}

func (t *TimeOffRequest) GetStartTime() *time.Time {
	if t == nil {
		return nil
	}
	return t.StartTime
}

func (t *TimeOffRequest) GetEndTime() *time.Time {
	if t == nil {
		return nil
	}
	return t.EndTime
}

func (t *TimeOffRequest) GetIntegrationParams() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.IntegrationParams
}

func (t *TimeOffRequest) GetLinkedAccountParams() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.LinkedAccountParams
}

func (t *TimeOffRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TimeOffRequest) UnmarshalJSON(data []byte) error {
	type embed TimeOffRequest
	var unmarshaler = struct {
		embed
		StartTime *internal.DateTime `json:"start_time,omitempty"`
		EndTime   *internal.DateTime `json:"end_time,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TimeOffRequest(unmarshaler.embed)
	t.StartTime = unmarshaler.StartTime.TimePtr()
	t.EndTime = unmarshaler.EndTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TimeOffRequest) MarshalJSON() ([]byte, error) {
	type embed TimeOffRequest
	var marshaler = struct {
		embed
		StartTime *internal.DateTime `json:"start_time,omitempty"`
		EndTime   *internal.DateTime `json:"end_time,omitempty"`
	}{
		embed:     embed(*t),
		StartTime: internal.NewOptionalDateTime(t.StartTime),
		EndTime:   internal.NewOptionalDateTime(t.EndTime),
	}
	return json.Marshal(marshaler)
}

func (t *TimeOffRequest) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The Merge ID of the employee with the ability to approve the time off request.
type TimeOffRequestApprover struct {
	String   string
	Employee *Employee

	typ string
}

func (t *TimeOffRequestApprover) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TimeOffRequestApprover) GetEmployee() *Employee {
	if t == nil {
		return nil
	}
	return t.Employee
}

func (t *TimeOffRequestApprover) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		t.typ = "Employee"
		t.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TimeOffRequestApprover) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return json.Marshal(t.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TimeOffRequestApproverVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (t *TimeOffRequestApprover) Accept(visitor TimeOffRequestApproverVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return visitor.VisitEmployee(t.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// The employee requesting time off.
type TimeOffRequestEmployee struct {
	String   string
	Employee *Employee

	typ string
}

func (t *TimeOffRequestEmployee) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TimeOffRequestEmployee) GetEmployee() *Employee {
	if t == nil {
		return nil
	}
	return t.Employee
}

func (t *TimeOffRequestEmployee) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		t.typ = "Employee"
		t.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TimeOffRequestEmployee) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return json.Marshal(t.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TimeOffRequestEmployeeVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (t *TimeOffRequestEmployee) Accept(visitor TimeOffRequestEmployeeVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return visitor.VisitEmployee(t.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TimeOffResponse struct {
	Model    *TimeOff                    `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TimeOffResponse) GetModel() *TimeOff {
	if t == nil {
		return nil
	}
	return t.Model
}

func (t *TimeOffResponse) GetWarnings() []*WarningValidationProblem {
	if t == nil {
		return nil
	}
	return t.Warnings
}

func (t *TimeOffResponse) GetErrors() []*ErrorValidationProblem {
	if t == nil {
		return nil
	}
	return t.Errors
}

func (t *TimeOffResponse) GetLogs() []*DebugModeLog {
	if t == nil {
		return nil
	}
	return t.Logs
}

func (t *TimeOffResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TimeOffResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TimeOffResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TimeOffResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TimeOffResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// * `REQUESTED` - REQUESTED
// * `APPROVED` - APPROVED
// * `DECLINED` - DECLINED
// * `CANCELLED` - CANCELLED
// * `DELETED` - DELETED
type TimeOffStatusEnum string

const (
	TimeOffStatusEnumRequested TimeOffStatusEnum = "REQUESTED"
	TimeOffStatusEnumApproved  TimeOffStatusEnum = "APPROVED"
	TimeOffStatusEnumDeclined  TimeOffStatusEnum = "DECLINED"
	TimeOffStatusEnumCancelled TimeOffStatusEnum = "CANCELLED"
	TimeOffStatusEnumDeleted   TimeOffStatusEnum = "DELETED"
)

func NewTimeOffStatusEnumFromString(s string) (TimeOffStatusEnum, error) {
	switch s {
	case "REQUESTED":
		return TimeOffStatusEnumRequested, nil
	case "APPROVED":
		return TimeOffStatusEnumApproved, nil
	case "DECLINED":
		return TimeOffStatusEnumDeclined, nil
	case "CANCELLED":
		return TimeOffStatusEnumCancelled, nil
	case "DELETED":
		return TimeOffStatusEnumDeleted, nil
	}
	var t TimeOffStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TimeOffStatusEnum) Ptr() *TimeOffStatusEnum {
	return &t
}

// * `HOURS` - HOURS
// * `DAYS` - DAYS
type UnitsEnum string

const (
	UnitsEnumHours UnitsEnum = "HOURS"
	UnitsEnumDays  UnitsEnum = "DAYS"
)

func NewUnitsEnumFromString(s string) (UnitsEnum, error) {
	switch s {
	case "HOURS":
		return UnitsEnumHours, nil
	case "DAYS":
		return UnitsEnumDays, nil
	}
	var t UnitsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UnitsEnum) Ptr() *UnitsEnum {
	return &u
}
