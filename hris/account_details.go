// Code generated by Fern. DO NOT EDIT.

package hris

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type AccountDetails struct {
	Id                      *string       `json:"id,omitempty" url:"id,omitempty"`
	Integration             *string       `json:"integration,omitempty" url:"integration,omitempty"`
	IntegrationSlug         *string       `json:"integration_slug,omitempty" url:"integration_slug,omitempty"`
	Category                *CategoryEnum `json:"category,omitempty" url:"category,omitempty"`
	EndUserOriginId         *string       `json:"end_user_origin_id,omitempty" url:"end_user_origin_id,omitempty"`
	EndUserOrganizationName *string       `json:"end_user_organization_name,omitempty" url:"end_user_organization_name,omitempty"`
	EndUserEmailAddress     *string       `json:"end_user_email_address,omitempty" url:"end_user_email_address,omitempty"`
	Status                  *string       `json:"status,omitempty" url:"status,omitempty"`
	WebhookListenerUrl      *string       `json:"webhook_listener_url,omitempty" url:"webhook_listener_url,omitempty"`
	// Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.
	IsDuplicate *bool   `json:"is_duplicate,omitempty" url:"is_duplicate,omitempty"`
	AccountType *string `json:"account_type,omitempty" url:"account_type,omitempty"`
	// The time at which account completes the linking flow.
	CompletedAt *time.Time `json:"completed_at,omitempty" url:"completed_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountDetails) GetId() *string {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountDetails) GetIntegration() *string {
	if a == nil {
		return nil
	}
	return a.Integration
}

func (a *AccountDetails) GetIntegrationSlug() *string {
	if a == nil {
		return nil
	}
	return a.IntegrationSlug
}

func (a *AccountDetails) GetCategory() *CategoryEnum {
	if a == nil {
		return nil
	}
	return a.Category
}

func (a *AccountDetails) GetEndUserOriginId() *string {
	if a == nil {
		return nil
	}
	return a.EndUserOriginId
}

func (a *AccountDetails) GetEndUserOrganizationName() *string {
	if a == nil {
		return nil
	}
	return a.EndUserOrganizationName
}

func (a *AccountDetails) GetEndUserEmailAddress() *string {
	if a == nil {
		return nil
	}
	return a.EndUserEmailAddress
}

func (a *AccountDetails) GetStatus() *string {
	if a == nil {
		return nil
	}
	return a.Status
}

func (a *AccountDetails) GetWebhookListenerUrl() *string {
	if a == nil {
		return nil
	}
	return a.WebhookListenerUrl
}

func (a *AccountDetails) GetIsDuplicate() *bool {
	if a == nil {
		return nil
	}
	return a.IsDuplicate
}

func (a *AccountDetails) GetAccountType() *string {
	if a == nil {
		return nil
	}
	return a.AccountType
}

func (a *AccountDetails) GetCompletedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CompletedAt
}

func (a *AccountDetails) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountDetails) UnmarshalJSON(data []byte) error {
	type embed AccountDetails
	var unmarshaler = struct {
		embed
		CompletedAt *internal.DateTime `json:"completed_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AccountDetails(unmarshaler.embed)
	a.CompletedAt = unmarshaler.CompletedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountDetails) MarshalJSON() ([]byte, error) {
	type embed AccountDetails
	var marshaler = struct {
		embed
		CompletedAt *internal.DateTime `json:"completed_at,omitempty"`
	}{
		embed:       embed(*a),
		CompletedAt: internal.NewOptionalDateTime(a.CompletedAt),
	}
	return json.Marshal(marshaler)
}

func (a *AccountDetails) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}
