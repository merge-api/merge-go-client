// Code generated by Fern. DO NOT EDIT.

package hris

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type EmployeeEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool            `json:"-" url:"run_async,omitempty"`
	Model    *EmployeeRequest `json:"model,omitempty" url:"-"`
}

type EmployeesListRequest struct {
	// If provided, will only return employees for this company.
	CompanyId *string `json:"-" url:"company_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will only return employees with this display name.
	DisplayFullName *string `json:"-" url:"display_full_name,omitempty"`
	// If provided, will only return employees with this employment status.
	//
	// * `ACTIVE` - ACTIVE
	// * `PENDING` - PENDING
	// * `INACTIVE` - INACTIVE
	EmploymentStatus *EmployeesListRequestEmploymentStatus `json:"-" url:"employment_status,omitempty"`
	// If provided, will only return employees that have an employment of the specified employment_type.
	EmploymentType *string `json:"-" url:"employment_type,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*EmployeesListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// If provided, will only return employees with this first name.
	FirstName *string `json:"-" url:"first_name,omitempty"`
	// If provided, will only return employees matching the group ids; multiple groups can be separated by commas.
	Groups *string `json:"-" url:"groups,omitempty"`
	// If provided, will only return employees for this home location.
	HomeLocationId *string `json:"-" url:"home_location_id,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include sensitive fields (such as social security numbers) in the response.
	IncludeSensitiveFields *bool `json:"-" url:"include_sensitive_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return employees that have an employment of the specified job_title.
	JobTitle *string `json:"-" url:"job_title,omitempty"`
	// If provided, will only return employees with this last name.
	LastName *string `json:"-" url:"last_name,omitempty"`
	// If provided, will only return employees for this manager.
	ManagerId *string `json:"-" url:"manager_id,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// If provided, will only return employees for this pay group
	PayGroupId *string `json:"-" url:"pay_group_id,omitempty"`
	// If provided, will only return Employees with this personal email
	PersonalEmail *string `json:"-" url:"personal_email,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *EmployeesListRequestRemoteFields `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *EmployeesListRequestShowEnumOrigins `json:"-" url:"show_enum_origins,omitempty"`
	// If provided, will only return employees that started after this datetime.
	StartedAfter *time.Time `json:"-" url:"started_after,omitempty"`
	// If provided, will only return employees that started before this datetime.
	StartedBefore *time.Time `json:"-" url:"started_before,omitempty"`
	// If provided, will only return employees for this team.
	TeamId *string `json:"-" url:"team_id,omitempty"`
	// If provided, will only return employees that were terminated after this datetime.
	TerminatedAfter *time.Time `json:"-" url:"terminated_after,omitempty"`
	// If provided, will only return employees that were terminated before this datetime.
	TerminatedBefore *time.Time `json:"-" url:"terminated_before,omitempty"`
	// If provided, will only return Employees with this work email
	WorkEmail *string `json:"-" url:"work_email,omitempty"`
	// If provided, will only return employees for this location.
	WorkLocationId *string `json:"-" url:"work_location_id,omitempty"`
}

type EmployeesRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*EmployeesRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include sensitive fields (such as social security numbers) in the response.
	IncludeSensitiveFields *bool `json:"-" url:"include_sensitive_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *EmployeesRetrieveRequestRemoteFields `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *EmployeesRetrieveRequestShowEnumOrigins `json:"-" url:"show_enum_origins,omitempty"`
}

type EmployeesListRequestEmploymentStatus string

const (
	EmployeesListRequestEmploymentStatusActive   EmployeesListRequestEmploymentStatus = "ACTIVE"
	EmployeesListRequestEmploymentStatusInactive EmployeesListRequestEmploymentStatus = "INACTIVE"
	EmployeesListRequestEmploymentStatusPending  EmployeesListRequestEmploymentStatus = "PENDING"
)

func NewEmployeesListRequestEmploymentStatusFromString(s string) (EmployeesListRequestEmploymentStatus, error) {
	switch s {
	case "ACTIVE":
		return EmployeesListRequestEmploymentStatusActive, nil
	case "INACTIVE":
		return EmployeesListRequestEmploymentStatusInactive, nil
	case "PENDING":
		return EmployeesListRequestEmploymentStatusPending, nil
	}
	var t EmployeesListRequestEmploymentStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmployeesListRequestEmploymentStatus) Ptr() *EmployeesListRequestEmploymentStatus {
	return &e
}

type EmployeesListRequestExpandItem string

const (
	EmployeesListRequestExpandItemCompany      EmployeesListRequestExpandItem = "company"
	EmployeesListRequestExpandItemEmployments  EmployeesListRequestExpandItem = "employments"
	EmployeesListRequestExpandItemGroups       EmployeesListRequestExpandItem = "groups"
	EmployeesListRequestExpandItemHomeLocation EmployeesListRequestExpandItem = "home_location"
	EmployeesListRequestExpandItemManager      EmployeesListRequestExpandItem = "manager"
	EmployeesListRequestExpandItemPayGroup     EmployeesListRequestExpandItem = "pay_group"
	EmployeesListRequestExpandItemTeam         EmployeesListRequestExpandItem = "team"
	EmployeesListRequestExpandItemWorkLocation EmployeesListRequestExpandItem = "work_location"
)

func NewEmployeesListRequestExpandItemFromString(s string) (EmployeesListRequestExpandItem, error) {
	switch s {
	case "company":
		return EmployeesListRequestExpandItemCompany, nil
	case "employments":
		return EmployeesListRequestExpandItemEmployments, nil
	case "groups":
		return EmployeesListRequestExpandItemGroups, nil
	case "home_location":
		return EmployeesListRequestExpandItemHomeLocation, nil
	case "manager":
		return EmployeesListRequestExpandItemManager, nil
	case "pay_group":
		return EmployeesListRequestExpandItemPayGroup, nil
	case "team":
		return EmployeesListRequestExpandItemTeam, nil
	case "work_location":
		return EmployeesListRequestExpandItemWorkLocation, nil
	}
	var t EmployeesListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmployeesListRequestExpandItem) Ptr() *EmployeesListRequestExpandItem {
	return &e
}

type EmployeesListRequestRemoteFields string

const (
	EmployeesListRequestRemoteFieldsEmploymentStatus                             EmployeesListRequestRemoteFields = "employment_status"
	EmployeesListRequestRemoteFieldsEmploymentStatusEthnicity                    EmployeesListRequestRemoteFields = "employment_status,ethnicity"
	EmployeesListRequestRemoteFieldsEmploymentStatusEthnicityGender              EmployeesListRequestRemoteFields = "employment_status,ethnicity,gender"
	EmployeesListRequestRemoteFieldsEmploymentStatusEthnicityGenderMaritalStatus EmployeesListRequestRemoteFields = "employment_status,ethnicity,gender,marital_status"
	EmployeesListRequestRemoteFieldsEmploymentStatusEthnicityMaritalStatus       EmployeesListRequestRemoteFields = "employment_status,ethnicity,marital_status"
	EmployeesListRequestRemoteFieldsEmploymentStatusGender                       EmployeesListRequestRemoteFields = "employment_status,gender"
	EmployeesListRequestRemoteFieldsEmploymentStatusGenderMaritalStatus          EmployeesListRequestRemoteFields = "employment_status,gender,marital_status"
	EmployeesListRequestRemoteFieldsEmploymentStatusMaritalStatus                EmployeesListRequestRemoteFields = "employment_status,marital_status"
	EmployeesListRequestRemoteFieldsEthnicity                                    EmployeesListRequestRemoteFields = "ethnicity"
	EmployeesListRequestRemoteFieldsEthnicityGender                              EmployeesListRequestRemoteFields = "ethnicity,gender"
	EmployeesListRequestRemoteFieldsEthnicityGenderMaritalStatus                 EmployeesListRequestRemoteFields = "ethnicity,gender,marital_status"
	EmployeesListRequestRemoteFieldsEthnicityMaritalStatus                       EmployeesListRequestRemoteFields = "ethnicity,marital_status"
	EmployeesListRequestRemoteFieldsGender                                       EmployeesListRequestRemoteFields = "gender"
	EmployeesListRequestRemoteFieldsGenderMaritalStatus                          EmployeesListRequestRemoteFields = "gender,marital_status"
	EmployeesListRequestRemoteFieldsMaritalStatus                                EmployeesListRequestRemoteFields = "marital_status"
)

func NewEmployeesListRequestRemoteFieldsFromString(s string) (EmployeesListRequestRemoteFields, error) {
	switch s {
	case "employment_status":
		return EmployeesListRequestRemoteFieldsEmploymentStatus, nil
	case "employment_status,ethnicity":
		return EmployeesListRequestRemoteFieldsEmploymentStatusEthnicity, nil
	case "employment_status,ethnicity,gender":
		return EmployeesListRequestRemoteFieldsEmploymentStatusEthnicityGender, nil
	case "employment_status,ethnicity,gender,marital_status":
		return EmployeesListRequestRemoteFieldsEmploymentStatusEthnicityGenderMaritalStatus, nil
	case "employment_status,ethnicity,marital_status":
		return EmployeesListRequestRemoteFieldsEmploymentStatusEthnicityMaritalStatus, nil
	case "employment_status,gender":
		return EmployeesListRequestRemoteFieldsEmploymentStatusGender, nil
	case "employment_status,gender,marital_status":
		return EmployeesListRequestRemoteFieldsEmploymentStatusGenderMaritalStatus, nil
	case "employment_status,marital_status":
		return EmployeesListRequestRemoteFieldsEmploymentStatusMaritalStatus, nil
	case "ethnicity":
		return EmployeesListRequestRemoteFieldsEthnicity, nil
	case "ethnicity,gender":
		return EmployeesListRequestRemoteFieldsEthnicityGender, nil
	case "ethnicity,gender,marital_status":
		return EmployeesListRequestRemoteFieldsEthnicityGenderMaritalStatus, nil
	case "ethnicity,marital_status":
		return EmployeesListRequestRemoteFieldsEthnicityMaritalStatus, nil
	case "gender":
		return EmployeesListRequestRemoteFieldsGender, nil
	case "gender,marital_status":
		return EmployeesListRequestRemoteFieldsGenderMaritalStatus, nil
	case "marital_status":
		return EmployeesListRequestRemoteFieldsMaritalStatus, nil
	}
	var t EmployeesListRequestRemoteFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmployeesListRequestRemoteFields) Ptr() *EmployeesListRequestRemoteFields {
	return &e
}

type EmployeesListRequestShowEnumOrigins string

const (
	EmployeesListRequestShowEnumOriginsEmploymentStatus                             EmployeesListRequestShowEnumOrigins = "employment_status"
	EmployeesListRequestShowEnumOriginsEmploymentStatusEthnicity                    EmployeesListRequestShowEnumOrigins = "employment_status,ethnicity"
	EmployeesListRequestShowEnumOriginsEmploymentStatusEthnicityGender              EmployeesListRequestShowEnumOrigins = "employment_status,ethnicity,gender"
	EmployeesListRequestShowEnumOriginsEmploymentStatusEthnicityGenderMaritalStatus EmployeesListRequestShowEnumOrigins = "employment_status,ethnicity,gender,marital_status"
	EmployeesListRequestShowEnumOriginsEmploymentStatusEthnicityMaritalStatus       EmployeesListRequestShowEnumOrigins = "employment_status,ethnicity,marital_status"
	EmployeesListRequestShowEnumOriginsEmploymentStatusGender                       EmployeesListRequestShowEnumOrigins = "employment_status,gender"
	EmployeesListRequestShowEnumOriginsEmploymentStatusGenderMaritalStatus          EmployeesListRequestShowEnumOrigins = "employment_status,gender,marital_status"
	EmployeesListRequestShowEnumOriginsEmploymentStatusMaritalStatus                EmployeesListRequestShowEnumOrigins = "employment_status,marital_status"
	EmployeesListRequestShowEnumOriginsEthnicity                                    EmployeesListRequestShowEnumOrigins = "ethnicity"
	EmployeesListRequestShowEnumOriginsEthnicityGender                              EmployeesListRequestShowEnumOrigins = "ethnicity,gender"
	EmployeesListRequestShowEnumOriginsEthnicityGenderMaritalStatus                 EmployeesListRequestShowEnumOrigins = "ethnicity,gender,marital_status"
	EmployeesListRequestShowEnumOriginsEthnicityMaritalStatus                       EmployeesListRequestShowEnumOrigins = "ethnicity,marital_status"
	EmployeesListRequestShowEnumOriginsGender                                       EmployeesListRequestShowEnumOrigins = "gender"
	EmployeesListRequestShowEnumOriginsGenderMaritalStatus                          EmployeesListRequestShowEnumOrigins = "gender,marital_status"
	EmployeesListRequestShowEnumOriginsMaritalStatus                                EmployeesListRequestShowEnumOrigins = "marital_status"
)

func NewEmployeesListRequestShowEnumOriginsFromString(s string) (EmployeesListRequestShowEnumOrigins, error) {
	switch s {
	case "employment_status":
		return EmployeesListRequestShowEnumOriginsEmploymentStatus, nil
	case "employment_status,ethnicity":
		return EmployeesListRequestShowEnumOriginsEmploymentStatusEthnicity, nil
	case "employment_status,ethnicity,gender":
		return EmployeesListRequestShowEnumOriginsEmploymentStatusEthnicityGender, nil
	case "employment_status,ethnicity,gender,marital_status":
		return EmployeesListRequestShowEnumOriginsEmploymentStatusEthnicityGenderMaritalStatus, nil
	case "employment_status,ethnicity,marital_status":
		return EmployeesListRequestShowEnumOriginsEmploymentStatusEthnicityMaritalStatus, nil
	case "employment_status,gender":
		return EmployeesListRequestShowEnumOriginsEmploymentStatusGender, nil
	case "employment_status,gender,marital_status":
		return EmployeesListRequestShowEnumOriginsEmploymentStatusGenderMaritalStatus, nil
	case "employment_status,marital_status":
		return EmployeesListRequestShowEnumOriginsEmploymentStatusMaritalStatus, nil
	case "ethnicity":
		return EmployeesListRequestShowEnumOriginsEthnicity, nil
	case "ethnicity,gender":
		return EmployeesListRequestShowEnumOriginsEthnicityGender, nil
	case "ethnicity,gender,marital_status":
		return EmployeesListRequestShowEnumOriginsEthnicityGenderMaritalStatus, nil
	case "ethnicity,marital_status":
		return EmployeesListRequestShowEnumOriginsEthnicityMaritalStatus, nil
	case "gender":
		return EmployeesListRequestShowEnumOriginsGender, nil
	case "gender,marital_status":
		return EmployeesListRequestShowEnumOriginsGenderMaritalStatus, nil
	case "marital_status":
		return EmployeesListRequestShowEnumOriginsMaritalStatus, nil
	}
	var t EmployeesListRequestShowEnumOrigins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmployeesListRequestShowEnumOrigins) Ptr() *EmployeesListRequestShowEnumOrigins {
	return &e
}

type EmployeesRetrieveRequestExpandItem string

const (
	EmployeesRetrieveRequestExpandItemCompany      EmployeesRetrieveRequestExpandItem = "company"
	EmployeesRetrieveRequestExpandItemEmployments  EmployeesRetrieveRequestExpandItem = "employments"
	EmployeesRetrieveRequestExpandItemGroups       EmployeesRetrieveRequestExpandItem = "groups"
	EmployeesRetrieveRequestExpandItemHomeLocation EmployeesRetrieveRequestExpandItem = "home_location"
	EmployeesRetrieveRequestExpandItemManager      EmployeesRetrieveRequestExpandItem = "manager"
	EmployeesRetrieveRequestExpandItemPayGroup     EmployeesRetrieveRequestExpandItem = "pay_group"
	EmployeesRetrieveRequestExpandItemTeam         EmployeesRetrieveRequestExpandItem = "team"
	EmployeesRetrieveRequestExpandItemWorkLocation EmployeesRetrieveRequestExpandItem = "work_location"
)

func NewEmployeesRetrieveRequestExpandItemFromString(s string) (EmployeesRetrieveRequestExpandItem, error) {
	switch s {
	case "company":
		return EmployeesRetrieveRequestExpandItemCompany, nil
	case "employments":
		return EmployeesRetrieveRequestExpandItemEmployments, nil
	case "groups":
		return EmployeesRetrieveRequestExpandItemGroups, nil
	case "home_location":
		return EmployeesRetrieveRequestExpandItemHomeLocation, nil
	case "manager":
		return EmployeesRetrieveRequestExpandItemManager, nil
	case "pay_group":
		return EmployeesRetrieveRequestExpandItemPayGroup, nil
	case "team":
		return EmployeesRetrieveRequestExpandItemTeam, nil
	case "work_location":
		return EmployeesRetrieveRequestExpandItemWorkLocation, nil
	}
	var t EmployeesRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmployeesRetrieveRequestExpandItem) Ptr() *EmployeesRetrieveRequestExpandItem {
	return &e
}

type EmployeesRetrieveRequestRemoteFields string

const (
	EmployeesRetrieveRequestRemoteFieldsEmploymentStatus                             EmployeesRetrieveRequestRemoteFields = "employment_status"
	EmployeesRetrieveRequestRemoteFieldsEmploymentStatusEthnicity                    EmployeesRetrieveRequestRemoteFields = "employment_status,ethnicity"
	EmployeesRetrieveRequestRemoteFieldsEmploymentStatusEthnicityGender              EmployeesRetrieveRequestRemoteFields = "employment_status,ethnicity,gender"
	EmployeesRetrieveRequestRemoteFieldsEmploymentStatusEthnicityGenderMaritalStatus EmployeesRetrieveRequestRemoteFields = "employment_status,ethnicity,gender,marital_status"
	EmployeesRetrieveRequestRemoteFieldsEmploymentStatusEthnicityMaritalStatus       EmployeesRetrieveRequestRemoteFields = "employment_status,ethnicity,marital_status"
	EmployeesRetrieveRequestRemoteFieldsEmploymentStatusGender                       EmployeesRetrieveRequestRemoteFields = "employment_status,gender"
	EmployeesRetrieveRequestRemoteFieldsEmploymentStatusGenderMaritalStatus          EmployeesRetrieveRequestRemoteFields = "employment_status,gender,marital_status"
	EmployeesRetrieveRequestRemoteFieldsEmploymentStatusMaritalStatus                EmployeesRetrieveRequestRemoteFields = "employment_status,marital_status"
	EmployeesRetrieveRequestRemoteFieldsEthnicity                                    EmployeesRetrieveRequestRemoteFields = "ethnicity"
	EmployeesRetrieveRequestRemoteFieldsEthnicityGender                              EmployeesRetrieveRequestRemoteFields = "ethnicity,gender"
	EmployeesRetrieveRequestRemoteFieldsEthnicityGenderMaritalStatus                 EmployeesRetrieveRequestRemoteFields = "ethnicity,gender,marital_status"
	EmployeesRetrieveRequestRemoteFieldsEthnicityMaritalStatus                       EmployeesRetrieveRequestRemoteFields = "ethnicity,marital_status"
	EmployeesRetrieveRequestRemoteFieldsGender                                       EmployeesRetrieveRequestRemoteFields = "gender"
	EmployeesRetrieveRequestRemoteFieldsGenderMaritalStatus                          EmployeesRetrieveRequestRemoteFields = "gender,marital_status"
	EmployeesRetrieveRequestRemoteFieldsMaritalStatus                                EmployeesRetrieveRequestRemoteFields = "marital_status"
)

func NewEmployeesRetrieveRequestRemoteFieldsFromString(s string) (EmployeesRetrieveRequestRemoteFields, error) {
	switch s {
	case "employment_status":
		return EmployeesRetrieveRequestRemoteFieldsEmploymentStatus, nil
	case "employment_status,ethnicity":
		return EmployeesRetrieveRequestRemoteFieldsEmploymentStatusEthnicity, nil
	case "employment_status,ethnicity,gender":
		return EmployeesRetrieveRequestRemoteFieldsEmploymentStatusEthnicityGender, nil
	case "employment_status,ethnicity,gender,marital_status":
		return EmployeesRetrieveRequestRemoteFieldsEmploymentStatusEthnicityGenderMaritalStatus, nil
	case "employment_status,ethnicity,marital_status":
		return EmployeesRetrieveRequestRemoteFieldsEmploymentStatusEthnicityMaritalStatus, nil
	case "employment_status,gender":
		return EmployeesRetrieveRequestRemoteFieldsEmploymentStatusGender, nil
	case "employment_status,gender,marital_status":
		return EmployeesRetrieveRequestRemoteFieldsEmploymentStatusGenderMaritalStatus, nil
	case "employment_status,marital_status":
		return EmployeesRetrieveRequestRemoteFieldsEmploymentStatusMaritalStatus, nil
	case "ethnicity":
		return EmployeesRetrieveRequestRemoteFieldsEthnicity, nil
	case "ethnicity,gender":
		return EmployeesRetrieveRequestRemoteFieldsEthnicityGender, nil
	case "ethnicity,gender,marital_status":
		return EmployeesRetrieveRequestRemoteFieldsEthnicityGenderMaritalStatus, nil
	case "ethnicity,marital_status":
		return EmployeesRetrieveRequestRemoteFieldsEthnicityMaritalStatus, nil
	case "gender":
		return EmployeesRetrieveRequestRemoteFieldsGender, nil
	case "gender,marital_status":
		return EmployeesRetrieveRequestRemoteFieldsGenderMaritalStatus, nil
	case "marital_status":
		return EmployeesRetrieveRequestRemoteFieldsMaritalStatus, nil
	}
	var t EmployeesRetrieveRequestRemoteFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmployeesRetrieveRequestRemoteFields) Ptr() *EmployeesRetrieveRequestRemoteFields {
	return &e
}

type EmployeesRetrieveRequestShowEnumOrigins string

const (
	EmployeesRetrieveRequestShowEnumOriginsEmploymentStatus                             EmployeesRetrieveRequestShowEnumOrigins = "employment_status"
	EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusEthnicity                    EmployeesRetrieveRequestShowEnumOrigins = "employment_status,ethnicity"
	EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusEthnicityGender              EmployeesRetrieveRequestShowEnumOrigins = "employment_status,ethnicity,gender"
	EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusEthnicityGenderMaritalStatus EmployeesRetrieveRequestShowEnumOrigins = "employment_status,ethnicity,gender,marital_status"
	EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusEthnicityMaritalStatus       EmployeesRetrieveRequestShowEnumOrigins = "employment_status,ethnicity,marital_status"
	EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusGender                       EmployeesRetrieveRequestShowEnumOrigins = "employment_status,gender"
	EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusGenderMaritalStatus          EmployeesRetrieveRequestShowEnumOrigins = "employment_status,gender,marital_status"
	EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusMaritalStatus                EmployeesRetrieveRequestShowEnumOrigins = "employment_status,marital_status"
	EmployeesRetrieveRequestShowEnumOriginsEthnicity                                    EmployeesRetrieveRequestShowEnumOrigins = "ethnicity"
	EmployeesRetrieveRequestShowEnumOriginsEthnicityGender                              EmployeesRetrieveRequestShowEnumOrigins = "ethnicity,gender"
	EmployeesRetrieveRequestShowEnumOriginsEthnicityGenderMaritalStatus                 EmployeesRetrieveRequestShowEnumOrigins = "ethnicity,gender,marital_status"
	EmployeesRetrieveRequestShowEnumOriginsEthnicityMaritalStatus                       EmployeesRetrieveRequestShowEnumOrigins = "ethnicity,marital_status"
	EmployeesRetrieveRequestShowEnumOriginsGender                                       EmployeesRetrieveRequestShowEnumOrigins = "gender"
	EmployeesRetrieveRequestShowEnumOriginsGenderMaritalStatus                          EmployeesRetrieveRequestShowEnumOrigins = "gender,marital_status"
	EmployeesRetrieveRequestShowEnumOriginsMaritalStatus                                EmployeesRetrieveRequestShowEnumOrigins = "marital_status"
)

func NewEmployeesRetrieveRequestShowEnumOriginsFromString(s string) (EmployeesRetrieveRequestShowEnumOrigins, error) {
	switch s {
	case "employment_status":
		return EmployeesRetrieveRequestShowEnumOriginsEmploymentStatus, nil
	case "employment_status,ethnicity":
		return EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusEthnicity, nil
	case "employment_status,ethnicity,gender":
		return EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusEthnicityGender, nil
	case "employment_status,ethnicity,gender,marital_status":
		return EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusEthnicityGenderMaritalStatus, nil
	case "employment_status,ethnicity,marital_status":
		return EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusEthnicityMaritalStatus, nil
	case "employment_status,gender":
		return EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusGender, nil
	case "employment_status,gender,marital_status":
		return EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusGenderMaritalStatus, nil
	case "employment_status,marital_status":
		return EmployeesRetrieveRequestShowEnumOriginsEmploymentStatusMaritalStatus, nil
	case "ethnicity":
		return EmployeesRetrieveRequestShowEnumOriginsEthnicity, nil
	case "ethnicity,gender":
		return EmployeesRetrieveRequestShowEnumOriginsEthnicityGender, nil
	case "ethnicity,gender,marital_status":
		return EmployeesRetrieveRequestShowEnumOriginsEthnicityGenderMaritalStatus, nil
	case "ethnicity,marital_status":
		return EmployeesRetrieveRequestShowEnumOriginsEthnicityMaritalStatus, nil
	case "gender":
		return EmployeesRetrieveRequestShowEnumOriginsGender, nil
	case "gender,marital_status":
		return EmployeesRetrieveRequestShowEnumOriginsGenderMaritalStatus, nil
	case "marital_status":
		return EmployeesRetrieveRequestShowEnumOriginsMaritalStatus, nil
	}
	var t EmployeesRetrieveRequestShowEnumOrigins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmployeesRetrieveRequestShowEnumOrigins) Ptr() *EmployeesRetrieveRequestShowEnumOrigins {
	return &e
}

// # The Employee Object
// ### Description
// The `Employee` object is used to represent any person who has been employed by a company. By default, it returns all employees. To filter for only active employees, set the `employment_status` query parameter to `ACTIVE`.
//
// ### Usage Example
// Fetch from the `LIST Employee` endpoint and filter by `ID` to show all employees.
type EmployeeRequest struct {
	// The employee's number that appears in the third-party integration's UI.
	EmployeeNumber *string `json:"employee_number,omitempty" url:"employee_number,omitempty"`
	// The ID of the employee's company.
	Company *EmployeeRequestCompany `json:"company,omitempty" url:"company,omitempty"`
	// The employee's first name.
	FirstName *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	// The employee's last name.
	LastName *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	// The employee's preferred first name.
	PreferredName *string `json:"preferred_name,omitempty" url:"preferred_name,omitempty"`
	// The employee's full name, to use for display purposes. If a preferred first name is available, the full name will include the preferred first name.
	DisplayFullName *string `json:"display_full_name,omitempty" url:"display_full_name,omitempty"`
	// The employee's username that appears in the remote UI.
	Username *string                      `json:"username,omitempty" url:"username,omitempty"`
	Groups   []*EmployeeRequestGroupsItem `json:"groups,omitempty" url:"groups,omitempty"`
	// The employee's work email.
	WorkEmail *string `json:"work_email,omitempty" url:"work_email,omitempty"`
	// The employee's personal email.
	PersonalEmail *string `json:"personal_email,omitempty" url:"personal_email,omitempty"`
	// The employee's mobile phone number.
	MobilePhoneNumber *string `json:"mobile_phone_number,omitempty" url:"mobile_phone_number,omitempty"`
	// Array of `Employment` IDs for this Employee.
	Employments []*EmployeeRequestEmploymentsItem `json:"employments,omitempty" url:"employments,omitempty"`
	// The employee's home address.
	HomeLocation *EmployeeRequestHomeLocation `json:"home_location,omitempty" url:"home_location,omitempty"`
	// The employee's work address.
	WorkLocation *EmployeeRequestWorkLocation `json:"work_location,omitempty" url:"work_location,omitempty"`
	// The employee ID of the employee's manager.
	Manager *EmployeeRequestManager `json:"manager,omitempty" url:"manager,omitempty"`
	// The employee's team.
	Team *EmployeeRequestTeam `json:"team,omitempty" url:"team,omitempty"`
	// The employee's pay group
	PayGroup *EmployeeRequestPayGroup `json:"pay_group,omitempty" url:"pay_group,omitempty"`
	// The employee's social security number.
	Ssn *string `json:"ssn,omitempty" url:"ssn,omitempty"`
	// The employee's gender.
	//
	// * `MALE` - MALE
	// * `FEMALE` - FEMALE
	// * `NON-BINARY` - NON-BINARY
	// * `OTHER` - OTHER
	// * `PREFER_NOT_TO_DISCLOSE` - PREFER_NOT_TO_DISCLOSE
	Gender *GenderEnum `json:"gender,omitempty" url:"gender,omitempty"`
	// The employee's ethnicity.
	//
	// * `AMERICAN_INDIAN_OR_ALASKA_NATIVE` - AMERICAN_INDIAN_OR_ALASKA_NATIVE
	// * `ASIAN_OR_INDIAN_SUBCONTINENT` - ASIAN_OR_INDIAN_SUBCONTINENT
	// * `BLACK_OR_AFRICAN_AMERICAN` - BLACK_OR_AFRICAN_AMERICAN
	// * `HISPANIC_OR_LATINO` - HISPANIC_OR_LATINO
	// * `NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER` - NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER
	// * `TWO_OR_MORE_RACES` - TWO_OR_MORE_RACES
	// * `WHITE` - WHITE
	// * `PREFER_NOT_TO_DISCLOSE` - PREFER_NOT_TO_DISCLOSE
	Ethnicity *EthnicityEnum `json:"ethnicity,omitempty" url:"ethnicity,omitempty"`
	// The employee's filing status as related to marital status.
	//
	// * `SINGLE` - SINGLE
	// * `MARRIED_FILING_JOINTLY` - MARRIED_FILING_JOINTLY
	// * `MARRIED_FILING_SEPARATELY` - MARRIED_FILING_SEPARATELY
	// * `HEAD_OF_HOUSEHOLD` - HEAD_OF_HOUSEHOLD
	// * `QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD` - QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD
	MaritalStatus *MaritalStatusEnum `json:"marital_status,omitempty" url:"marital_status,omitempty"`
	// The employee's date of birth.
	DateOfBirth *time.Time `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	// The date that the employee was hired, usually the day that an offer letter is signed. If an employee has multiple hire dates from previous employments, this represents the most recent hire date. Note: If you're looking for the employee's start date, refer to the start_date field.
	HireDate *time.Time `json:"hire_date,omitempty" url:"hire_date,omitempty"`
	// The date that the employee started working. If an employee was rehired, the most recent start date will be returned.
	StartDate *time.Time `json:"start_date,omitempty" url:"start_date,omitempty"`
	// The employment status of the employee.
	//
	// * `ACTIVE` - ACTIVE
	// * `PENDING` - PENDING
	// * `INACTIVE` - INACTIVE
	EmploymentStatus *EmploymentStatusEnum `json:"employment_status,omitempty" url:"employment_status,omitempty"`
	// The employee's termination date.
	TerminationDate *time.Time `json:"termination_date,omitempty" url:"termination_date,omitempty"`
	// The URL of the employee's avatar image.
	Avatar              *string                `json:"avatar,omitempty" url:"avatar,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmployeeRequest) GetEmployeeNumber() *string {
	if e == nil {
		return nil
	}
	return e.EmployeeNumber
}

func (e *EmployeeRequest) GetCompany() *EmployeeRequestCompany {
	if e == nil {
		return nil
	}
	return e.Company
}

func (e *EmployeeRequest) GetFirstName() *string {
	if e == nil {
		return nil
	}
	return e.FirstName
}

func (e *EmployeeRequest) GetLastName() *string {
	if e == nil {
		return nil
	}
	return e.LastName
}

func (e *EmployeeRequest) GetPreferredName() *string {
	if e == nil {
		return nil
	}
	return e.PreferredName
}

func (e *EmployeeRequest) GetDisplayFullName() *string {
	if e == nil {
		return nil
	}
	return e.DisplayFullName
}

func (e *EmployeeRequest) GetUsername() *string {
	if e == nil {
		return nil
	}
	return e.Username
}

func (e *EmployeeRequest) GetGroups() []*EmployeeRequestGroupsItem {
	if e == nil {
		return nil
	}
	return e.Groups
}

func (e *EmployeeRequest) GetWorkEmail() *string {
	if e == nil {
		return nil
	}
	return e.WorkEmail
}

func (e *EmployeeRequest) GetPersonalEmail() *string {
	if e == nil {
		return nil
	}
	return e.PersonalEmail
}

func (e *EmployeeRequest) GetMobilePhoneNumber() *string {
	if e == nil {
		return nil
	}
	return e.MobilePhoneNumber
}

func (e *EmployeeRequest) GetEmployments() []*EmployeeRequestEmploymentsItem {
	if e == nil {
		return nil
	}
	return e.Employments
}

func (e *EmployeeRequest) GetHomeLocation() *EmployeeRequestHomeLocation {
	if e == nil {
		return nil
	}
	return e.HomeLocation
}

func (e *EmployeeRequest) GetWorkLocation() *EmployeeRequestWorkLocation {
	if e == nil {
		return nil
	}
	return e.WorkLocation
}

func (e *EmployeeRequest) GetManager() *EmployeeRequestManager {
	if e == nil {
		return nil
	}
	return e.Manager
}

func (e *EmployeeRequest) GetTeam() *EmployeeRequestTeam {
	if e == nil {
		return nil
	}
	return e.Team
}

func (e *EmployeeRequest) GetPayGroup() *EmployeeRequestPayGroup {
	if e == nil {
		return nil
	}
	return e.PayGroup
}

func (e *EmployeeRequest) GetSsn() *string {
	if e == nil {
		return nil
	}
	return e.Ssn
}

func (e *EmployeeRequest) GetGender() *GenderEnum {
	if e == nil {
		return nil
	}
	return e.Gender
}

func (e *EmployeeRequest) GetEthnicity() *EthnicityEnum {
	if e == nil {
		return nil
	}
	return e.Ethnicity
}

func (e *EmployeeRequest) GetMaritalStatus() *MaritalStatusEnum {
	if e == nil {
		return nil
	}
	return e.MaritalStatus
}

func (e *EmployeeRequest) GetDateOfBirth() *time.Time {
	if e == nil {
		return nil
	}
	return e.DateOfBirth
}

func (e *EmployeeRequest) GetHireDate() *time.Time {
	if e == nil {
		return nil
	}
	return e.HireDate
}

func (e *EmployeeRequest) GetStartDate() *time.Time {
	if e == nil {
		return nil
	}
	return e.StartDate
}

func (e *EmployeeRequest) GetEmploymentStatus() *EmploymentStatusEnum {
	if e == nil {
		return nil
	}
	return e.EmploymentStatus
}

func (e *EmployeeRequest) GetTerminationDate() *time.Time {
	if e == nil {
		return nil
	}
	return e.TerminationDate
}

func (e *EmployeeRequest) GetAvatar() *string {
	if e == nil {
		return nil
	}
	return e.Avatar
}

func (e *EmployeeRequest) GetIntegrationParams() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.IntegrationParams
}

func (e *EmployeeRequest) GetLinkedAccountParams() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.LinkedAccountParams
}

func (e *EmployeeRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmployeeRequest) UnmarshalJSON(data []byte) error {
	type embed EmployeeRequest
	var unmarshaler = struct {
		embed
		DateOfBirth     *internal.DateTime `json:"date_of_birth,omitempty"`
		HireDate        *internal.DateTime `json:"hire_date,omitempty"`
		StartDate       *internal.DateTime `json:"start_date,omitempty"`
		TerminationDate *internal.DateTime `json:"termination_date,omitempty"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EmployeeRequest(unmarshaler.embed)
	e.DateOfBirth = unmarshaler.DateOfBirth.TimePtr()
	e.HireDate = unmarshaler.HireDate.TimePtr()
	e.StartDate = unmarshaler.StartDate.TimePtr()
	e.TerminationDate = unmarshaler.TerminationDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmployeeRequest) MarshalJSON() ([]byte, error) {
	type embed EmployeeRequest
	var marshaler = struct {
		embed
		DateOfBirth     *internal.DateTime `json:"date_of_birth,omitempty"`
		HireDate        *internal.DateTime `json:"hire_date,omitempty"`
		StartDate       *internal.DateTime `json:"start_date,omitempty"`
		TerminationDate *internal.DateTime `json:"termination_date,omitempty"`
	}{
		embed:           embed(*e),
		DateOfBirth:     internal.NewOptionalDateTime(e.DateOfBirth),
		HireDate:        internal.NewOptionalDateTime(e.HireDate),
		StartDate:       internal.NewOptionalDateTime(e.StartDate),
		TerminationDate: internal.NewOptionalDateTime(e.TerminationDate),
	}
	return json.Marshal(marshaler)
}

func (e *EmployeeRequest) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The ID of the employee's company.
type EmployeeRequestCompany struct {
	String  string
	Company *Company

	typ string
}

func (e *EmployeeRequestCompany) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EmployeeRequestCompany) GetCompany() *Company {
	if e == nil {
		return nil
	}
	return e.Company
}

func (e *EmployeeRequestCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valueCompany := new(Company)
	if err := json.Unmarshal(data, &valueCompany); err == nil {
		e.typ = "Company"
		e.Company = valueCompany
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmployeeRequestCompany) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "Company" || e.Company != nil {
		return json.Marshal(e.Company)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmployeeRequestCompanyVisitor interface {
	VisitString(string) error
	VisitCompany(*Company) error
}

func (e *EmployeeRequestCompany) Accept(visitor EmployeeRequestCompanyVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "Company" || e.Company != nil {
		return visitor.VisitCompany(e.Company)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmployeeRequestEmploymentsItem struct {
	String     string
	Employment *Employment

	typ string
}

func (e *EmployeeRequestEmploymentsItem) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EmployeeRequestEmploymentsItem) GetEmployment() *Employment {
	if e == nil {
		return nil
	}
	return e.Employment
}

func (e *EmployeeRequestEmploymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valueEmployment := new(Employment)
	if err := json.Unmarshal(data, &valueEmployment); err == nil {
		e.typ = "Employment"
		e.Employment = valueEmployment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmployeeRequestEmploymentsItem) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "Employment" || e.Employment != nil {
		return json.Marshal(e.Employment)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmployeeRequestEmploymentsItemVisitor interface {
	VisitString(string) error
	VisitEmployment(*Employment) error
}

func (e *EmployeeRequestEmploymentsItem) Accept(visitor EmployeeRequestEmploymentsItemVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "Employment" || e.Employment != nil {
		return visitor.VisitEmployment(e.Employment)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmployeeRequestGroupsItem struct {
	String string
	Group  *Group

	typ string
}

func (e *EmployeeRequestGroupsItem) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EmployeeRequestGroupsItem) GetGroup() *Group {
	if e == nil {
		return nil
	}
	return e.Group
}

func (e *EmployeeRequestGroupsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valueGroup := new(Group)
	if err := json.Unmarshal(data, &valueGroup); err == nil {
		e.typ = "Group"
		e.Group = valueGroup
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmployeeRequestGroupsItem) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "Group" || e.Group != nil {
		return json.Marshal(e.Group)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmployeeRequestGroupsItemVisitor interface {
	VisitString(string) error
	VisitGroup(*Group) error
}

func (e *EmployeeRequestGroupsItem) Accept(visitor EmployeeRequestGroupsItemVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "Group" || e.Group != nil {
		return visitor.VisitGroup(e.Group)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// The employee's home address.
type EmployeeRequestHomeLocation struct {
	String   string
	Location *Location

	typ string
}

func (e *EmployeeRequestHomeLocation) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EmployeeRequestHomeLocation) GetLocation() *Location {
	if e == nil {
		return nil
	}
	return e.Location
}

func (e *EmployeeRequestHomeLocation) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valueLocation := new(Location)
	if err := json.Unmarshal(data, &valueLocation); err == nil {
		e.typ = "Location"
		e.Location = valueLocation
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmployeeRequestHomeLocation) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "Location" || e.Location != nil {
		return json.Marshal(e.Location)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmployeeRequestHomeLocationVisitor interface {
	VisitString(string) error
	VisitLocation(*Location) error
}

func (e *EmployeeRequestHomeLocation) Accept(visitor EmployeeRequestHomeLocationVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "Location" || e.Location != nil {
		return visitor.VisitLocation(e.Location)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// The employee ID of the employee's manager.
type EmployeeRequestManager struct {
	String   string
	Employee *Employee

	typ string
}

func (e *EmployeeRequestManager) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EmployeeRequestManager) GetEmployee() *Employee {
	if e == nil {
		return nil
	}
	return e.Employee
}

func (e *EmployeeRequestManager) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		e.typ = "Employee"
		e.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmployeeRequestManager) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "Employee" || e.Employee != nil {
		return json.Marshal(e.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmployeeRequestManagerVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (e *EmployeeRequestManager) Accept(visitor EmployeeRequestManagerVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "Employee" || e.Employee != nil {
		return visitor.VisitEmployee(e.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// The employee's pay group
type EmployeeRequestPayGroup struct {
	String   string
	PayGroup *PayGroup

	typ string
}

func (e *EmployeeRequestPayGroup) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EmployeeRequestPayGroup) GetPayGroup() *PayGroup {
	if e == nil {
		return nil
	}
	return e.PayGroup
}

func (e *EmployeeRequestPayGroup) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valuePayGroup := new(PayGroup)
	if err := json.Unmarshal(data, &valuePayGroup); err == nil {
		e.typ = "PayGroup"
		e.PayGroup = valuePayGroup
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmployeeRequestPayGroup) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "PayGroup" || e.PayGroup != nil {
		return json.Marshal(e.PayGroup)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmployeeRequestPayGroupVisitor interface {
	VisitString(string) error
	VisitPayGroup(*PayGroup) error
}

func (e *EmployeeRequestPayGroup) Accept(visitor EmployeeRequestPayGroupVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "PayGroup" || e.PayGroup != nil {
		return visitor.VisitPayGroup(e.PayGroup)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// The employee's team.
type EmployeeRequestTeam struct {
	String string
	Team   *Team

	typ string
}

func (e *EmployeeRequestTeam) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EmployeeRequestTeam) GetTeam() *Team {
	if e == nil {
		return nil
	}
	return e.Team
}

func (e *EmployeeRequestTeam) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valueTeam := new(Team)
	if err := json.Unmarshal(data, &valueTeam); err == nil {
		e.typ = "Team"
		e.Team = valueTeam
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmployeeRequestTeam) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "Team" || e.Team != nil {
		return json.Marshal(e.Team)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmployeeRequestTeamVisitor interface {
	VisitString(string) error
	VisitTeam(*Team) error
}

func (e *EmployeeRequestTeam) Accept(visitor EmployeeRequestTeamVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "Team" || e.Team != nil {
		return visitor.VisitTeam(e.Team)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// The employee's work address.
type EmployeeRequestWorkLocation struct {
	String   string
	Location *Location

	typ string
}

func (e *EmployeeRequestWorkLocation) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EmployeeRequestWorkLocation) GetLocation() *Location {
	if e == nil {
		return nil
	}
	return e.Location
}

func (e *EmployeeRequestWorkLocation) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valueLocation := new(Location)
	if err := json.Unmarshal(data, &valueLocation); err == nil {
		e.typ = "Location"
		e.Location = valueLocation
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmployeeRequestWorkLocation) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "Location" || e.Location != nil {
		return json.Marshal(e.Location)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmployeeRequestWorkLocationVisitor interface {
	VisitString(string) error
	VisitLocation(*Location) error
}

func (e *EmployeeRequestWorkLocation) Accept(visitor EmployeeRequestWorkLocationVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "Location" || e.Location != nil {
		return visitor.VisitLocation(e.Location)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmployeeResponse struct {
	Model    *Employee                   `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmployeeResponse) GetModel() *Employee {
	if e == nil {
		return nil
	}
	return e.Model
}

func (e *EmployeeResponse) GetWarnings() []*WarningValidationProblem {
	if e == nil {
		return nil
	}
	return e.Warnings
}

func (e *EmployeeResponse) GetErrors() []*ErrorValidationProblem {
	if e == nil {
		return nil
	}
	return e.Errors
}

func (e *EmployeeResponse) GetLogs() []*DebugModeLog {
	if e == nil {
		return nil
	}
	return e.Logs
}

func (e *EmployeeResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmployeeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EmployeeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmployeeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmployeeResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type IgnoreCommonModelRequest struct {
	Reason  ReasonEnum `json:"reason" url:"reason"`
	Message *string    `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IgnoreCommonModelRequest) GetReason() ReasonEnum {
	if i == nil {
		return ""
	}
	return i.Reason
}

func (i *IgnoreCommonModelRequest) GetMessage() *string {
	if i == nil {
		return nil
	}
	return i.Message
}

func (i *IgnoreCommonModelRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IgnoreCommonModelRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler IgnoreCommonModelRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IgnoreCommonModelRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IgnoreCommonModelRequest) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type PaginatedEmployeeList struct {
	Next     *string     `json:"next,omitempty" url:"next,omitempty"`
	Previous *string     `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Employee `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedEmployeeList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedEmployeeList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedEmployeeList) GetResults() []*Employee {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedEmployeeList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedEmployeeList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedEmployeeList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedEmployeeList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedEmployeeList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// * `GENERAL_CUSTOMER_REQUEST` - GENERAL_CUSTOMER_REQUEST
// * `GDPR` - GDPR
// * `OTHER` - OTHER
type ReasonEnum string

const (
	ReasonEnumGeneralCustomerRequest ReasonEnum = "GENERAL_CUSTOMER_REQUEST"
	ReasonEnumGdpr                   ReasonEnum = "GDPR"
	ReasonEnumOther                  ReasonEnum = "OTHER"
)

func NewReasonEnumFromString(s string) (ReasonEnum, error) {
	switch s {
	case "GENERAL_CUSTOMER_REQUEST":
		return ReasonEnumGeneralCustomerRequest, nil
	case "GDPR":
		return ReasonEnumGdpr, nil
	case "OTHER":
		return ReasonEnumOther, nil
	}
	var t ReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReasonEnum) Ptr() *ReasonEnum {
	return &r
}
