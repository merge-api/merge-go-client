// Code generated by Fern. DO NOT EDIT.

package hris

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type DependentsListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include sensitive fields (such as social security numbers) in the response.
	IncludeSensitiveFields *bool `json:"-" url:"include_sensitive_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
}

type DependentsRetrieveRequest struct {
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include sensitive fields (such as social security numbers) in the response.
	IncludeSensitiveFields *bool `json:"-" url:"include_sensitive_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

// # The Dependent Object
// ### Description
// The `Dependent` object is used to represent a dependent (e.g. child, spouse, domestic partner, etc) of an `Employee`
//
// ### Usage Example
// Fetch from the `LIST Dependents` endpoint and filter by `ID` to show all dependents.
type Dependent struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The dependents's first name.
	FirstName *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	// The dependents's middle name.
	MiddleName *string `json:"middle_name,omitempty" url:"middle_name,omitempty"`
	// The dependents's last name.
	LastName *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	// The dependent's relationship to the employee.
	//
	// * `CHILD` - CHILD
	// * `SPOUSE` - SPOUSE
	// * `DOMESTIC_PARTNER` - DOMESTIC_PARTNER
	Relationship *RelationshipEnum `json:"relationship,omitempty" url:"relationship,omitempty"`
	// The employee this person is a dependent of.
	Employee *string `json:"employee,omitempty" url:"employee,omitempty"`
	// The dependent's date of birth.
	DateOfBirth *time.Time `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	// The dependent's gender.
	//
	// * `MALE` - MALE
	// * `FEMALE` - FEMALE
	// * `NON-BINARY` - NON-BINARY
	// * `OTHER` - OTHER
	// * `PREFER_NOT_TO_DISCLOSE` - PREFER_NOT_TO_DISCLOSE
	Gender *GenderEnum `json:"gender,omitempty" url:"gender,omitempty"`
	// The dependent's phone number.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// The dependents's home address.
	HomeLocation *string `json:"home_location,omitempty" url:"home_location,omitempty"`
	// Whether or not the dependent is a student
	IsStudent *bool `json:"is_student,omitempty" url:"is_student,omitempty"`
	// The dependents's social security number.
	Ssn *string `json:"ssn,omitempty" url:"ssn,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *Dependent) GetId() *string {
	if d == nil {
		return nil
	}
	return d.Id
}

func (d *Dependent) GetRemoteId() *string {
	if d == nil {
		return nil
	}
	return d.RemoteId
}

func (d *Dependent) GetCreatedAt() *time.Time {
	if d == nil {
		return nil
	}
	return d.CreatedAt
}

func (d *Dependent) GetModifiedAt() *time.Time {
	if d == nil {
		return nil
	}
	return d.ModifiedAt
}

func (d *Dependent) GetFirstName() *string {
	if d == nil {
		return nil
	}
	return d.FirstName
}

func (d *Dependent) GetMiddleName() *string {
	if d == nil {
		return nil
	}
	return d.MiddleName
}

func (d *Dependent) GetLastName() *string {
	if d == nil {
		return nil
	}
	return d.LastName
}

func (d *Dependent) GetRelationship() *RelationshipEnum {
	if d == nil {
		return nil
	}
	return d.Relationship
}

func (d *Dependent) GetEmployee() *string {
	if d == nil {
		return nil
	}
	return d.Employee
}

func (d *Dependent) GetDateOfBirth() *time.Time {
	if d == nil {
		return nil
	}
	return d.DateOfBirth
}

func (d *Dependent) GetGender() *GenderEnum {
	if d == nil {
		return nil
	}
	return d.Gender
}

func (d *Dependent) GetPhoneNumber() *string {
	if d == nil {
		return nil
	}
	return d.PhoneNumber
}

func (d *Dependent) GetHomeLocation() *string {
	if d == nil {
		return nil
	}
	return d.HomeLocation
}

func (d *Dependent) GetIsStudent() *bool {
	if d == nil {
		return nil
	}
	return d.IsStudent
}

func (d *Dependent) GetSsn() *string {
	if d == nil {
		return nil
	}
	return d.Ssn
}

func (d *Dependent) GetRemoteWasDeleted() *bool {
	if d == nil {
		return nil
	}
	return d.RemoteWasDeleted
}

func (d *Dependent) GetFieldMappings() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.FieldMappings
}

func (d *Dependent) GetRemoteData() []*RemoteData {
	if d == nil {
		return nil
	}
	return d.RemoteData
}

func (d *Dependent) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Dependent) UnmarshalJSON(data []byte) error {
	type embed Dependent
	var unmarshaler = struct {
		embed
		CreatedAt   *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt  *internal.DateTime `json:"modified_at,omitempty"`
		DateOfBirth *internal.DateTime `json:"date_of_birth,omitempty"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = Dependent(unmarshaler.embed)
	d.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	d.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	d.DateOfBirth = unmarshaler.DateOfBirth.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *Dependent) MarshalJSON() ([]byte, error) {
	type embed Dependent
	var marshaler = struct {
		embed
		CreatedAt   *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt  *internal.DateTime `json:"modified_at,omitempty"`
		DateOfBirth *internal.DateTime `json:"date_of_birth,omitempty"`
	}{
		embed:       embed(*d),
		CreatedAt:   internal.NewOptionalDateTime(d.CreatedAt),
		ModifiedAt:  internal.NewOptionalDateTime(d.ModifiedAt),
		DateOfBirth: internal.NewOptionalDateTime(d.DateOfBirth),
	}
	return json.Marshal(marshaler)
}

func (d *Dependent) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type PaginatedDependentList struct {
	Next     *string      `json:"next,omitempty" url:"next,omitempty"`
	Previous *string      `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Dependent `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedDependentList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedDependentList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedDependentList) GetResults() []*Dependent {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedDependentList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedDependentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedDependentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedDependentList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedDependentList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// * `CHILD` - CHILD
// * `SPOUSE` - SPOUSE
// * `DOMESTIC_PARTNER` - DOMESTIC_PARTNER
type RelationshipEnum string

const (
	RelationshipEnumChild           RelationshipEnum = "CHILD"
	RelationshipEnumSpouse          RelationshipEnum = "SPOUSE"
	RelationshipEnumDomesticPartner RelationshipEnum = "DOMESTIC_PARTNER"
)

func NewRelationshipEnumFromString(s string) (RelationshipEnum, error) {
	switch s {
	case "CHILD":
		return RelationshipEnumChild, nil
	case "SPOUSE":
		return RelationshipEnumSpouse, nil
	case "DOMESTIC_PARTNER":
		return RelationshipEnumDomesticPartner, nil
	}
	var t RelationshipEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RelationshipEnum) Ptr() *RelationshipEnum {
	return &r
}
