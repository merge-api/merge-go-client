// Code generated by Fern. DO NOT EDIT.

package hris

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type EmployerBenefitsListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
}

type EmployerBenefitsRetrieveRequest struct {
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

// * `MEDICAL` - MEDICAL
// * `HEALTH_SAVINGS` - HEALTH_SAVINGS
// * `INSURANCE` - INSURANCE
// * `RETIREMENT` - RETIREMENT
// * `OTHER` - OTHER
type BenefitPlanTypeEnum string

const (
	BenefitPlanTypeEnumMedical       BenefitPlanTypeEnum = "MEDICAL"
	BenefitPlanTypeEnumHealthSavings BenefitPlanTypeEnum = "HEALTH_SAVINGS"
	BenefitPlanTypeEnumInsurance     BenefitPlanTypeEnum = "INSURANCE"
	BenefitPlanTypeEnumRetirement    BenefitPlanTypeEnum = "RETIREMENT"
	BenefitPlanTypeEnumOther         BenefitPlanTypeEnum = "OTHER"
)

func NewBenefitPlanTypeEnumFromString(s string) (BenefitPlanTypeEnum, error) {
	switch s {
	case "MEDICAL":
		return BenefitPlanTypeEnumMedical, nil
	case "HEALTH_SAVINGS":
		return BenefitPlanTypeEnumHealthSavings, nil
	case "INSURANCE":
		return BenefitPlanTypeEnumInsurance, nil
	case "RETIREMENT":
		return BenefitPlanTypeEnumRetirement, nil
	case "OTHER":
		return BenefitPlanTypeEnumOther, nil
	}
	var t BenefitPlanTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BenefitPlanTypeEnum) Ptr() *BenefitPlanTypeEnum {
	return &b
}

// # The EmployerBenefit Object
// ### Description
// The `Employer Benefit` object is used to represent a benefit plan offered by a company.
//
// ### Usage Example
// Fetch from the `LIST EmployerBenefits` endpoint and filter by `ID` to show all EmployerBenefits.
type EmployerBenefit struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The type of benefit plan.
	//
	// * `MEDICAL` - MEDICAL
	// * `HEALTH_SAVINGS` - HEALTH_SAVINGS
	// * `INSURANCE` - INSURANCE
	// * `RETIREMENT` - RETIREMENT
	// * `OTHER` - OTHER
	BenefitPlanType *EmployerBenefitBenefitPlanType `json:"benefit_plan_type,omitempty" url:"benefit_plan_type,omitempty"`
	// The employer benefit's name - typically the carrier or network name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The employer benefit's description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The employer benefit's deduction code.
	DeductionCode *string `json:"deduction_code,omitempty" url:"deduction_code,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmployerBenefit) GetId() *string {
	if e == nil {
		return nil
	}
	return e.Id
}

func (e *EmployerBenefit) GetRemoteId() *string {
	if e == nil {
		return nil
	}
	return e.RemoteId
}

func (e *EmployerBenefit) GetCreatedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *EmployerBenefit) GetModifiedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.ModifiedAt
}

func (e *EmployerBenefit) GetBenefitPlanType() *EmployerBenefitBenefitPlanType {
	if e == nil {
		return nil
	}
	return e.BenefitPlanType
}

func (e *EmployerBenefit) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *EmployerBenefit) GetDescription() *string {
	if e == nil {
		return nil
	}
	return e.Description
}

func (e *EmployerBenefit) GetDeductionCode() *string {
	if e == nil {
		return nil
	}
	return e.DeductionCode
}

func (e *EmployerBenefit) GetRemoteWasDeleted() *bool {
	if e == nil {
		return nil
	}
	return e.RemoteWasDeleted
}

func (e *EmployerBenefit) GetFieldMappings() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.FieldMappings
}

func (e *EmployerBenefit) GetRemoteData() []*RemoteData {
	if e == nil {
		return nil
	}
	return e.RemoteData
}

func (e *EmployerBenefit) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmployerBenefit) UnmarshalJSON(data []byte) error {
	type embed EmployerBenefit
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EmployerBenefit(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	e.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmployerBenefit) MarshalJSON() ([]byte, error) {
	type embed EmployerBenefit
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*e),
		CreatedAt:  internal.NewOptionalDateTime(e.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(e.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EmployerBenefit) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The type of benefit plan.
//
// * `MEDICAL` - MEDICAL
// * `HEALTH_SAVINGS` - HEALTH_SAVINGS
// * `INSURANCE` - INSURANCE
// * `RETIREMENT` - RETIREMENT
// * `OTHER` - OTHER
type EmployerBenefitBenefitPlanType struct {
	BenefitPlanTypeEnum BenefitPlanTypeEnum
	String              string

	typ string
}

func (e *EmployerBenefitBenefitPlanType) GetBenefitPlanTypeEnum() BenefitPlanTypeEnum {
	if e == nil {
		return ""
	}
	return e.BenefitPlanTypeEnum
}

func (e *EmployerBenefitBenefitPlanType) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EmployerBenefitBenefitPlanType) UnmarshalJSON(data []byte) error {
	var valueBenefitPlanTypeEnum BenefitPlanTypeEnum
	if err := json.Unmarshal(data, &valueBenefitPlanTypeEnum); err == nil {
		e.typ = "BenefitPlanTypeEnum"
		e.BenefitPlanTypeEnum = valueBenefitPlanTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmployerBenefitBenefitPlanType) MarshalJSON() ([]byte, error) {
	if e.typ == "BenefitPlanTypeEnum" || e.BenefitPlanTypeEnum != "" {
		return json.Marshal(e.BenefitPlanTypeEnum)
	}
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmployerBenefitBenefitPlanTypeVisitor interface {
	VisitBenefitPlanTypeEnum(BenefitPlanTypeEnum) error
	VisitString(string) error
}

func (e *EmployerBenefitBenefitPlanType) Accept(visitor EmployerBenefitBenefitPlanTypeVisitor) error {
	if e.typ == "BenefitPlanTypeEnum" || e.BenefitPlanTypeEnum != "" {
		return visitor.VisitBenefitPlanTypeEnum(e.BenefitPlanTypeEnum)
	}
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type PaginatedEmployerBenefitList struct {
	Next     *string            `json:"next,omitempty" url:"next,omitempty"`
	Previous *string            `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*EmployerBenefit `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedEmployerBenefitList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedEmployerBenefitList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedEmployerBenefitList) GetResults() []*EmployerBenefit {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedEmployerBenefitList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedEmployerBenefitList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedEmployerBenefitList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedEmployerBenefitList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedEmployerBenefitList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
