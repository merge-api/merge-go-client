// Code generated by Fern. DO NOT EDIT.

package hris

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type BankInfoListRequest struct {
	// If provided, will only return BankInfo's with this account type. Options: ('SAVINGS', 'CHECKING')
	//
	// * `SAVINGS` - SAVINGS
	// * `CHECKING` - CHECKING
	AccountType *BankInfoListRequestAccountType `json:"-" url:"account_type,omitempty"`
	// If provided, will only return BankInfo's with this bank name.
	BankName *string `json:"-" url:"bank_name,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will only return bank accounts for this employee.
	EmployeeId *string `json:"-" url:"employee_id,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Overrides the default ordering for this endpoint. Possible values include: remote_created_at, -remote_created_at.
	OrderBy *BankInfoListRequestOrderBy `json:"-" url:"order_by,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type BankInfoRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type BankInfoListRequestAccountType string

const (
	BankInfoListRequestAccountTypeChecking BankInfoListRequestAccountType = "CHECKING"
	BankInfoListRequestAccountTypeSavings  BankInfoListRequestAccountType = "SAVINGS"
)

func NewBankInfoListRequestAccountTypeFromString(s string) (BankInfoListRequestAccountType, error) {
	switch s {
	case "CHECKING":
		return BankInfoListRequestAccountTypeChecking, nil
	case "SAVINGS":
		return BankInfoListRequestAccountTypeSavings, nil
	}
	var t BankInfoListRequestAccountType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BankInfoListRequestAccountType) Ptr() *BankInfoListRequestAccountType {
	return &b
}

type BankInfoListRequestOrderBy string

const (
	BankInfoListRequestOrderByRemoteCreatedAtDescending BankInfoListRequestOrderBy = "-remote_created_at"
	BankInfoListRequestOrderByRemoteCreatedAtAscending  BankInfoListRequestOrderBy = "remote_created_at"
)

func NewBankInfoListRequestOrderByFromString(s string) (BankInfoListRequestOrderBy, error) {
	switch s {
	case "-remote_created_at":
		return BankInfoListRequestOrderByRemoteCreatedAtDescending, nil
	case "remote_created_at":
		return BankInfoListRequestOrderByRemoteCreatedAtAscending, nil
	}
	var t BankInfoListRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BankInfoListRequestOrderBy) Ptr() *BankInfoListRequestOrderBy {
	return &b
}

// * `SAVINGS` - SAVINGS
// * `CHECKING` - CHECKING
type AccountTypeEnum string

const (
	AccountTypeEnumSavings  AccountTypeEnum = "SAVINGS"
	AccountTypeEnumChecking AccountTypeEnum = "CHECKING"
)

func NewAccountTypeEnumFromString(s string) (AccountTypeEnum, error) {
	switch s {
	case "SAVINGS":
		return AccountTypeEnumSavings, nil
	case "CHECKING":
		return AccountTypeEnumChecking, nil
	}
	var t AccountTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountTypeEnum) Ptr() *AccountTypeEnum {
	return &a
}

// # The BankInfo Object
// ### Description
// The `BankInfo` object is used to represent the Bank Account information for an Employee.
//
// ### Usage Example
// Fetch from the `LIST BankInfo` endpoint and filter by `ID` to show all bank information.
type BankInfo struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The employee with this bank account.
	Employee *BankInfoEmployee `json:"employee,omitempty" url:"employee,omitempty"`
	// The account number.
	AccountNumber *string `json:"account_number,omitempty" url:"account_number,omitempty"`
	// The routing number.
	RoutingNumber *string `json:"routing_number,omitempty" url:"routing_number,omitempty"`
	// The bank name.
	BankName *string `json:"bank_name,omitempty" url:"bank_name,omitempty"`
	// The bank account type
	//
	// * `SAVINGS` - SAVINGS
	// * `CHECKING` - CHECKING
	AccountType *AccountTypeEnum `json:"account_type,omitempty" url:"account_type,omitempty"`
	// When the matching bank object was created in the third party system.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty" url:"remote_created_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BankInfo) GetId() *string {
	if b == nil {
		return nil
	}
	return b.Id
}

func (b *BankInfo) GetRemoteId() *string {
	if b == nil {
		return nil
	}
	return b.RemoteId
}

func (b *BankInfo) GetCreatedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.CreatedAt
}

func (b *BankInfo) GetModifiedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.ModifiedAt
}

func (b *BankInfo) GetEmployee() *BankInfoEmployee {
	if b == nil {
		return nil
	}
	return b.Employee
}

func (b *BankInfo) GetAccountNumber() *string {
	if b == nil {
		return nil
	}
	return b.AccountNumber
}

func (b *BankInfo) GetRoutingNumber() *string {
	if b == nil {
		return nil
	}
	return b.RoutingNumber
}

func (b *BankInfo) GetBankName() *string {
	if b == nil {
		return nil
	}
	return b.BankName
}

func (b *BankInfo) GetAccountType() *AccountTypeEnum {
	if b == nil {
		return nil
	}
	return b.AccountType
}

func (b *BankInfo) GetRemoteCreatedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.RemoteCreatedAt
}

func (b *BankInfo) GetRemoteWasDeleted() *bool {
	if b == nil {
		return nil
	}
	return b.RemoteWasDeleted
}

func (b *BankInfo) GetFieldMappings() map[string]interface{} {
	if b == nil {
		return nil
	}
	return b.FieldMappings
}

func (b *BankInfo) GetRemoteData() []*RemoteData {
	if b == nil {
		return nil
	}
	return b.RemoteData
}

func (b *BankInfo) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BankInfo) UnmarshalJSON(data []byte) error {
	type embed BankInfo
	var unmarshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BankInfo(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	b.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	b.RemoteCreatedAt = unmarshaler.RemoteCreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BankInfo) MarshalJSON() ([]byte, error) {
	type embed BankInfo
	var marshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
	}{
		embed:           embed(*b),
		CreatedAt:       internal.NewOptionalDateTime(b.CreatedAt),
		ModifiedAt:      internal.NewOptionalDateTime(b.ModifiedAt),
		RemoteCreatedAt: internal.NewOptionalDateTime(b.RemoteCreatedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BankInfo) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The employee with this bank account.
type BankInfoEmployee struct {
	String   string
	Employee *Employee

	typ string
}

func (b *BankInfoEmployee) GetString() string {
	if b == nil {
		return ""
	}
	return b.String
}

func (b *BankInfoEmployee) GetEmployee() *Employee {
	if b == nil {
		return nil
	}
	return b.Employee
}

func (b *BankInfoEmployee) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		b.typ = "String"
		b.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		b.typ = "Employee"
		b.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BankInfoEmployee) MarshalJSON() ([]byte, error) {
	if b.typ == "String" || b.String != "" {
		return json.Marshal(b.String)
	}
	if b.typ == "Employee" || b.Employee != nil {
		return json.Marshal(b.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", b)
}

type BankInfoEmployeeVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (b *BankInfoEmployee) Accept(visitor BankInfoEmployeeVisitor) error {
	if b.typ == "String" || b.String != "" {
		return visitor.VisitString(b.String)
	}
	if b.typ == "Employee" || b.Employee != nil {
		return visitor.VisitEmployee(b.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", b)
}

type PaginatedBankInfoList struct {
	Next     *string     `json:"next,omitempty" url:"next,omitempty"`
	Previous *string     `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*BankInfo `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedBankInfoList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedBankInfoList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedBankInfoList) GetResults() []*BankInfo {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedBankInfoList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedBankInfoList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedBankInfoList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedBankInfoList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedBankInfoList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
