// Code generated by Fern. DO NOT EDIT.

package hris

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type TimesheetEntryEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool                  `json:"-" url:"run_async,omitempty"`
	Model    *TimesheetEntryRequest `json:"model,omitempty" url:"-"`
}

type TimesheetEntriesListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will only return timesheet entries for this employee.
	EmployeeId *string `json:"-" url:"employee_id,omitempty"`
	// If provided, will only return timesheet entries ended after this datetime.
	EndedAfter *time.Time `json:"-" url:"ended_after,omitempty"`
	// If provided, will only return timesheet entries ended before this datetime.
	EndedBefore *time.Time `json:"-" url:"ended_before,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Overrides the default ordering for this endpoint. Possible values include: start_time, -start_time.
	OrderBy *TimesheetEntriesListRequestOrderBy `json:"-" url:"order_by,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// If provided, will only return timesheet entries started after this datetime.
	StartedAfter *time.Time `json:"-" url:"started_after,omitempty"`
	// If provided, will only return timesheet entries started before this datetime.
	StartedBefore *time.Time `json:"-" url:"started_before,omitempty"`
}

type TimesheetEntriesRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

type TimesheetEntriesListRequestOrderBy string

const (
	TimesheetEntriesListRequestOrderByStartTimeDescending TimesheetEntriesListRequestOrderBy = "-start_time"
	TimesheetEntriesListRequestOrderByStartTimeAscending  TimesheetEntriesListRequestOrderBy = "start_time"
)

func NewTimesheetEntriesListRequestOrderByFromString(s string) (TimesheetEntriesListRequestOrderBy, error) {
	switch s {
	case "-start_time":
		return TimesheetEntriesListRequestOrderByStartTimeDescending, nil
	case "start_time":
		return TimesheetEntriesListRequestOrderByStartTimeAscending, nil
	}
	var t TimesheetEntriesListRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TimesheetEntriesListRequestOrderBy) Ptr() *TimesheetEntriesListRequestOrderBy {
	return &t
}

type PaginatedTimesheetEntryList struct {
	Next     *string           `json:"next,omitempty" url:"next,omitempty"`
	Previous *string           `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*TimesheetEntry `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedTimesheetEntryList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedTimesheetEntryList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedTimesheetEntryList) GetResults() []*TimesheetEntry {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedTimesheetEntryList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedTimesheetEntryList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTimesheetEntryList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTimesheetEntryList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTimesheetEntryList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Timesheet Entry Object
// ### Description
// The `Timesheet Entry` object is used to track coverage for hours worked by an 'Employee'.
//
// ### Usage Example
// GET and POST Timesheet Entries
type TimesheetEntry struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The employee the timesheet entry is for.
	Employee *TimesheetEntryEmployee `json:"employee,omitempty" url:"employee,omitempty"`
	// The number of hours logged by the employee.
	HoursWorked *float64 `json:"hours_worked,omitempty" url:"hours_worked,omitempty"`
	// The time at which the employee started work.
	StartTime *time.Time `json:"start_time,omitempty" url:"start_time,omitempty"`
	// The time at which the employee ended work.
	EndTime *time.Time `json:"end_time,omitempty" url:"end_time,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TimesheetEntry) GetId() *string {
	if t == nil {
		return nil
	}
	return t.Id
}

func (t *TimesheetEntry) GetRemoteId() *string {
	if t == nil {
		return nil
	}
	return t.RemoteId
}

func (t *TimesheetEntry) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TimesheetEntry) GetModifiedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.ModifiedAt
}

func (t *TimesheetEntry) GetEmployee() *TimesheetEntryEmployee {
	if t == nil {
		return nil
	}
	return t.Employee
}

func (t *TimesheetEntry) GetHoursWorked() *float64 {
	if t == nil {
		return nil
	}
	return t.HoursWorked
}

func (t *TimesheetEntry) GetStartTime() *time.Time {
	if t == nil {
		return nil
	}
	return t.StartTime
}

func (t *TimesheetEntry) GetEndTime() *time.Time {
	if t == nil {
		return nil
	}
	return t.EndTime
}

func (t *TimesheetEntry) GetRemoteWasDeleted() *bool {
	if t == nil {
		return nil
	}
	return t.RemoteWasDeleted
}

func (t *TimesheetEntry) GetFieldMappings() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.FieldMappings
}

func (t *TimesheetEntry) GetRemoteData() []*RemoteData {
	if t == nil {
		return nil
	}
	return t.RemoteData
}

func (t *TimesheetEntry) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TimesheetEntry) UnmarshalJSON(data []byte) error {
	type embed TimesheetEntry
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
		StartTime  *internal.DateTime `json:"start_time,omitempty"`
		EndTime    *internal.DateTime `json:"end_time,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TimesheetEntry(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	t.StartTime = unmarshaler.StartTime.TimePtr()
	t.EndTime = unmarshaler.EndTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TimesheetEntry) MarshalJSON() ([]byte, error) {
	type embed TimesheetEntry
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
		StartTime  *internal.DateTime `json:"start_time,omitempty"`
		EndTime    *internal.DateTime `json:"end_time,omitempty"`
	}{
		embed:      embed(*t),
		CreatedAt:  internal.NewOptionalDateTime(t.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(t.ModifiedAt),
		StartTime:  internal.NewOptionalDateTime(t.StartTime),
		EndTime:    internal.NewOptionalDateTime(t.EndTime),
	}
	return json.Marshal(marshaler)
}

func (t *TimesheetEntry) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The employee the timesheet entry is for.
type TimesheetEntryEmployee struct {
	String   string
	Employee *Employee

	typ string
}

func (t *TimesheetEntryEmployee) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TimesheetEntryEmployee) GetEmployee() *Employee {
	if t == nil {
		return nil
	}
	return t.Employee
}

func (t *TimesheetEntryEmployee) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		t.typ = "Employee"
		t.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TimesheetEntryEmployee) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return json.Marshal(t.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TimesheetEntryEmployeeVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (t *TimesheetEntryEmployee) Accept(visitor TimesheetEntryEmployeeVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return visitor.VisitEmployee(t.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// # The Timesheet Entry Object
// ### Description
// The `Timesheet Entry` object is used to track coverage for hours worked by an 'Employee'.
//
// ### Usage Example
// GET and POST Timesheet Entries
type TimesheetEntryRequest struct {
	// The employee the timesheet entry is for.
	Employee *TimesheetEntryRequestEmployee `json:"employee,omitempty" url:"employee,omitempty"`
	// The number of hours logged by the employee.
	HoursWorked *float64 `json:"hours_worked,omitempty" url:"hours_worked,omitempty"`
	// The time at which the employee started work.
	StartTime *time.Time `json:"start_time,omitempty" url:"start_time,omitempty"`
	// The time at which the employee ended work.
	EndTime             *time.Time             `json:"end_time,omitempty" url:"end_time,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TimesheetEntryRequest) GetEmployee() *TimesheetEntryRequestEmployee {
	if t == nil {
		return nil
	}
	return t.Employee
}

func (t *TimesheetEntryRequest) GetHoursWorked() *float64 {
	if t == nil {
		return nil
	}
	return t.HoursWorked
}

func (t *TimesheetEntryRequest) GetStartTime() *time.Time {
	if t == nil {
		return nil
	}
	return t.StartTime
}

func (t *TimesheetEntryRequest) GetEndTime() *time.Time {
	if t == nil {
		return nil
	}
	return t.EndTime
}

func (t *TimesheetEntryRequest) GetIntegrationParams() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.IntegrationParams
}

func (t *TimesheetEntryRequest) GetLinkedAccountParams() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.LinkedAccountParams
}

func (t *TimesheetEntryRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TimesheetEntryRequest) UnmarshalJSON(data []byte) error {
	type embed TimesheetEntryRequest
	var unmarshaler = struct {
		embed
		StartTime *internal.DateTime `json:"start_time,omitempty"`
		EndTime   *internal.DateTime `json:"end_time,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TimesheetEntryRequest(unmarshaler.embed)
	t.StartTime = unmarshaler.StartTime.TimePtr()
	t.EndTime = unmarshaler.EndTime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TimesheetEntryRequest) MarshalJSON() ([]byte, error) {
	type embed TimesheetEntryRequest
	var marshaler = struct {
		embed
		StartTime *internal.DateTime `json:"start_time,omitempty"`
		EndTime   *internal.DateTime `json:"end_time,omitempty"`
	}{
		embed:     embed(*t),
		StartTime: internal.NewOptionalDateTime(t.StartTime),
		EndTime:   internal.NewOptionalDateTime(t.EndTime),
	}
	return json.Marshal(marshaler)
}

func (t *TimesheetEntryRequest) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The employee the timesheet entry is for.
type TimesheetEntryRequestEmployee struct {
	String   string
	Employee *Employee

	typ string
}

func (t *TimesheetEntryRequestEmployee) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TimesheetEntryRequestEmployee) GetEmployee() *Employee {
	if t == nil {
		return nil
	}
	return t.Employee
}

func (t *TimesheetEntryRequestEmployee) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueEmployee := new(Employee)
	if err := json.Unmarshal(data, &valueEmployee); err == nil {
		t.typ = "Employee"
		t.Employee = valueEmployee
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TimesheetEntryRequestEmployee) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return json.Marshal(t.Employee)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TimesheetEntryRequestEmployeeVisitor interface {
	VisitString(string) error
	VisitEmployee(*Employee) error
}

func (t *TimesheetEntryRequestEmployee) Accept(visitor TimesheetEntryRequestEmployeeVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Employee" || t.Employee != nil {
		return visitor.VisitEmployee(t.Employee)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TimesheetEntryResponse struct {
	Model    *TimesheetEntry             `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TimesheetEntryResponse) GetModel() *TimesheetEntry {
	if t == nil {
		return nil
	}
	return t.Model
}

func (t *TimesheetEntryResponse) GetWarnings() []*WarningValidationProblem {
	if t == nil {
		return nil
	}
	return t.Warnings
}

func (t *TimesheetEntryResponse) GetErrors() []*ErrorValidationProblem {
	if t == nil {
		return nil
	}
	return t.Errors
}

func (t *TimesheetEntryResponse) GetLogs() []*DebugModeLog {
	if t == nil {
		return nil
	}
	return t.Logs
}

func (t *TimesheetEntryResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TimesheetEntryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TimesheetEntryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TimesheetEntryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TimesheetEntryResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
