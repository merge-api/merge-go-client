// Code generated by Fern. DO NOT EDIT.

package ats

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type ActivityEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync     *bool            `json:"-" url:"run_async,omitempty"`
	Model        *ActivityRequest `json:"model,omitempty" url:"-"`
	RemoteUserId string           `json:"remote_user_id" url:"-"`
}

type ActivitiesListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *ActivitiesListRequestRemoteFields `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *ActivitiesListRequestShowEnumOrigins `json:"-" url:"show_enum_origins,omitempty"`
	// If provided, will only return activities done by this user.
	UserId *string `json:"-" url:"user_id,omitempty"`
}

type ActivitiesRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *ActivitiesRetrieveRequestRemoteFields `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *ActivitiesRetrieveRequestShowEnumOrigins `json:"-" url:"show_enum_origins,omitempty"`
}

type ActivitiesListRequestRemoteFields string

const (
	ActivitiesListRequestRemoteFieldsActivityType           ActivitiesListRequestRemoteFields = "activity_type"
	ActivitiesListRequestRemoteFieldsActivityTypeVisibility ActivitiesListRequestRemoteFields = "activity_type,visibility"
	ActivitiesListRequestRemoteFieldsVisibility             ActivitiesListRequestRemoteFields = "visibility"
)

func NewActivitiesListRequestRemoteFieldsFromString(s string) (ActivitiesListRequestRemoteFields, error) {
	switch s {
	case "activity_type":
		return ActivitiesListRequestRemoteFieldsActivityType, nil
	case "activity_type,visibility":
		return ActivitiesListRequestRemoteFieldsActivityTypeVisibility, nil
	case "visibility":
		return ActivitiesListRequestRemoteFieldsVisibility, nil
	}
	var t ActivitiesListRequestRemoteFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActivitiesListRequestRemoteFields) Ptr() *ActivitiesListRequestRemoteFields {
	return &a
}

type ActivitiesListRequestShowEnumOrigins string

const (
	ActivitiesListRequestShowEnumOriginsActivityType           ActivitiesListRequestShowEnumOrigins = "activity_type"
	ActivitiesListRequestShowEnumOriginsActivityTypeVisibility ActivitiesListRequestShowEnumOrigins = "activity_type,visibility"
	ActivitiesListRequestShowEnumOriginsVisibility             ActivitiesListRequestShowEnumOrigins = "visibility"
)

func NewActivitiesListRequestShowEnumOriginsFromString(s string) (ActivitiesListRequestShowEnumOrigins, error) {
	switch s {
	case "activity_type":
		return ActivitiesListRequestShowEnumOriginsActivityType, nil
	case "activity_type,visibility":
		return ActivitiesListRequestShowEnumOriginsActivityTypeVisibility, nil
	case "visibility":
		return ActivitiesListRequestShowEnumOriginsVisibility, nil
	}
	var t ActivitiesListRequestShowEnumOrigins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActivitiesListRequestShowEnumOrigins) Ptr() *ActivitiesListRequestShowEnumOrigins {
	return &a
}

type ActivitiesRetrieveRequestRemoteFields string

const (
	ActivitiesRetrieveRequestRemoteFieldsActivityType           ActivitiesRetrieveRequestRemoteFields = "activity_type"
	ActivitiesRetrieveRequestRemoteFieldsActivityTypeVisibility ActivitiesRetrieveRequestRemoteFields = "activity_type,visibility"
	ActivitiesRetrieveRequestRemoteFieldsVisibility             ActivitiesRetrieveRequestRemoteFields = "visibility"
)

func NewActivitiesRetrieveRequestRemoteFieldsFromString(s string) (ActivitiesRetrieveRequestRemoteFields, error) {
	switch s {
	case "activity_type":
		return ActivitiesRetrieveRequestRemoteFieldsActivityType, nil
	case "activity_type,visibility":
		return ActivitiesRetrieveRequestRemoteFieldsActivityTypeVisibility, nil
	case "visibility":
		return ActivitiesRetrieveRequestRemoteFieldsVisibility, nil
	}
	var t ActivitiesRetrieveRequestRemoteFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActivitiesRetrieveRequestRemoteFields) Ptr() *ActivitiesRetrieveRequestRemoteFields {
	return &a
}

type ActivitiesRetrieveRequestShowEnumOrigins string

const (
	ActivitiesRetrieveRequestShowEnumOriginsActivityType           ActivitiesRetrieveRequestShowEnumOrigins = "activity_type"
	ActivitiesRetrieveRequestShowEnumOriginsActivityTypeVisibility ActivitiesRetrieveRequestShowEnumOrigins = "activity_type,visibility"
	ActivitiesRetrieveRequestShowEnumOriginsVisibility             ActivitiesRetrieveRequestShowEnumOrigins = "visibility"
)

func NewActivitiesRetrieveRequestShowEnumOriginsFromString(s string) (ActivitiesRetrieveRequestShowEnumOrigins, error) {
	switch s {
	case "activity_type":
		return ActivitiesRetrieveRequestShowEnumOriginsActivityType, nil
	case "activity_type,visibility":
		return ActivitiesRetrieveRequestShowEnumOriginsActivityTypeVisibility, nil
	case "visibility":
		return ActivitiesRetrieveRequestShowEnumOriginsVisibility, nil
	}
	var t ActivitiesRetrieveRequestShowEnumOrigins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActivitiesRetrieveRequestShowEnumOrigins) Ptr() *ActivitiesRetrieveRequestShowEnumOrigins {
	return &a
}

// # The Activity Object
// ### Description
// The `Activity` object is used to represent an activity for a candidate performed by a user.
// ### Usage Example
// Fetch from the `LIST Activities` endpoint and filter by `ID` to show all activities.
type Activity struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The user that performed the action.
	User *ActivityUser `json:"user,omitempty" url:"user,omitempty"`
	// When the third party's activity was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty" url:"remote_created_at,omitempty"`
	// The activity's type.
	//
	// * `NOTE` - NOTE
	// * `EMAIL` - EMAIL
	// * `OTHER` - OTHER
	ActivityType *ActivityActivityType `json:"activity_type,omitempty" url:"activity_type,omitempty"`
	// The activity's subject.
	Subject *string `json:"subject,omitempty" url:"subject,omitempty"`
	// The activity's body.
	Body *string `json:"body,omitempty" url:"body,omitempty"`
	// The activity's visibility.
	//
	// * `ADMIN_ONLY` - ADMIN_ONLY
	// * `PUBLIC` - PUBLIC
	// * `PRIVATE` - PRIVATE
	Visibility *ActivityVisibility `json:"visibility,omitempty" url:"visibility,omitempty"`
	Candidate  *string             `json:"candidate,omitempty" url:"candidate,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Activity) GetId() *string {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *Activity) GetRemoteId() *string {
	if a == nil {
		return nil
	}
	return a.RemoteId
}

func (a *Activity) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *Activity) GetModifiedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ModifiedAt
}

func (a *Activity) GetUser() *ActivityUser {
	if a == nil {
		return nil
	}
	return a.User
}

func (a *Activity) GetRemoteCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.RemoteCreatedAt
}

func (a *Activity) GetActivityType() *ActivityActivityType {
	if a == nil {
		return nil
	}
	return a.ActivityType
}

func (a *Activity) GetSubject() *string {
	if a == nil {
		return nil
	}
	return a.Subject
}

func (a *Activity) GetBody() *string {
	if a == nil {
		return nil
	}
	return a.Body
}

func (a *Activity) GetVisibility() *ActivityVisibility {
	if a == nil {
		return nil
	}
	return a.Visibility
}

func (a *Activity) GetCandidate() *string {
	if a == nil {
		return nil
	}
	return a.Candidate
}

func (a *Activity) GetRemoteWasDeleted() *bool {
	if a == nil {
		return nil
	}
	return a.RemoteWasDeleted
}

func (a *Activity) GetFieldMappings() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.FieldMappings
}

func (a *Activity) GetRemoteData() []*RemoteData {
	if a == nil {
		return nil
	}
	return a.RemoteData
}

func (a *Activity) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Activity) UnmarshalJSON(data []byte) error {
	type embed Activity
	var unmarshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Activity(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	a.RemoteCreatedAt = unmarshaler.RemoteCreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Activity) MarshalJSON() ([]byte, error) {
	type embed Activity
	var marshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
	}{
		embed:           embed(*a),
		CreatedAt:       internal.NewOptionalDateTime(a.CreatedAt),
		ModifiedAt:      internal.NewOptionalDateTime(a.ModifiedAt),
		RemoteCreatedAt: internal.NewOptionalDateTime(a.RemoteCreatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *Activity) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The activity's type.
//
// * `NOTE` - NOTE
// * `EMAIL` - EMAIL
// * `OTHER` - OTHER
type ActivityActivityType struct {
	ActivityTypeEnum ActivityTypeEnum
	String           string

	typ string
}

func (a *ActivityActivityType) GetActivityTypeEnum() ActivityTypeEnum {
	if a == nil {
		return ""
	}
	return a.ActivityTypeEnum
}

func (a *ActivityActivityType) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *ActivityActivityType) UnmarshalJSON(data []byte) error {
	var valueActivityTypeEnum ActivityTypeEnum
	if err := json.Unmarshal(data, &valueActivityTypeEnum); err == nil {
		a.typ = "ActivityTypeEnum"
		a.ActivityTypeEnum = valueActivityTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActivityActivityType) MarshalJSON() ([]byte, error) {
	if a.typ == "ActivityTypeEnum" || a.ActivityTypeEnum != "" {
		return json.Marshal(a.ActivityTypeEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ActivityActivityTypeVisitor interface {
	VisitActivityTypeEnum(ActivityTypeEnum) error
	VisitString(string) error
}

func (a *ActivityActivityType) Accept(visitor ActivityActivityTypeVisitor) error {
	if a.typ == "ActivityTypeEnum" || a.ActivityTypeEnum != "" {
		return visitor.VisitActivityTypeEnum(a.ActivityTypeEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// # The Activity Object
// ### Description
// The `Activity` object is used to represent an activity for a candidate performed by a user.
// ### Usage Example
// Fetch from the `LIST Activities` endpoint and filter by `ID` to show all activities.
type ActivityRequest struct {
	// The user that performed the action.
	User *ActivityRequestUser `json:"user,omitempty" url:"user,omitempty"`
	// The activity's type.
	//
	// * `NOTE` - NOTE
	// * `EMAIL` - EMAIL
	// * `OTHER` - OTHER
	ActivityType *ActivityTypeEnum `json:"activity_type,omitempty" url:"activity_type,omitempty"`
	// The activity's subject.
	Subject *string `json:"subject,omitempty" url:"subject,omitempty"`
	// The activity's body.
	Body *string `json:"body,omitempty" url:"body,omitempty"`
	// The activity's visibility.
	//
	// * `ADMIN_ONLY` - ADMIN_ONLY
	// * `PUBLIC` - PUBLIC
	// * `PRIVATE` - PRIVATE
	Visibility          *ActivityRequestVisibility `json:"visibility,omitempty" url:"visibility,omitempty"`
	Candidate           *string                    `json:"candidate,omitempty" url:"candidate,omitempty"`
	IntegrationParams   map[string]interface{}     `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}     `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActivityRequest) GetUser() *ActivityRequestUser {
	if a == nil {
		return nil
	}
	return a.User
}

func (a *ActivityRequest) GetActivityType() *ActivityTypeEnum {
	if a == nil {
		return nil
	}
	return a.ActivityType
}

func (a *ActivityRequest) GetSubject() *string {
	if a == nil {
		return nil
	}
	return a.Subject
}

func (a *ActivityRequest) GetBody() *string {
	if a == nil {
		return nil
	}
	return a.Body
}

func (a *ActivityRequest) GetVisibility() *ActivityRequestVisibility {
	if a == nil {
		return nil
	}
	return a.Visibility
}

func (a *ActivityRequest) GetCandidate() *string {
	if a == nil {
		return nil
	}
	return a.Candidate
}

func (a *ActivityRequest) GetIntegrationParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.IntegrationParams
}

func (a *ActivityRequest) GetLinkedAccountParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.LinkedAccountParams
}

func (a *ActivityRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActivityRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ActivityRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActivityRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActivityRequest) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The user that performed the action.
type ActivityRequestUser struct {
	String     string
	RemoteUser *RemoteUser

	typ string
}

func (a *ActivityRequestUser) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *ActivityRequestUser) GetRemoteUser() *RemoteUser {
	if a == nil {
		return nil
	}
	return a.RemoteUser
}

func (a *ActivityRequestUser) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		a.typ = "RemoteUser"
		a.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActivityRequestUser) MarshalJSON() ([]byte, error) {
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	if a.typ == "RemoteUser" || a.RemoteUser != nil {
		return json.Marshal(a.RemoteUser)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ActivityRequestUserVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (a *ActivityRequestUser) Accept(visitor ActivityRequestUserVisitor) error {
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	if a.typ == "RemoteUser" || a.RemoteUser != nil {
		return visitor.VisitRemoteUser(a.RemoteUser)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// The activity's visibility.
//
// * `ADMIN_ONLY` - ADMIN_ONLY
// * `PUBLIC` - PUBLIC
// * `PRIVATE` - PRIVATE
type ActivityRequestVisibility struct {
	VisibilityEnum VisibilityEnum
	String         string

	typ string
}

func (a *ActivityRequestVisibility) GetVisibilityEnum() VisibilityEnum {
	if a == nil {
		return ""
	}
	return a.VisibilityEnum
}

func (a *ActivityRequestVisibility) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *ActivityRequestVisibility) UnmarshalJSON(data []byte) error {
	var valueVisibilityEnum VisibilityEnum
	if err := json.Unmarshal(data, &valueVisibilityEnum); err == nil {
		a.typ = "VisibilityEnum"
		a.VisibilityEnum = valueVisibilityEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActivityRequestVisibility) MarshalJSON() ([]byte, error) {
	if a.typ == "VisibilityEnum" || a.VisibilityEnum != "" {
		return json.Marshal(a.VisibilityEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ActivityRequestVisibilityVisitor interface {
	VisitVisibilityEnum(VisibilityEnum) error
	VisitString(string) error
}

func (a *ActivityRequestVisibility) Accept(visitor ActivityRequestVisibilityVisitor) error {
	if a.typ == "VisibilityEnum" || a.VisibilityEnum != "" {
		return visitor.VisitVisibilityEnum(a.VisibilityEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ActivityResponse struct {
	Model    *Activity                   `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActivityResponse) GetModel() *Activity {
	if a == nil {
		return nil
	}
	return a.Model
}

func (a *ActivityResponse) GetWarnings() []*WarningValidationProblem {
	if a == nil {
		return nil
	}
	return a.Warnings
}

func (a *ActivityResponse) GetErrors() []*ErrorValidationProblem {
	if a == nil {
		return nil
	}
	return a.Errors
}

func (a *ActivityResponse) GetLogs() []*DebugModeLog {
	if a == nil {
		return nil
	}
	return a.Logs
}

func (a *ActivityResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActivityResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActivityResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActivityResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActivityResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// * `NOTE` - NOTE
// * `EMAIL` - EMAIL
// * `OTHER` - OTHER
type ActivityTypeEnum string

const (
	ActivityTypeEnumNote  ActivityTypeEnum = "NOTE"
	ActivityTypeEnumEmail ActivityTypeEnum = "EMAIL"
	ActivityTypeEnumOther ActivityTypeEnum = "OTHER"
)

func NewActivityTypeEnumFromString(s string) (ActivityTypeEnum, error) {
	switch s {
	case "NOTE":
		return ActivityTypeEnumNote, nil
	case "EMAIL":
		return ActivityTypeEnumEmail, nil
	case "OTHER":
		return ActivityTypeEnumOther, nil
	}
	var t ActivityTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActivityTypeEnum) Ptr() *ActivityTypeEnum {
	return &a
}

// The user that performed the action.
type ActivityUser struct {
	String     string
	RemoteUser *RemoteUser

	typ string
}

func (a *ActivityUser) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *ActivityUser) GetRemoteUser() *RemoteUser {
	if a == nil {
		return nil
	}
	return a.RemoteUser
}

func (a *ActivityUser) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		a.typ = "RemoteUser"
		a.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActivityUser) MarshalJSON() ([]byte, error) {
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	if a.typ == "RemoteUser" || a.RemoteUser != nil {
		return json.Marshal(a.RemoteUser)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ActivityUserVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (a *ActivityUser) Accept(visitor ActivityUserVisitor) error {
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	if a.typ == "RemoteUser" || a.RemoteUser != nil {
		return visitor.VisitRemoteUser(a.RemoteUser)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// The activity's visibility.
//
// * `ADMIN_ONLY` - ADMIN_ONLY
// * `PUBLIC` - PUBLIC
// * `PRIVATE` - PRIVATE
type ActivityVisibility struct {
	VisibilityEnum VisibilityEnum
	String         string

	typ string
}

func (a *ActivityVisibility) GetVisibilityEnum() VisibilityEnum {
	if a == nil {
		return ""
	}
	return a.VisibilityEnum
}

func (a *ActivityVisibility) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *ActivityVisibility) UnmarshalJSON(data []byte) error {
	var valueVisibilityEnum VisibilityEnum
	if err := json.Unmarshal(data, &valueVisibilityEnum); err == nil {
		a.typ = "VisibilityEnum"
		a.VisibilityEnum = valueVisibilityEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActivityVisibility) MarshalJSON() ([]byte, error) {
	if a.typ == "VisibilityEnum" || a.VisibilityEnum != "" {
		return json.Marshal(a.VisibilityEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ActivityVisibilityVisitor interface {
	VisitVisibilityEnum(VisibilityEnum) error
	VisitString(string) error
}

func (a *ActivityVisibility) Accept(visitor ActivityVisibilityVisitor) error {
	if a.typ == "VisibilityEnum" || a.VisibilityEnum != "" {
		return visitor.VisitVisibilityEnum(a.VisibilityEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type PaginatedActivityList struct {
	Next     *string     `json:"next,omitempty" url:"next,omitempty"`
	Previous *string     `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Activity `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedActivityList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedActivityList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedActivityList) GetResults() []*Activity {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedActivityList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedActivityList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedActivityList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedActivityList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedActivityList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// * `ADMIN_ONLY` - ADMIN_ONLY
// * `PUBLIC` - PUBLIC
// * `PRIVATE` - PRIVATE
type VisibilityEnum string

const (
	VisibilityEnumAdminOnly VisibilityEnum = "ADMIN_ONLY"
	VisibilityEnumPublic    VisibilityEnum = "PUBLIC"
	VisibilityEnumPrivate   VisibilityEnum = "PRIVATE"
)

func NewVisibilityEnumFromString(s string) (VisibilityEnum, error) {
	switch s {
	case "ADMIN_ONLY":
		return VisibilityEnumAdminOnly, nil
	case "PUBLIC":
		return VisibilityEnumPublic, nil
	case "PRIVATE":
		return VisibilityEnumPrivate, nil
	}
	var t VisibilityEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VisibilityEnum) Ptr() *VisibilityEnum {
	return &v
}
