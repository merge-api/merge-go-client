// Code generated by Fern. DO NOT EDIT.

package ats

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type ScheduledInterviewEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync     *bool                      `json:"-" url:"run_async,omitempty"`
	Model        *ScheduledInterviewRequest `json:"model,omitempty" url:"-"`
	RemoteUserId string                     `json:"remote_user_id" url:"-"`
}

type InterviewsListRequest struct {
	// If provided, will only return interviews for this application.
	ApplicationId *string `json:"-" url:"application_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*InterviewsListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, wll only return interviews organized for this job.
	JobId *string `json:"-" url:"job_id,omitempty"`
	// If provided, will only return interviews at this stage.
	JobInterviewStageId *string `json:"-" url:"job_interview_stage_id,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// If provided, will only return interviews organized by this user.
	OrganizerId *string `json:"-" url:"organizer_id,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type InterviewsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*InterviewsRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type InterviewsListRequestExpandItem string

const (
	InterviewsListRequestExpandItemApplication       InterviewsListRequestExpandItem = "application"
	InterviewsListRequestExpandItemInterviewers      InterviewsListRequestExpandItem = "interviewers"
	InterviewsListRequestExpandItemJobInterviewStage InterviewsListRequestExpandItem = "job_interview_stage"
	InterviewsListRequestExpandItemOrganizer         InterviewsListRequestExpandItem = "organizer"
)

func NewInterviewsListRequestExpandItemFromString(s string) (InterviewsListRequestExpandItem, error) {
	switch s {
	case "application":
		return InterviewsListRequestExpandItemApplication, nil
	case "interviewers":
		return InterviewsListRequestExpandItemInterviewers, nil
	case "job_interview_stage":
		return InterviewsListRequestExpandItemJobInterviewStage, nil
	case "organizer":
		return InterviewsListRequestExpandItemOrganizer, nil
	}
	var t InterviewsListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InterviewsListRequestExpandItem) Ptr() *InterviewsListRequestExpandItem {
	return &i
}

type InterviewsRetrieveRequestExpandItem string

const (
	InterviewsRetrieveRequestExpandItemApplication       InterviewsRetrieveRequestExpandItem = "application"
	InterviewsRetrieveRequestExpandItemInterviewers      InterviewsRetrieveRequestExpandItem = "interviewers"
	InterviewsRetrieveRequestExpandItemJobInterviewStage InterviewsRetrieveRequestExpandItem = "job_interview_stage"
	InterviewsRetrieveRequestExpandItemOrganizer         InterviewsRetrieveRequestExpandItem = "organizer"
)

func NewInterviewsRetrieveRequestExpandItemFromString(s string) (InterviewsRetrieveRequestExpandItem, error) {
	switch s {
	case "application":
		return InterviewsRetrieveRequestExpandItemApplication, nil
	case "interviewers":
		return InterviewsRetrieveRequestExpandItemInterviewers, nil
	case "job_interview_stage":
		return InterviewsRetrieveRequestExpandItemJobInterviewStage, nil
	case "organizer":
		return InterviewsRetrieveRequestExpandItemOrganizer, nil
	}
	var t InterviewsRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InterviewsRetrieveRequestExpandItem) Ptr() *InterviewsRetrieveRequestExpandItem {
	return &i
}

type PaginatedScheduledInterviewList struct {
	Next     *string               `json:"next,omitempty" url:"next,omitempty"`
	Previous *string               `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*ScheduledInterview `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedScheduledInterviewList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedScheduledInterviewList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedScheduledInterviewList) GetResults() []*ScheduledInterview {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedScheduledInterviewList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedScheduledInterviewList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedScheduledInterviewList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedScheduledInterviewList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedScheduledInterviewList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The ScheduledInterview Object
// ### Description
// The `ScheduledInterview` object is used to represent a scheduled interview for a given candidateâ€™s application to a job. An `Application` can have multiple `ScheduledInterview`s depending on the particular hiring process.
// ### Usage Example
// Fetch from the `LIST ScheduledInterviews` endpoint and filter by `interviewers` to show all office locations.
type ScheduledInterviewRequest struct {
	// The application being interviewed.
	Application *ScheduledInterviewRequestApplication `json:"application,omitempty" url:"application,omitempty"`
	// The stage of the interview.
	JobInterviewStage *ScheduledInterviewRequestJobInterviewStage `json:"job_interview_stage,omitempty" url:"job_interview_stage,omitempty"`
	// The user organizing the interview.
	Organizer *ScheduledInterviewRequestOrganizer `json:"organizer,omitempty" url:"organizer,omitempty"`
	// Array of `RemoteUser` IDs.
	Interviewers []*ScheduledInterviewRequestInterviewersItem `json:"interviewers,omitempty" url:"interviewers,omitempty"`
	// The interview's location.
	Location *string `json:"location,omitempty" url:"location,omitempty"`
	// When the interview was started.
	StartAt *time.Time `json:"start_at,omitempty" url:"start_at,omitempty"`
	// When the interview was ended.
	EndAt *time.Time `json:"end_at,omitempty" url:"end_at,omitempty"`
	// The interview's status.
	//
	// * `SCHEDULED` - SCHEDULED
	// * `AWAITING_FEEDBACK` - AWAITING_FEEDBACK
	// * `COMPLETE` - COMPLETE
	Status              *ScheduledInterviewStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	IntegrationParams   map[string]interface{}        `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}        `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ScheduledInterviewRequest) GetApplication() *ScheduledInterviewRequestApplication {
	if s == nil {
		return nil
	}
	return s.Application
}

func (s *ScheduledInterviewRequest) GetJobInterviewStage() *ScheduledInterviewRequestJobInterviewStage {
	if s == nil {
		return nil
	}
	return s.JobInterviewStage
}

func (s *ScheduledInterviewRequest) GetOrganizer() *ScheduledInterviewRequestOrganizer {
	if s == nil {
		return nil
	}
	return s.Organizer
}

func (s *ScheduledInterviewRequest) GetInterviewers() []*ScheduledInterviewRequestInterviewersItem {
	if s == nil {
		return nil
	}
	return s.Interviewers
}

func (s *ScheduledInterviewRequest) GetLocation() *string {
	if s == nil {
		return nil
	}
	return s.Location
}

func (s *ScheduledInterviewRequest) GetStartAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.StartAt
}

func (s *ScheduledInterviewRequest) GetEndAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.EndAt
}

func (s *ScheduledInterviewRequest) GetStatus() *ScheduledInterviewStatusEnum {
	if s == nil {
		return nil
	}
	return s.Status
}

func (s *ScheduledInterviewRequest) GetIntegrationParams() map[string]interface{} {
	if s == nil {
		return nil
	}
	return s.IntegrationParams
}

func (s *ScheduledInterviewRequest) GetLinkedAccountParams() map[string]interface{} {
	if s == nil {
		return nil
	}
	return s.LinkedAccountParams
}

func (s *ScheduledInterviewRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ScheduledInterviewRequest) UnmarshalJSON(data []byte) error {
	type embed ScheduledInterviewRequest
	var unmarshaler = struct {
		embed
		StartAt *internal.DateTime `json:"start_at,omitempty"`
		EndAt   *internal.DateTime `json:"end_at,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = ScheduledInterviewRequest(unmarshaler.embed)
	s.StartAt = unmarshaler.StartAt.TimePtr()
	s.EndAt = unmarshaler.EndAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScheduledInterviewRequest) MarshalJSON() ([]byte, error) {
	type embed ScheduledInterviewRequest
	var marshaler = struct {
		embed
		StartAt *internal.DateTime `json:"start_at,omitempty"`
		EndAt   *internal.DateTime `json:"end_at,omitempty"`
	}{
		embed:   embed(*s),
		StartAt: internal.NewOptionalDateTime(s.StartAt),
		EndAt:   internal.NewOptionalDateTime(s.EndAt),
	}
	return json.Marshal(marshaler)
}

func (s *ScheduledInterviewRequest) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The application being interviewed.
type ScheduledInterviewRequestApplication struct {
	String      string
	Application *Application

	typ string
}

func (s *ScheduledInterviewRequestApplication) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *ScheduledInterviewRequestApplication) GetApplication() *Application {
	if s == nil {
		return nil
	}
	return s.Application
}

func (s *ScheduledInterviewRequestApplication) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	valueApplication := new(Application)
	if err := json.Unmarshal(data, &valueApplication); err == nil {
		s.typ = "Application"
		s.Application = valueApplication
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewRequestApplication) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "Application" || s.Application != nil {
		return json.Marshal(s.Application)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ScheduledInterviewRequestApplicationVisitor interface {
	VisitString(string) error
	VisitApplication(*Application) error
}

func (s *ScheduledInterviewRequestApplication) Accept(visitor ScheduledInterviewRequestApplicationVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "Application" || s.Application != nil {
		return visitor.VisitApplication(s.Application)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ScheduledInterviewRequestInterviewersItem struct {
	String     string
	RemoteUser *RemoteUser

	typ string
}

func (s *ScheduledInterviewRequestInterviewersItem) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *ScheduledInterviewRequestInterviewersItem) GetRemoteUser() *RemoteUser {
	if s == nil {
		return nil
	}
	return s.RemoteUser
}

func (s *ScheduledInterviewRequestInterviewersItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		s.typ = "RemoteUser"
		s.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewRequestInterviewersItem) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "RemoteUser" || s.RemoteUser != nil {
		return json.Marshal(s.RemoteUser)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ScheduledInterviewRequestInterviewersItemVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (s *ScheduledInterviewRequestInterviewersItem) Accept(visitor ScheduledInterviewRequestInterviewersItemVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "RemoteUser" || s.RemoteUser != nil {
		return visitor.VisitRemoteUser(s.RemoteUser)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// The stage of the interview.
type ScheduledInterviewRequestJobInterviewStage struct {
	String            string
	JobInterviewStage *JobInterviewStage

	typ string
}

func (s *ScheduledInterviewRequestJobInterviewStage) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *ScheduledInterviewRequestJobInterviewStage) GetJobInterviewStage() *JobInterviewStage {
	if s == nil {
		return nil
	}
	return s.JobInterviewStage
}

func (s *ScheduledInterviewRequestJobInterviewStage) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	valueJobInterviewStage := new(JobInterviewStage)
	if err := json.Unmarshal(data, &valueJobInterviewStage); err == nil {
		s.typ = "JobInterviewStage"
		s.JobInterviewStage = valueJobInterviewStage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewRequestJobInterviewStage) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "JobInterviewStage" || s.JobInterviewStage != nil {
		return json.Marshal(s.JobInterviewStage)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ScheduledInterviewRequestJobInterviewStageVisitor interface {
	VisitString(string) error
	VisitJobInterviewStage(*JobInterviewStage) error
}

func (s *ScheduledInterviewRequestJobInterviewStage) Accept(visitor ScheduledInterviewRequestJobInterviewStageVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "JobInterviewStage" || s.JobInterviewStage != nil {
		return visitor.VisitJobInterviewStage(s.JobInterviewStage)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// The user organizing the interview.
type ScheduledInterviewRequestOrganizer struct {
	String     string
	RemoteUser *RemoteUser

	typ string
}

func (s *ScheduledInterviewRequestOrganizer) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *ScheduledInterviewRequestOrganizer) GetRemoteUser() *RemoteUser {
	if s == nil {
		return nil
	}
	return s.RemoteUser
}

func (s *ScheduledInterviewRequestOrganizer) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		s.typ = "RemoteUser"
		s.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewRequestOrganizer) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "RemoteUser" || s.RemoteUser != nil {
		return json.Marshal(s.RemoteUser)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ScheduledInterviewRequestOrganizerVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (s *ScheduledInterviewRequestOrganizer) Accept(visitor ScheduledInterviewRequestOrganizerVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "RemoteUser" || s.RemoteUser != nil {
		return visitor.VisitRemoteUser(s.RemoteUser)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ScheduledInterviewResponse struct {
	Model    *ScheduledInterview         `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ScheduledInterviewResponse) GetModel() *ScheduledInterview {
	if s == nil {
		return nil
	}
	return s.Model
}

func (s *ScheduledInterviewResponse) GetWarnings() []*WarningValidationProblem {
	if s == nil {
		return nil
	}
	return s.Warnings
}

func (s *ScheduledInterviewResponse) GetErrors() []*ErrorValidationProblem {
	if s == nil {
		return nil
	}
	return s.Errors
}

func (s *ScheduledInterviewResponse) GetLogs() []*DebugModeLog {
	if s == nil {
		return nil
	}
	return s.Logs
}

func (s *ScheduledInterviewResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ScheduledInterviewResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ScheduledInterviewResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScheduledInterviewResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScheduledInterviewResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
