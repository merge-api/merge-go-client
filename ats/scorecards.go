// Code generated by Fern. DO NOT EDIT.

package ats

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type ScorecardsListRequest struct {
	// If provided, will only return scorecards for this application.
	ApplicationId *string `json:"-" url:"application_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*ScorecardsListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return scorecards for this interview.
	InterviewId *string `json:"-" url:"interview_id,omitempty"`
	// If provided, will only return scorecards for this interviewer.
	InterviewerId *string `json:"-" url:"interviewer_id,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type ScorecardsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*ScorecardsRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type ScorecardsListRequestExpandItem string

const (
	ScorecardsListRequestExpandItemApplication ScorecardsListRequestExpandItem = "application"
	ScorecardsListRequestExpandItemInterview   ScorecardsListRequestExpandItem = "interview"
	ScorecardsListRequestExpandItemInterviewer ScorecardsListRequestExpandItem = "interviewer"
)

func NewScorecardsListRequestExpandItemFromString(s string) (ScorecardsListRequestExpandItem, error) {
	switch s {
	case "application":
		return ScorecardsListRequestExpandItemApplication, nil
	case "interview":
		return ScorecardsListRequestExpandItemInterview, nil
	case "interviewer":
		return ScorecardsListRequestExpandItemInterviewer, nil
	}
	var t ScorecardsListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ScorecardsListRequestExpandItem) Ptr() *ScorecardsListRequestExpandItem {
	return &s
}

type ScorecardsRetrieveRequestExpandItem string

const (
	ScorecardsRetrieveRequestExpandItemApplication ScorecardsRetrieveRequestExpandItem = "application"
	ScorecardsRetrieveRequestExpandItemInterview   ScorecardsRetrieveRequestExpandItem = "interview"
	ScorecardsRetrieveRequestExpandItemInterviewer ScorecardsRetrieveRequestExpandItem = "interviewer"
)

func NewScorecardsRetrieveRequestExpandItemFromString(s string) (ScorecardsRetrieveRequestExpandItem, error) {
	switch s {
	case "application":
		return ScorecardsRetrieveRequestExpandItemApplication, nil
	case "interview":
		return ScorecardsRetrieveRequestExpandItemInterview, nil
	case "interviewer":
		return ScorecardsRetrieveRequestExpandItemInterviewer, nil
	}
	var t ScorecardsRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ScorecardsRetrieveRequestExpandItem) Ptr() *ScorecardsRetrieveRequestExpandItem {
	return &s
}

// * `DEFINITELY_NO` - DEFINITELY_NO
// * `NO` - NO
// * `YES` - YES
// * `STRONG_YES` - STRONG_YES
// * `NO_DECISION` - NO_DECISION
type OverallRecommendationEnum string

const (
	OverallRecommendationEnumDefinitelyNo OverallRecommendationEnum = "DEFINITELY_NO"
	OverallRecommendationEnumNo           OverallRecommendationEnum = "NO"
	OverallRecommendationEnumYes          OverallRecommendationEnum = "YES"
	OverallRecommendationEnumStrongYes    OverallRecommendationEnum = "STRONG_YES"
	OverallRecommendationEnumNoDecision   OverallRecommendationEnum = "NO_DECISION"
)

func NewOverallRecommendationEnumFromString(s string) (OverallRecommendationEnum, error) {
	switch s {
	case "DEFINITELY_NO":
		return OverallRecommendationEnumDefinitelyNo, nil
	case "NO":
		return OverallRecommendationEnumNo, nil
	case "YES":
		return OverallRecommendationEnumYes, nil
	case "STRONG_YES":
		return OverallRecommendationEnumStrongYes, nil
	case "NO_DECISION":
		return OverallRecommendationEnumNoDecision, nil
	}
	var t OverallRecommendationEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OverallRecommendationEnum) Ptr() *OverallRecommendationEnum {
	return &o
}

type PaginatedScorecardList struct {
	Next     *string      `json:"next,omitempty" url:"next,omitempty"`
	Previous *string      `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Scorecard `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedScorecardList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedScorecardList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedScorecardList) GetResults() []*Scorecard {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedScorecardList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedScorecardList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedScorecardList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedScorecardList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedScorecardList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Scorecard Object
// ### Description
// The `Scorecard` object is used to represent an interviewer's candidate recommendation based on a particular interview.
// ### Usage Example
// Fetch from the `LIST Scorecards` endpoint and filter by `application` to show all scorecard for an applicant.
type Scorecard struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The application being scored.
	Application *ScorecardApplication `json:"application,omitempty" url:"application,omitempty"`
	// The interview being scored.
	Interview *ScorecardInterview `json:"interview,omitempty" url:"interview,omitempty"`
	// The interviewer doing the scoring.
	Interviewer *ScorecardInterviewer `json:"interviewer,omitempty" url:"interviewer,omitempty"`
	// When the third party's scorecard was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty" url:"remote_created_at,omitempty"`
	// When the scorecard was submitted.
	SubmittedAt *time.Time `json:"submitted_at,omitempty" url:"submitted_at,omitempty"`
	// The inteviewer's recommendation.
	//
	// * `DEFINITELY_NO` - DEFINITELY_NO
	// * `NO` - NO
	// * `YES` - YES
	// * `STRONG_YES` - STRONG_YES
	// * `NO_DECISION` - NO_DECISION
	OverallRecommendation *ScorecardOverallRecommendation `json:"overall_recommendation,omitempty" url:"overall_recommendation,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Scorecard) GetId() *string {
	if s == nil {
		return nil
	}
	return s.Id
}

func (s *Scorecard) GetRemoteId() *string {
	if s == nil {
		return nil
	}
	return s.RemoteId
}

func (s *Scorecard) GetCreatedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *Scorecard) GetModifiedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.ModifiedAt
}

func (s *Scorecard) GetApplication() *ScorecardApplication {
	if s == nil {
		return nil
	}
	return s.Application
}

func (s *Scorecard) GetInterview() *ScorecardInterview {
	if s == nil {
		return nil
	}
	return s.Interview
}

func (s *Scorecard) GetInterviewer() *ScorecardInterviewer {
	if s == nil {
		return nil
	}
	return s.Interviewer
}

func (s *Scorecard) GetRemoteCreatedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.RemoteCreatedAt
}

func (s *Scorecard) GetSubmittedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.SubmittedAt
}

func (s *Scorecard) GetOverallRecommendation() *ScorecardOverallRecommendation {
	if s == nil {
		return nil
	}
	return s.OverallRecommendation
}

func (s *Scorecard) GetRemoteWasDeleted() *bool {
	if s == nil {
		return nil
	}
	return s.RemoteWasDeleted
}

func (s *Scorecard) GetFieldMappings() map[string]interface{} {
	if s == nil {
		return nil
	}
	return s.FieldMappings
}

func (s *Scorecard) GetRemoteData() []*RemoteData {
	if s == nil {
		return nil
	}
	return s.RemoteData
}

func (s *Scorecard) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Scorecard) UnmarshalJSON(data []byte) error {
	type embed Scorecard
	var unmarshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
		SubmittedAt     *internal.DateTime `json:"submitted_at,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = Scorecard(unmarshaler.embed)
	s.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	s.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	s.RemoteCreatedAt = unmarshaler.RemoteCreatedAt.TimePtr()
	s.SubmittedAt = unmarshaler.SubmittedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Scorecard) MarshalJSON() ([]byte, error) {
	type embed Scorecard
	var marshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
		SubmittedAt     *internal.DateTime `json:"submitted_at,omitempty"`
	}{
		embed:           embed(*s),
		CreatedAt:       internal.NewOptionalDateTime(s.CreatedAt),
		ModifiedAt:      internal.NewOptionalDateTime(s.ModifiedAt),
		RemoteCreatedAt: internal.NewOptionalDateTime(s.RemoteCreatedAt),
		SubmittedAt:     internal.NewOptionalDateTime(s.SubmittedAt),
	}
	return json.Marshal(marshaler)
}

func (s *Scorecard) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The application being scored.
type ScorecardApplication struct {
	String      string
	Application *Application

	typ string
}

func (s *ScorecardApplication) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *ScorecardApplication) GetApplication() *Application {
	if s == nil {
		return nil
	}
	return s.Application
}

func (s *ScorecardApplication) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	valueApplication := new(Application)
	if err := json.Unmarshal(data, &valueApplication); err == nil {
		s.typ = "Application"
		s.Application = valueApplication
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScorecardApplication) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "Application" || s.Application != nil {
		return json.Marshal(s.Application)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ScorecardApplicationVisitor interface {
	VisitString(string) error
	VisitApplication(*Application) error
}

func (s *ScorecardApplication) Accept(visitor ScorecardApplicationVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "Application" || s.Application != nil {
		return visitor.VisitApplication(s.Application)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// The interview being scored.
type ScorecardInterview struct {
	String             string
	ScheduledInterview *ScheduledInterview

	typ string
}

func (s *ScorecardInterview) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *ScorecardInterview) GetScheduledInterview() *ScheduledInterview {
	if s == nil {
		return nil
	}
	return s.ScheduledInterview
}

func (s *ScorecardInterview) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	valueScheduledInterview := new(ScheduledInterview)
	if err := json.Unmarshal(data, &valueScheduledInterview); err == nil {
		s.typ = "ScheduledInterview"
		s.ScheduledInterview = valueScheduledInterview
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScorecardInterview) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "ScheduledInterview" || s.ScheduledInterview != nil {
		return json.Marshal(s.ScheduledInterview)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ScorecardInterviewVisitor interface {
	VisitString(string) error
	VisitScheduledInterview(*ScheduledInterview) error
}

func (s *ScorecardInterview) Accept(visitor ScorecardInterviewVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "ScheduledInterview" || s.ScheduledInterview != nil {
		return visitor.VisitScheduledInterview(s.ScheduledInterview)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// The interviewer doing the scoring.
type ScorecardInterviewer struct {
	String     string
	RemoteUser *RemoteUser

	typ string
}

func (s *ScorecardInterviewer) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *ScorecardInterviewer) GetRemoteUser() *RemoteUser {
	if s == nil {
		return nil
	}
	return s.RemoteUser
}

func (s *ScorecardInterviewer) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		s.typ = "RemoteUser"
		s.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScorecardInterviewer) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "RemoteUser" || s.RemoteUser != nil {
		return json.Marshal(s.RemoteUser)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ScorecardInterviewerVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (s *ScorecardInterviewer) Accept(visitor ScorecardInterviewerVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "RemoteUser" || s.RemoteUser != nil {
		return visitor.VisitRemoteUser(s.RemoteUser)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// The inteviewer's recommendation.
//
// * `DEFINITELY_NO` - DEFINITELY_NO
// * `NO` - NO
// * `YES` - YES
// * `STRONG_YES` - STRONG_YES
// * `NO_DECISION` - NO_DECISION
type ScorecardOverallRecommendation struct {
	OverallRecommendationEnum OverallRecommendationEnum
	String                    string

	typ string
}

func (s *ScorecardOverallRecommendation) GetOverallRecommendationEnum() OverallRecommendationEnum {
	if s == nil {
		return ""
	}
	return s.OverallRecommendationEnum
}

func (s *ScorecardOverallRecommendation) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *ScorecardOverallRecommendation) UnmarshalJSON(data []byte) error {
	var valueOverallRecommendationEnum OverallRecommendationEnum
	if err := json.Unmarshal(data, &valueOverallRecommendationEnum); err == nil {
		s.typ = "OverallRecommendationEnum"
		s.OverallRecommendationEnum = valueOverallRecommendationEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScorecardOverallRecommendation) MarshalJSON() ([]byte, error) {
	if s.typ == "OverallRecommendationEnum" || s.OverallRecommendationEnum != "" {
		return json.Marshal(s.OverallRecommendationEnum)
	}
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ScorecardOverallRecommendationVisitor interface {
	VisitOverallRecommendationEnum(OverallRecommendationEnum) error
	VisitString(string) error
}

func (s *ScorecardOverallRecommendation) Accept(visitor ScorecardOverallRecommendationVisitor) error {
	if s.typ == "OverallRecommendationEnum" || s.OverallRecommendationEnum != "" {
		return visitor.VisitOverallRecommendationEnum(s.OverallRecommendationEnum)
	}
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}
