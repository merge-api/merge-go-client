// Code generated by Fern. DO NOT EDIT.

package ats

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type EeocsListRequest struct {
	// If provided, will only return EEOC info for this candidate.
	CandidateId *string `json:"-" url:"candidate_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *EeocsListRequestRemoteFields `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *EeocsListRequestShowEnumOrigins `json:"-" url:"show_enum_origins,omitempty"`
}

type EeocsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *EeocsRetrieveRequestRemoteFields `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *EeocsRetrieveRequestShowEnumOrigins `json:"-" url:"show_enum_origins,omitempty"`
}

type EeocsListRequestRemoteFields string

const (
	EeocsListRequestRemoteFieldsDisabilityStatus                        EeocsListRequestRemoteFields = "disability_status"
	EeocsListRequestRemoteFieldsDisabilityStatusGender                  EeocsListRequestRemoteFields = "disability_status,gender"
	EeocsListRequestRemoteFieldsDisabilityStatusGenderRace              EeocsListRequestRemoteFields = "disability_status,gender,race"
	EeocsListRequestRemoteFieldsDisabilityStatusGenderRaceVeteranStatus EeocsListRequestRemoteFields = "disability_status,gender,race,veteran_status"
	EeocsListRequestRemoteFieldsDisabilityStatusGenderVeteranStatus     EeocsListRequestRemoteFields = "disability_status,gender,veteran_status"
	EeocsListRequestRemoteFieldsDisabilityStatusRace                    EeocsListRequestRemoteFields = "disability_status,race"
	EeocsListRequestRemoteFieldsDisabilityStatusRaceVeteranStatus       EeocsListRequestRemoteFields = "disability_status,race,veteran_status"
	EeocsListRequestRemoteFieldsDisabilityStatusVeteranStatus           EeocsListRequestRemoteFields = "disability_status,veteran_status"
	EeocsListRequestRemoteFieldsGender                                  EeocsListRequestRemoteFields = "gender"
	EeocsListRequestRemoteFieldsGenderRace                              EeocsListRequestRemoteFields = "gender,race"
	EeocsListRequestRemoteFieldsGenderRaceVeteranStatus                 EeocsListRequestRemoteFields = "gender,race,veteran_status"
	EeocsListRequestRemoteFieldsGenderVeteranStatus                     EeocsListRequestRemoteFields = "gender,veteran_status"
	EeocsListRequestRemoteFieldsRace                                    EeocsListRequestRemoteFields = "race"
	EeocsListRequestRemoteFieldsRaceVeteranStatus                       EeocsListRequestRemoteFields = "race,veteran_status"
	EeocsListRequestRemoteFieldsVeteranStatus                           EeocsListRequestRemoteFields = "veteran_status"
)

func NewEeocsListRequestRemoteFieldsFromString(s string) (EeocsListRequestRemoteFields, error) {
	switch s {
	case "disability_status":
		return EeocsListRequestRemoteFieldsDisabilityStatus, nil
	case "disability_status,gender":
		return EeocsListRequestRemoteFieldsDisabilityStatusGender, nil
	case "disability_status,gender,race":
		return EeocsListRequestRemoteFieldsDisabilityStatusGenderRace, nil
	case "disability_status,gender,race,veteran_status":
		return EeocsListRequestRemoteFieldsDisabilityStatusGenderRaceVeteranStatus, nil
	case "disability_status,gender,veteran_status":
		return EeocsListRequestRemoteFieldsDisabilityStatusGenderVeteranStatus, nil
	case "disability_status,race":
		return EeocsListRequestRemoteFieldsDisabilityStatusRace, nil
	case "disability_status,race,veteran_status":
		return EeocsListRequestRemoteFieldsDisabilityStatusRaceVeteranStatus, nil
	case "disability_status,veteran_status":
		return EeocsListRequestRemoteFieldsDisabilityStatusVeteranStatus, nil
	case "gender":
		return EeocsListRequestRemoteFieldsGender, nil
	case "gender,race":
		return EeocsListRequestRemoteFieldsGenderRace, nil
	case "gender,race,veteran_status":
		return EeocsListRequestRemoteFieldsGenderRaceVeteranStatus, nil
	case "gender,veteran_status":
		return EeocsListRequestRemoteFieldsGenderVeteranStatus, nil
	case "race":
		return EeocsListRequestRemoteFieldsRace, nil
	case "race,veteran_status":
		return EeocsListRequestRemoteFieldsRaceVeteranStatus, nil
	case "veteran_status":
		return EeocsListRequestRemoteFieldsVeteranStatus, nil
	}
	var t EeocsListRequestRemoteFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EeocsListRequestRemoteFields) Ptr() *EeocsListRequestRemoteFields {
	return &e
}

type EeocsListRequestShowEnumOrigins string

const (
	EeocsListRequestShowEnumOriginsDisabilityStatus                        EeocsListRequestShowEnumOrigins = "disability_status"
	EeocsListRequestShowEnumOriginsDisabilityStatusGender                  EeocsListRequestShowEnumOrigins = "disability_status,gender"
	EeocsListRequestShowEnumOriginsDisabilityStatusGenderRace              EeocsListRequestShowEnumOrigins = "disability_status,gender,race"
	EeocsListRequestShowEnumOriginsDisabilityStatusGenderRaceVeteranStatus EeocsListRequestShowEnumOrigins = "disability_status,gender,race,veteran_status"
	EeocsListRequestShowEnumOriginsDisabilityStatusGenderVeteranStatus     EeocsListRequestShowEnumOrigins = "disability_status,gender,veteran_status"
	EeocsListRequestShowEnumOriginsDisabilityStatusRace                    EeocsListRequestShowEnumOrigins = "disability_status,race"
	EeocsListRequestShowEnumOriginsDisabilityStatusRaceVeteranStatus       EeocsListRequestShowEnumOrigins = "disability_status,race,veteran_status"
	EeocsListRequestShowEnumOriginsDisabilityStatusVeteranStatus           EeocsListRequestShowEnumOrigins = "disability_status,veteran_status"
	EeocsListRequestShowEnumOriginsGender                                  EeocsListRequestShowEnumOrigins = "gender"
	EeocsListRequestShowEnumOriginsGenderRace                              EeocsListRequestShowEnumOrigins = "gender,race"
	EeocsListRequestShowEnumOriginsGenderRaceVeteranStatus                 EeocsListRequestShowEnumOrigins = "gender,race,veteran_status"
	EeocsListRequestShowEnumOriginsGenderVeteranStatus                     EeocsListRequestShowEnumOrigins = "gender,veteran_status"
	EeocsListRequestShowEnumOriginsRace                                    EeocsListRequestShowEnumOrigins = "race"
	EeocsListRequestShowEnumOriginsRaceVeteranStatus                       EeocsListRequestShowEnumOrigins = "race,veteran_status"
	EeocsListRequestShowEnumOriginsVeteranStatus                           EeocsListRequestShowEnumOrigins = "veteran_status"
)

func NewEeocsListRequestShowEnumOriginsFromString(s string) (EeocsListRequestShowEnumOrigins, error) {
	switch s {
	case "disability_status":
		return EeocsListRequestShowEnumOriginsDisabilityStatus, nil
	case "disability_status,gender":
		return EeocsListRequestShowEnumOriginsDisabilityStatusGender, nil
	case "disability_status,gender,race":
		return EeocsListRequestShowEnumOriginsDisabilityStatusGenderRace, nil
	case "disability_status,gender,race,veteran_status":
		return EeocsListRequestShowEnumOriginsDisabilityStatusGenderRaceVeteranStatus, nil
	case "disability_status,gender,veteran_status":
		return EeocsListRequestShowEnumOriginsDisabilityStatusGenderVeteranStatus, nil
	case "disability_status,race":
		return EeocsListRequestShowEnumOriginsDisabilityStatusRace, nil
	case "disability_status,race,veteran_status":
		return EeocsListRequestShowEnumOriginsDisabilityStatusRaceVeteranStatus, nil
	case "disability_status,veteran_status":
		return EeocsListRequestShowEnumOriginsDisabilityStatusVeteranStatus, nil
	case "gender":
		return EeocsListRequestShowEnumOriginsGender, nil
	case "gender,race":
		return EeocsListRequestShowEnumOriginsGenderRace, nil
	case "gender,race,veteran_status":
		return EeocsListRequestShowEnumOriginsGenderRaceVeteranStatus, nil
	case "gender,veteran_status":
		return EeocsListRequestShowEnumOriginsGenderVeteranStatus, nil
	case "race":
		return EeocsListRequestShowEnumOriginsRace, nil
	case "race,veteran_status":
		return EeocsListRequestShowEnumOriginsRaceVeteranStatus, nil
	case "veteran_status":
		return EeocsListRequestShowEnumOriginsVeteranStatus, nil
	}
	var t EeocsListRequestShowEnumOrigins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EeocsListRequestShowEnumOrigins) Ptr() *EeocsListRequestShowEnumOrigins {
	return &e
}

type EeocsRetrieveRequestRemoteFields string

const (
	EeocsRetrieveRequestRemoteFieldsDisabilityStatus                        EeocsRetrieveRequestRemoteFields = "disability_status"
	EeocsRetrieveRequestRemoteFieldsDisabilityStatusGender                  EeocsRetrieveRequestRemoteFields = "disability_status,gender"
	EeocsRetrieveRequestRemoteFieldsDisabilityStatusGenderRace              EeocsRetrieveRequestRemoteFields = "disability_status,gender,race"
	EeocsRetrieveRequestRemoteFieldsDisabilityStatusGenderRaceVeteranStatus EeocsRetrieveRequestRemoteFields = "disability_status,gender,race,veteran_status"
	EeocsRetrieveRequestRemoteFieldsDisabilityStatusGenderVeteranStatus     EeocsRetrieveRequestRemoteFields = "disability_status,gender,veteran_status"
	EeocsRetrieveRequestRemoteFieldsDisabilityStatusRace                    EeocsRetrieveRequestRemoteFields = "disability_status,race"
	EeocsRetrieveRequestRemoteFieldsDisabilityStatusRaceVeteranStatus       EeocsRetrieveRequestRemoteFields = "disability_status,race,veteran_status"
	EeocsRetrieveRequestRemoteFieldsDisabilityStatusVeteranStatus           EeocsRetrieveRequestRemoteFields = "disability_status,veteran_status"
	EeocsRetrieveRequestRemoteFieldsGender                                  EeocsRetrieveRequestRemoteFields = "gender"
	EeocsRetrieveRequestRemoteFieldsGenderRace                              EeocsRetrieveRequestRemoteFields = "gender,race"
	EeocsRetrieveRequestRemoteFieldsGenderRaceVeteranStatus                 EeocsRetrieveRequestRemoteFields = "gender,race,veteran_status"
	EeocsRetrieveRequestRemoteFieldsGenderVeteranStatus                     EeocsRetrieveRequestRemoteFields = "gender,veteran_status"
	EeocsRetrieveRequestRemoteFieldsRace                                    EeocsRetrieveRequestRemoteFields = "race"
	EeocsRetrieveRequestRemoteFieldsRaceVeteranStatus                       EeocsRetrieveRequestRemoteFields = "race,veteran_status"
	EeocsRetrieveRequestRemoteFieldsVeteranStatus                           EeocsRetrieveRequestRemoteFields = "veteran_status"
)

func NewEeocsRetrieveRequestRemoteFieldsFromString(s string) (EeocsRetrieveRequestRemoteFields, error) {
	switch s {
	case "disability_status":
		return EeocsRetrieveRequestRemoteFieldsDisabilityStatus, nil
	case "disability_status,gender":
		return EeocsRetrieveRequestRemoteFieldsDisabilityStatusGender, nil
	case "disability_status,gender,race":
		return EeocsRetrieveRequestRemoteFieldsDisabilityStatusGenderRace, nil
	case "disability_status,gender,race,veteran_status":
		return EeocsRetrieveRequestRemoteFieldsDisabilityStatusGenderRaceVeteranStatus, nil
	case "disability_status,gender,veteran_status":
		return EeocsRetrieveRequestRemoteFieldsDisabilityStatusGenderVeteranStatus, nil
	case "disability_status,race":
		return EeocsRetrieveRequestRemoteFieldsDisabilityStatusRace, nil
	case "disability_status,race,veteran_status":
		return EeocsRetrieveRequestRemoteFieldsDisabilityStatusRaceVeteranStatus, nil
	case "disability_status,veteran_status":
		return EeocsRetrieveRequestRemoteFieldsDisabilityStatusVeteranStatus, nil
	case "gender":
		return EeocsRetrieveRequestRemoteFieldsGender, nil
	case "gender,race":
		return EeocsRetrieveRequestRemoteFieldsGenderRace, nil
	case "gender,race,veteran_status":
		return EeocsRetrieveRequestRemoteFieldsGenderRaceVeteranStatus, nil
	case "gender,veteran_status":
		return EeocsRetrieveRequestRemoteFieldsGenderVeteranStatus, nil
	case "race":
		return EeocsRetrieveRequestRemoteFieldsRace, nil
	case "race,veteran_status":
		return EeocsRetrieveRequestRemoteFieldsRaceVeteranStatus, nil
	case "veteran_status":
		return EeocsRetrieveRequestRemoteFieldsVeteranStatus, nil
	}
	var t EeocsRetrieveRequestRemoteFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EeocsRetrieveRequestRemoteFields) Ptr() *EeocsRetrieveRequestRemoteFields {
	return &e
}

type EeocsRetrieveRequestShowEnumOrigins string

const (
	EeocsRetrieveRequestShowEnumOriginsDisabilityStatus                        EeocsRetrieveRequestShowEnumOrigins = "disability_status"
	EeocsRetrieveRequestShowEnumOriginsDisabilityStatusGender                  EeocsRetrieveRequestShowEnumOrigins = "disability_status,gender"
	EeocsRetrieveRequestShowEnumOriginsDisabilityStatusGenderRace              EeocsRetrieveRequestShowEnumOrigins = "disability_status,gender,race"
	EeocsRetrieveRequestShowEnumOriginsDisabilityStatusGenderRaceVeteranStatus EeocsRetrieveRequestShowEnumOrigins = "disability_status,gender,race,veteran_status"
	EeocsRetrieveRequestShowEnumOriginsDisabilityStatusGenderVeteranStatus     EeocsRetrieveRequestShowEnumOrigins = "disability_status,gender,veteran_status"
	EeocsRetrieveRequestShowEnumOriginsDisabilityStatusRace                    EeocsRetrieveRequestShowEnumOrigins = "disability_status,race"
	EeocsRetrieveRequestShowEnumOriginsDisabilityStatusRaceVeteranStatus       EeocsRetrieveRequestShowEnumOrigins = "disability_status,race,veteran_status"
	EeocsRetrieveRequestShowEnumOriginsDisabilityStatusVeteranStatus           EeocsRetrieveRequestShowEnumOrigins = "disability_status,veteran_status"
	EeocsRetrieveRequestShowEnumOriginsGender                                  EeocsRetrieveRequestShowEnumOrigins = "gender"
	EeocsRetrieveRequestShowEnumOriginsGenderRace                              EeocsRetrieveRequestShowEnumOrigins = "gender,race"
	EeocsRetrieveRequestShowEnumOriginsGenderRaceVeteranStatus                 EeocsRetrieveRequestShowEnumOrigins = "gender,race,veteran_status"
	EeocsRetrieveRequestShowEnumOriginsGenderVeteranStatus                     EeocsRetrieveRequestShowEnumOrigins = "gender,veteran_status"
	EeocsRetrieveRequestShowEnumOriginsRace                                    EeocsRetrieveRequestShowEnumOrigins = "race"
	EeocsRetrieveRequestShowEnumOriginsRaceVeteranStatus                       EeocsRetrieveRequestShowEnumOrigins = "race,veteran_status"
	EeocsRetrieveRequestShowEnumOriginsVeteranStatus                           EeocsRetrieveRequestShowEnumOrigins = "veteran_status"
)

func NewEeocsRetrieveRequestShowEnumOriginsFromString(s string) (EeocsRetrieveRequestShowEnumOrigins, error) {
	switch s {
	case "disability_status":
		return EeocsRetrieveRequestShowEnumOriginsDisabilityStatus, nil
	case "disability_status,gender":
		return EeocsRetrieveRequestShowEnumOriginsDisabilityStatusGender, nil
	case "disability_status,gender,race":
		return EeocsRetrieveRequestShowEnumOriginsDisabilityStatusGenderRace, nil
	case "disability_status,gender,race,veteran_status":
		return EeocsRetrieveRequestShowEnumOriginsDisabilityStatusGenderRaceVeteranStatus, nil
	case "disability_status,gender,veteran_status":
		return EeocsRetrieveRequestShowEnumOriginsDisabilityStatusGenderVeteranStatus, nil
	case "disability_status,race":
		return EeocsRetrieveRequestShowEnumOriginsDisabilityStatusRace, nil
	case "disability_status,race,veteran_status":
		return EeocsRetrieveRequestShowEnumOriginsDisabilityStatusRaceVeteranStatus, nil
	case "disability_status,veteran_status":
		return EeocsRetrieveRequestShowEnumOriginsDisabilityStatusVeteranStatus, nil
	case "gender":
		return EeocsRetrieveRequestShowEnumOriginsGender, nil
	case "gender,race":
		return EeocsRetrieveRequestShowEnumOriginsGenderRace, nil
	case "gender,race,veteran_status":
		return EeocsRetrieveRequestShowEnumOriginsGenderRaceVeteranStatus, nil
	case "gender,veteran_status":
		return EeocsRetrieveRequestShowEnumOriginsGenderVeteranStatus, nil
	case "race":
		return EeocsRetrieveRequestShowEnumOriginsRace, nil
	case "race,veteran_status":
		return EeocsRetrieveRequestShowEnumOriginsRaceVeteranStatus, nil
	case "veteran_status":
		return EeocsRetrieveRequestShowEnumOriginsVeteranStatus, nil
	}
	var t EeocsRetrieveRequestShowEnumOrigins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EeocsRetrieveRequestShowEnumOrigins) Ptr() *EeocsRetrieveRequestShowEnumOrigins {
	return &e
}

// * `YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY` - YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY
// * `NO_I_DONT_HAVE_A_DISABILITY` - NO_I_DONT_HAVE_A_DISABILITY
// * `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
type DisabilityStatusEnum string

const (
	DisabilityStatusEnumYesIHaveADisabilityOrPreviouslyHadADisability DisabilityStatusEnum = "YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY"
	DisabilityStatusEnumNoIDontHaveADisability                        DisabilityStatusEnum = "NO_I_DONT_HAVE_A_DISABILITY"
	DisabilityStatusEnumIDontWishToAnswer                             DisabilityStatusEnum = "I_DONT_WISH_TO_ANSWER"
)

func NewDisabilityStatusEnumFromString(s string) (DisabilityStatusEnum, error) {
	switch s {
	case "YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY":
		return DisabilityStatusEnumYesIHaveADisabilityOrPreviouslyHadADisability, nil
	case "NO_I_DONT_HAVE_A_DISABILITY":
		return DisabilityStatusEnumNoIDontHaveADisability, nil
	case "I_DONT_WISH_TO_ANSWER":
		return DisabilityStatusEnumIDontWishToAnswer, nil
	}
	var t DisabilityStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DisabilityStatusEnum) Ptr() *DisabilityStatusEnum {
	return &d
}

// # The EEOC Object
// ### Description
// The `EEOC` object is used to represent the Equal Employment Opportunity Commission information for a candidate (race, gender, veteran status, disability status).
// ### Usage Example
// Fetch from the `LIST EEOCs` endpoint and filter by `candidate` to show all EEOC information for a candidate.
type Eeoc struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The candidate being represented.
	Candidate *EeocCandidate `json:"candidate,omitempty" url:"candidate,omitempty"`
	// When the information was submitted.
	SubmittedAt *time.Time `json:"submitted_at,omitempty" url:"submitted_at,omitempty"`
	// The candidate's race.
	//
	// * `AMERICAN_INDIAN_OR_ALASKAN_NATIVE` - AMERICAN_INDIAN_OR_ALASKAN_NATIVE
	// * `ASIAN` - ASIAN
	// * `BLACK_OR_AFRICAN_AMERICAN` - BLACK_OR_AFRICAN_AMERICAN
	// * `HISPANIC_OR_LATINO` - HISPANIC_OR_LATINO
	// * `WHITE` - WHITE
	// * `NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER` - NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER
	// * `TWO_OR_MORE_RACES` - TWO_OR_MORE_RACES
	// * `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
	Race *EeocRace `json:"race,omitempty" url:"race,omitempty"`
	// The candidate's gender.
	//
	// * `MALE` - MALE
	// * `FEMALE` - FEMALE
	// * `NON-BINARY` - NON-BINARY
	// * `OTHER` - OTHER
	// * `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
	Gender *EeocGender `json:"gender,omitempty" url:"gender,omitempty"`
	// The candidate's veteran status.
	//
	// * `I_AM_NOT_A_PROTECTED_VETERAN` - I_AM_NOT_A_PROTECTED_VETERAN
	// * `I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN` - I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN
	// * `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
	VeteranStatus *EeocVeteranStatus `json:"veteran_status,omitempty" url:"veteran_status,omitempty"`
	// The candidate's disability status.
	//
	// * `YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY` - YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY
	// * `NO_I_DONT_HAVE_A_DISABILITY` - NO_I_DONT_HAVE_A_DISABILITY
	// * `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
	DisabilityStatus *EeocDisabilityStatus `json:"disability_status,omitempty" url:"disability_status,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Eeoc) GetId() *string {
	if e == nil {
		return nil
	}
	return e.Id
}

func (e *Eeoc) GetRemoteId() *string {
	if e == nil {
		return nil
	}
	return e.RemoteId
}

func (e *Eeoc) GetCreatedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *Eeoc) GetModifiedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.ModifiedAt
}

func (e *Eeoc) GetCandidate() *EeocCandidate {
	if e == nil {
		return nil
	}
	return e.Candidate
}

func (e *Eeoc) GetSubmittedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.SubmittedAt
}

func (e *Eeoc) GetRace() *EeocRace {
	if e == nil {
		return nil
	}
	return e.Race
}

func (e *Eeoc) GetGender() *EeocGender {
	if e == nil {
		return nil
	}
	return e.Gender
}

func (e *Eeoc) GetVeteranStatus() *EeocVeteranStatus {
	if e == nil {
		return nil
	}
	return e.VeteranStatus
}

func (e *Eeoc) GetDisabilityStatus() *EeocDisabilityStatus {
	if e == nil {
		return nil
	}
	return e.DisabilityStatus
}

func (e *Eeoc) GetRemoteWasDeleted() *bool {
	if e == nil {
		return nil
	}
	return e.RemoteWasDeleted
}

func (e *Eeoc) GetFieldMappings() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.FieldMappings
}

func (e *Eeoc) GetRemoteData() []*RemoteData {
	if e == nil {
		return nil
	}
	return e.RemoteData
}

func (e *Eeoc) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Eeoc) UnmarshalJSON(data []byte) error {
	type embed Eeoc
	var unmarshaler = struct {
		embed
		CreatedAt   *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt  *internal.DateTime `json:"modified_at,omitempty"`
		SubmittedAt *internal.DateTime `json:"submitted_at,omitempty"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = Eeoc(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	e.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	e.SubmittedAt = unmarshaler.SubmittedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Eeoc) MarshalJSON() ([]byte, error) {
	type embed Eeoc
	var marshaler = struct {
		embed
		CreatedAt   *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt  *internal.DateTime `json:"modified_at,omitempty"`
		SubmittedAt *internal.DateTime `json:"submitted_at,omitempty"`
	}{
		embed:       embed(*e),
		CreatedAt:   internal.NewOptionalDateTime(e.CreatedAt),
		ModifiedAt:  internal.NewOptionalDateTime(e.ModifiedAt),
		SubmittedAt: internal.NewOptionalDateTime(e.SubmittedAt),
	}
	return json.Marshal(marshaler)
}

func (e *Eeoc) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The candidate being represented.
type EeocCandidate struct {
	String    string
	Candidate *Candidate

	typ string
}

func (e *EeocCandidate) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EeocCandidate) GetCandidate() *Candidate {
	if e == nil {
		return nil
	}
	return e.Candidate
}

func (e *EeocCandidate) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valueCandidate := new(Candidate)
	if err := json.Unmarshal(data, &valueCandidate); err == nil {
		e.typ = "Candidate"
		e.Candidate = valueCandidate
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EeocCandidate) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "Candidate" || e.Candidate != nil {
		return json.Marshal(e.Candidate)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EeocCandidateVisitor interface {
	VisitString(string) error
	VisitCandidate(*Candidate) error
}

func (e *EeocCandidate) Accept(visitor EeocCandidateVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "Candidate" || e.Candidate != nil {
		return visitor.VisitCandidate(e.Candidate)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// The candidate's disability status.
//
// * `YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY` - YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY
// * `NO_I_DONT_HAVE_A_DISABILITY` - NO_I_DONT_HAVE_A_DISABILITY
// * `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
type EeocDisabilityStatus struct {
	DisabilityStatusEnum DisabilityStatusEnum
	String               string

	typ string
}

func (e *EeocDisabilityStatus) GetDisabilityStatusEnum() DisabilityStatusEnum {
	if e == nil {
		return ""
	}
	return e.DisabilityStatusEnum
}

func (e *EeocDisabilityStatus) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EeocDisabilityStatus) UnmarshalJSON(data []byte) error {
	var valueDisabilityStatusEnum DisabilityStatusEnum
	if err := json.Unmarshal(data, &valueDisabilityStatusEnum); err == nil {
		e.typ = "DisabilityStatusEnum"
		e.DisabilityStatusEnum = valueDisabilityStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EeocDisabilityStatus) MarshalJSON() ([]byte, error) {
	if e.typ == "DisabilityStatusEnum" || e.DisabilityStatusEnum != "" {
		return json.Marshal(e.DisabilityStatusEnum)
	}
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EeocDisabilityStatusVisitor interface {
	VisitDisabilityStatusEnum(DisabilityStatusEnum) error
	VisitString(string) error
}

func (e *EeocDisabilityStatus) Accept(visitor EeocDisabilityStatusVisitor) error {
	if e.typ == "DisabilityStatusEnum" || e.DisabilityStatusEnum != "" {
		return visitor.VisitDisabilityStatusEnum(e.DisabilityStatusEnum)
	}
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// The candidate's gender.
//
// * `MALE` - MALE
// * `FEMALE` - FEMALE
// * `NON-BINARY` - NON-BINARY
// * `OTHER` - OTHER
// * `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
type EeocGender struct {
	GenderEnum GenderEnum
	String     string

	typ string
}

func (e *EeocGender) GetGenderEnum() GenderEnum {
	if e == nil {
		return ""
	}
	return e.GenderEnum
}

func (e *EeocGender) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EeocGender) UnmarshalJSON(data []byte) error {
	var valueGenderEnum GenderEnum
	if err := json.Unmarshal(data, &valueGenderEnum); err == nil {
		e.typ = "GenderEnum"
		e.GenderEnum = valueGenderEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EeocGender) MarshalJSON() ([]byte, error) {
	if e.typ == "GenderEnum" || e.GenderEnum != "" {
		return json.Marshal(e.GenderEnum)
	}
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EeocGenderVisitor interface {
	VisitGenderEnum(GenderEnum) error
	VisitString(string) error
}

func (e *EeocGender) Accept(visitor EeocGenderVisitor) error {
	if e.typ == "GenderEnum" || e.GenderEnum != "" {
		return visitor.VisitGenderEnum(e.GenderEnum)
	}
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// The candidate's race.
//
// * `AMERICAN_INDIAN_OR_ALASKAN_NATIVE` - AMERICAN_INDIAN_OR_ALASKAN_NATIVE
// * `ASIAN` - ASIAN
// * `BLACK_OR_AFRICAN_AMERICAN` - BLACK_OR_AFRICAN_AMERICAN
// * `HISPANIC_OR_LATINO` - HISPANIC_OR_LATINO
// * `WHITE` - WHITE
// * `NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER` - NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER
// * `TWO_OR_MORE_RACES` - TWO_OR_MORE_RACES
// * `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
type EeocRace struct {
	RaceEnum RaceEnum
	String   string

	typ string
}

func (e *EeocRace) GetRaceEnum() RaceEnum {
	if e == nil {
		return ""
	}
	return e.RaceEnum
}

func (e *EeocRace) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EeocRace) UnmarshalJSON(data []byte) error {
	var valueRaceEnum RaceEnum
	if err := json.Unmarshal(data, &valueRaceEnum); err == nil {
		e.typ = "RaceEnum"
		e.RaceEnum = valueRaceEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EeocRace) MarshalJSON() ([]byte, error) {
	if e.typ == "RaceEnum" || e.RaceEnum != "" {
		return json.Marshal(e.RaceEnum)
	}
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EeocRaceVisitor interface {
	VisitRaceEnum(RaceEnum) error
	VisitString(string) error
}

func (e *EeocRace) Accept(visitor EeocRaceVisitor) error {
	if e.typ == "RaceEnum" || e.RaceEnum != "" {
		return visitor.VisitRaceEnum(e.RaceEnum)
	}
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// The candidate's veteran status.
//
// * `I_AM_NOT_A_PROTECTED_VETERAN` - I_AM_NOT_A_PROTECTED_VETERAN
// * `I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN` - I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN
// * `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
type EeocVeteranStatus struct {
	VeteranStatusEnum VeteranStatusEnum
	String            string

	typ string
}

func (e *EeocVeteranStatus) GetVeteranStatusEnum() VeteranStatusEnum {
	if e == nil {
		return ""
	}
	return e.VeteranStatusEnum
}

func (e *EeocVeteranStatus) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EeocVeteranStatus) UnmarshalJSON(data []byte) error {
	var valueVeteranStatusEnum VeteranStatusEnum
	if err := json.Unmarshal(data, &valueVeteranStatusEnum); err == nil {
		e.typ = "VeteranStatusEnum"
		e.VeteranStatusEnum = valueVeteranStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EeocVeteranStatus) MarshalJSON() ([]byte, error) {
	if e.typ == "VeteranStatusEnum" || e.VeteranStatusEnum != "" {
		return json.Marshal(e.VeteranStatusEnum)
	}
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EeocVeteranStatusVisitor interface {
	VisitVeteranStatusEnum(VeteranStatusEnum) error
	VisitString(string) error
}

func (e *EeocVeteranStatus) Accept(visitor EeocVeteranStatusVisitor) error {
	if e.typ == "VeteranStatusEnum" || e.VeteranStatusEnum != "" {
		return visitor.VisitVeteranStatusEnum(e.VeteranStatusEnum)
	}
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// * `MALE` - MALE
// * `FEMALE` - FEMALE
// * `NON-BINARY` - NON-BINARY
// * `OTHER` - OTHER
// * `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
type GenderEnum string

const (
	GenderEnumMale                  GenderEnum = "MALE"
	GenderEnumFemale                GenderEnum = "FEMALE"
	GenderEnumNonBinary             GenderEnum = "NON-BINARY"
	GenderEnumOther                 GenderEnum = "OTHER"
	GenderEnumDeclineToSelfIdentify GenderEnum = "DECLINE_TO_SELF_IDENTIFY"
)

func NewGenderEnumFromString(s string) (GenderEnum, error) {
	switch s {
	case "MALE":
		return GenderEnumMale, nil
	case "FEMALE":
		return GenderEnumFemale, nil
	case "NON-BINARY":
		return GenderEnumNonBinary, nil
	case "OTHER":
		return GenderEnumOther, nil
	case "DECLINE_TO_SELF_IDENTIFY":
		return GenderEnumDeclineToSelfIdentify, nil
	}
	var t GenderEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GenderEnum) Ptr() *GenderEnum {
	return &g
}

type PaginatedEeocList struct {
	Next     *string `json:"next,omitempty" url:"next,omitempty"`
	Previous *string `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Eeoc `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedEeocList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedEeocList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedEeocList) GetResults() []*Eeoc {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedEeocList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedEeocList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedEeocList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedEeocList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedEeocList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// * `AMERICAN_INDIAN_OR_ALASKAN_NATIVE` - AMERICAN_INDIAN_OR_ALASKAN_NATIVE
// * `ASIAN` - ASIAN
// * `BLACK_OR_AFRICAN_AMERICAN` - BLACK_OR_AFRICAN_AMERICAN
// * `HISPANIC_OR_LATINO` - HISPANIC_OR_LATINO
// * `WHITE` - WHITE
// * `NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER` - NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER
// * `TWO_OR_MORE_RACES` - TWO_OR_MORE_RACES
// * `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
type RaceEnum string

const (
	RaceEnumAmericanIndianOrAlaskanNative        RaceEnum = "AMERICAN_INDIAN_OR_ALASKAN_NATIVE"
	RaceEnumAsian                                RaceEnum = "ASIAN"
	RaceEnumBlackOrAfricanAmerican               RaceEnum = "BLACK_OR_AFRICAN_AMERICAN"
	RaceEnumHispanicOrLatino                     RaceEnum = "HISPANIC_OR_LATINO"
	RaceEnumWhite                                RaceEnum = "WHITE"
	RaceEnumNativeHawaiianOrOtherPacificIslander RaceEnum = "NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER"
	RaceEnumTwoOrMoreRaces                       RaceEnum = "TWO_OR_MORE_RACES"
	RaceEnumDeclineToSelfIdentify                RaceEnum = "DECLINE_TO_SELF_IDENTIFY"
)

func NewRaceEnumFromString(s string) (RaceEnum, error) {
	switch s {
	case "AMERICAN_INDIAN_OR_ALASKAN_NATIVE":
		return RaceEnumAmericanIndianOrAlaskanNative, nil
	case "ASIAN":
		return RaceEnumAsian, nil
	case "BLACK_OR_AFRICAN_AMERICAN":
		return RaceEnumBlackOrAfricanAmerican, nil
	case "HISPANIC_OR_LATINO":
		return RaceEnumHispanicOrLatino, nil
	case "WHITE":
		return RaceEnumWhite, nil
	case "NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER":
		return RaceEnumNativeHawaiianOrOtherPacificIslander, nil
	case "TWO_OR_MORE_RACES":
		return RaceEnumTwoOrMoreRaces, nil
	case "DECLINE_TO_SELF_IDENTIFY":
		return RaceEnumDeclineToSelfIdentify, nil
	}
	var t RaceEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RaceEnum) Ptr() *RaceEnum {
	return &r
}

// * `I_AM_NOT_A_PROTECTED_VETERAN` - I_AM_NOT_A_PROTECTED_VETERAN
// * `I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN` - I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN
// * `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
type VeteranStatusEnum string

const (
	VeteranStatusEnumIAmNotAProtectedVeteran                                     VeteranStatusEnum = "I_AM_NOT_A_PROTECTED_VETERAN"
	VeteranStatusEnumIIdentifyAsOneOrMoreOfTheClassificationsOfAProtectedVeteran VeteranStatusEnum = "I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN"
	VeteranStatusEnumIDontWishToAnswer                                           VeteranStatusEnum = "I_DONT_WISH_TO_ANSWER"
)

func NewVeteranStatusEnumFromString(s string) (VeteranStatusEnum, error) {
	switch s {
	case "I_AM_NOT_A_PROTECTED_VETERAN":
		return VeteranStatusEnumIAmNotAProtectedVeteran, nil
	case "I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN":
		return VeteranStatusEnumIIdentifyAsOneOrMoreOfTheClassificationsOfAProtectedVeteran, nil
	case "I_DONT_WISH_TO_ANSWER":
		return VeteranStatusEnumIDontWishToAnswer, nil
	}
	var t VeteranStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VeteranStatusEnum) Ptr() *VeteranStatusEnum {
	return &v
}
