// This file was auto-generated by Fern from our API Definition.

package ats

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/merge-api/merge-go-client/core"
	time "time"
)

// - `SUPER_ADMIN` - SUPER_ADMIN
// - `ADMIN` - ADMIN
// - `TEAM_MEMBER` - TEAM_MEMBER
// - `LIMITED_TEAM_MEMBER` - LIMITED_TEAM_MEMBER
// - `INTERVIEWER` - INTERVIEWER
type AccessRoleEnum string

const (
	AccessRoleEnumSuperAdmin        AccessRoleEnum = "SUPER_ADMIN"
	AccessRoleEnumAdmin             AccessRoleEnum = "ADMIN"
	AccessRoleEnumTeamMember        AccessRoleEnum = "TEAM_MEMBER"
	AccessRoleEnumLimitedTeamMember AccessRoleEnum = "LIMITED_TEAM_MEMBER"
	AccessRoleEnumInterviewer       AccessRoleEnum = "INTERVIEWER"
)

func NewAccessRoleEnumFromString(s string) (AccessRoleEnum, error) {
	switch s {
	case "SUPER_ADMIN":
		return AccessRoleEnumSuperAdmin, nil
	case "ADMIN":
		return AccessRoleEnumAdmin, nil
	case "TEAM_MEMBER":
		return AccessRoleEnumTeamMember, nil
	case "LIMITED_TEAM_MEMBER":
		return AccessRoleEnumLimitedTeamMember, nil
	case "INTERVIEWER":
		return AccessRoleEnumInterviewer, nil
	}
	var t AccessRoleEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccessRoleEnum) Ptr() *AccessRoleEnum {
	return &a
}

type AccountDetails struct {
	Id                      *string       `json:"id,omitempty"`
	Integration             *string       `json:"integration,omitempty"`
	IntegrationSlug         *string       `json:"integration_slug,omitempty"`
	Category                *CategoryEnum `json:"category,omitempty"`
	EndUserOriginId         *string       `json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName *string       `json:"end_user_organization_name,omitempty"`
	EndUserEmailAddress     *string       `json:"end_user_email_address,omitempty"`
	Status                  *string       `json:"status,omitempty"`
	WebhookListenerUrl      *string       `json:"webhook_listener_url,omitempty"`
	// Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.
	IsDuplicate *bool   `json:"is_duplicate,omitempty"`
	AccountType *string `json:"account_type,omitempty"`
	// The time at which account completes the linking flow.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountDetails(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountDetails) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The LinkedAccount Object
//
// ### Description
//
// The `LinkedAccount` object is used to represent an end user's link with a specific integration.
//
// ### Usage Example
//
// View a list of your organization's `LinkedAccount` objects.
type AccountDetailsAndActions struct {
	Id                      string                             `json:"id"`
	Category                *CategoryEnum                      `json:"category,omitempty"`
	Status                  AccountDetailsAndActionsStatusEnum `json:"status,omitempty"`
	StatusDetail            *string                            `json:"status_detail,omitempty"`
	EndUserOriginId         *string                            `json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName string                             `json:"end_user_organization_name"`
	EndUserEmailAddress     string                             `json:"end_user_email_address"`
	// The tenant or domain the customer has provided access to.
	Subdomain          *string `json:"subdomain,omitempty"`
	WebhookListenerUrl string  `json:"webhook_listener_url"`
	// Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.
	IsDuplicate *bool                                `json:"is_duplicate,omitempty"`
	Integration *AccountDetailsAndActionsIntegration `json:"integration,omitempty"`
	AccountType string                               `json:"account_type"`
	CompletedAt time.Time                            `json:"completed_at"`

	_rawJSON json.RawMessage
}

func (a *AccountDetailsAndActions) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountDetailsAndActions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountDetailsAndActions(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountDetailsAndActions) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountDetailsAndActionsIntegration struct {
	Name                     string            `json:"name"`
	Categories               []CategoriesEnum  `json:"categories,omitempty"`
	Image                    *string           `json:"image,omitempty"`
	SquareImage              *string           `json:"square_image,omitempty"`
	Color                    string            `json:"color"`
	Slug                     string            `json:"slug"`
	PassthroughAvailable     bool              `json:"passthrough_available"`
	AvailableModelOperations []*ModelOperation `json:"available_model_operations,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountDetailsAndActionsIntegration) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountDetailsAndActionsIntegration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountDetailsAndActionsIntegration(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountDetailsAndActionsIntegration) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// - `COMPLETE` - COMPLETE
// - `INCOMPLETE` - INCOMPLETE
// - `RELINK_NEEDED` - RELINK_NEEDED
// - `IDLE` - IDLE
type AccountDetailsAndActionsStatusEnum string

const (
	AccountDetailsAndActionsStatusEnumComplete     AccountDetailsAndActionsStatusEnum = "COMPLETE"
	AccountDetailsAndActionsStatusEnumIncomplete   AccountDetailsAndActionsStatusEnum = "INCOMPLETE"
	AccountDetailsAndActionsStatusEnumRelinkNeeded AccountDetailsAndActionsStatusEnum = "RELINK_NEEDED"
	AccountDetailsAndActionsStatusEnumIdle         AccountDetailsAndActionsStatusEnum = "IDLE"
)

func NewAccountDetailsAndActionsStatusEnumFromString(s string) (AccountDetailsAndActionsStatusEnum, error) {
	switch s {
	case "COMPLETE":
		return AccountDetailsAndActionsStatusEnumComplete, nil
	case "INCOMPLETE":
		return AccountDetailsAndActionsStatusEnumIncomplete, nil
	case "RELINK_NEEDED":
		return AccountDetailsAndActionsStatusEnumRelinkNeeded, nil
	case "IDLE":
		return AccountDetailsAndActionsStatusEnumIdle, nil
	}
	var t AccountDetailsAndActionsStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountDetailsAndActionsStatusEnum) Ptr() *AccountDetailsAndActionsStatusEnum {
	return &a
}

type AccountIntegration struct {
	// Company name.
	Name string `json:"name"`
	// Optional. This shortened name appears in places with limited space, usually in conjunction with the platform's logo (e.g., Merge Link menu).<br><br>Example: <i>Workforce Now (in lieu of ADP Workforce Now), SuccessFactors (in lieu of SAP SuccessFactors)</i>
	AbbreviatedName *string `json:"abbreviated_name,omitempty"`
	// Category or categories this integration belongs to. Multiple categories should be comma separated, i.e. [ats, hris].
	Categories []CategoriesEnum `json:"categories,omitempty"`
	// Company logo in rectangular shape.
	Image *string `json:"image,omitempty"`
	// Company logo in square shape.
	SquareImage *string `json:"square_image,omitempty"`
	// The color of this integration used for buttons and text throughout the app and landing pages. <b>Choose a darker, saturated color.</b>
	Color *string `json:"color,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	// Mapping of API endpoints to documentation urls for support. Example: {'GET': [['/common-model-scopes', 'https://docs.merge.dev/accounting/common-model-scopes/#common_model_scopes_retrieve'],['/common-model-actions', 'https://docs.merge.dev/accounting/common-model-actions/#common_model_actions_retrieve']], 'POST': []}
	ApiEndpointsToDocumentationUrls map[string]interface{} `json:"api_endpoints_to_documentation_urls,omitempty"`
	// Setup guide URL for third party webhook creation. Exposed in Merge Docs.
	WebhookSetupGuideUrl *string `json:"webhook_setup_guide_url,omitempty"`
	// Category or categories this integration is in beta status for.
	CategoryBetaStatus map[string]interface{} `json:"category_beta_status,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountIntegration) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountIntegration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountIntegration(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountIntegration) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountToken struct {
	AccountToken string              `json:"account_token"`
	Integration  *AccountIntegration `json:"integration,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountToken) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountToken(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountToken) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The Activity Object
//
// ### Description
//
// The `Activity` object is used to represent an activity for a candidate performed by a user.
//
// ### Usage Example
//
// Fetch from the `LIST Activities` endpoint and filter by `ID` to show all activities.
type Activity struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The user that performed the action.
	User *ActivityUser `json:"user,omitempty"`
	// When the third party's activity was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// The activity's type.
	//
	// - `NOTE` - NOTE
	// - `EMAIL` - EMAIL
	// - `OTHER` - OTHER
	ActivityType *ActivityActivityType `json:"activity_type,omitempty"`
	// The activity's subject.
	Subject *string `json:"subject,omitempty"`
	// The activity's body.
	Body *string `json:"body,omitempty"`
	// The activity's visibility.
	//
	// - `ADMIN_ONLY` - ADMIN_ONLY
	// - `PUBLIC` - PUBLIC
	// - `PRIVATE` - PRIVATE
	Visibility *ActivityVisibility `json:"visibility,omitempty"`
	Candidate  *string             `json:"candidate,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (a *Activity) UnmarshalJSON(data []byte) error {
	type unmarshaler Activity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Activity(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Activity) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The activity's type.
//
// - `NOTE` - NOTE
// - `EMAIL` - EMAIL
// - `OTHER` - OTHER
type ActivityActivityType struct {
	typeName         string
	ActivityTypeEnum ActivityTypeEnum
	String           string
}

func NewActivityActivityTypeFromActivityTypeEnum(value ActivityTypeEnum) *ActivityActivityType {
	return &ActivityActivityType{typeName: "activityTypeEnum", ActivityTypeEnum: value}
}

func NewActivityActivityTypeFromString(value string) *ActivityActivityType {
	return &ActivityActivityType{typeName: "string", String: value}
}

func (a *ActivityActivityType) UnmarshalJSON(data []byte) error {
	var valueActivityTypeEnum ActivityTypeEnum
	if err := json.Unmarshal(data, &valueActivityTypeEnum); err == nil {
		a.typeName = "activityTypeEnum"
		a.ActivityTypeEnum = valueActivityTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActivityActivityType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "activityTypeEnum":
		return json.Marshal(a.ActivityTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type ActivityActivityTypeVisitor interface {
	VisitActivityTypeEnum(ActivityTypeEnum) error
	VisitString(string) error
}

func (a *ActivityActivityType) Accept(visitor ActivityActivityTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "activityTypeEnum":
		return visitor.VisitActivityTypeEnum(a.ActivityTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// # The Activity Object
//
// ### Description
//
// The `Activity` object is used to represent an activity for a candidate performed by a user.
//
// ### Usage Example
//
// Fetch from the `LIST Activities` endpoint and filter by `ID` to show all activities.
type ActivityRequest struct {
	// The user that performed the action.
	User *ActivityRequestUser `json:"user,omitempty"`
	// The activity's type.
	//
	// - `NOTE` - NOTE
	// - `EMAIL` - EMAIL
	// - `OTHER` - OTHER
	ActivityType *ActivityRequestActivityType `json:"activity_type,omitempty"`
	// The activity's subject.
	Subject *string `json:"subject,omitempty"`
	// The activity's body.
	Body *string `json:"body,omitempty"`
	// The activity's visibility.
	//
	// - `ADMIN_ONLY` - ADMIN_ONLY
	// - `PUBLIC` - PUBLIC
	// - `PRIVATE` - PRIVATE
	Visibility          *ActivityRequestVisibility `json:"visibility,omitempty"`
	Candidate           *string                    `json:"candidate,omitempty"`
	IntegrationParams   map[string]interface{}     `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}     `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActivityRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ActivityRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActivityRequest(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActivityRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The activity's type.
//
// - `NOTE` - NOTE
// - `EMAIL` - EMAIL
// - `OTHER` - OTHER
type ActivityRequestActivityType struct {
	typeName         string
	ActivityTypeEnum ActivityTypeEnum
	String           string
}

func NewActivityRequestActivityTypeFromActivityTypeEnum(value ActivityTypeEnum) *ActivityRequestActivityType {
	return &ActivityRequestActivityType{typeName: "activityTypeEnum", ActivityTypeEnum: value}
}

func NewActivityRequestActivityTypeFromString(value string) *ActivityRequestActivityType {
	return &ActivityRequestActivityType{typeName: "string", String: value}
}

func (a *ActivityRequestActivityType) UnmarshalJSON(data []byte) error {
	var valueActivityTypeEnum ActivityTypeEnum
	if err := json.Unmarshal(data, &valueActivityTypeEnum); err == nil {
		a.typeName = "activityTypeEnum"
		a.ActivityTypeEnum = valueActivityTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActivityRequestActivityType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "activityTypeEnum":
		return json.Marshal(a.ActivityTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type ActivityRequestActivityTypeVisitor interface {
	VisitActivityTypeEnum(ActivityTypeEnum) error
	VisitString(string) error
}

func (a *ActivityRequestActivityType) Accept(visitor ActivityRequestActivityTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "activityTypeEnum":
		return visitor.VisitActivityTypeEnum(a.ActivityTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// The user that performed the action.
type ActivityRequestUser struct {
	typeName   string
	String     string
	RemoteUser *RemoteUser
}

func NewActivityRequestUserFromString(value string) *ActivityRequestUser {
	return &ActivityRequestUser{typeName: "string", String: value}
}

func NewActivityRequestUserFromRemoteUser(value *RemoteUser) *ActivityRequestUser {
	return &ActivityRequestUser{typeName: "remoteUser", RemoteUser: value}
}

func (a *ActivityRequestUser) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		a.typeName = "remoteUser"
		a.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActivityRequestUser) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "remoteUser":
		return json.Marshal(a.RemoteUser)
	}
}

type ActivityRequestUserVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (a *ActivityRequestUser) Accept(visitor ActivityRequestUserVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "remoteUser":
		return visitor.VisitRemoteUser(a.RemoteUser)
	}
}

// The activity's visibility.
//
// - `ADMIN_ONLY` - ADMIN_ONLY
// - `PUBLIC` - PUBLIC
// - `PRIVATE` - PRIVATE
type ActivityRequestVisibility struct {
	typeName       string
	VisibilityEnum VisibilityEnum
	String         string
}

func NewActivityRequestVisibilityFromVisibilityEnum(value VisibilityEnum) *ActivityRequestVisibility {
	return &ActivityRequestVisibility{typeName: "visibilityEnum", VisibilityEnum: value}
}

func NewActivityRequestVisibilityFromString(value string) *ActivityRequestVisibility {
	return &ActivityRequestVisibility{typeName: "string", String: value}
}

func (a *ActivityRequestVisibility) UnmarshalJSON(data []byte) error {
	var valueVisibilityEnum VisibilityEnum
	if err := json.Unmarshal(data, &valueVisibilityEnum); err == nil {
		a.typeName = "visibilityEnum"
		a.VisibilityEnum = valueVisibilityEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActivityRequestVisibility) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "visibilityEnum":
		return json.Marshal(a.VisibilityEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type ActivityRequestVisibilityVisitor interface {
	VisitVisibilityEnum(VisibilityEnum) error
	VisitString(string) error
}

func (a *ActivityRequestVisibility) Accept(visitor ActivityRequestVisibilityVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "visibilityEnum":
		return visitor.VisitVisibilityEnum(a.VisibilityEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

type ActivityResponse struct {
	Model    *Activity                   `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActivityResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActivityResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActivityResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActivityResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// - `NOTE` - NOTE
// - `EMAIL` - EMAIL
// - `OTHER` - OTHER
type ActivityTypeEnum string

const (
	ActivityTypeEnumNote  ActivityTypeEnum = "NOTE"
	ActivityTypeEnumEmail ActivityTypeEnum = "EMAIL"
	ActivityTypeEnumOther ActivityTypeEnum = "OTHER"
)

func NewActivityTypeEnumFromString(s string) (ActivityTypeEnum, error) {
	switch s {
	case "NOTE":
		return ActivityTypeEnumNote, nil
	case "EMAIL":
		return ActivityTypeEnumEmail, nil
	case "OTHER":
		return ActivityTypeEnumOther, nil
	}
	var t ActivityTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActivityTypeEnum) Ptr() *ActivityTypeEnum {
	return &a
}

// The user that performed the action.
type ActivityUser struct {
	typeName   string
	String     string
	RemoteUser *RemoteUser
}

func NewActivityUserFromString(value string) *ActivityUser {
	return &ActivityUser{typeName: "string", String: value}
}

func NewActivityUserFromRemoteUser(value *RemoteUser) *ActivityUser {
	return &ActivityUser{typeName: "remoteUser", RemoteUser: value}
}

func (a *ActivityUser) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		a.typeName = "remoteUser"
		a.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActivityUser) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "remoteUser":
		return json.Marshal(a.RemoteUser)
	}
}

type ActivityUserVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (a *ActivityUser) Accept(visitor ActivityUserVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "remoteUser":
		return visitor.VisitRemoteUser(a.RemoteUser)
	}
}

// The activity's visibility.
//
// - `ADMIN_ONLY` - ADMIN_ONLY
// - `PUBLIC` - PUBLIC
// - `PRIVATE` - PRIVATE
type ActivityVisibility struct {
	typeName       string
	VisibilityEnum VisibilityEnum
	String         string
}

func NewActivityVisibilityFromVisibilityEnum(value VisibilityEnum) *ActivityVisibility {
	return &ActivityVisibility{typeName: "visibilityEnum", VisibilityEnum: value}
}

func NewActivityVisibilityFromString(value string) *ActivityVisibility {
	return &ActivityVisibility{typeName: "string", String: value}
}

func (a *ActivityVisibility) UnmarshalJSON(data []byte) error {
	var valueVisibilityEnum VisibilityEnum
	if err := json.Unmarshal(data, &valueVisibilityEnum); err == nil {
		a.typeName = "visibilityEnum"
		a.VisibilityEnum = valueVisibilityEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActivityVisibility) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "visibilityEnum":
		return json.Marshal(a.VisibilityEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type ActivityVisibilityVisitor interface {
	VisitVisibilityEnum(VisibilityEnum) error
	VisitString(string) error
}

func (a *ActivityVisibility) Accept(visitor ActivityVisibilityVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "visibilityEnum":
		return visitor.VisitVisibilityEnum(a.VisibilityEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

type AdvancedMetadata struct {
	Id           string        `json:"id"`
	DisplayName  *string       `json:"display_name,omitempty"`
	Description  *string       `json:"description,omitempty"`
	IsRequired   *bool         `json:"is_required,omitempty"`
	IsCustom     *bool         `json:"is_custom,omitempty"`
	FieldChoices []interface{} `json:"field_choices,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AdvancedMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler AdvancedMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdvancedMetadata(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdvancedMetadata) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The Application Object
//
// ### Description
//
// The Application Object is used to represent a candidate's journey through a particular Job's recruiting process. If a Candidate applies for multiple Jobs, there will be a separate Application for each Job if the third-party integration allows it.
//
// ### Usage Example
//
// Fetch from the `LIST Applications` endpoint and filter by `ID` to show all applications.
type Application struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The candidate applying.
	Candidate *ApplicationCandidate `json:"candidate,omitempty"`
	// The job being applied for.
	Job *ApplicationJob `json:"job,omitempty"`
	// When the application was submitted.
	AppliedAt *time.Time `json:"applied_at,omitempty"`
	// When the application was rejected.
	RejectedAt *time.Time               `json:"rejected_at,omitempty"`
	Offers     []*ApplicationOffersItem `json:"offers,omitempty"`
	// The application's source.
	Source *string `json:"source,omitempty"`
	// The user credited for this application.
	CreditedTo               *ApplicationCreditedTo                     `json:"credited_to,omitempty"`
	ScreeningQuestionAnswers []*ApplicationScreeningQuestionAnswersItem `json:"screening_question_answers,omitempty"`
	// The application's current stage.
	CurrentStage *ApplicationCurrentStage `json:"current_stage,omitempty"`
	// The application's reason for rejection.
	RejectReason *ApplicationRejectReason `json:"reject_reason,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (a *Application) UnmarshalJSON(data []byte) error {
	type unmarshaler Application
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Application(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Application) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The candidate applying.
type ApplicationCandidate struct {
	typeName  string
	String    string
	Candidate *Candidate
}

func NewApplicationCandidateFromString(value string) *ApplicationCandidate {
	return &ApplicationCandidate{typeName: "string", String: value}
}

func NewApplicationCandidateFromCandidate(value *Candidate) *ApplicationCandidate {
	return &ApplicationCandidate{typeName: "candidate", Candidate: value}
}

func (a *ApplicationCandidate) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueCandidate := new(Candidate)
	if err := json.Unmarshal(data, &valueCandidate); err == nil {
		a.typeName = "candidate"
		a.Candidate = valueCandidate
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationCandidate) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "candidate":
		return json.Marshal(a.Candidate)
	}
}

type ApplicationCandidateVisitor interface {
	VisitString(string) error
	VisitCandidate(*Candidate) error
}

func (a *ApplicationCandidate) Accept(visitor ApplicationCandidateVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "candidate":
		return visitor.VisitCandidate(a.Candidate)
	}
}

// The user credited for this application.
type ApplicationCreditedTo struct {
	typeName   string
	String     string
	RemoteUser *RemoteUser
}

func NewApplicationCreditedToFromString(value string) *ApplicationCreditedTo {
	return &ApplicationCreditedTo{typeName: "string", String: value}
}

func NewApplicationCreditedToFromRemoteUser(value *RemoteUser) *ApplicationCreditedTo {
	return &ApplicationCreditedTo{typeName: "remoteUser", RemoteUser: value}
}

func (a *ApplicationCreditedTo) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		a.typeName = "remoteUser"
		a.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationCreditedTo) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "remoteUser":
		return json.Marshal(a.RemoteUser)
	}
}

type ApplicationCreditedToVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (a *ApplicationCreditedTo) Accept(visitor ApplicationCreditedToVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "remoteUser":
		return visitor.VisitRemoteUser(a.RemoteUser)
	}
}

// The application's current stage.
type ApplicationCurrentStage struct {
	typeName          string
	String            string
	JobInterviewStage *JobInterviewStage
}

func NewApplicationCurrentStageFromString(value string) *ApplicationCurrentStage {
	return &ApplicationCurrentStage{typeName: "string", String: value}
}

func NewApplicationCurrentStageFromJobInterviewStage(value *JobInterviewStage) *ApplicationCurrentStage {
	return &ApplicationCurrentStage{typeName: "jobInterviewStage", JobInterviewStage: value}
}

func (a *ApplicationCurrentStage) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueJobInterviewStage := new(JobInterviewStage)
	if err := json.Unmarshal(data, &valueJobInterviewStage); err == nil {
		a.typeName = "jobInterviewStage"
		a.JobInterviewStage = valueJobInterviewStage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationCurrentStage) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "jobInterviewStage":
		return json.Marshal(a.JobInterviewStage)
	}
}

type ApplicationCurrentStageVisitor interface {
	VisitString(string) error
	VisitJobInterviewStage(*JobInterviewStage) error
}

func (a *ApplicationCurrentStage) Accept(visitor ApplicationCurrentStageVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "jobInterviewStage":
		return visitor.VisitJobInterviewStage(a.JobInterviewStage)
	}
}

// The job being applied for.
type ApplicationJob struct {
	typeName string
	String   string
	Job      *Job
}

func NewApplicationJobFromString(value string) *ApplicationJob {
	return &ApplicationJob{typeName: "string", String: value}
}

func NewApplicationJobFromJob(value *Job) *ApplicationJob {
	return &ApplicationJob{typeName: "job", Job: value}
}

func (a *ApplicationJob) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueJob := new(Job)
	if err := json.Unmarshal(data, &valueJob); err == nil {
		a.typeName = "job"
		a.Job = valueJob
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationJob) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "job":
		return json.Marshal(a.Job)
	}
}

type ApplicationJobVisitor interface {
	VisitString(string) error
	VisitJob(*Job) error
}

func (a *ApplicationJob) Accept(visitor ApplicationJobVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "job":
		return visitor.VisitJob(a.Job)
	}
}

type ApplicationOffersItem struct {
	typeName string
	String   string
	Offer    *Offer
}

func NewApplicationOffersItemFromString(value string) *ApplicationOffersItem {
	return &ApplicationOffersItem{typeName: "string", String: value}
}

func NewApplicationOffersItemFromOffer(value *Offer) *ApplicationOffersItem {
	return &ApplicationOffersItem{typeName: "offer", Offer: value}
}

func (a *ApplicationOffersItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueOffer := new(Offer)
	if err := json.Unmarshal(data, &valueOffer); err == nil {
		a.typeName = "offer"
		a.Offer = valueOffer
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationOffersItem) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "offer":
		return json.Marshal(a.Offer)
	}
}

type ApplicationOffersItemVisitor interface {
	VisitString(string) error
	VisitOffer(*Offer) error
}

func (a *ApplicationOffersItem) Accept(visitor ApplicationOffersItemVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "offer":
		return visitor.VisitOffer(a.Offer)
	}
}

// The application's reason for rejection.
type ApplicationRejectReason struct {
	typeName     string
	String       string
	RejectReason *RejectReason
}

func NewApplicationRejectReasonFromString(value string) *ApplicationRejectReason {
	return &ApplicationRejectReason{typeName: "string", String: value}
}

func NewApplicationRejectReasonFromRejectReason(value *RejectReason) *ApplicationRejectReason {
	return &ApplicationRejectReason{typeName: "rejectReason", RejectReason: value}
}

func (a *ApplicationRejectReason) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueRejectReason := new(RejectReason)
	if err := json.Unmarshal(data, &valueRejectReason); err == nil {
		a.typeName = "rejectReason"
		a.RejectReason = valueRejectReason
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationRejectReason) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "rejectReason":
		return json.Marshal(a.RejectReason)
	}
}

type ApplicationRejectReasonVisitor interface {
	VisitString(string) error
	VisitRejectReason(*RejectReason) error
}

func (a *ApplicationRejectReason) Accept(visitor ApplicationRejectReasonVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "rejectReason":
		return visitor.VisitRejectReason(a.RejectReason)
	}
}

// # The Application Object
//
// ### Description
//
// The Application Object is used to represent a candidate's journey through a particular Job's recruiting process. If a Candidate applies for multiple Jobs, there will be a separate Application for each Job if the third-party integration allows it.
//
// ### Usage Example
//
// Fetch from the `LIST Applications` endpoint and filter by `ID` to show all applications.
type ApplicationRequest struct {
	// The candidate applying.
	Candidate *ApplicationRequestCandidate `json:"candidate,omitempty"`
	// The job being applied for.
	Job *ApplicationRequestJob `json:"job,omitempty"`
	// When the application was submitted.
	AppliedAt *time.Time `json:"applied_at,omitempty"`
	// When the application was rejected.
	RejectedAt *time.Time                      `json:"rejected_at,omitempty"`
	Offers     []*ApplicationRequestOffersItem `json:"offers,omitempty"`
	// The application's source.
	Source *string `json:"source,omitempty"`
	// The user credited for this application.
	CreditedTo               *ApplicationRequestCreditedTo                     `json:"credited_to,omitempty"`
	ScreeningQuestionAnswers []*ApplicationRequestScreeningQuestionAnswersItem `json:"screening_question_answers,omitempty"`
	// The application's current stage.
	CurrentStage *ApplicationRequestCurrentStage `json:"current_stage,omitempty"`
	// The application's reason for rejection.
	RejectReason        *ApplicationRequestRejectReason `json:"reject_reason,omitempty"`
	RemoteTemplateId    *string                         `json:"remote_template_id,omitempty"`
	IntegrationParams   map[string]interface{}          `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}          `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ApplicationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationRequest(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The candidate applying.
type ApplicationRequestCandidate struct {
	typeName  string
	String    string
	Candidate *Candidate
}

func NewApplicationRequestCandidateFromString(value string) *ApplicationRequestCandidate {
	return &ApplicationRequestCandidate{typeName: "string", String: value}
}

func NewApplicationRequestCandidateFromCandidate(value *Candidate) *ApplicationRequestCandidate {
	return &ApplicationRequestCandidate{typeName: "candidate", Candidate: value}
}

func (a *ApplicationRequestCandidate) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueCandidate := new(Candidate)
	if err := json.Unmarshal(data, &valueCandidate); err == nil {
		a.typeName = "candidate"
		a.Candidate = valueCandidate
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationRequestCandidate) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "candidate":
		return json.Marshal(a.Candidate)
	}
}

type ApplicationRequestCandidateVisitor interface {
	VisitString(string) error
	VisitCandidate(*Candidate) error
}

func (a *ApplicationRequestCandidate) Accept(visitor ApplicationRequestCandidateVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "candidate":
		return visitor.VisitCandidate(a.Candidate)
	}
}

// The user credited for this application.
type ApplicationRequestCreditedTo struct {
	typeName   string
	String     string
	RemoteUser *RemoteUser
}

func NewApplicationRequestCreditedToFromString(value string) *ApplicationRequestCreditedTo {
	return &ApplicationRequestCreditedTo{typeName: "string", String: value}
}

func NewApplicationRequestCreditedToFromRemoteUser(value *RemoteUser) *ApplicationRequestCreditedTo {
	return &ApplicationRequestCreditedTo{typeName: "remoteUser", RemoteUser: value}
}

func (a *ApplicationRequestCreditedTo) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		a.typeName = "remoteUser"
		a.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationRequestCreditedTo) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "remoteUser":
		return json.Marshal(a.RemoteUser)
	}
}

type ApplicationRequestCreditedToVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (a *ApplicationRequestCreditedTo) Accept(visitor ApplicationRequestCreditedToVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "remoteUser":
		return visitor.VisitRemoteUser(a.RemoteUser)
	}
}

// The application's current stage.
type ApplicationRequestCurrentStage struct {
	typeName          string
	String            string
	JobInterviewStage *JobInterviewStage
}

func NewApplicationRequestCurrentStageFromString(value string) *ApplicationRequestCurrentStage {
	return &ApplicationRequestCurrentStage{typeName: "string", String: value}
}

func NewApplicationRequestCurrentStageFromJobInterviewStage(value *JobInterviewStage) *ApplicationRequestCurrentStage {
	return &ApplicationRequestCurrentStage{typeName: "jobInterviewStage", JobInterviewStage: value}
}

func (a *ApplicationRequestCurrentStage) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueJobInterviewStage := new(JobInterviewStage)
	if err := json.Unmarshal(data, &valueJobInterviewStage); err == nil {
		a.typeName = "jobInterviewStage"
		a.JobInterviewStage = valueJobInterviewStage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationRequestCurrentStage) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "jobInterviewStage":
		return json.Marshal(a.JobInterviewStage)
	}
}

type ApplicationRequestCurrentStageVisitor interface {
	VisitString(string) error
	VisitJobInterviewStage(*JobInterviewStage) error
}

func (a *ApplicationRequestCurrentStage) Accept(visitor ApplicationRequestCurrentStageVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "jobInterviewStage":
		return visitor.VisitJobInterviewStage(a.JobInterviewStage)
	}
}

// The job being applied for.
type ApplicationRequestJob struct {
	typeName string
	String   string
	Job      *Job
}

func NewApplicationRequestJobFromString(value string) *ApplicationRequestJob {
	return &ApplicationRequestJob{typeName: "string", String: value}
}

func NewApplicationRequestJobFromJob(value *Job) *ApplicationRequestJob {
	return &ApplicationRequestJob{typeName: "job", Job: value}
}

func (a *ApplicationRequestJob) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueJob := new(Job)
	if err := json.Unmarshal(data, &valueJob); err == nil {
		a.typeName = "job"
		a.Job = valueJob
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationRequestJob) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "job":
		return json.Marshal(a.Job)
	}
}

type ApplicationRequestJobVisitor interface {
	VisitString(string) error
	VisitJob(*Job) error
}

func (a *ApplicationRequestJob) Accept(visitor ApplicationRequestJobVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "job":
		return visitor.VisitJob(a.Job)
	}
}

type ApplicationRequestOffersItem struct {
	typeName string
	String   string
	Offer    *Offer
}

func NewApplicationRequestOffersItemFromString(value string) *ApplicationRequestOffersItem {
	return &ApplicationRequestOffersItem{typeName: "string", String: value}
}

func NewApplicationRequestOffersItemFromOffer(value *Offer) *ApplicationRequestOffersItem {
	return &ApplicationRequestOffersItem{typeName: "offer", Offer: value}
}

func (a *ApplicationRequestOffersItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueOffer := new(Offer)
	if err := json.Unmarshal(data, &valueOffer); err == nil {
		a.typeName = "offer"
		a.Offer = valueOffer
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationRequestOffersItem) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "offer":
		return json.Marshal(a.Offer)
	}
}

type ApplicationRequestOffersItemVisitor interface {
	VisitString(string) error
	VisitOffer(*Offer) error
}

func (a *ApplicationRequestOffersItem) Accept(visitor ApplicationRequestOffersItemVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "offer":
		return visitor.VisitOffer(a.Offer)
	}
}

// The application's reason for rejection.
type ApplicationRequestRejectReason struct {
	typeName     string
	String       string
	RejectReason *RejectReason
}

func NewApplicationRequestRejectReasonFromString(value string) *ApplicationRequestRejectReason {
	return &ApplicationRequestRejectReason{typeName: "string", String: value}
}

func NewApplicationRequestRejectReasonFromRejectReason(value *RejectReason) *ApplicationRequestRejectReason {
	return &ApplicationRequestRejectReason{typeName: "rejectReason", RejectReason: value}
}

func (a *ApplicationRequestRejectReason) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueRejectReason := new(RejectReason)
	if err := json.Unmarshal(data, &valueRejectReason); err == nil {
		a.typeName = "rejectReason"
		a.RejectReason = valueRejectReason
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationRequestRejectReason) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "rejectReason":
		return json.Marshal(a.RejectReason)
	}
}

type ApplicationRequestRejectReasonVisitor interface {
	VisitString(string) error
	VisitRejectReason(*RejectReason) error
}

func (a *ApplicationRequestRejectReason) Accept(visitor ApplicationRequestRejectReasonVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "rejectReason":
		return visitor.VisitRejectReason(a.RejectReason)
	}
}

type ApplicationRequestScreeningQuestionAnswersItem struct {
	typeName                       string
	String                         string
	ScreeningQuestionAnswerRequest *ScreeningQuestionAnswerRequest
}

func NewApplicationRequestScreeningQuestionAnswersItemFromString(value string) *ApplicationRequestScreeningQuestionAnswersItem {
	return &ApplicationRequestScreeningQuestionAnswersItem{typeName: "string", String: value}
}

func NewApplicationRequestScreeningQuestionAnswersItemFromScreeningQuestionAnswerRequest(value *ScreeningQuestionAnswerRequest) *ApplicationRequestScreeningQuestionAnswersItem {
	return &ApplicationRequestScreeningQuestionAnswersItem{typeName: "screeningQuestionAnswerRequest", ScreeningQuestionAnswerRequest: value}
}

func (a *ApplicationRequestScreeningQuestionAnswersItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueScreeningQuestionAnswerRequest := new(ScreeningQuestionAnswerRequest)
	if err := json.Unmarshal(data, &valueScreeningQuestionAnswerRequest); err == nil {
		a.typeName = "screeningQuestionAnswerRequest"
		a.ScreeningQuestionAnswerRequest = valueScreeningQuestionAnswerRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationRequestScreeningQuestionAnswersItem) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "screeningQuestionAnswerRequest":
		return json.Marshal(a.ScreeningQuestionAnswerRequest)
	}
}

type ApplicationRequestScreeningQuestionAnswersItemVisitor interface {
	VisitString(string) error
	VisitScreeningQuestionAnswerRequest(*ScreeningQuestionAnswerRequest) error
}

func (a *ApplicationRequestScreeningQuestionAnswersItem) Accept(visitor ApplicationRequestScreeningQuestionAnswersItemVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "screeningQuestionAnswerRequest":
		return visitor.VisitScreeningQuestionAnswerRequest(a.ScreeningQuestionAnswerRequest)
	}
}

type ApplicationResponse struct {
	Model    *Application                `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ApplicationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApplicationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApplicationResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApplicationResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApplicationScreeningQuestionAnswersItem struct {
	typeName                string
	String                  string
	ScreeningQuestionAnswer *ScreeningQuestionAnswer
}

func NewApplicationScreeningQuestionAnswersItemFromString(value string) *ApplicationScreeningQuestionAnswersItem {
	return &ApplicationScreeningQuestionAnswersItem{typeName: "string", String: value}
}

func NewApplicationScreeningQuestionAnswersItemFromScreeningQuestionAnswer(value *ScreeningQuestionAnswer) *ApplicationScreeningQuestionAnswersItem {
	return &ApplicationScreeningQuestionAnswersItem{typeName: "screeningQuestionAnswer", ScreeningQuestionAnswer: value}
}

func (a *ApplicationScreeningQuestionAnswersItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueScreeningQuestionAnswer := new(ScreeningQuestionAnswer)
	if err := json.Unmarshal(data, &valueScreeningQuestionAnswer); err == nil {
		a.typeName = "screeningQuestionAnswer"
		a.ScreeningQuestionAnswer = valueScreeningQuestionAnswer
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ApplicationScreeningQuestionAnswersItem) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "screeningQuestionAnswer":
		return json.Marshal(a.ScreeningQuestionAnswer)
	}
}

type ApplicationScreeningQuestionAnswersItemVisitor interface {
	VisitString(string) error
	VisitScreeningQuestionAnswer(*ScreeningQuestionAnswer) error
}

func (a *ApplicationScreeningQuestionAnswersItem) Accept(visitor ApplicationScreeningQuestionAnswersItemVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "screeningQuestionAnswer":
		return visitor.VisitScreeningQuestionAnswer(a.ScreeningQuestionAnswer)
	}
}

type AsyncPassthroughReciept struct {
	AsyncPassthroughReceiptId string `json:"async_passthrough_receipt_id"`

	_rawJSON json.RawMessage
}

func (a *AsyncPassthroughReciept) UnmarshalJSON(data []byte) error {
	type unmarshaler AsyncPassthroughReciept
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AsyncPassthroughReciept(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AsyncPassthroughReciept) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The Attachment Object
//
// ### Description
//
// The `Attachment` object is used to represent a file attached to a candidate.
//
// ### Usage Example
//
// Fetch from the `LIST Attachments` endpoint and view attachments accessible by a company.
type Attachment struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The attachment's name.
	FileName *string `json:"file_name,omitempty"`
	// The attachment's url.
	FileUrl   *string `json:"file_url,omitempty"`
	Candidate *string `json:"candidate,omitempty"`
	// The attachment's type.
	//
	// - `RESUME` - RESUME
	// - `COVER_LETTER` - COVER_LETTER
	// - `OFFER_LETTER` - OFFER_LETTER
	// - `OTHER` - OTHER
	AttachmentType *AttachmentAttachmentType `json:"attachment_type,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (a *Attachment) UnmarshalJSON(data []byte) error {
	type unmarshaler Attachment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Attachment(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Attachment) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The attachment's type.
//
// - `RESUME` - RESUME
// - `COVER_LETTER` - COVER_LETTER
// - `OFFER_LETTER` - OFFER_LETTER
// - `OTHER` - OTHER
type AttachmentAttachmentType struct {
	typeName           string
	AttachmentTypeEnum AttachmentTypeEnum
	String             string
}

func NewAttachmentAttachmentTypeFromAttachmentTypeEnum(value AttachmentTypeEnum) *AttachmentAttachmentType {
	return &AttachmentAttachmentType{typeName: "attachmentTypeEnum", AttachmentTypeEnum: value}
}

func NewAttachmentAttachmentTypeFromString(value string) *AttachmentAttachmentType {
	return &AttachmentAttachmentType{typeName: "string", String: value}
}

func (a *AttachmentAttachmentType) UnmarshalJSON(data []byte) error {
	var valueAttachmentTypeEnum AttachmentTypeEnum
	if err := json.Unmarshal(data, &valueAttachmentTypeEnum); err == nil {
		a.typeName = "attachmentTypeEnum"
		a.AttachmentTypeEnum = valueAttachmentTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AttachmentAttachmentType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "attachmentTypeEnum":
		return json.Marshal(a.AttachmentTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AttachmentAttachmentTypeVisitor interface {
	VisitAttachmentTypeEnum(AttachmentTypeEnum) error
	VisitString(string) error
}

func (a *AttachmentAttachmentType) Accept(visitor AttachmentAttachmentTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "attachmentTypeEnum":
		return visitor.VisitAttachmentTypeEnum(a.AttachmentTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// # The Attachment Object
//
// ### Description
//
// The `Attachment` object is used to represent a file attached to a candidate.
//
// ### Usage Example
//
// Fetch from the `LIST Attachments` endpoint and view attachments accessible by a company.
type AttachmentRequest struct {
	// The attachment's name.
	FileName *string `json:"file_name,omitempty"`
	// The attachment's url.
	FileUrl   *string `json:"file_url,omitempty"`
	Candidate *string `json:"candidate,omitempty"`
	// The attachment's type.
	//
	// - `RESUME` - RESUME
	// - `COVER_LETTER` - COVER_LETTER
	// - `OFFER_LETTER` - OFFER_LETTER
	// - `OTHER` - OTHER
	AttachmentType      *AttachmentRequestAttachmentType `json:"attachment_type,omitempty"`
	IntegrationParams   map[string]interface{}           `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}           `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AttachmentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler AttachmentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttachmentRequest(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttachmentRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The attachment's type.
//
// - `RESUME` - RESUME
// - `COVER_LETTER` - COVER_LETTER
// - `OFFER_LETTER` - OFFER_LETTER
// - `OTHER` - OTHER
type AttachmentRequestAttachmentType struct {
	typeName           string
	AttachmentTypeEnum AttachmentTypeEnum
	String             string
}

func NewAttachmentRequestAttachmentTypeFromAttachmentTypeEnum(value AttachmentTypeEnum) *AttachmentRequestAttachmentType {
	return &AttachmentRequestAttachmentType{typeName: "attachmentTypeEnum", AttachmentTypeEnum: value}
}

func NewAttachmentRequestAttachmentTypeFromString(value string) *AttachmentRequestAttachmentType {
	return &AttachmentRequestAttachmentType{typeName: "string", String: value}
}

func (a *AttachmentRequestAttachmentType) UnmarshalJSON(data []byte) error {
	var valueAttachmentTypeEnum AttachmentTypeEnum
	if err := json.Unmarshal(data, &valueAttachmentTypeEnum); err == nil {
		a.typeName = "attachmentTypeEnum"
		a.AttachmentTypeEnum = valueAttachmentTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AttachmentRequestAttachmentType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "attachmentTypeEnum":
		return json.Marshal(a.AttachmentTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AttachmentRequestAttachmentTypeVisitor interface {
	VisitAttachmentTypeEnum(AttachmentTypeEnum) error
	VisitString(string) error
}

func (a *AttachmentRequestAttachmentType) Accept(visitor AttachmentRequestAttachmentTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "attachmentTypeEnum":
		return visitor.VisitAttachmentTypeEnum(a.AttachmentTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

type AttachmentResponse struct {
	Model    *Attachment                 `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AttachmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AttachmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttachmentResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttachmentResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// - `RESUME` - RESUME
// - `COVER_LETTER` - COVER_LETTER
// - `OFFER_LETTER` - OFFER_LETTER
// - `OTHER` - OTHER
type AttachmentTypeEnum string

const (
	AttachmentTypeEnumResume      AttachmentTypeEnum = "RESUME"
	AttachmentTypeEnumCoverLetter AttachmentTypeEnum = "COVER_LETTER"
	AttachmentTypeEnumOfferLetter AttachmentTypeEnum = "OFFER_LETTER"
	AttachmentTypeEnumOther       AttachmentTypeEnum = "OTHER"
)

func NewAttachmentTypeEnumFromString(s string) (AttachmentTypeEnum, error) {
	switch s {
	case "RESUME":
		return AttachmentTypeEnumResume, nil
	case "COVER_LETTER":
		return AttachmentTypeEnumCoverLetter, nil
	case "OFFER_LETTER":
		return AttachmentTypeEnumOfferLetter, nil
	case "OTHER":
		return AttachmentTypeEnumOther, nil
	}
	var t AttachmentTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AttachmentTypeEnum) Ptr() *AttachmentTypeEnum {
	return &a
}

type AuditLogEvent struct {
	Id *string `json:"id,omitempty"`
	// The User's full name at the time of this Event occurring.
	UserName *string `json:"user_name,omitempty"`
	// The User's email at the time of this Event occurring.
	UserEmail *string `json:"user_email,omitempty"`
	// Designates the role of the user (or SYSTEM/API if action not taken by a user) at the time of this Event occurring.
	//
	// - `ADMIN` - ADMIN
	// - `DEVELOPER` - DEVELOPER
	// - `MEMBER` - MEMBER
	// - `API` - API
	// - `SYSTEM` - SYSTEM
	// - `MERGE_TEAM` - MERGE_TEAM
	Role      *AuditLogEventRole `json:"role,omitempty"`
	IpAddress string             `json:"ip_address"`
	// Designates the type of event that occurred.
	//
	// - `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
	// - `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
	// - `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
	// - `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
	// - `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
	// - `INVITED_USER` - INVITED_USER
	// - `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
	// - `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
	// - `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
	// - `CREATED_DESTINATION` - CREATED_DESTINATION
	// - `DELETED_DESTINATION` - DELETED_DESTINATION
	// - `CHANGED_DESTINATION` - CHANGED_DESTINATION
	// - `CHANGED_SCOPES` - CHANGED_SCOPES
	// - `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
	// - `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
	// - `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
	// - `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
	// - `ENABLED_CATEGORY` - ENABLED_CATEGORY
	// - `DISABLED_CATEGORY` - DISABLED_CATEGORY
	// - `CHANGED_PASSWORD` - CHANGED_PASSWORD
	// - `RESET_PASSWORD` - RESET_PASSWORD
	// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
	// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
	// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
	// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
	// - `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
	// - `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
	// - `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
	// - `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
	// - `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
	// - `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
	// - `CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
	// - `CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
	// - `DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
	// - `FORCED_LINKED_ACCOUNT_RESYNC` - FORCED_LINKED_ACCOUNT_RESYNC
	// - `MUTED_ISSUE` - MUTED_ISSUE
	// - `GENERATED_MAGIC_LINK` - GENERATED_MAGIC_LINK
	// - `ENABLED_MERGE_WEBHOOK` - ENABLED_MERGE_WEBHOOK
	// - `DISABLED_MERGE_WEBHOOK` - DISABLED_MERGE_WEBHOOK
	// - `MERGE_WEBHOOK_TARGET_CHANGED` - MERGE_WEBHOOK_TARGET_CHANGED
	// - `END_USER_CREDENTIALS_ACCESSED` - END_USER_CREDENTIALS_ACCESSED
	EventType        *AuditLogEventEventType `json:"event_type,omitempty"`
	EventDescription string                  `json:"event_description"`
	CreatedAt        *time.Time              `json:"created_at,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AuditLogEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler AuditLogEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuditLogEvent(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuditLogEvent) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Designates the type of event that occurred.
//
// - `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
// - `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
// - `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
// - `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
// - `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
// - `INVITED_USER` - INVITED_USER
// - `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
// - `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
// - `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
// - `CREATED_DESTINATION` - CREATED_DESTINATION
// - `DELETED_DESTINATION` - DELETED_DESTINATION
// - `CHANGED_DESTINATION` - CHANGED_DESTINATION
// - `CHANGED_SCOPES` - CHANGED_SCOPES
// - `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
// - `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
// - `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
// - `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
// - `ENABLED_CATEGORY` - ENABLED_CATEGORY
// - `DISABLED_CATEGORY` - DISABLED_CATEGORY
// - `CHANGED_PASSWORD` - CHANGED_PASSWORD
// - `RESET_PASSWORD` - RESET_PASSWORD
// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// - `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
// - `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
// - `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
// - `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
// - `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
// - `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
// - `CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `FORCED_LINKED_ACCOUNT_RESYNC` - FORCED_LINKED_ACCOUNT_RESYNC
// - `MUTED_ISSUE` - MUTED_ISSUE
// - `GENERATED_MAGIC_LINK` - GENERATED_MAGIC_LINK
// - `ENABLED_MERGE_WEBHOOK` - ENABLED_MERGE_WEBHOOK
// - `DISABLED_MERGE_WEBHOOK` - DISABLED_MERGE_WEBHOOK
// - `MERGE_WEBHOOK_TARGET_CHANGED` - MERGE_WEBHOOK_TARGET_CHANGED
// - `END_USER_CREDENTIALS_ACCESSED` - END_USER_CREDENTIALS_ACCESSED
type AuditLogEventEventType struct {
	typeName      string
	EventTypeEnum EventTypeEnum
	String        string
}

func NewAuditLogEventEventTypeFromEventTypeEnum(value EventTypeEnum) *AuditLogEventEventType {
	return &AuditLogEventEventType{typeName: "eventTypeEnum", EventTypeEnum: value}
}

func NewAuditLogEventEventTypeFromString(value string) *AuditLogEventEventType {
	return &AuditLogEventEventType{typeName: "string", String: value}
}

func (a *AuditLogEventEventType) UnmarshalJSON(data []byte) error {
	var valueEventTypeEnum EventTypeEnum
	if err := json.Unmarshal(data, &valueEventTypeEnum); err == nil {
		a.typeName = "eventTypeEnum"
		a.EventTypeEnum = valueEventTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AuditLogEventEventType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "eventTypeEnum":
		return json.Marshal(a.EventTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AuditLogEventEventTypeVisitor interface {
	VisitEventTypeEnum(EventTypeEnum) error
	VisitString(string) error
}

func (a *AuditLogEventEventType) Accept(visitor AuditLogEventEventTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "eventTypeEnum":
		return visitor.VisitEventTypeEnum(a.EventTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// Designates the role of the user (or SYSTEM/API if action not taken by a user) at the time of this Event occurring.
//
// - `ADMIN` - ADMIN
// - `DEVELOPER` - DEVELOPER
// - `MEMBER` - MEMBER
// - `API` - API
// - `SYSTEM` - SYSTEM
// - `MERGE_TEAM` - MERGE_TEAM
type AuditLogEventRole struct {
	typeName string
	RoleEnum RoleEnum
	String   string
}

func NewAuditLogEventRoleFromRoleEnum(value RoleEnum) *AuditLogEventRole {
	return &AuditLogEventRole{typeName: "roleEnum", RoleEnum: value}
}

func NewAuditLogEventRoleFromString(value string) *AuditLogEventRole {
	return &AuditLogEventRole{typeName: "string", String: value}
}

func (a *AuditLogEventRole) UnmarshalJSON(data []byte) error {
	var valueRoleEnum RoleEnum
	if err := json.Unmarshal(data, &valueRoleEnum); err == nil {
		a.typeName = "roleEnum"
		a.RoleEnum = valueRoleEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AuditLogEventRole) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "roleEnum":
		return json.Marshal(a.RoleEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AuditLogEventRoleVisitor interface {
	VisitRoleEnum(RoleEnum) error
	VisitString(string) error
}

func (a *AuditLogEventRole) Accept(visitor AuditLogEventRoleVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "roleEnum":
		return visitor.VisitRoleEnum(a.RoleEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// # The AvailableActions Object
//
// ### Description
//
// The `Activity` object is used to see all available model/operation combinations for an integration.
//
// ### Usage Example
//
// Fetch all the actions available for the `Zenefits` integration.
type AvailableActions struct {
	Integration              *AccountIntegration `json:"integration,omitempty"`
	PassthroughAvailable     bool                `json:"passthrough_available"`
	AvailableModelOperations []*ModelOperation   `json:"available_model_operations,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AvailableActions) UnmarshalJSON(data []byte) error {
	type unmarshaler AvailableActions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AvailableActions(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AvailableActions) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The Candidate Object
//
// ### Description
//
// The `Candidate` object is used to represent profile information about a given Candidate. Because it is specific to a Candidate, this information stays constant across applications.
//
// ### Usage Example
//
// Fetch from the `LIST Candidates` endpoint and filter by `ID` to show all candidates.
type Candidate struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The candidate's first name.
	FirstName *string `json:"first_name,omitempty"`
	// The candidate's last name.
	LastName *string `json:"last_name,omitempty"`
	// The candidate's current company.
	Company *string `json:"company,omitempty"`
	// The candidate's current title.
	Title *string `json:"title,omitempty"`
	// When the third party's candidate was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// When the third party's candidate was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// When the most recent interaction with the candidate occurred.
	LastInteractionAt *time.Time `json:"last_interaction_at,omitempty"`
	// Whether or not the candidate is private.
	IsPrivate *bool `json:"is_private,omitempty"`
	// Whether or not the candidate can be emailed.
	CanEmail *bool `json:"can_email,omitempty"`
	// The candidate's locations.
	Locations      []*string       `json:"locations,omitempty"`
	PhoneNumbers   []*PhoneNumber  `json:"phone_numbers,omitempty"`
	EmailAddresses []*EmailAddress `json:"email_addresses,omitempty"`
	Urls           []*Url          `json:"urls,omitempty"`
	// Array of `Tag` names as strings.
	Tags []*string `json:"tags,omitempty"`
	// Array of `Application` object IDs.
	Applications []*CandidateApplicationsItem `json:"applications,omitempty"`
	// Array of `Attachment` object IDs.
	Attachments []*CandidateAttachmentsItem `json:"attachments,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (c *Candidate) UnmarshalJSON(data []byte) error {
	type unmarshaler Candidate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Candidate(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Candidate) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CandidateApplicationsItem struct {
	typeName    string
	String      string
	Application *Application
}

func NewCandidateApplicationsItemFromString(value string) *CandidateApplicationsItem {
	return &CandidateApplicationsItem{typeName: "string", String: value}
}

func NewCandidateApplicationsItemFromApplication(value *Application) *CandidateApplicationsItem {
	return &CandidateApplicationsItem{typeName: "application", Application: value}
}

func (c *CandidateApplicationsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueApplication := new(Application)
	if err := json.Unmarshal(data, &valueApplication); err == nil {
		c.typeName = "application"
		c.Application = valueApplication
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CandidateApplicationsItem) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "application":
		return json.Marshal(c.Application)
	}
}

type CandidateApplicationsItemVisitor interface {
	VisitString(string) error
	VisitApplication(*Application) error
}

func (c *CandidateApplicationsItem) Accept(visitor CandidateApplicationsItemVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "application":
		return visitor.VisitApplication(c.Application)
	}
}

type CandidateAttachmentsItem struct {
	typeName   string
	String     string
	Attachment *Attachment
}

func NewCandidateAttachmentsItemFromString(value string) *CandidateAttachmentsItem {
	return &CandidateAttachmentsItem{typeName: "string", String: value}
}

func NewCandidateAttachmentsItemFromAttachment(value *Attachment) *CandidateAttachmentsItem {
	return &CandidateAttachmentsItem{typeName: "attachment", Attachment: value}
}

func (c *CandidateAttachmentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueAttachment := new(Attachment)
	if err := json.Unmarshal(data, &valueAttachment); err == nil {
		c.typeName = "attachment"
		c.Attachment = valueAttachment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CandidateAttachmentsItem) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "attachment":
		return json.Marshal(c.Attachment)
	}
}

type CandidateAttachmentsItemVisitor interface {
	VisitString(string) error
	VisitAttachment(*Attachment) error
}

func (c *CandidateAttachmentsItem) Accept(visitor CandidateAttachmentsItemVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "attachment":
		return visitor.VisitAttachment(c.Attachment)
	}
}

// # The Candidate Object
//
// ### Description
//
// The `Candidate` object is used to represent profile information about a given Candidate. Because it is specific to a Candidate, this information stays constant across applications.
//
// ### Usage Example
//
// Fetch from the `LIST Candidates` endpoint and filter by `ID` to show all candidates.
type CandidateRequest struct {
	// The candidate's first name.
	FirstName *string `json:"first_name,omitempty"`
	// The candidate's last name.
	LastName *string `json:"last_name,omitempty"`
	// The candidate's current company.
	Company *string `json:"company,omitempty"`
	// The candidate's current title.
	Title *string `json:"title,omitempty"`
	// When the most recent interaction with the candidate occurred.
	LastInteractionAt *time.Time `json:"last_interaction_at,omitempty"`
	// Whether or not the candidate is private.
	IsPrivate *bool `json:"is_private,omitempty"`
	// Whether or not the candidate can be emailed.
	CanEmail *bool `json:"can_email,omitempty"`
	// The candidate's locations.
	Locations      []*string              `json:"locations,omitempty"`
	PhoneNumbers   []*PhoneNumberRequest  `json:"phone_numbers,omitempty"`
	EmailAddresses []*EmailAddressRequest `json:"email_addresses,omitempty"`
	Urls           []*UrlRequest          `json:"urls,omitempty"`
	// Array of `Tag` names as strings.
	Tags []*string `json:"tags,omitempty"`
	// Array of `Application` object IDs.
	Applications []*CandidateRequestApplicationsItem `json:"applications,omitempty"`
	// Array of `Attachment` object IDs.
	Attachments         []*CandidateRequestAttachmentsItem `json:"attachments,omitempty"`
	RemoteTemplateId    *string                            `json:"remote_template_id,omitempty"`
	IntegrationParams   map[string]interface{}             `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}             `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CandidateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CandidateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CandidateRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CandidateRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CandidateRequestApplicationsItem struct {
	typeName    string
	String      string
	Application *Application
}

func NewCandidateRequestApplicationsItemFromString(value string) *CandidateRequestApplicationsItem {
	return &CandidateRequestApplicationsItem{typeName: "string", String: value}
}

func NewCandidateRequestApplicationsItemFromApplication(value *Application) *CandidateRequestApplicationsItem {
	return &CandidateRequestApplicationsItem{typeName: "application", Application: value}
}

func (c *CandidateRequestApplicationsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueApplication := new(Application)
	if err := json.Unmarshal(data, &valueApplication); err == nil {
		c.typeName = "application"
		c.Application = valueApplication
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CandidateRequestApplicationsItem) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "application":
		return json.Marshal(c.Application)
	}
}

type CandidateRequestApplicationsItemVisitor interface {
	VisitString(string) error
	VisitApplication(*Application) error
}

func (c *CandidateRequestApplicationsItem) Accept(visitor CandidateRequestApplicationsItemVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "application":
		return visitor.VisitApplication(c.Application)
	}
}

type CandidateRequestAttachmentsItem struct {
	typeName   string
	String     string
	Attachment *Attachment
}

func NewCandidateRequestAttachmentsItemFromString(value string) *CandidateRequestAttachmentsItem {
	return &CandidateRequestAttachmentsItem{typeName: "string", String: value}
}

func NewCandidateRequestAttachmentsItemFromAttachment(value *Attachment) *CandidateRequestAttachmentsItem {
	return &CandidateRequestAttachmentsItem{typeName: "attachment", Attachment: value}
}

func (c *CandidateRequestAttachmentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueAttachment := new(Attachment)
	if err := json.Unmarshal(data, &valueAttachment); err == nil {
		c.typeName = "attachment"
		c.Attachment = valueAttachment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CandidateRequestAttachmentsItem) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "attachment":
		return json.Marshal(c.Attachment)
	}
}

type CandidateRequestAttachmentsItemVisitor interface {
	VisitString(string) error
	VisitAttachment(*Attachment) error
}

func (c *CandidateRequestAttachmentsItem) Accept(visitor CandidateRequestAttachmentsItemVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "attachment":
		return visitor.VisitAttachment(c.Attachment)
	}
}

type CandidateResponse struct {
	Model    *Candidate                  `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CandidateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CandidateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CandidateResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CandidateResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// - `hris` - hris
// - `ats` - ats
// - `accounting` - accounting
// - `ticketing` - ticketing
// - `crm` - crm
// - `mktg` - mktg
// - `filestorage` - filestorage
type CategoriesEnum string

const (
	CategoriesEnumHris        CategoriesEnum = "hris"
	CategoriesEnumAts         CategoriesEnum = "ats"
	CategoriesEnumAccounting  CategoriesEnum = "accounting"
	CategoriesEnumTicketing   CategoriesEnum = "ticketing"
	CategoriesEnumCrm         CategoriesEnum = "crm"
	CategoriesEnumMktg        CategoriesEnum = "mktg"
	CategoriesEnumFilestorage CategoriesEnum = "filestorage"
)

func NewCategoriesEnumFromString(s string) (CategoriesEnum, error) {
	switch s {
	case "hris":
		return CategoriesEnumHris, nil
	case "ats":
		return CategoriesEnumAts, nil
	case "accounting":
		return CategoriesEnumAccounting, nil
	case "ticketing":
		return CategoriesEnumTicketing, nil
	case "crm":
		return CategoriesEnumCrm, nil
	case "mktg":
		return CategoriesEnumMktg, nil
	case "filestorage":
		return CategoriesEnumFilestorage, nil
	}
	var t CategoriesEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CategoriesEnum) Ptr() *CategoriesEnum {
	return &c
}

// - `hris` - hris
// - `ats` - ats
// - `accounting` - accounting
// - `ticketing` - ticketing
// - `crm` - crm
// - `mktg` - mktg
// - `filestorage` - filestorage
type CategoryEnum string

const (
	CategoryEnumHris        CategoryEnum = "hris"
	CategoryEnumAts         CategoryEnum = "ats"
	CategoryEnumAccounting  CategoryEnum = "accounting"
	CategoryEnumTicketing   CategoryEnum = "ticketing"
	CategoryEnumCrm         CategoryEnum = "crm"
	CategoryEnumMktg        CategoryEnum = "mktg"
	CategoryEnumFilestorage CategoryEnum = "filestorage"
)

func NewCategoryEnumFromString(s string) (CategoryEnum, error) {
	switch s {
	case "hris":
		return CategoryEnumHris, nil
	case "ats":
		return CategoryEnumAts, nil
	case "accounting":
		return CategoryEnumAccounting, nil
	case "ticketing":
		return CategoryEnumTicketing, nil
	case "crm":
		return CategoryEnumCrm, nil
	case "mktg":
		return CategoryEnumMktg, nil
	case "filestorage":
		return CategoryEnumFilestorage, nil
	}
	var t CategoryEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CategoryEnum) Ptr() *CategoryEnum {
	return &c
}

type CommonModelScopeApi struct {
	// The common models you want to update the scopes for
	CommonModels []*IndividualCommonModelScopeDeserializer `json:"common_models,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CommonModelScopeApi) UnmarshalJSON(data []byte) error {
	type unmarshaler CommonModelScopeApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommonModelScopeApi(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommonModelScopeApi) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CommonModelScopesBodyRequest struct {
	ModelId        string               `json:"model_id"`
	EnabledActions []EnabledActionsEnum `json:"enabled_actions,omitempty"`
	DisabledFields []string             `json:"disabled_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CommonModelScopesBodyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CommonModelScopesBodyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommonModelScopesBodyRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommonModelScopesBodyRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// # The DataPassthrough Object
//
// ### Description
//
// The `DataPassthrough` object is used to send information to an otherwise-unsupported third-party endpoint.
//
// ### Usage Example
//
// Create a `DataPassthrough` to get team hierarchies from your Rippling integration.
type DataPassthroughRequest struct {
	Method MethodEnum `json:"method,omitempty"`
	// The path of the request in the third party's platform.
	Path string `json:"path"`
	// An optional override of the third party's base url for the request.
	BaseUrlOverride *string `json:"base_url_override,omitempty"`
	// The data with the request. You must include a `request_format` parameter matching the data's format
	Data *string `json:"data,omitempty"`
	// Pass an array of `MultipartFormField` objects in here instead of using the `data` param if `request_format` is set to `MULTIPART`.
	MultipartFormData []*MultipartFormFieldRequest `json:"multipart_form_data,omitempty"`
	// The headers to use for the request (Merge will handle the account's authorization headers). `Content-Type` header is required for passthrough. Choose content type corresponding to expected format of receiving server.
	Headers       map[string]interface{} `json:"headers,omitempty"`
	RequestFormat *RequestFormatEnum     `json:"request_format,omitempty"`
	// Optional. If true, the response will always be an object of the form `{"type": T, "value": ...}` where `T` will be one of `string, boolean, number, null, array, object`.
	NormalizeResponse *bool `json:"normalize_response,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DataPassthroughRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler DataPassthroughRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DataPassthroughRequest(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DataPassthroughRequest) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DebugModeLog struct {
	LogId         string                `json:"log_id"`
	DashboardView string                `json:"dashboard_view"`
	LogSummary    *DebugModelLogSummary `json:"log_summary,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DebugModeLog) UnmarshalJSON(data []byte) error {
	type unmarshaler DebugModeLog
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DebugModeLog(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DebugModeLog) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DebugModelLogSummary struct {
	Url        string `json:"url"`
	Method     string `json:"method"`
	StatusCode int    `json:"status_code"`

	_rawJSON json.RawMessage
}

func (d *DebugModelLogSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler DebugModelLogSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DebugModelLogSummary(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DebugModelLogSummary) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// # The Department Object
//
// ### Description
//
// The `Department` object is used to represent a department within a company.
//
// ### Usage Example
//
// Fetch from the `LIST Departments` endpoint and view the departments within a company.
type Department struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The department's name.
	Name *string `json:"name,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (d *Department) UnmarshalJSON(data []byte) error {
	type unmarshaler Department
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Department(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *Department) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// - `YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY` - YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY
// - `NO_I_DONT_HAVE_A_DISABILITY` - NO_I_DONT_HAVE_A_DISABILITY
// - `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
type DisabilityStatusEnum string

const (
	DisabilityStatusEnumYesIHaveADisabilityOrPreviouslyHadADisability DisabilityStatusEnum = "YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY"
	DisabilityStatusEnumNoIDontHaveADisability                        DisabilityStatusEnum = "NO_I_DONT_HAVE_A_DISABILITY"
	DisabilityStatusEnumIDontWishToAnswer                             DisabilityStatusEnum = "I_DONT_WISH_TO_ANSWER"
)

func NewDisabilityStatusEnumFromString(s string) (DisabilityStatusEnum, error) {
	switch s {
	case "YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY":
		return DisabilityStatusEnumYesIHaveADisabilityOrPreviouslyHadADisability, nil
	case "NO_I_DONT_HAVE_A_DISABILITY":
		return DisabilityStatusEnumNoIDontHaveADisability, nil
	case "I_DONT_WISH_TO_ANSWER":
		return DisabilityStatusEnumIDontWishToAnswer, nil
	}
	var t DisabilityStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DisabilityStatusEnum) Ptr() *DisabilityStatusEnum {
	return &d
}

// # The EEOC Object
//
// ### Description
//
// The `EEOC` object is used to represent the Equal Employment Opportunity Commission information for a candidate (race, gender, veteran status, disability status).
//
// ### Usage Example
//
// Fetch from the `LIST EEOCs` endpoint and filter by `candidate` to show all EEOC information for a candidate.
type Eeoc struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The candidate being represented.
	Candidate *EeocCandidate `json:"candidate,omitempty"`
	// When the information was submitted.
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`
	// The candidate's race.
	//
	// - `AMERICAN_INDIAN_OR_ALASKAN_NATIVE` - AMERICAN_INDIAN_OR_ALASKAN_NATIVE
	// - `ASIAN` - ASIAN
	// - `BLACK_OR_AFRICAN_AMERICAN` - BLACK_OR_AFRICAN_AMERICAN
	// - `HISPANIC_OR_LATINO` - HISPANIC_OR_LATINO
	// - `WHITE` - WHITE
	// - `NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER` - NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER
	// - `TWO_OR_MORE_RACES` - TWO_OR_MORE_RACES
	// - `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
	Race *EeocRace `json:"race,omitempty"`
	// The candidate's gender.
	//
	// - `MALE` - MALE
	// - `FEMALE` - FEMALE
	// - `NON-BINARY` - NON-BINARY
	// - `OTHER` - OTHER
	// - `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
	Gender *EeocGender `json:"gender,omitempty"`
	// The candidate's veteran status.
	//
	// - `I_AM_NOT_A_PROTECTED_VETERAN` - I_AM_NOT_A_PROTECTED_VETERAN
	// - `I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN` - I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN
	// - `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
	VeteranStatus *EeocVeteranStatus `json:"veteran_status,omitempty"`
	// The candidate's disability status.
	//
	// - `YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY` - YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY
	// - `NO_I_DONT_HAVE_A_DISABILITY` - NO_I_DONT_HAVE_A_DISABILITY
	// - `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
	DisabilityStatus *EeocDisabilityStatus `json:"disability_status,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (e *Eeoc) UnmarshalJSON(data []byte) error {
	type unmarshaler Eeoc
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Eeoc(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *Eeoc) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The candidate being represented.
type EeocCandidate struct {
	typeName  string
	String    string
	Candidate *Candidate
}

func NewEeocCandidateFromString(value string) *EeocCandidate {
	return &EeocCandidate{typeName: "string", String: value}
}

func NewEeocCandidateFromCandidate(value *Candidate) *EeocCandidate {
	return &EeocCandidate{typeName: "candidate", Candidate: value}
}

func (e *EeocCandidate) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueCandidate := new(Candidate)
	if err := json.Unmarshal(data, &valueCandidate); err == nil {
		e.typeName = "candidate"
		e.Candidate = valueCandidate
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EeocCandidate) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "candidate":
		return json.Marshal(e.Candidate)
	}
}

type EeocCandidateVisitor interface {
	VisitString(string) error
	VisitCandidate(*Candidate) error
}

func (e *EeocCandidate) Accept(visitor EeocCandidateVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "candidate":
		return visitor.VisitCandidate(e.Candidate)
	}
}

// The candidate's disability status.
//
// - `YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY` - YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY
// - `NO_I_DONT_HAVE_A_DISABILITY` - NO_I_DONT_HAVE_A_DISABILITY
// - `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
type EeocDisabilityStatus struct {
	typeName             string
	DisabilityStatusEnum DisabilityStatusEnum
	String               string
}

func NewEeocDisabilityStatusFromDisabilityStatusEnum(value DisabilityStatusEnum) *EeocDisabilityStatus {
	return &EeocDisabilityStatus{typeName: "disabilityStatusEnum", DisabilityStatusEnum: value}
}

func NewEeocDisabilityStatusFromString(value string) *EeocDisabilityStatus {
	return &EeocDisabilityStatus{typeName: "string", String: value}
}

func (e *EeocDisabilityStatus) UnmarshalJSON(data []byte) error {
	var valueDisabilityStatusEnum DisabilityStatusEnum
	if err := json.Unmarshal(data, &valueDisabilityStatusEnum); err == nil {
		e.typeName = "disabilityStatusEnum"
		e.DisabilityStatusEnum = valueDisabilityStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EeocDisabilityStatus) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "disabilityStatusEnum":
		return json.Marshal(e.DisabilityStatusEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type EeocDisabilityStatusVisitor interface {
	VisitDisabilityStatusEnum(DisabilityStatusEnum) error
	VisitString(string) error
}

func (e *EeocDisabilityStatus) Accept(visitor EeocDisabilityStatusVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "disabilityStatusEnum":
		return visitor.VisitDisabilityStatusEnum(e.DisabilityStatusEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

// The candidate's gender.
//
// - `MALE` - MALE
// - `FEMALE` - FEMALE
// - `NON-BINARY` - NON-BINARY
// - `OTHER` - OTHER
// - `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
type EeocGender struct {
	typeName   string
	GenderEnum GenderEnum
	String     string
}

func NewEeocGenderFromGenderEnum(value GenderEnum) *EeocGender {
	return &EeocGender{typeName: "genderEnum", GenderEnum: value}
}

func NewEeocGenderFromString(value string) *EeocGender {
	return &EeocGender{typeName: "string", String: value}
}

func (e *EeocGender) UnmarshalJSON(data []byte) error {
	var valueGenderEnum GenderEnum
	if err := json.Unmarshal(data, &valueGenderEnum); err == nil {
		e.typeName = "genderEnum"
		e.GenderEnum = valueGenderEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EeocGender) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "genderEnum":
		return json.Marshal(e.GenderEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type EeocGenderVisitor interface {
	VisitGenderEnum(GenderEnum) error
	VisitString(string) error
}

func (e *EeocGender) Accept(visitor EeocGenderVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "genderEnum":
		return visitor.VisitGenderEnum(e.GenderEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

// The candidate's race.
//
// - `AMERICAN_INDIAN_OR_ALASKAN_NATIVE` - AMERICAN_INDIAN_OR_ALASKAN_NATIVE
// - `ASIAN` - ASIAN
// - `BLACK_OR_AFRICAN_AMERICAN` - BLACK_OR_AFRICAN_AMERICAN
// - `HISPANIC_OR_LATINO` - HISPANIC_OR_LATINO
// - `WHITE` - WHITE
// - `NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER` - NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER
// - `TWO_OR_MORE_RACES` - TWO_OR_MORE_RACES
// - `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
type EeocRace struct {
	typeName string
	RaceEnum RaceEnum
	String   string
}

func NewEeocRaceFromRaceEnum(value RaceEnum) *EeocRace {
	return &EeocRace{typeName: "raceEnum", RaceEnum: value}
}

func NewEeocRaceFromString(value string) *EeocRace {
	return &EeocRace{typeName: "string", String: value}
}

func (e *EeocRace) UnmarshalJSON(data []byte) error {
	var valueRaceEnum RaceEnum
	if err := json.Unmarshal(data, &valueRaceEnum); err == nil {
		e.typeName = "raceEnum"
		e.RaceEnum = valueRaceEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EeocRace) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "raceEnum":
		return json.Marshal(e.RaceEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type EeocRaceVisitor interface {
	VisitRaceEnum(RaceEnum) error
	VisitString(string) error
}

func (e *EeocRace) Accept(visitor EeocRaceVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "raceEnum":
		return visitor.VisitRaceEnum(e.RaceEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

// The candidate's veteran status.
//
// - `I_AM_NOT_A_PROTECTED_VETERAN` - I_AM_NOT_A_PROTECTED_VETERAN
// - `I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN` - I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN
// - `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
type EeocVeteranStatus struct {
	typeName          string
	VeteranStatusEnum VeteranStatusEnum
	String            string
}

func NewEeocVeteranStatusFromVeteranStatusEnum(value VeteranStatusEnum) *EeocVeteranStatus {
	return &EeocVeteranStatus{typeName: "veteranStatusEnum", VeteranStatusEnum: value}
}

func NewEeocVeteranStatusFromString(value string) *EeocVeteranStatus {
	return &EeocVeteranStatus{typeName: "string", String: value}
}

func (e *EeocVeteranStatus) UnmarshalJSON(data []byte) error {
	var valueVeteranStatusEnum VeteranStatusEnum
	if err := json.Unmarshal(data, &valueVeteranStatusEnum); err == nil {
		e.typeName = "veteranStatusEnum"
		e.VeteranStatusEnum = valueVeteranStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EeocVeteranStatus) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "veteranStatusEnum":
		return json.Marshal(e.VeteranStatusEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type EeocVeteranStatusVisitor interface {
	VisitVeteranStatusEnum(VeteranStatusEnum) error
	VisitString(string) error
}

func (e *EeocVeteranStatus) Accept(visitor EeocVeteranStatusVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "veteranStatusEnum":
		return visitor.VisitVeteranStatusEnum(e.VeteranStatusEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

// # The EmailAddress Object
//
// ### Description
//
// The `EmailAddress` object is used to represent a candidate's email address.
//
// ### Usage Example
//
// Fetch from the `GET Candidate` endpoint and view their email addresses.
type EmailAddress struct {
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The email address.
	Value *string `json:"value,omitempty"`
	// The type of email address.
	//
	// - `PERSONAL` - PERSONAL
	// - `WORK` - WORK
	// - `OTHER` - OTHER
	EmailAddressType *EmailAddressEmailAddressType `json:"email_address_type,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EmailAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailAddress(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailAddress) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The type of email address.
//
// - `PERSONAL` - PERSONAL
// - `WORK` - WORK
// - `OTHER` - OTHER
type EmailAddressEmailAddressType struct {
	typeName             string
	EmailAddressTypeEnum EmailAddressTypeEnum
	String               string
}

func NewEmailAddressEmailAddressTypeFromEmailAddressTypeEnum(value EmailAddressTypeEnum) *EmailAddressEmailAddressType {
	return &EmailAddressEmailAddressType{typeName: "emailAddressTypeEnum", EmailAddressTypeEnum: value}
}

func NewEmailAddressEmailAddressTypeFromString(value string) *EmailAddressEmailAddressType {
	return &EmailAddressEmailAddressType{typeName: "string", String: value}
}

func (e *EmailAddressEmailAddressType) UnmarshalJSON(data []byte) error {
	var valueEmailAddressTypeEnum EmailAddressTypeEnum
	if err := json.Unmarshal(data, &valueEmailAddressTypeEnum); err == nil {
		e.typeName = "emailAddressTypeEnum"
		e.EmailAddressTypeEnum = valueEmailAddressTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmailAddressEmailAddressType) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "emailAddressTypeEnum":
		return json.Marshal(e.EmailAddressTypeEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type EmailAddressEmailAddressTypeVisitor interface {
	VisitEmailAddressTypeEnum(EmailAddressTypeEnum) error
	VisitString(string) error
}

func (e *EmailAddressEmailAddressType) Accept(visitor EmailAddressEmailAddressTypeVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "emailAddressTypeEnum":
		return visitor.VisitEmailAddressTypeEnum(e.EmailAddressTypeEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

// # The EmailAddress Object
//
// ### Description
//
// The `EmailAddress` object is used to represent a candidate's email address.
//
// ### Usage Example
//
// Fetch from the `GET Candidate` endpoint and view their email addresses.
type EmailAddressRequest struct {
	// The email address.
	Value *string `json:"value,omitempty"`
	// The type of email address.
	//
	// - `PERSONAL` - PERSONAL
	// - `WORK` - WORK
	// - `OTHER` - OTHER
	EmailAddressType    *EmailAddressRequestEmailAddressType `json:"email_address_type,omitempty"`
	IntegrationParams   map[string]interface{}               `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}               `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EmailAddressRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailAddressRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailAddressRequest(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailAddressRequest) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The type of email address.
//
// - `PERSONAL` - PERSONAL
// - `WORK` - WORK
// - `OTHER` - OTHER
type EmailAddressRequestEmailAddressType struct {
	typeName             string
	EmailAddressTypeEnum EmailAddressTypeEnum
	String               string
}

func NewEmailAddressRequestEmailAddressTypeFromEmailAddressTypeEnum(value EmailAddressTypeEnum) *EmailAddressRequestEmailAddressType {
	return &EmailAddressRequestEmailAddressType{typeName: "emailAddressTypeEnum", EmailAddressTypeEnum: value}
}

func NewEmailAddressRequestEmailAddressTypeFromString(value string) *EmailAddressRequestEmailAddressType {
	return &EmailAddressRequestEmailAddressType{typeName: "string", String: value}
}

func (e *EmailAddressRequestEmailAddressType) UnmarshalJSON(data []byte) error {
	var valueEmailAddressTypeEnum EmailAddressTypeEnum
	if err := json.Unmarshal(data, &valueEmailAddressTypeEnum); err == nil {
		e.typeName = "emailAddressTypeEnum"
		e.EmailAddressTypeEnum = valueEmailAddressTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmailAddressRequestEmailAddressType) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "emailAddressTypeEnum":
		return json.Marshal(e.EmailAddressTypeEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type EmailAddressRequestEmailAddressTypeVisitor interface {
	VisitEmailAddressTypeEnum(EmailAddressTypeEnum) error
	VisitString(string) error
}

func (e *EmailAddressRequestEmailAddressType) Accept(visitor EmailAddressRequestEmailAddressTypeVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "emailAddressTypeEnum":
		return visitor.VisitEmailAddressTypeEnum(e.EmailAddressTypeEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

// - `PERSONAL` - PERSONAL
// - `WORK` - WORK
// - `OTHER` - OTHER
type EmailAddressTypeEnum string

const (
	EmailAddressTypeEnumPersonal EmailAddressTypeEnum = "PERSONAL"
	EmailAddressTypeEnumWork     EmailAddressTypeEnum = "WORK"
	EmailAddressTypeEnumOther    EmailAddressTypeEnum = "OTHER"
)

func NewEmailAddressTypeEnumFromString(s string) (EmailAddressTypeEnum, error) {
	switch s {
	case "PERSONAL":
		return EmailAddressTypeEnumPersonal, nil
	case "WORK":
		return EmailAddressTypeEnumWork, nil
	case "OTHER":
		return EmailAddressTypeEnumOther, nil
	}
	var t EmailAddressTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmailAddressTypeEnum) Ptr() *EmailAddressTypeEnum {
	return &e
}

// - `READ` - READ
// - `WRITE` - WRITE
type EnabledActionsEnum string

const (
	EnabledActionsEnumRead  EnabledActionsEnum = "READ"
	EnabledActionsEnumWrite EnabledActionsEnum = "WRITE"
)

func NewEnabledActionsEnumFromString(s string) (EnabledActionsEnum, error) {
	switch s {
	case "READ":
		return EnabledActionsEnumRead, nil
	case "WRITE":
		return EnabledActionsEnumWrite, nil
	}
	var t EnabledActionsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EnabledActionsEnum) Ptr() *EnabledActionsEnum {
	return &e
}

// - `RAW` - RAW
// - `BASE64` - BASE64
// - `GZIP_BASE64` - GZIP_BASE64
type EncodingEnum string

const (
	EncodingEnumRaw        EncodingEnum = "RAW"
	EncodingEnumBase64     EncodingEnum = "BASE64"
	EncodingEnumGzipBase64 EncodingEnum = "GZIP_BASE64"
)

func NewEncodingEnumFromString(s string) (EncodingEnum, error) {
	switch s {
	case "RAW":
		return EncodingEnumRaw, nil
	case "BASE64":
		return EncodingEnumBase64, nil
	case "GZIP_BASE64":
		return EncodingEnumGzipBase64, nil
	}
	var t EncodingEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EncodingEnum) Ptr() *EncodingEnum {
	return &e
}

type ErrorValidationProblem struct {
	Source      *ValidationProblemSource `json:"source,omitempty"`
	Title       string                   `json:"title"`
	Detail      string                   `json:"detail"`
	ProblemType string                   `json:"problem_type"`

	_rawJSON json.RawMessage
}

func (e *ErrorValidationProblem) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorValidationProblem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorValidationProblem(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorValidationProblem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// - `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
// - `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
// - `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
// - `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
// - `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
// - `INVITED_USER` - INVITED_USER
// - `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
// - `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
// - `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
// - `CREATED_DESTINATION` - CREATED_DESTINATION
// - `DELETED_DESTINATION` - DELETED_DESTINATION
// - `CHANGED_DESTINATION` - CHANGED_DESTINATION
// - `CHANGED_SCOPES` - CHANGED_SCOPES
// - `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
// - `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
// - `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
// - `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
// - `ENABLED_CATEGORY` - ENABLED_CATEGORY
// - `DISABLED_CATEGORY` - DISABLED_CATEGORY
// - `CHANGED_PASSWORD` - CHANGED_PASSWORD
// - `RESET_PASSWORD` - RESET_PASSWORD
// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// - `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
// - `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
// - `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
// - `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
// - `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
// - `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
// - `CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `FORCED_LINKED_ACCOUNT_RESYNC` - FORCED_LINKED_ACCOUNT_RESYNC
// - `MUTED_ISSUE` - MUTED_ISSUE
// - `GENERATED_MAGIC_LINK` - GENERATED_MAGIC_LINK
// - `ENABLED_MERGE_WEBHOOK` - ENABLED_MERGE_WEBHOOK
// - `DISABLED_MERGE_WEBHOOK` - DISABLED_MERGE_WEBHOOK
// - `MERGE_WEBHOOK_TARGET_CHANGED` - MERGE_WEBHOOK_TARGET_CHANGED
// - `END_USER_CREDENTIALS_ACCESSED` - END_USER_CREDENTIALS_ACCESSED
type EventTypeEnum string

const (
	EventTypeEnumCreatedRemoteProductionApiKey              EventTypeEnum = "CREATED_REMOTE_PRODUCTION_API_KEY"
	EventTypeEnumDeletedRemoteProductionApiKey              EventTypeEnum = "DELETED_REMOTE_PRODUCTION_API_KEY"
	EventTypeEnumCreatedTestApiKey                          EventTypeEnum = "CREATED_TEST_API_KEY"
	EventTypeEnumDeletedTestApiKey                          EventTypeEnum = "DELETED_TEST_API_KEY"
	EventTypeEnumRegeneratedProductionApiKey                EventTypeEnum = "REGENERATED_PRODUCTION_API_KEY"
	EventTypeEnumInvitedUser                                EventTypeEnum = "INVITED_USER"
	EventTypeEnumTwoFactorAuthEnabled                       EventTypeEnum = "TWO_FACTOR_AUTH_ENABLED"
	EventTypeEnumTwoFactorAuthDisabled                      EventTypeEnum = "TWO_FACTOR_AUTH_DISABLED"
	EventTypeEnumDeletedLinkedAccount                       EventTypeEnum = "DELETED_LINKED_ACCOUNT"
	EventTypeEnumCreatedDestination                         EventTypeEnum = "CREATED_DESTINATION"
	EventTypeEnumDeletedDestination                         EventTypeEnum = "DELETED_DESTINATION"
	EventTypeEnumChangedDestination                         EventTypeEnum = "CHANGED_DESTINATION"
	EventTypeEnumChangedScopes                              EventTypeEnum = "CHANGED_SCOPES"
	EventTypeEnumChangedPersonalInformation                 EventTypeEnum = "CHANGED_PERSONAL_INFORMATION"
	EventTypeEnumChangedOrganizationSettings                EventTypeEnum = "CHANGED_ORGANIZATION_SETTINGS"
	EventTypeEnumEnabledIntegration                         EventTypeEnum = "ENABLED_INTEGRATION"
	EventTypeEnumDisabledIntegration                        EventTypeEnum = "DISABLED_INTEGRATION"
	EventTypeEnumEnabledCategory                            EventTypeEnum = "ENABLED_CATEGORY"
	EventTypeEnumDisabledCategory                           EventTypeEnum = "DISABLED_CATEGORY"
	EventTypeEnumChangedPassword                            EventTypeEnum = "CHANGED_PASSWORD"
	EventTypeEnumResetPassword                              EventTypeEnum = "RESET_PASSWORD"
	EventTypeEnumEnabledRedactUnmappedDataForOrganization   EventTypeEnum = "ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION"
	EventTypeEnumEnabledRedactUnmappedDataForLinkedAccount  EventTypeEnum = "ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT"
	EventTypeEnumDisabledRedactUnmappedDataForOrganization  EventTypeEnum = "DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION"
	EventTypeEnumDisabledRedactUnmappedDataForLinkedAccount EventTypeEnum = "DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT"
	EventTypeEnumCreatedIntegrationWideFieldMapping         EventTypeEnum = "CREATED_INTEGRATION_WIDE_FIELD_MAPPING"
	EventTypeEnumCreatedLinkedAccountFieldMapping           EventTypeEnum = "CREATED_LINKED_ACCOUNT_FIELD_MAPPING"
	EventTypeEnumChangedIntegrationWideFieldMapping         EventTypeEnum = "CHANGED_INTEGRATION_WIDE_FIELD_MAPPING"
	EventTypeEnumChangedLinkedAccountFieldMapping           EventTypeEnum = "CHANGED_LINKED_ACCOUNT_FIELD_MAPPING"
	EventTypeEnumDeletedIntegrationWideFieldMapping         EventTypeEnum = "DELETED_INTEGRATION_WIDE_FIELD_MAPPING"
	EventTypeEnumDeletedLinkedAccountFieldMapping           EventTypeEnum = "DELETED_LINKED_ACCOUNT_FIELD_MAPPING"
	EventTypeEnumCreatedLinkedAccountCommonModelOverride    EventTypeEnum = "CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE"
	EventTypeEnumChangedLinkedAccountCommonModelOverride    EventTypeEnum = "CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE"
	EventTypeEnumDeletedLinkedAccountCommonModelOverride    EventTypeEnum = "DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE"
	EventTypeEnumForcedLinkedAccountResync                  EventTypeEnum = "FORCED_LINKED_ACCOUNT_RESYNC"
	EventTypeEnumMutedIssue                                 EventTypeEnum = "MUTED_ISSUE"
	EventTypeEnumGeneratedMagicLink                         EventTypeEnum = "GENERATED_MAGIC_LINK"
	EventTypeEnumEnabledMergeWebhook                        EventTypeEnum = "ENABLED_MERGE_WEBHOOK"
	EventTypeEnumDisabledMergeWebhook                       EventTypeEnum = "DISABLED_MERGE_WEBHOOK"
	EventTypeEnumMergeWebhookTargetChanged                  EventTypeEnum = "MERGE_WEBHOOK_TARGET_CHANGED"
	EventTypeEnumEndUserCredentialsAccessed                 EventTypeEnum = "END_USER_CREDENTIALS_ACCESSED"
)

func NewEventTypeEnumFromString(s string) (EventTypeEnum, error) {
	switch s {
	case "CREATED_REMOTE_PRODUCTION_API_KEY":
		return EventTypeEnumCreatedRemoteProductionApiKey, nil
	case "DELETED_REMOTE_PRODUCTION_API_KEY":
		return EventTypeEnumDeletedRemoteProductionApiKey, nil
	case "CREATED_TEST_API_KEY":
		return EventTypeEnumCreatedTestApiKey, nil
	case "DELETED_TEST_API_KEY":
		return EventTypeEnumDeletedTestApiKey, nil
	case "REGENERATED_PRODUCTION_API_KEY":
		return EventTypeEnumRegeneratedProductionApiKey, nil
	case "INVITED_USER":
		return EventTypeEnumInvitedUser, nil
	case "TWO_FACTOR_AUTH_ENABLED":
		return EventTypeEnumTwoFactorAuthEnabled, nil
	case "TWO_FACTOR_AUTH_DISABLED":
		return EventTypeEnumTwoFactorAuthDisabled, nil
	case "DELETED_LINKED_ACCOUNT":
		return EventTypeEnumDeletedLinkedAccount, nil
	case "CREATED_DESTINATION":
		return EventTypeEnumCreatedDestination, nil
	case "DELETED_DESTINATION":
		return EventTypeEnumDeletedDestination, nil
	case "CHANGED_DESTINATION":
		return EventTypeEnumChangedDestination, nil
	case "CHANGED_SCOPES":
		return EventTypeEnumChangedScopes, nil
	case "CHANGED_PERSONAL_INFORMATION":
		return EventTypeEnumChangedPersonalInformation, nil
	case "CHANGED_ORGANIZATION_SETTINGS":
		return EventTypeEnumChangedOrganizationSettings, nil
	case "ENABLED_INTEGRATION":
		return EventTypeEnumEnabledIntegration, nil
	case "DISABLED_INTEGRATION":
		return EventTypeEnumDisabledIntegration, nil
	case "ENABLED_CATEGORY":
		return EventTypeEnumEnabledCategory, nil
	case "DISABLED_CATEGORY":
		return EventTypeEnumDisabledCategory, nil
	case "CHANGED_PASSWORD":
		return EventTypeEnumChangedPassword, nil
	case "RESET_PASSWORD":
		return EventTypeEnumResetPassword, nil
	case "ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION":
		return EventTypeEnumEnabledRedactUnmappedDataForOrganization, nil
	case "ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT":
		return EventTypeEnumEnabledRedactUnmappedDataForLinkedAccount, nil
	case "DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION":
		return EventTypeEnumDisabledRedactUnmappedDataForOrganization, nil
	case "DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT":
		return EventTypeEnumDisabledRedactUnmappedDataForLinkedAccount, nil
	case "CREATED_INTEGRATION_WIDE_FIELD_MAPPING":
		return EventTypeEnumCreatedIntegrationWideFieldMapping, nil
	case "CREATED_LINKED_ACCOUNT_FIELD_MAPPING":
		return EventTypeEnumCreatedLinkedAccountFieldMapping, nil
	case "CHANGED_INTEGRATION_WIDE_FIELD_MAPPING":
		return EventTypeEnumChangedIntegrationWideFieldMapping, nil
	case "CHANGED_LINKED_ACCOUNT_FIELD_MAPPING":
		return EventTypeEnumChangedLinkedAccountFieldMapping, nil
	case "DELETED_INTEGRATION_WIDE_FIELD_MAPPING":
		return EventTypeEnumDeletedIntegrationWideFieldMapping, nil
	case "DELETED_LINKED_ACCOUNT_FIELD_MAPPING":
		return EventTypeEnumDeletedLinkedAccountFieldMapping, nil
	case "CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE":
		return EventTypeEnumCreatedLinkedAccountCommonModelOverride, nil
	case "CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE":
		return EventTypeEnumChangedLinkedAccountCommonModelOverride, nil
	case "DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE":
		return EventTypeEnumDeletedLinkedAccountCommonModelOverride, nil
	case "FORCED_LINKED_ACCOUNT_RESYNC":
		return EventTypeEnumForcedLinkedAccountResync, nil
	case "MUTED_ISSUE":
		return EventTypeEnumMutedIssue, nil
	case "GENERATED_MAGIC_LINK":
		return EventTypeEnumGeneratedMagicLink, nil
	case "ENABLED_MERGE_WEBHOOK":
		return EventTypeEnumEnabledMergeWebhook, nil
	case "DISABLED_MERGE_WEBHOOK":
		return EventTypeEnumDisabledMergeWebhook, nil
	case "MERGE_WEBHOOK_TARGET_CHANGED":
		return EventTypeEnumMergeWebhookTargetChanged, nil
	case "END_USER_CREDENTIALS_ACCESSED":
		return EventTypeEnumEndUserCredentialsAccessed, nil
	}
	var t EventTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventTypeEnum) Ptr() *EventTypeEnum {
	return &e
}

type ExternalTargetFieldApi struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	IsMapped    *string `json:"is_mapped,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExternalTargetFieldApi) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalTargetFieldApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalTargetFieldApi(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalTargetFieldApi) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExternalTargetFieldApiResponse struct {
	Activity           []*ExternalTargetFieldApi `json:"Activity,omitempty"`
	Application        []*ExternalTargetFieldApi `json:"Application,omitempty"`
	Attachment         []*ExternalTargetFieldApi `json:"Attachment,omitempty"`
	Candidate          []*ExternalTargetFieldApi `json:"Candidate,omitempty"`
	Department         []*ExternalTargetFieldApi `json:"Department,omitempty"`
	Eeoc               []*ExternalTargetFieldApi `json:"EEOC,omitempty"`
	ScheduledInterview []*ExternalTargetFieldApi `json:"ScheduledInterview,omitempty"`
	Job                []*ExternalTargetFieldApi `json:"Job,omitempty"`
	JobPosting         []*ExternalTargetFieldApi `json:"JobPosting,omitempty"`
	JobInterviewStage  []*ExternalTargetFieldApi `json:"JobInterviewStage,omitempty"`
	Offer              []*ExternalTargetFieldApi `json:"Offer,omitempty"`
	Office             []*ExternalTargetFieldApi `json:"Office,omitempty"`
	RejectReason       []*ExternalTargetFieldApi `json:"RejectReason,omitempty"`
	Scorecard          []*ExternalTargetFieldApi `json:"Scorecard,omitempty"`
	Tag                []*ExternalTargetFieldApi `json:"Tag,omitempty"`
	RemoteUser         []*ExternalTargetFieldApi `json:"RemoteUser,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExternalTargetFieldApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalTargetFieldApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalTargetFieldApiResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalTargetFieldApiResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type FieldMappingApiInstance struct {
	Id                *string                             `json:"id,omitempty"`
	IsIntegrationWide *bool                               `json:"is_integration_wide,omitempty"`
	TargetField       *FieldMappingApiInstanceTargetField `json:"target_field,omitempty"`
	RemoteField       *FieldMappingApiInstanceRemoteField `json:"remote_field,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstance) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstance(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstance) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceRemoteField struct {
	RemoteKeyName      *string                                               `json:"remote_key_name,omitempty"`
	Schema             map[string]interface{}                                `json:"schema,omitempty"`
	RemoteEndpointInfo *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo `json:"remote_endpoint_info,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstanceRemoteField) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceRemoteField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceRemoteField(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceRemoteField) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo struct {
	Method             *string  `json:"method,omitempty"`
	UrlPath            *string  `json:"url_path,omitempty"`
	FieldTraversalPath []string `json:"field_traversal_path,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceResponse struct {
	Activity           []*FieldMappingApiInstance `json:"Activity,omitempty"`
	Application        []*FieldMappingApiInstance `json:"Application,omitempty"`
	Attachment         []*FieldMappingApiInstance `json:"Attachment,omitempty"`
	Candidate          []*FieldMappingApiInstance `json:"Candidate,omitempty"`
	Department         []*FieldMappingApiInstance `json:"Department,omitempty"`
	Eeoc               []*FieldMappingApiInstance `json:"EEOC,omitempty"`
	ScheduledInterview []*FieldMappingApiInstance `json:"ScheduledInterview,omitempty"`
	Job                []*FieldMappingApiInstance `json:"Job,omitempty"`
	JobPosting         []*FieldMappingApiInstance `json:"JobPosting,omitempty"`
	JobInterviewStage  []*FieldMappingApiInstance `json:"JobInterviewStage,omitempty"`
	Offer              []*FieldMappingApiInstance `json:"Offer,omitempty"`
	Office             []*FieldMappingApiInstance `json:"Office,omitempty"`
	RejectReason       []*FieldMappingApiInstance `json:"RejectReason,omitempty"`
	Scorecard          []*FieldMappingApiInstance `json:"Scorecard,omitempty"`
	Tag                []*FieldMappingApiInstance `json:"Tag,omitempty"`
	RemoteUser         []*FieldMappingApiInstance `json:"RemoteUser,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstanceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceResponse(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceTargetField struct {
	Name               string `json:"name"`
	Description        string `json:"description"`
	IsOrganizationWide bool   `json:"is_organization_wide"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstanceTargetField) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceTargetField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceTargetField(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceTargetField) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingInstanceResponse struct {
	Model    *FieldMappingApiInstance    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingInstanceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingInstanceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingInstanceResponse(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingInstanceResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldPermissionDeserializer struct {
	EnabledFields  []interface{} `json:"enabled_fields,omitempty"`
	DisabledFields []interface{} `json:"disabled_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldPermissionDeserializer) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldPermissionDeserializer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldPermissionDeserializer(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldPermissionDeserializer) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldPermissionDeserializerRequest struct {
	EnabledFields  []interface{} `json:"enabled_fields,omitempty"`
	DisabledFields []interface{} `json:"disabled_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldPermissionDeserializerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldPermissionDeserializerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldPermissionDeserializerRequest(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldPermissionDeserializerRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// - `MALE` - MALE
// - `FEMALE` - FEMALE
// - `NON-BINARY` - NON-BINARY
// - `OTHER` - OTHER
// - `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
type GenderEnum string

const (
	GenderEnumMale                  GenderEnum = "MALE"
	GenderEnumFemale                GenderEnum = "FEMALE"
	GenderEnumNonBinary             GenderEnum = "NON-BINARY"
	GenderEnumOther                 GenderEnum = "OTHER"
	GenderEnumDeclineToSelfIdentify GenderEnum = "DECLINE_TO_SELF_IDENTIFY"
)

func NewGenderEnumFromString(s string) (GenderEnum, error) {
	switch s {
	case "MALE":
		return GenderEnumMale, nil
	case "FEMALE":
		return GenderEnumFemale, nil
	case "NON-BINARY":
		return GenderEnumNonBinary, nil
	case "OTHER":
		return GenderEnumOther, nil
	case "DECLINE_TO_SELF_IDENTIFY":
		return GenderEnumDeclineToSelfIdentify, nil
	}
	var t GenderEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GenderEnum) Ptr() *GenderEnum {
	return &g
}

type IndividualCommonModelScopeDeserializer struct {
	ModelName        string                                  `json:"model_name"`
	ModelPermissions map[string]*ModelPermissionDeserializer `json:"model_permissions,omitempty"`
	FieldPermissions *FieldPermissionDeserializer            `json:"field_permissions,omitempty"`

	_rawJSON json.RawMessage
}

func (i *IndividualCommonModelScopeDeserializer) UnmarshalJSON(data []byte) error {
	type unmarshaler IndividualCommonModelScopeDeserializer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IndividualCommonModelScopeDeserializer(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IndividualCommonModelScopeDeserializer) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IndividualCommonModelScopeDeserializerRequest struct {
	ModelName        string                                         `json:"model_name"`
	ModelPermissions map[string]*ModelPermissionDeserializerRequest `json:"model_permissions,omitempty"`
	FieldPermissions *FieldPermissionDeserializerRequest            `json:"field_permissions,omitempty"`

	_rawJSON json.RawMessage
}

func (i *IndividualCommonModelScopeDeserializerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler IndividualCommonModelScopeDeserializerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IndividualCommonModelScopeDeserializerRequest(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IndividualCommonModelScopeDeserializerRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type Issue struct {
	Id *string `json:"id,omitempty"`
	// Status of the issue. Options: ('ONGOING', 'RESOLVED')
	//
	// - `ONGOING` - ONGOING
	// - `RESOLVED` - RESOLVED
	Status            *IssueStatus           `json:"status,omitempty"`
	ErrorDescription  string                 `json:"error_description"`
	EndUser           map[string]interface{} `json:"end_user,omitempty"`
	FirstIncidentTime *time.Time             `json:"first_incident_time,omitempty"`
	LastIncidentTime  *time.Time             `json:"last_incident_time,omitempty"`
	IsMuted           *bool                  `json:"is_muted,omitempty"`
	ErrorDetails      []string               `json:"error_details,omitempty"`

	_rawJSON json.RawMessage
}

func (i *Issue) UnmarshalJSON(data []byte) error {
	type unmarshaler Issue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = Issue(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *Issue) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Status of the issue. Options: ('ONGOING', 'RESOLVED')
//
// - `ONGOING` - ONGOING
// - `RESOLVED` - RESOLVED
type IssueStatus struct {
	typeName        string
	IssueStatusEnum IssueStatusEnum
	String          string
}

func NewIssueStatusFromIssueStatusEnum(value IssueStatusEnum) *IssueStatus {
	return &IssueStatus{typeName: "issueStatusEnum", IssueStatusEnum: value}
}

func NewIssueStatusFromString(value string) *IssueStatus {
	return &IssueStatus{typeName: "string", String: value}
}

func (i *IssueStatus) UnmarshalJSON(data []byte) error {
	var valueIssueStatusEnum IssueStatusEnum
	if err := json.Unmarshal(data, &valueIssueStatusEnum); err == nil {
		i.typeName = "issueStatusEnum"
		i.IssueStatusEnum = valueIssueStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IssueStatus) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "issueStatusEnum":
		return json.Marshal(i.IssueStatusEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type IssueStatusVisitor interface {
	VisitIssueStatusEnum(IssueStatusEnum) error
	VisitString(string) error
}

func (i *IssueStatus) Accept(visitor IssueStatusVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "issueStatusEnum":
		return visitor.VisitIssueStatusEnum(i.IssueStatusEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

// - `ONGOING` - ONGOING
// - `RESOLVED` - RESOLVED
type IssueStatusEnum string

const (
	IssueStatusEnumOngoing  IssueStatusEnum = "ONGOING"
	IssueStatusEnumResolved IssueStatusEnum = "RESOLVED"
)

func NewIssueStatusEnumFromString(s string) (IssueStatusEnum, error) {
	switch s {
	case "ONGOING":
		return IssueStatusEnumOngoing, nil
	case "RESOLVED":
		return IssueStatusEnumResolved, nil
	}
	var t IssueStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IssueStatusEnum) Ptr() *IssueStatusEnum {
	return &i
}

// # The Job Object
//
// ### Description
//
// The `Job` object can be used to track any jobs that are currently or will be open/closed for applications.
//
// ### Usage Example
//
// Fetch from the `LIST Jobs` endpoint to show all job postings.
type Job struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The job's name.
	Name *string `json:"name,omitempty"`
	// The job's description.
	Description *string `json:"description,omitempty"`
	// The job's code. Typically an additional identifier used to reference the particular job that is displayed on the ATS.
	Code *string `json:"code,omitempty"`
	// The job's status.
	//
	// - `OPEN` - OPEN
	// - `CLOSED` - CLOSED
	// - `DRAFT` - DRAFT
	// - `ARCHIVED` - ARCHIVED
	// - `PENDING` - PENDING
	Status *JobStatus `json:"status,omitempty"`
	// The job's type.
	//
	// - `POSTING` - POSTING
	// - `REQUISITION` - REQUISITION
	// - `PROFILE` - PROFILE
	Type *JobTypeEnum `json:"type,omitempty"`
	// IDs of `JobPosting` objects that serve as job postings for this `Job`.
	JobPostings    []*string `json:"job_postings,omitempty"`
	JobPostingUrls []*Url    `json:"job_posting_urls,omitempty"`
	// When the third party's job was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// When the third party's job was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// Whether the job is confidential.
	Confidential *bool `json:"confidential,omitempty"`
	// IDs of `Department` objects for this `Job`.
	Departments []*JobDepartmentsItem `json:"departments,omitempty"`
	// IDs of `Office` objects for this `Job`.
	Offices []*JobOfficesItem `json:"offices,omitempty"`
	// IDs of `RemoteUser` objects that serve as hiring managers for this `Job`.
	HiringManagers []*JobHiringManagersItem `json:"hiring_managers,omitempty"`
	// IDs of `RemoteUser` objects that serve as recruiters for this `Job`.
	Recruiters []*JobRecruitersItem `json:"recruiters,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (j *Job) UnmarshalJSON(data []byte) error {
	type unmarshaler Job
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = Job(value)
	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *Job) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type JobDepartmentsItem struct {
	typeName   string
	String     string
	Department *Department
}

func NewJobDepartmentsItemFromString(value string) *JobDepartmentsItem {
	return &JobDepartmentsItem{typeName: "string", String: value}
}

func NewJobDepartmentsItemFromDepartment(value *Department) *JobDepartmentsItem {
	return &JobDepartmentsItem{typeName: "department", Department: value}
}

func (j *JobDepartmentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueDepartment := new(Department)
	if err := json.Unmarshal(data, &valueDepartment); err == nil {
		j.typeName = "department"
		j.Department = valueDepartment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JobDepartmentsItem) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "department":
		return json.Marshal(j.Department)
	}
}

type JobDepartmentsItemVisitor interface {
	VisitString(string) error
	VisitDepartment(*Department) error
}

func (j *JobDepartmentsItem) Accept(visitor JobDepartmentsItemVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "department":
		return visitor.VisitDepartment(j.Department)
	}
}

type JobHiringManagersItem struct {
	typeName   string
	String     string
	RemoteUser *RemoteUser
}

func NewJobHiringManagersItemFromString(value string) *JobHiringManagersItem {
	return &JobHiringManagersItem{typeName: "string", String: value}
}

func NewJobHiringManagersItemFromRemoteUser(value *RemoteUser) *JobHiringManagersItem {
	return &JobHiringManagersItem{typeName: "remoteUser", RemoteUser: value}
}

func (j *JobHiringManagersItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		j.typeName = "remoteUser"
		j.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JobHiringManagersItem) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "remoteUser":
		return json.Marshal(j.RemoteUser)
	}
}

type JobHiringManagersItemVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (j *JobHiringManagersItem) Accept(visitor JobHiringManagersItemVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "remoteUser":
		return visitor.VisitRemoteUser(j.RemoteUser)
	}
}

// # The JobInterviewStage Object
//
// ### Description
//
// The `JobInterviewStage` object is used to represent a particular recruiting stage for an `Application`. A given `Application` typically has the `JobInterviewStage` object represented in the current_stage field.
//
// ### Usage Example
//
// Fetch from the `LIST JobInterviewStages` endpoint and view the job interview stages used by a company.
type JobInterviewStage struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// Standard stage names are offered by ATS systems but can be modified by users.
	Name *string `json:"name,omitempty"`
	// This field is populated only if the stage is specific to a particular job. If the stage is generic, this field will not be populated.
	Job *JobInterviewStageJob `json:"job,omitempty"`
	// The stage’s order, with the lowest values ordered first. If the third-party does not return details on the order of stages, this field will not be populated.
	StageOrder *int `json:"stage_order,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (j *JobInterviewStage) UnmarshalJSON(data []byte) error {
	type unmarshaler JobInterviewStage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JobInterviewStage(value)
	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JobInterviewStage) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// This field is populated only if the stage is specific to a particular job. If the stage is generic, this field will not be populated.
type JobInterviewStageJob struct {
	typeName string
	String   string
	Job      *Job
}

func NewJobInterviewStageJobFromString(value string) *JobInterviewStageJob {
	return &JobInterviewStageJob{typeName: "string", String: value}
}

func NewJobInterviewStageJobFromJob(value *Job) *JobInterviewStageJob {
	return &JobInterviewStageJob{typeName: "job", Job: value}
}

func (j *JobInterviewStageJob) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueJob := new(Job)
	if err := json.Unmarshal(data, &valueJob); err == nil {
		j.typeName = "job"
		j.Job = valueJob
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JobInterviewStageJob) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "job":
		return json.Marshal(j.Job)
	}
}

type JobInterviewStageJobVisitor interface {
	VisitString(string) error
	VisitJob(*Job) error
}

func (j *JobInterviewStageJob) Accept(visitor JobInterviewStageJobVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "job":
		return visitor.VisitJob(j.Job)
	}
}

type JobOfficesItem struct {
	typeName string
	String   string
	Office   *Office
}

func NewJobOfficesItemFromString(value string) *JobOfficesItem {
	return &JobOfficesItem{typeName: "string", String: value}
}

func NewJobOfficesItemFromOffice(value *Office) *JobOfficesItem {
	return &JobOfficesItem{typeName: "office", Office: value}
}

func (j *JobOfficesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueOffice := new(Office)
	if err := json.Unmarshal(data, &valueOffice); err == nil {
		j.typeName = "office"
		j.Office = valueOffice
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JobOfficesItem) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "office":
		return json.Marshal(j.Office)
	}
}

type JobOfficesItemVisitor interface {
	VisitString(string) error
	VisitOffice(*Office) error
}

func (j *JobOfficesItem) Accept(visitor JobOfficesItemVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "office":
		return visitor.VisitOffice(j.Office)
	}
}

// # The JobPosting Object
//
// ### Description
//
// # The `JobPosting` object represents an external announcement on a job board created by an organization to attract qualified candidates to apply for a specific `Job` opening
//
// ### Usage Example
//
// Fetch from the `LIST JobPostings` endpoint to show all job postings.
type JobPosting struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The job posting’s title.
	Title *string `json:"title,omitempty"`
	// The Url object is used to represent hyperlinks for a candidate to apply to a given job.
	JobPostingUrls []*JobPostingJobPostingUrlsItem `json:"job_posting_urls,omitempty"`
	// ID of `Job` object for this `JobPosting`.
	Job *JobPostingJob `json:"job,omitempty"`
	// The job posting's status.
	//
	// - `PUBLISHED` - PUBLISHED
	// - `CLOSED` - CLOSED
	// - `DRAFT` - DRAFT
	// - `INTERNAL` - INTERNAL
	// - `PENDING` - PENDING
	Status *JobPostingStatusEnum `json:"status,omitempty"`
	// The job posting’s content.
	Content *string `json:"content,omitempty"`
	// When the third party's job posting was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// When the third party's job posting was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// Indicates whether the job posting is internal or external.
	IsInternal *bool `json:"is_internal,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (j *JobPosting) UnmarshalJSON(data []byte) error {
	type unmarshaler JobPosting
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JobPosting(value)
	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JobPosting) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// ID of `Job` object for this `JobPosting`.
type JobPostingJob struct {
	typeName string
	String   string
	Job      *Job
}

func NewJobPostingJobFromString(value string) *JobPostingJob {
	return &JobPostingJob{typeName: "string", String: value}
}

func NewJobPostingJobFromJob(value *Job) *JobPostingJob {
	return &JobPostingJob{typeName: "job", Job: value}
}

func (j *JobPostingJob) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueJob := new(Job)
	if err := json.Unmarshal(data, &valueJob); err == nil {
		j.typeName = "job"
		j.Job = valueJob
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JobPostingJob) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "job":
		return json.Marshal(j.Job)
	}
}

type JobPostingJobVisitor interface {
	VisitString(string) error
	VisitJob(*Job) error
}

func (j *JobPostingJob) Accept(visitor JobPostingJobVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "job":
		return visitor.VisitJob(j.Job)
	}
}

type JobPostingJobPostingUrlsItem struct {
	typeName string
	String   string
	Url      *Url
}

func NewJobPostingJobPostingUrlsItemFromString(value string) *JobPostingJobPostingUrlsItem {
	return &JobPostingJobPostingUrlsItem{typeName: "string", String: value}
}

func NewJobPostingJobPostingUrlsItemFromUrl(value *Url) *JobPostingJobPostingUrlsItem {
	return &JobPostingJobPostingUrlsItem{typeName: "url", Url: value}
}

func (j *JobPostingJobPostingUrlsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueUrl := new(Url)
	if err := json.Unmarshal(data, &valueUrl); err == nil {
		j.typeName = "url"
		j.Url = valueUrl
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JobPostingJobPostingUrlsItem) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "url":
		return json.Marshal(j.Url)
	}
}

type JobPostingJobPostingUrlsItemVisitor interface {
	VisitString(string) error
	VisitUrl(*Url) error
}

func (j *JobPostingJobPostingUrlsItem) Accept(visitor JobPostingJobPostingUrlsItemVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "url":
		return visitor.VisitUrl(j.Url)
	}
}

// - `PUBLISHED` - PUBLISHED
// - `CLOSED` - CLOSED
// - `DRAFT` - DRAFT
// - `INTERNAL` - INTERNAL
// - `PENDING` - PENDING
type JobPostingStatusEnum string

const (
	JobPostingStatusEnumPublished JobPostingStatusEnum = "PUBLISHED"
	JobPostingStatusEnumClosed    JobPostingStatusEnum = "CLOSED"
	JobPostingStatusEnumDraft     JobPostingStatusEnum = "DRAFT"
	JobPostingStatusEnumInternal  JobPostingStatusEnum = "INTERNAL"
	JobPostingStatusEnumPending   JobPostingStatusEnum = "PENDING"
)

func NewJobPostingStatusEnumFromString(s string) (JobPostingStatusEnum, error) {
	switch s {
	case "PUBLISHED":
		return JobPostingStatusEnumPublished, nil
	case "CLOSED":
		return JobPostingStatusEnumClosed, nil
	case "DRAFT":
		return JobPostingStatusEnumDraft, nil
	case "INTERNAL":
		return JobPostingStatusEnumInternal, nil
	case "PENDING":
		return JobPostingStatusEnumPending, nil
	}
	var t JobPostingStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (j JobPostingStatusEnum) Ptr() *JobPostingStatusEnum {
	return &j
}

type JobRecruitersItem struct {
	typeName   string
	String     string
	RemoteUser *RemoteUser
}

func NewJobRecruitersItemFromString(value string) *JobRecruitersItem {
	return &JobRecruitersItem{typeName: "string", String: value}
}

func NewJobRecruitersItemFromRemoteUser(value *RemoteUser) *JobRecruitersItem {
	return &JobRecruitersItem{typeName: "remoteUser", RemoteUser: value}
}

func (j *JobRecruitersItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		j.typeName = "remoteUser"
		j.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JobRecruitersItem) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "remoteUser":
		return json.Marshal(j.RemoteUser)
	}
}

type JobRecruitersItemVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (j *JobRecruitersItem) Accept(visitor JobRecruitersItemVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "remoteUser":
		return visitor.VisitRemoteUser(j.RemoteUser)
	}
}

// The job's status.
//
// - `OPEN` - OPEN
// - `CLOSED` - CLOSED
// - `DRAFT` - DRAFT
// - `ARCHIVED` - ARCHIVED
// - `PENDING` - PENDING
type JobStatus struct {
	typeName      string
	JobStatusEnum JobStatusEnum
	String        string
}

func NewJobStatusFromJobStatusEnum(value JobStatusEnum) *JobStatus {
	return &JobStatus{typeName: "jobStatusEnum", JobStatusEnum: value}
}

func NewJobStatusFromString(value string) *JobStatus {
	return &JobStatus{typeName: "string", String: value}
}

func (j *JobStatus) UnmarshalJSON(data []byte) error {
	var valueJobStatusEnum JobStatusEnum
	if err := json.Unmarshal(data, &valueJobStatusEnum); err == nil {
		j.typeName = "jobStatusEnum"
		j.JobStatusEnum = valueJobStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JobStatus) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "jobStatusEnum":
		return json.Marshal(j.JobStatusEnum)
	case "string":
		return json.Marshal(j.String)
	}
}

type JobStatusVisitor interface {
	VisitJobStatusEnum(JobStatusEnum) error
	VisitString(string) error
}

func (j *JobStatus) Accept(visitor JobStatusVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "jobStatusEnum":
		return visitor.VisitJobStatusEnum(j.JobStatusEnum)
	case "string":
		return visitor.VisitString(j.String)
	}
}

// - `OPEN` - OPEN
// - `CLOSED` - CLOSED
// - `DRAFT` - DRAFT
// - `ARCHIVED` - ARCHIVED
// - `PENDING` - PENDING
type JobStatusEnum string

const (
	JobStatusEnumOpen     JobStatusEnum = "OPEN"
	JobStatusEnumClosed   JobStatusEnum = "CLOSED"
	JobStatusEnumDraft    JobStatusEnum = "DRAFT"
	JobStatusEnumArchived JobStatusEnum = "ARCHIVED"
	JobStatusEnumPending  JobStatusEnum = "PENDING"
)

func NewJobStatusEnumFromString(s string) (JobStatusEnum, error) {
	switch s {
	case "OPEN":
		return JobStatusEnumOpen, nil
	case "CLOSED":
		return JobStatusEnumClosed, nil
	case "DRAFT":
		return JobStatusEnumDraft, nil
	case "ARCHIVED":
		return JobStatusEnumArchived, nil
	case "PENDING":
		return JobStatusEnumPending, nil
	}
	var t JobStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (j JobStatusEnum) Ptr() *JobStatusEnum {
	return &j
}

// - `POSTING` - POSTING
// - `REQUISITION` - REQUISITION
// - `PROFILE` - PROFILE
type JobTypeEnum string

const (
	JobTypeEnumPosting     JobTypeEnum = "POSTING"
	JobTypeEnumRequisition JobTypeEnum = "REQUISITION"
	JobTypeEnumProfile     JobTypeEnum = "PROFILE"
)

func NewJobTypeEnumFromString(s string) (JobTypeEnum, error) {
	switch s {
	case "POSTING":
		return JobTypeEnumPosting, nil
	case "REQUISITION":
		return JobTypeEnumRequisition, nil
	case "PROFILE":
		return JobTypeEnumProfile, nil
	}
	var t JobTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (j JobTypeEnum) Ptr() *JobTypeEnum {
	return &j
}

// - `en` - en
// - `de` - de
type LanguageEnum string

const (
	LanguageEnumEn LanguageEnum = "en"
	LanguageEnumDe LanguageEnum = "de"
)

func NewLanguageEnumFromString(s string) (LanguageEnum, error) {
	switch s {
	case "en":
		return LanguageEnumEn, nil
	case "de":
		return LanguageEnumDe, nil
	}
	var t LanguageEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LanguageEnum) Ptr() *LanguageEnum {
	return &l
}

type LinkToken struct {
	LinkToken       string  `json:"link_token"`
	IntegrationName *string `json:"integration_name,omitempty"`
	MagicLinkUrl    *string `json:"magic_link_url,omitempty"`

	_rawJSON json.RawMessage
}

func (l *LinkToken) UnmarshalJSON(data []byte) error {
	type unmarshaler LinkToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LinkToken(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LinkToken) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LinkedAccountStatus struct {
	LinkedAccountStatus string `json:"linked_account_status"`
	CanMakeRequest      bool   `json:"can_make_request"`

	_rawJSON json.RawMessage
}

func (l *LinkedAccountStatus) UnmarshalJSON(data []byte) error {
	type unmarshaler LinkedAccountStatus
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LinkedAccountStatus(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LinkedAccountStatus) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type MetaResponse struct {
	RequestSchema                  map[string]interface{} `json:"request_schema,omitempty"`
	RemoteFieldClasses             map[string]interface{} `json:"remote_field_classes,omitempty"`
	Status                         *LinkedAccountStatus   `json:"status,omitempty"`
	HasConditionalParams           bool                   `json:"has_conditional_params"`
	HasRequiredLinkedAccountParams bool                   `json:"has_required_linked_account_params"`

	_rawJSON json.RawMessage
}

func (m *MetaResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MetaResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetaResponse(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetaResponse) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `GET` - GET
// - `OPTIONS` - OPTIONS
// - `HEAD` - HEAD
// - `POST` - POST
// - `PUT` - PUT
// - `PATCH` - PATCH
// - `DELETE` - DELETE
type MethodEnum string

const (
	MethodEnumGet     MethodEnum = "GET"
	MethodEnumOptions MethodEnum = "OPTIONS"
	MethodEnumHead    MethodEnum = "HEAD"
	MethodEnumPost    MethodEnum = "POST"
	MethodEnumPut     MethodEnum = "PUT"
	MethodEnumPatch   MethodEnum = "PATCH"
	MethodEnumDelete  MethodEnum = "DELETE"
)

func NewMethodEnumFromString(s string) (MethodEnum, error) {
	switch s {
	case "GET":
		return MethodEnumGet, nil
	case "OPTIONS":
		return MethodEnumOptions, nil
	case "HEAD":
		return MethodEnumHead, nil
	case "POST":
		return MethodEnumPost, nil
	case "PUT":
		return MethodEnumPut, nil
	case "PATCH":
		return MethodEnumPatch, nil
	case "DELETE":
		return MethodEnumDelete, nil
	}
	var t MethodEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MethodEnum) Ptr() *MethodEnum {
	return &m
}

// # The ModelOperation Object
//
// ### Description
//
// The `ModelOperation` object is used to represent the operations that are currently supported for a given model.
//
// ### Usage Example
//
// View what operations are supported for the `Candidate` endpoint.
type ModelOperation struct {
	ModelName              string   `json:"model_name"`
	AvailableOperations    []string `json:"available_operations,omitempty"`
	RequiredPostParameters []string `json:"required_post_parameters,omitempty"`
	SupportedFields        []string `json:"supported_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelOperation) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelOperation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelOperation(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelOperation) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelPermissionDeserializer struct {
	IsEnabled *bool `json:"is_enabled,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelPermissionDeserializer) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelPermissionDeserializer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelPermissionDeserializer(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelPermissionDeserializer) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelPermissionDeserializerRequest struct {
	IsEnabled *bool `json:"is_enabled,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelPermissionDeserializerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelPermissionDeserializerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelPermissionDeserializerRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelPermissionDeserializerRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// # The MultipartFormField Object
//
// ### Description
//
// The `MultipartFormField` object is used to represent fields in an HTTP request using `multipart/form-data`.
//
// ### Usage Example
//
// Create a `MultipartFormField` to define a multipart form entry.
type MultipartFormFieldRequest struct {
	// The name of the form field
	Name string `json:"name"`
	// The data for the form field.
	Data string `json:"data"`
	// The encoding of the value of `data`. Defaults to `RAW` if not defined.
	//
	// - `RAW` - RAW
	// - `BASE64` - BASE64
	// - `GZIP_BASE64` - GZIP_BASE64
	Encoding *MultipartFormFieldRequestEncoding `json:"encoding,omitempty"`
	// The file name of the form field, if the field is for a file.
	FileName *string `json:"file_name,omitempty"`
	// The MIME type of the file, if the field is for a file.
	ContentType *string `json:"content_type,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MultipartFormFieldRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MultipartFormFieldRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MultipartFormFieldRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MultipartFormFieldRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// The encoding of the value of `data`. Defaults to `RAW` if not defined.
//
// - `RAW` - RAW
// - `BASE64` - BASE64
// - `GZIP_BASE64` - GZIP_BASE64
type MultipartFormFieldRequestEncoding struct {
	typeName     string
	EncodingEnum EncodingEnum
	String       string
}

func NewMultipartFormFieldRequestEncodingFromEncodingEnum(value EncodingEnum) *MultipartFormFieldRequestEncoding {
	return &MultipartFormFieldRequestEncoding{typeName: "encodingEnum", EncodingEnum: value}
}

func NewMultipartFormFieldRequestEncodingFromString(value string) *MultipartFormFieldRequestEncoding {
	return &MultipartFormFieldRequestEncoding{typeName: "string", String: value}
}

func (m *MultipartFormFieldRequestEncoding) UnmarshalJSON(data []byte) error {
	var valueEncodingEnum EncodingEnum
	if err := json.Unmarshal(data, &valueEncodingEnum); err == nil {
		m.typeName = "encodingEnum"
		m.EncodingEnum = valueEncodingEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		m.typeName = "string"
		m.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MultipartFormFieldRequestEncoding) MarshalJSON() ([]byte, error) {
	switch m.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", m.typeName, m)
	case "encodingEnum":
		return json.Marshal(m.EncodingEnum)
	case "string":
		return json.Marshal(m.String)
	}
}

type MultipartFormFieldRequestEncodingVisitor interface {
	VisitEncodingEnum(EncodingEnum) error
	VisitString(string) error
}

func (m *MultipartFormFieldRequestEncoding) Accept(visitor MultipartFormFieldRequestEncodingVisitor) error {
	switch m.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", m.typeName, m)
	case "encodingEnum":
		return visitor.VisitEncodingEnum(m.EncodingEnum)
	case "string":
		return visitor.VisitString(m.String)
	}
}

// # The Offer Object
//
// ### Description
//
// The `Offer` object is used to represent an offer for a candidate's application specific to a job.
//
// ### Usage Example
//
// Fetch from the `LIST Offers` endpoint and filter by `ID` to show all offers.
type Offer struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The application who is receiving the offer.
	Application *OfferApplication `json:"application,omitempty"`
	// The user who created the offer.
	Creator *OfferCreator `json:"creator,omitempty"`
	// When the third party's offer was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// When the offer was closed.
	ClosedAt *time.Time `json:"closed_at,omitempty"`
	// When the offer was sent.
	SentAt *time.Time `json:"sent_at,omitempty"`
	// The employment start date on the offer.
	StartDate *time.Time `json:"start_date,omitempty"`
	// The offer's status.
	//
	// - `DRAFT` - DRAFT
	// - `APPROVAL-SENT` - APPROVAL-SENT
	// - `APPROVED` - APPROVED
	// - `SENT` - SENT
	// - `SENT-MANUALLY` - SENT-MANUALLY
	// - `OPENED` - OPENED
	// - `DENIED` - DENIED
	// - `SIGNED` - SIGNED
	// - `DEPRECATED` - DEPRECATED
	Status *OfferStatus `json:"status,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (o *Offer) UnmarshalJSON(data []byte) error {
	type unmarshaler Offer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = Offer(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *Offer) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// The application who is receiving the offer.
type OfferApplication struct {
	typeName    string
	String      string
	Application *Application
}

func NewOfferApplicationFromString(value string) *OfferApplication {
	return &OfferApplication{typeName: "string", String: value}
}

func NewOfferApplicationFromApplication(value *Application) *OfferApplication {
	return &OfferApplication{typeName: "application", Application: value}
}

func (o *OfferApplication) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typeName = "string"
		o.String = valueString
		return nil
	}
	valueApplication := new(Application)
	if err := json.Unmarshal(data, &valueApplication); err == nil {
		o.typeName = "application"
		o.Application = valueApplication
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OfferApplication) MarshalJSON() ([]byte, error) {
	switch o.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return json.Marshal(o.String)
	case "application":
		return json.Marshal(o.Application)
	}
}

type OfferApplicationVisitor interface {
	VisitString(string) error
	VisitApplication(*Application) error
}

func (o *OfferApplication) Accept(visitor OfferApplicationVisitor) error {
	switch o.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return visitor.VisitString(o.String)
	case "application":
		return visitor.VisitApplication(o.Application)
	}
}

// The user who created the offer.
type OfferCreator struct {
	typeName   string
	String     string
	RemoteUser *RemoteUser
}

func NewOfferCreatorFromString(value string) *OfferCreator {
	return &OfferCreator{typeName: "string", String: value}
}

func NewOfferCreatorFromRemoteUser(value *RemoteUser) *OfferCreator {
	return &OfferCreator{typeName: "remoteUser", RemoteUser: value}
}

func (o *OfferCreator) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typeName = "string"
		o.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		o.typeName = "remoteUser"
		o.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OfferCreator) MarshalJSON() ([]byte, error) {
	switch o.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return json.Marshal(o.String)
	case "remoteUser":
		return json.Marshal(o.RemoteUser)
	}
}

type OfferCreatorVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (o *OfferCreator) Accept(visitor OfferCreatorVisitor) error {
	switch o.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return visitor.VisitString(o.String)
	case "remoteUser":
		return visitor.VisitRemoteUser(o.RemoteUser)
	}
}

// The offer's status.
//
// - `DRAFT` - DRAFT
// - `APPROVAL-SENT` - APPROVAL-SENT
// - `APPROVED` - APPROVED
// - `SENT` - SENT
// - `SENT-MANUALLY` - SENT-MANUALLY
// - `OPENED` - OPENED
// - `DENIED` - DENIED
// - `SIGNED` - SIGNED
// - `DEPRECATED` - DEPRECATED
type OfferStatus struct {
	typeName        string
	OfferStatusEnum OfferStatusEnum
	String          string
}

func NewOfferStatusFromOfferStatusEnum(value OfferStatusEnum) *OfferStatus {
	return &OfferStatus{typeName: "offerStatusEnum", OfferStatusEnum: value}
}

func NewOfferStatusFromString(value string) *OfferStatus {
	return &OfferStatus{typeName: "string", String: value}
}

func (o *OfferStatus) UnmarshalJSON(data []byte) error {
	var valueOfferStatusEnum OfferStatusEnum
	if err := json.Unmarshal(data, &valueOfferStatusEnum); err == nil {
		o.typeName = "offerStatusEnum"
		o.OfferStatusEnum = valueOfferStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typeName = "string"
		o.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OfferStatus) MarshalJSON() ([]byte, error) {
	switch o.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "offerStatusEnum":
		return json.Marshal(o.OfferStatusEnum)
	case "string":
		return json.Marshal(o.String)
	}
}

type OfferStatusVisitor interface {
	VisitOfferStatusEnum(OfferStatusEnum) error
	VisitString(string) error
}

func (o *OfferStatus) Accept(visitor OfferStatusVisitor) error {
	switch o.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "offerStatusEnum":
		return visitor.VisitOfferStatusEnum(o.OfferStatusEnum)
	case "string":
		return visitor.VisitString(o.String)
	}
}

// - `DRAFT` - DRAFT
// - `APPROVAL-SENT` - APPROVAL-SENT
// - `APPROVED` - APPROVED
// - `SENT` - SENT
// - `SENT-MANUALLY` - SENT-MANUALLY
// - `OPENED` - OPENED
// - `DENIED` - DENIED
// - `SIGNED` - SIGNED
// - `DEPRECATED` - DEPRECATED
type OfferStatusEnum string

const (
	OfferStatusEnumDraft        OfferStatusEnum = "DRAFT"
	OfferStatusEnumApprovalSent OfferStatusEnum = "APPROVAL-SENT"
	OfferStatusEnumApproved     OfferStatusEnum = "APPROVED"
	OfferStatusEnumSent         OfferStatusEnum = "SENT"
	OfferStatusEnumSentManually OfferStatusEnum = "SENT-MANUALLY"
	OfferStatusEnumOpened       OfferStatusEnum = "OPENED"
	OfferStatusEnumDenied       OfferStatusEnum = "DENIED"
	OfferStatusEnumSigned       OfferStatusEnum = "SIGNED"
	OfferStatusEnumDeprecated   OfferStatusEnum = "DEPRECATED"
)

func NewOfferStatusEnumFromString(s string) (OfferStatusEnum, error) {
	switch s {
	case "DRAFT":
		return OfferStatusEnumDraft, nil
	case "APPROVAL-SENT":
		return OfferStatusEnumApprovalSent, nil
	case "APPROVED":
		return OfferStatusEnumApproved, nil
	case "SENT":
		return OfferStatusEnumSent, nil
	case "SENT-MANUALLY":
		return OfferStatusEnumSentManually, nil
	case "OPENED":
		return OfferStatusEnumOpened, nil
	case "DENIED":
		return OfferStatusEnumDenied, nil
	case "SIGNED":
		return OfferStatusEnumSigned, nil
	case "DEPRECATED":
		return OfferStatusEnumDeprecated, nil
	}
	var t OfferStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OfferStatusEnum) Ptr() *OfferStatusEnum {
	return &o
}

// # The Office Object
//
// ### Description
//
// The `Office` object is used to represent an office within a company. A given `Job` has the `Office` ID in its offices field.
//
// ### Usage Example
//
// Fetch from the `LIST Offices` endpoint and view the offices within a company.
type Office struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The office's name.
	Name *string `json:"name,omitempty"`
	// The office's location.
	Location *string `json:"location,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (o *Office) UnmarshalJSON(data []byte) error {
	type unmarshaler Office
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = Office(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *Office) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// - `DEFINITELY_NO` - DEFINITELY_NO
// - `NO` - NO
// - `YES` - YES
// - `STRONG_YES` - STRONG_YES
// - `NO_DECISION` - NO_DECISION
type OverallRecommendationEnum string

const (
	OverallRecommendationEnumDefinitelyNo OverallRecommendationEnum = "DEFINITELY_NO"
	OverallRecommendationEnumNo           OverallRecommendationEnum = "NO"
	OverallRecommendationEnumYes          OverallRecommendationEnum = "YES"
	OverallRecommendationEnumStrongYes    OverallRecommendationEnum = "STRONG_YES"
	OverallRecommendationEnumNoDecision   OverallRecommendationEnum = "NO_DECISION"
)

func NewOverallRecommendationEnumFromString(s string) (OverallRecommendationEnum, error) {
	switch s {
	case "DEFINITELY_NO":
		return OverallRecommendationEnumDefinitelyNo, nil
	case "NO":
		return OverallRecommendationEnumNo, nil
	case "YES":
		return OverallRecommendationEnumYes, nil
	case "STRONG_YES":
		return OverallRecommendationEnumStrongYes, nil
	case "NO_DECISION":
		return OverallRecommendationEnumNoDecision, nil
	}
	var t OverallRecommendationEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OverallRecommendationEnum) Ptr() *OverallRecommendationEnum {
	return &o
}

type PaginatedAccountDetailsAndActionsList struct {
	Next     *string                     `json:"next,omitempty"`
	Previous *string                     `json:"previous,omitempty"`
	Results  []*AccountDetailsAndActions `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedAccountDetailsAndActionsList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAccountDetailsAndActionsList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAccountDetailsAndActionsList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAccountDetailsAndActionsList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedActivityList struct {
	Next     *string     `json:"next,omitempty"`
	Previous *string     `json:"previous,omitempty"`
	Results  []*Activity `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedActivityList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedActivityList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedActivityList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedActivityList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedApplicationList struct {
	Next     *string        `json:"next,omitempty"`
	Previous *string        `json:"previous,omitempty"`
	Results  []*Application `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedApplicationList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedApplicationList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedApplicationList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedApplicationList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedAttachmentList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*Attachment `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedAttachmentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAttachmentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAttachmentList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAttachmentList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedAuditLogEventList struct {
	Next     *string          `json:"next,omitempty"`
	Previous *string          `json:"previous,omitempty"`
	Results  []*AuditLogEvent `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedAuditLogEventList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAuditLogEventList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAuditLogEventList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAuditLogEventList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedCandidateList struct {
	Next     *string      `json:"next,omitempty"`
	Previous *string      `json:"previous,omitempty"`
	Results  []*Candidate `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedCandidateList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedCandidateList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedCandidateList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedCandidateList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedDepartmentList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*Department `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedDepartmentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedDepartmentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedDepartmentList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedDepartmentList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedEeocList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Eeoc `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedEeocList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedEeocList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedEeocList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedEeocList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedIssueList struct {
	Next     *string  `json:"next,omitempty"`
	Previous *string  `json:"previous,omitempty"`
	Results  []*Issue `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedIssueList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedIssueList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedIssueList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedIssueList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedJobInterviewStageList struct {
	Next     *string              `json:"next,omitempty"`
	Previous *string              `json:"previous,omitempty"`
	Results  []*JobInterviewStage `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedJobInterviewStageList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedJobInterviewStageList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedJobInterviewStageList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedJobInterviewStageList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedJobList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Job  `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedJobList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedJobList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedJobList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedJobList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedJobPostingList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*JobPosting `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedJobPostingList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedJobPostingList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedJobPostingList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedJobPostingList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedOfferList struct {
	Next     *string  `json:"next,omitempty"`
	Previous *string  `json:"previous,omitempty"`
	Results  []*Offer `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedOfferList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedOfferList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedOfferList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedOfferList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedOfficeList struct {
	Next     *string   `json:"next,omitempty"`
	Previous *string   `json:"previous,omitempty"`
	Results  []*Office `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedOfficeList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedOfficeList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedOfficeList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedOfficeList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedRejectReasonList struct {
	Next     *string         `json:"next,omitempty"`
	Previous *string         `json:"previous,omitempty"`
	Results  []*RejectReason `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedRejectReasonList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedRejectReasonList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedRejectReasonList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedRejectReasonList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedRemoteUserList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*RemoteUser `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedRemoteUserList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedRemoteUserList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedRemoteUserList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedRemoteUserList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedScheduledInterviewList struct {
	Next     *string               `json:"next,omitempty"`
	Previous *string               `json:"previous,omitempty"`
	Results  []*ScheduledInterview `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedScheduledInterviewList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedScheduledInterviewList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedScheduledInterviewList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedScheduledInterviewList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedScorecardList struct {
	Next     *string      `json:"next,omitempty"`
	Previous *string      `json:"previous,omitempty"`
	Results  []*Scorecard `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedScorecardList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedScorecardList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedScorecardList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedScorecardList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedScreeningQuestionList struct {
	Next     *string              `json:"next,omitempty"`
	Previous *string              `json:"previous,omitempty"`
	Results  []*ScreeningQuestion `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedScreeningQuestionList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedScreeningQuestionList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedScreeningQuestionList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedScreeningQuestionList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedSyncStatusList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*SyncStatus `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedSyncStatusList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSyncStatusList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSyncStatusList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSyncStatusList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedTagList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Tag  `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedTagList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTagList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTagList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTagList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Candidate Object
//
// ### Description
//
// The `Candidate` object is used to represent profile information about a given Candidate. Because it is specific to a Candidate, this information stays constant across applications.
//
// ### Usage Example
//
// Fetch from the `LIST Candidates` endpoint and filter by `ID` to show all candidates.
type PatchedCandidateRequest struct {
	// The candidate's first name.
	FirstName *string `json:"first_name,omitempty"`
	// The candidate's last name.
	LastName *string `json:"last_name,omitempty"`
	// The candidate's current company.
	Company *string `json:"company,omitempty"`
	// The candidate's current title.
	Title *string `json:"title,omitempty"`
	// When the most recent interaction with the candidate occurred.
	LastInteractionAt *time.Time `json:"last_interaction_at,omitempty"`
	// Whether or not the candidate is private.
	IsPrivate *bool `json:"is_private,omitempty"`
	// Whether or not the candidate can be emailed.
	CanEmail *bool `json:"can_email,omitempty"`
	// The candidate's locations.
	Locations      []*string              `json:"locations,omitempty"`
	PhoneNumbers   []*PhoneNumberRequest  `json:"phone_numbers,omitempty"`
	EmailAddresses []*EmailAddressRequest `json:"email_addresses,omitempty"`
	Urls           []*UrlRequest          `json:"urls,omitempty"`
	// Array of `Tag` names as strings.
	Tags []*string `json:"tags,omitempty"`
	// Array of `Application` object IDs.
	Applications []*string `json:"applications,omitempty"`
	// Array of `Attachment` object IDs.
	Attachments         []*string              `json:"attachments,omitempty"`
	RemoteTemplateId    *string                `json:"remote_template_id,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PatchedCandidateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PatchedCandidateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatchedCandidateRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedCandidateRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The PhoneNumber Object
//
// ### Description
//
// The `PhoneNumber` object is used to represent a candidate's phone number.
//
// ### Usage Example
//
// Fetch from the `GET Candidate` endpoint and view their phone numbers.
type PhoneNumber struct {
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The phone number.
	Value *string `json:"value,omitempty"`
	// The type of phone number.
	//
	// - `HOME` - HOME
	// - `WORK` - WORK
	// - `MOBILE` - MOBILE
	// - `SKYPE` - SKYPE
	// - `OTHER` - OTHER
	PhoneNumberType *PhoneNumberPhoneNumberType `json:"phone_number_type,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PhoneNumber) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneNumber
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneNumber(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneNumber) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The type of phone number.
//
// - `HOME` - HOME
// - `WORK` - WORK
// - `MOBILE` - MOBILE
// - `SKYPE` - SKYPE
// - `OTHER` - OTHER
type PhoneNumberPhoneNumberType struct {
	typeName            string
	PhoneNumberTypeEnum PhoneNumberTypeEnum
	String              string
}

func NewPhoneNumberPhoneNumberTypeFromPhoneNumberTypeEnum(value PhoneNumberTypeEnum) *PhoneNumberPhoneNumberType {
	return &PhoneNumberPhoneNumberType{typeName: "phoneNumberTypeEnum", PhoneNumberTypeEnum: value}
}

func NewPhoneNumberPhoneNumberTypeFromString(value string) *PhoneNumberPhoneNumberType {
	return &PhoneNumberPhoneNumberType{typeName: "string", String: value}
}

func (p *PhoneNumberPhoneNumberType) UnmarshalJSON(data []byte) error {
	var valuePhoneNumberTypeEnum PhoneNumberTypeEnum
	if err := json.Unmarshal(data, &valuePhoneNumberTypeEnum); err == nil {
		p.typeName = "phoneNumberTypeEnum"
		p.PhoneNumberTypeEnum = valuePhoneNumberTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PhoneNumberPhoneNumberType) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "phoneNumberTypeEnum":
		return json.Marshal(p.PhoneNumberTypeEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PhoneNumberPhoneNumberTypeVisitor interface {
	VisitPhoneNumberTypeEnum(PhoneNumberTypeEnum) error
	VisitString(string) error
}

func (p *PhoneNumberPhoneNumberType) Accept(visitor PhoneNumberPhoneNumberTypeVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "phoneNumberTypeEnum":
		return visitor.VisitPhoneNumberTypeEnum(p.PhoneNumberTypeEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// # The PhoneNumber Object
//
// ### Description
//
// The `PhoneNumber` object is used to represent a candidate's phone number.
//
// ### Usage Example
//
// Fetch from the `GET Candidate` endpoint and view their phone numbers.
type PhoneNumberRequest struct {
	// The phone number.
	Value *string `json:"value,omitempty"`
	// The type of phone number.
	//
	// - `HOME` - HOME
	// - `WORK` - WORK
	// - `MOBILE` - MOBILE
	// - `SKYPE` - SKYPE
	// - `OTHER` - OTHER
	PhoneNumberType     *PhoneNumberRequestPhoneNumberType `json:"phone_number_type,omitempty"`
	IntegrationParams   map[string]interface{}             `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}             `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PhoneNumberRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneNumberRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneNumberRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneNumberRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The type of phone number.
//
// - `HOME` - HOME
// - `WORK` - WORK
// - `MOBILE` - MOBILE
// - `SKYPE` - SKYPE
// - `OTHER` - OTHER
type PhoneNumberRequestPhoneNumberType struct {
	typeName            string
	PhoneNumberTypeEnum PhoneNumberTypeEnum
	String              string
}

func NewPhoneNumberRequestPhoneNumberTypeFromPhoneNumberTypeEnum(value PhoneNumberTypeEnum) *PhoneNumberRequestPhoneNumberType {
	return &PhoneNumberRequestPhoneNumberType{typeName: "phoneNumberTypeEnum", PhoneNumberTypeEnum: value}
}

func NewPhoneNumberRequestPhoneNumberTypeFromString(value string) *PhoneNumberRequestPhoneNumberType {
	return &PhoneNumberRequestPhoneNumberType{typeName: "string", String: value}
}

func (p *PhoneNumberRequestPhoneNumberType) UnmarshalJSON(data []byte) error {
	var valuePhoneNumberTypeEnum PhoneNumberTypeEnum
	if err := json.Unmarshal(data, &valuePhoneNumberTypeEnum); err == nil {
		p.typeName = "phoneNumberTypeEnum"
		p.PhoneNumberTypeEnum = valuePhoneNumberTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PhoneNumberRequestPhoneNumberType) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "phoneNumberTypeEnum":
		return json.Marshal(p.PhoneNumberTypeEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PhoneNumberRequestPhoneNumberTypeVisitor interface {
	VisitPhoneNumberTypeEnum(PhoneNumberTypeEnum) error
	VisitString(string) error
}

func (p *PhoneNumberRequestPhoneNumberType) Accept(visitor PhoneNumberRequestPhoneNumberTypeVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "phoneNumberTypeEnum":
		return visitor.VisitPhoneNumberTypeEnum(p.PhoneNumberTypeEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// - `HOME` - HOME
// - `WORK` - WORK
// - `MOBILE` - MOBILE
// - `SKYPE` - SKYPE
// - `OTHER` - OTHER
type PhoneNumberTypeEnum string

const (
	PhoneNumberTypeEnumHome   PhoneNumberTypeEnum = "HOME"
	PhoneNumberTypeEnumWork   PhoneNumberTypeEnum = "WORK"
	PhoneNumberTypeEnumMobile PhoneNumberTypeEnum = "MOBILE"
	PhoneNumberTypeEnumSkype  PhoneNumberTypeEnum = "SKYPE"
	PhoneNumberTypeEnumOther  PhoneNumberTypeEnum = "OTHER"
)

func NewPhoneNumberTypeEnumFromString(s string) (PhoneNumberTypeEnum, error) {
	switch s {
	case "HOME":
		return PhoneNumberTypeEnumHome, nil
	case "WORK":
		return PhoneNumberTypeEnumWork, nil
	case "MOBILE":
		return PhoneNumberTypeEnumMobile, nil
	case "SKYPE":
		return PhoneNumberTypeEnumSkype, nil
	case "OTHER":
		return PhoneNumberTypeEnumOther, nil
	}
	var t PhoneNumberTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PhoneNumberTypeEnum) Ptr() *PhoneNumberTypeEnum {
	return &p
}

// - `AMERICAN_INDIAN_OR_ALASKAN_NATIVE` - AMERICAN_INDIAN_OR_ALASKAN_NATIVE
// - `ASIAN` - ASIAN
// - `BLACK_OR_AFRICAN_AMERICAN` - BLACK_OR_AFRICAN_AMERICAN
// - `HISPANIC_OR_LATINO` - HISPANIC_OR_LATINO
// - `WHITE` - WHITE
// - `NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER` - NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER
// - `TWO_OR_MORE_RACES` - TWO_OR_MORE_RACES
// - `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
type RaceEnum string

const (
	RaceEnumAmericanIndianOrAlaskanNative        RaceEnum = "AMERICAN_INDIAN_OR_ALASKAN_NATIVE"
	RaceEnumAsian                                RaceEnum = "ASIAN"
	RaceEnumBlackOrAfricanAmerican               RaceEnum = "BLACK_OR_AFRICAN_AMERICAN"
	RaceEnumHispanicOrLatino                     RaceEnum = "HISPANIC_OR_LATINO"
	RaceEnumWhite                                RaceEnum = "WHITE"
	RaceEnumNativeHawaiianOrOtherPacificIslander RaceEnum = "NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER"
	RaceEnumTwoOrMoreRaces                       RaceEnum = "TWO_OR_MORE_RACES"
	RaceEnumDeclineToSelfIdentify                RaceEnum = "DECLINE_TO_SELF_IDENTIFY"
)

func NewRaceEnumFromString(s string) (RaceEnum, error) {
	switch s {
	case "AMERICAN_INDIAN_OR_ALASKAN_NATIVE":
		return RaceEnumAmericanIndianOrAlaskanNative, nil
	case "ASIAN":
		return RaceEnumAsian, nil
	case "BLACK_OR_AFRICAN_AMERICAN":
		return RaceEnumBlackOrAfricanAmerican, nil
	case "HISPANIC_OR_LATINO":
		return RaceEnumHispanicOrLatino, nil
	case "WHITE":
		return RaceEnumWhite, nil
	case "NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER":
		return RaceEnumNativeHawaiianOrOtherPacificIslander, nil
	case "TWO_OR_MORE_RACES":
		return RaceEnumTwoOrMoreRaces, nil
	case "DECLINE_TO_SELF_IDENTIFY":
		return RaceEnumDeclineToSelfIdentify, nil
	}
	var t RaceEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RaceEnum) Ptr() *RaceEnum {
	return &r
}

// - `GENERAL_CUSTOMER_REQUEST` - GENERAL_CUSTOMER_REQUEST
// - `GDPR` - GDPR
// - `OTHER` - OTHER
type ReasonEnum string

const (
	ReasonEnumGeneralCustomerRequest ReasonEnum = "GENERAL_CUSTOMER_REQUEST"
	ReasonEnumGdpr                   ReasonEnum = "GDPR"
	ReasonEnumOther                  ReasonEnum = "OTHER"
)

func NewReasonEnumFromString(s string) (ReasonEnum, error) {
	switch s {
	case "GENERAL_CUSTOMER_REQUEST":
		return ReasonEnumGeneralCustomerRequest, nil
	case "GDPR":
		return ReasonEnumGdpr, nil
	case "OTHER":
		return ReasonEnumOther, nil
	}
	var t ReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReasonEnum) Ptr() *ReasonEnum {
	return &r
}

// # The RejectReason Object
//
// ### Description
//
// The `RejectReason` object is used to represent a reason for rejecting an application. These can typically be configured within an ATS system.
//
// ### Usage Example
//
// Fetch from the `LIST RejectReasons` endpoint and filter by `ID` to show all reasons.
type RejectReason struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The rejection reason’s name.
	Name *string `json:"name,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RejectReason) UnmarshalJSON(data []byte) error {
	type unmarshaler RejectReason
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RejectReason(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectReason) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// # The RemoteData Object
//
// ### Description
//
// The `RemoteData` object is used to represent the full data pulled from the third-party API for an object.
//
// ### Usage Example
//
// TODO
type RemoteData struct {
	// The third-party API path that is being called.
	Path string      `json:"path"`
	Data interface{} `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteData) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteData(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteEndpointInfo struct {
	Method             string        `json:"method"`
	UrlPath            string        `json:"url_path"`
	FieldTraversalPath []interface{} `json:"field_traversal_path,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteEndpointInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteEndpointInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteEndpointInfo(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteEndpointInfo) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldApi struct {
	Schema             map[string]interface{}  `json:"schema,omitempty"`
	RemoteKeyName      string                  `json:"remote_key_name"`
	RemoteEndpointInfo *RemoteEndpointInfo     `json:"remote_endpoint_info,omitempty"`
	ExampleValues      []interface{}           `json:"example_values,omitempty"`
	AdvancedMetadata   *AdvancedMetadata       `json:"advanced_metadata,omitempty"`
	Coverage           *RemoteFieldApiCoverage `json:"coverage,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldApi) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldApi(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldApi) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldApiCoverage struct {
	typeName string
	Integer  int
	Double   float64
}

func NewRemoteFieldApiCoverageFromInteger(value int) *RemoteFieldApiCoverage {
	return &RemoteFieldApiCoverage{typeName: "integer", Integer: value}
}

func NewRemoteFieldApiCoverageFromDouble(value float64) *RemoteFieldApiCoverage {
	return &RemoteFieldApiCoverage{typeName: "double", Double: value}
}

func (r *RemoteFieldApiCoverage) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		r.typeName = "integer"
		r.Integer = valueInteger
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		r.typeName = "double"
		r.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldApiCoverage) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "integer":
		return json.Marshal(r.Integer)
	case "double":
		return json.Marshal(r.Double)
	}
}

type RemoteFieldApiCoverageVisitor interface {
	VisitInteger(int) error
	VisitDouble(float64) error
}

func (r *RemoteFieldApiCoverage) Accept(visitor RemoteFieldApiCoverageVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "integer":
		return visitor.VisitInteger(r.Integer)
	case "double":
		return visitor.VisitDouble(r.Double)
	}
}

type RemoteFieldApiResponse struct {
	Activity           []*RemoteFieldApi `json:"Activity,omitempty"`
	Application        []*RemoteFieldApi `json:"Application,omitempty"`
	Attachment         []*RemoteFieldApi `json:"Attachment,omitempty"`
	Candidate          []*RemoteFieldApi `json:"Candidate,omitempty"`
	Department         []*RemoteFieldApi `json:"Department,omitempty"`
	Eeoc               []*RemoteFieldApi `json:"EEOC,omitempty"`
	ScheduledInterview []*RemoteFieldApi `json:"ScheduledInterview,omitempty"`
	Job                []*RemoteFieldApi `json:"Job,omitempty"`
	JobPosting         []*RemoteFieldApi `json:"JobPosting,omitempty"`
	JobInterviewStage  []*RemoteFieldApi `json:"JobInterviewStage,omitempty"`
	Offer              []*RemoteFieldApi `json:"Offer,omitempty"`
	Office             []*RemoteFieldApi `json:"Office,omitempty"`
	RejectReason       []*RemoteFieldApi `json:"RejectReason,omitempty"`
	Scorecard          []*RemoteFieldApi `json:"Scorecard,omitempty"`
	Tag                []*RemoteFieldApi `json:"Tag,omitempty"`
	RemoteUser         []*RemoteFieldApi `json:"RemoteUser,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldApiResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldApiResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// # The RemoteKey Object
//
// ### Description
//
// The `RemoteKey` object is used to represent a request for a new remote key.
//
// ### Usage Example
//
// Post a `GenerateRemoteKey` to receive a new `RemoteKey`.
type RemoteKey struct {
	Name string `json:"name"`
	Key  string `json:"key"`

	_rawJSON json.RawMessage
}

func (r *RemoteKey) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteKey(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteKey) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// # The RemoteResponse Object
//
// ### Description
//
// The `RemoteResponse` object is used to represent information returned from a third-party endpoint.
//
// ### Usage Example
//
// View the `RemoteResponse` returned from your `DataPassthrough`.
type RemoteResponse struct {
	Method          string                      `json:"method"`
	Path            string                      `json:"path"`
	Status          int                         `json:"status"`
	Response        interface{}                 `json:"response,omitempty"`
	ResponseHeaders map[string]interface{}      `json:"response_headers,omitempty"`
	ResponseType    *RemoteResponseResponseType `json:"response_type,omitempty"`
	Headers         map[string]interface{}      `json:"headers,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteResponseResponseType struct {
	typeName         string
	ResponseTypeEnum ResponseTypeEnum
	String           string
}

func NewRemoteResponseResponseTypeFromResponseTypeEnum(value ResponseTypeEnum) *RemoteResponseResponseType {
	return &RemoteResponseResponseType{typeName: "responseTypeEnum", ResponseTypeEnum: value}
}

func NewRemoteResponseResponseTypeFromString(value string) *RemoteResponseResponseType {
	return &RemoteResponseResponseType{typeName: "string", String: value}
}

func (r *RemoteResponseResponseType) UnmarshalJSON(data []byte) error {
	var valueResponseTypeEnum ResponseTypeEnum
	if err := json.Unmarshal(data, &valueResponseTypeEnum); err == nil {
		r.typeName = "responseTypeEnum"
		r.ResponseTypeEnum = valueResponseTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteResponseResponseType) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "responseTypeEnum":
		return json.Marshal(r.ResponseTypeEnum)
	case "string":
		return json.Marshal(r.String)
	}
}

type RemoteResponseResponseTypeVisitor interface {
	VisitResponseTypeEnum(ResponseTypeEnum) error
	VisitString(string) error
}

func (r *RemoteResponseResponseType) Accept(visitor RemoteResponseResponseTypeVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "responseTypeEnum":
		return visitor.VisitResponseTypeEnum(r.ResponseTypeEnum)
	case "string":
		return visitor.VisitString(r.String)
	}
}

// # The RemoteUser Object
//
// ### Description
//
// The `RemoteUser` object is used to represent a user with a login to the ATS system.
//
// ### Usage Example
//
// Fetch from the `LIST RemoteUsers` endpoint to show all users for a third party.
type RemoteUser struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The user's first name.
	FirstName *string `json:"first_name,omitempty"`
	// The user's last name.
	LastName *string `json:"last_name,omitempty"`
	// The user's email.
	Email *string `json:"email,omitempty"`
	// Whether the user's account had been disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// When the third party's user was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// The user's role.
	//
	// - `SUPER_ADMIN` - SUPER_ADMIN
	// - `ADMIN` - ADMIN
	// - `TEAM_MEMBER` - TEAM_MEMBER
	// - `LIMITED_TEAM_MEMBER` - LIMITED_TEAM_MEMBER
	// - `INTERVIEWER` - INTERVIEWER
	AccessRole *RemoteUserAccessRole `json:"access_role,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteUser) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteUser(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteUser) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The user's role.
//
// - `SUPER_ADMIN` - SUPER_ADMIN
// - `ADMIN` - ADMIN
// - `TEAM_MEMBER` - TEAM_MEMBER
// - `LIMITED_TEAM_MEMBER` - LIMITED_TEAM_MEMBER
// - `INTERVIEWER` - INTERVIEWER
type RemoteUserAccessRole struct {
	typeName       string
	AccessRoleEnum AccessRoleEnum
	String         string
}

func NewRemoteUserAccessRoleFromAccessRoleEnum(value AccessRoleEnum) *RemoteUserAccessRole {
	return &RemoteUserAccessRole{typeName: "accessRoleEnum", AccessRoleEnum: value}
}

func NewRemoteUserAccessRoleFromString(value string) *RemoteUserAccessRole {
	return &RemoteUserAccessRole{typeName: "string", String: value}
}

func (r *RemoteUserAccessRole) UnmarshalJSON(data []byte) error {
	var valueAccessRoleEnum AccessRoleEnum
	if err := json.Unmarshal(data, &valueAccessRoleEnum); err == nil {
		r.typeName = "accessRoleEnum"
		r.AccessRoleEnum = valueAccessRoleEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteUserAccessRole) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "accessRoleEnum":
		return json.Marshal(r.AccessRoleEnum)
	case "string":
		return json.Marshal(r.String)
	}
}

type RemoteUserAccessRoleVisitor interface {
	VisitAccessRoleEnum(AccessRoleEnum) error
	VisitString(string) error
}

func (r *RemoteUserAccessRole) Accept(visitor RemoteUserAccessRoleVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "accessRoleEnum":
		return visitor.VisitAccessRoleEnum(r.AccessRoleEnum)
	case "string":
		return visitor.VisitString(r.String)
	}
}

// - `JSON` - JSON
// - `XML` - XML
// - `MULTIPART` - MULTIPART
type RequestFormatEnum string

const (
	RequestFormatEnumJson      RequestFormatEnum = "JSON"
	RequestFormatEnumXml       RequestFormatEnum = "XML"
	RequestFormatEnumMultipart RequestFormatEnum = "MULTIPART"
)

func NewRequestFormatEnumFromString(s string) (RequestFormatEnum, error) {
	switch s {
	case "JSON":
		return RequestFormatEnumJson, nil
	case "XML":
		return RequestFormatEnumXml, nil
	case "MULTIPART":
		return RequestFormatEnumMultipart, nil
	}
	var t RequestFormatEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestFormatEnum) Ptr() *RequestFormatEnum {
	return &r
}

// - `JSON` - JSON
// - `BASE64_GZIP` - BASE64_GZIP
type ResponseTypeEnum string

const (
	ResponseTypeEnumJson       ResponseTypeEnum = "JSON"
	ResponseTypeEnumBase64Gzip ResponseTypeEnum = "BASE64_GZIP"
)

func NewResponseTypeEnumFromString(s string) (ResponseTypeEnum, error) {
	switch s {
	case "JSON":
		return ResponseTypeEnumJson, nil
	case "BASE64_GZIP":
		return ResponseTypeEnumBase64Gzip, nil
	}
	var t ResponseTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ResponseTypeEnum) Ptr() *ResponseTypeEnum {
	return &r
}

// - `ADMIN` - ADMIN
// - `DEVELOPER` - DEVELOPER
// - `MEMBER` - MEMBER
// - `API` - API
// - `SYSTEM` - SYSTEM
// - `MERGE_TEAM` - MERGE_TEAM
type RoleEnum string

const (
	RoleEnumAdmin     RoleEnum = "ADMIN"
	RoleEnumDeveloper RoleEnum = "DEVELOPER"
	RoleEnumMember    RoleEnum = "MEMBER"
	RoleEnumApi       RoleEnum = "API"
	RoleEnumSystem    RoleEnum = "SYSTEM"
	RoleEnumMergeTeam RoleEnum = "MERGE_TEAM"
)

func NewRoleEnumFromString(s string) (RoleEnum, error) {
	switch s {
	case "ADMIN":
		return RoleEnumAdmin, nil
	case "DEVELOPER":
		return RoleEnumDeveloper, nil
	case "MEMBER":
		return RoleEnumMember, nil
	case "API":
		return RoleEnumApi, nil
	case "SYSTEM":
		return RoleEnumSystem, nil
	case "MERGE_TEAM":
		return RoleEnumMergeTeam, nil
	}
	var t RoleEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RoleEnum) Ptr() *RoleEnum {
	return &r
}

// # The ScheduledInterview Object
//
// ### Description
//
// The `ScheduledInterview` object is used to represent a scheduled interview for a given candidate’s application to a job. An `Application` can have multiple `ScheduledInterview`s depending on the particular hiring process.
//
// ### Usage Example
//
// Fetch from the `LIST ScheduledInterviews` endpoint and filter by `interviewers` to show all office locations.
type ScheduledInterview struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The application being interviewed.
	Application *ScheduledInterviewApplication `json:"application,omitempty"`
	// The stage of the interview.
	JobInterviewStage *ScheduledInterviewJobInterviewStage `json:"job_interview_stage,omitempty"`
	// The user organizing the interview.
	Organizer *ScheduledInterviewOrganizer `json:"organizer,omitempty"`
	// Array of `RemoteUser` IDs.
	Interviewers []*ScheduledInterviewInterviewersItem `json:"interviewers,omitempty"`
	// The interview's location.
	Location *string `json:"location,omitempty"`
	// When the interview was started.
	StartAt *time.Time `json:"start_at,omitempty"`
	// When the interview was ended.
	EndAt *time.Time `json:"end_at,omitempty"`
	// When the third party's interview was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// When the third party's interview was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// The interview's status.
	//
	// - `SCHEDULED` - SCHEDULED
	// - `AWAITING_FEEDBACK` - AWAITING_FEEDBACK
	// - `COMPLETE` - COMPLETE
	Status *ScheduledInterviewStatus `json:"status,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (s *ScheduledInterview) UnmarshalJSON(data []byte) error {
	type unmarshaler ScheduledInterview
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScheduledInterview(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScheduledInterview) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The application being interviewed.
type ScheduledInterviewApplication struct {
	typeName    string
	String      string
	Application *Application
}

func NewScheduledInterviewApplicationFromString(value string) *ScheduledInterviewApplication {
	return &ScheduledInterviewApplication{typeName: "string", String: value}
}

func NewScheduledInterviewApplicationFromApplication(value *Application) *ScheduledInterviewApplication {
	return &ScheduledInterviewApplication{typeName: "application", Application: value}
}

func (s *ScheduledInterviewApplication) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueApplication := new(Application)
	if err := json.Unmarshal(data, &valueApplication); err == nil {
		s.typeName = "application"
		s.Application = valueApplication
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewApplication) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "application":
		return json.Marshal(s.Application)
	}
}

type ScheduledInterviewApplicationVisitor interface {
	VisitString(string) error
	VisitApplication(*Application) error
}

func (s *ScheduledInterviewApplication) Accept(visitor ScheduledInterviewApplicationVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "application":
		return visitor.VisitApplication(s.Application)
	}
}

type ScheduledInterviewInterviewersItem struct {
	typeName   string
	String     string
	RemoteUser *RemoteUser
}

func NewScheduledInterviewInterviewersItemFromString(value string) *ScheduledInterviewInterviewersItem {
	return &ScheduledInterviewInterviewersItem{typeName: "string", String: value}
}

func NewScheduledInterviewInterviewersItemFromRemoteUser(value *RemoteUser) *ScheduledInterviewInterviewersItem {
	return &ScheduledInterviewInterviewersItem{typeName: "remoteUser", RemoteUser: value}
}

func (s *ScheduledInterviewInterviewersItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		s.typeName = "remoteUser"
		s.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewInterviewersItem) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "remoteUser":
		return json.Marshal(s.RemoteUser)
	}
}

type ScheduledInterviewInterviewersItemVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (s *ScheduledInterviewInterviewersItem) Accept(visitor ScheduledInterviewInterviewersItemVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "remoteUser":
		return visitor.VisitRemoteUser(s.RemoteUser)
	}
}

// The stage of the interview.
type ScheduledInterviewJobInterviewStage struct {
	typeName          string
	String            string
	JobInterviewStage *JobInterviewStage
}

func NewScheduledInterviewJobInterviewStageFromString(value string) *ScheduledInterviewJobInterviewStage {
	return &ScheduledInterviewJobInterviewStage{typeName: "string", String: value}
}

func NewScheduledInterviewJobInterviewStageFromJobInterviewStage(value *JobInterviewStage) *ScheduledInterviewJobInterviewStage {
	return &ScheduledInterviewJobInterviewStage{typeName: "jobInterviewStage", JobInterviewStage: value}
}

func (s *ScheduledInterviewJobInterviewStage) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueJobInterviewStage := new(JobInterviewStage)
	if err := json.Unmarshal(data, &valueJobInterviewStage); err == nil {
		s.typeName = "jobInterviewStage"
		s.JobInterviewStage = valueJobInterviewStage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewJobInterviewStage) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "jobInterviewStage":
		return json.Marshal(s.JobInterviewStage)
	}
}

type ScheduledInterviewJobInterviewStageVisitor interface {
	VisitString(string) error
	VisitJobInterviewStage(*JobInterviewStage) error
}

func (s *ScheduledInterviewJobInterviewStage) Accept(visitor ScheduledInterviewJobInterviewStageVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "jobInterviewStage":
		return visitor.VisitJobInterviewStage(s.JobInterviewStage)
	}
}

// The user organizing the interview.
type ScheduledInterviewOrganizer struct {
	typeName   string
	String     string
	RemoteUser *RemoteUser
}

func NewScheduledInterviewOrganizerFromString(value string) *ScheduledInterviewOrganizer {
	return &ScheduledInterviewOrganizer{typeName: "string", String: value}
}

func NewScheduledInterviewOrganizerFromRemoteUser(value *RemoteUser) *ScheduledInterviewOrganizer {
	return &ScheduledInterviewOrganizer{typeName: "remoteUser", RemoteUser: value}
}

func (s *ScheduledInterviewOrganizer) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		s.typeName = "remoteUser"
		s.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewOrganizer) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "remoteUser":
		return json.Marshal(s.RemoteUser)
	}
}

type ScheduledInterviewOrganizerVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (s *ScheduledInterviewOrganizer) Accept(visitor ScheduledInterviewOrganizerVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "remoteUser":
		return visitor.VisitRemoteUser(s.RemoteUser)
	}
}

// # The ScheduledInterview Object
//
// ### Description
//
// The `ScheduledInterview` object is used to represent a scheduled interview for a given candidate’s application to a job. An `Application` can have multiple `ScheduledInterview`s depending on the particular hiring process.
//
// ### Usage Example
//
// Fetch from the `LIST ScheduledInterviews` endpoint and filter by `interviewers` to show all office locations.
type ScheduledInterviewRequest struct {
	// The application being interviewed.
	Application *ScheduledInterviewRequestApplication `json:"application,omitempty"`
	// The stage of the interview.
	JobInterviewStage *ScheduledInterviewRequestJobInterviewStage `json:"job_interview_stage,omitempty"`
	// The user organizing the interview.
	Organizer *ScheduledInterviewRequestOrganizer `json:"organizer,omitempty"`
	// Array of `RemoteUser` IDs.
	Interviewers []*ScheduledInterviewRequestInterviewersItem `json:"interviewers,omitempty"`
	// The interview's location.
	Location *string `json:"location,omitempty"`
	// When the interview was started.
	StartAt *time.Time `json:"start_at,omitempty"`
	// When the interview was ended.
	EndAt *time.Time `json:"end_at,omitempty"`
	// The interview's status.
	//
	// - `SCHEDULED` - SCHEDULED
	// - `AWAITING_FEEDBACK` - AWAITING_FEEDBACK
	// - `COMPLETE` - COMPLETE
	Status              *ScheduledInterviewRequestStatus `json:"status,omitempty"`
	IntegrationParams   map[string]interface{}           `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}           `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (s *ScheduledInterviewRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ScheduledInterviewRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScheduledInterviewRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScheduledInterviewRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The application being interviewed.
type ScheduledInterviewRequestApplication struct {
	typeName    string
	String      string
	Application *Application
}

func NewScheduledInterviewRequestApplicationFromString(value string) *ScheduledInterviewRequestApplication {
	return &ScheduledInterviewRequestApplication{typeName: "string", String: value}
}

func NewScheduledInterviewRequestApplicationFromApplication(value *Application) *ScheduledInterviewRequestApplication {
	return &ScheduledInterviewRequestApplication{typeName: "application", Application: value}
}

func (s *ScheduledInterviewRequestApplication) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueApplication := new(Application)
	if err := json.Unmarshal(data, &valueApplication); err == nil {
		s.typeName = "application"
		s.Application = valueApplication
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewRequestApplication) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "application":
		return json.Marshal(s.Application)
	}
}

type ScheduledInterviewRequestApplicationVisitor interface {
	VisitString(string) error
	VisitApplication(*Application) error
}

func (s *ScheduledInterviewRequestApplication) Accept(visitor ScheduledInterviewRequestApplicationVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "application":
		return visitor.VisitApplication(s.Application)
	}
}

type ScheduledInterviewRequestInterviewersItem struct {
	typeName   string
	String     string
	RemoteUser *RemoteUser
}

func NewScheduledInterviewRequestInterviewersItemFromString(value string) *ScheduledInterviewRequestInterviewersItem {
	return &ScheduledInterviewRequestInterviewersItem{typeName: "string", String: value}
}

func NewScheduledInterviewRequestInterviewersItemFromRemoteUser(value *RemoteUser) *ScheduledInterviewRequestInterviewersItem {
	return &ScheduledInterviewRequestInterviewersItem{typeName: "remoteUser", RemoteUser: value}
}

func (s *ScheduledInterviewRequestInterviewersItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		s.typeName = "remoteUser"
		s.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewRequestInterviewersItem) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "remoteUser":
		return json.Marshal(s.RemoteUser)
	}
}

type ScheduledInterviewRequestInterviewersItemVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (s *ScheduledInterviewRequestInterviewersItem) Accept(visitor ScheduledInterviewRequestInterviewersItemVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "remoteUser":
		return visitor.VisitRemoteUser(s.RemoteUser)
	}
}

// The stage of the interview.
type ScheduledInterviewRequestJobInterviewStage struct {
	typeName          string
	String            string
	JobInterviewStage *JobInterviewStage
}

func NewScheduledInterviewRequestJobInterviewStageFromString(value string) *ScheduledInterviewRequestJobInterviewStage {
	return &ScheduledInterviewRequestJobInterviewStage{typeName: "string", String: value}
}

func NewScheduledInterviewRequestJobInterviewStageFromJobInterviewStage(value *JobInterviewStage) *ScheduledInterviewRequestJobInterviewStage {
	return &ScheduledInterviewRequestJobInterviewStage{typeName: "jobInterviewStage", JobInterviewStage: value}
}

func (s *ScheduledInterviewRequestJobInterviewStage) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueJobInterviewStage := new(JobInterviewStage)
	if err := json.Unmarshal(data, &valueJobInterviewStage); err == nil {
		s.typeName = "jobInterviewStage"
		s.JobInterviewStage = valueJobInterviewStage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewRequestJobInterviewStage) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "jobInterviewStage":
		return json.Marshal(s.JobInterviewStage)
	}
}

type ScheduledInterviewRequestJobInterviewStageVisitor interface {
	VisitString(string) error
	VisitJobInterviewStage(*JobInterviewStage) error
}

func (s *ScheduledInterviewRequestJobInterviewStage) Accept(visitor ScheduledInterviewRequestJobInterviewStageVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "jobInterviewStage":
		return visitor.VisitJobInterviewStage(s.JobInterviewStage)
	}
}

// The user organizing the interview.
type ScheduledInterviewRequestOrganizer struct {
	typeName   string
	String     string
	RemoteUser *RemoteUser
}

func NewScheduledInterviewRequestOrganizerFromString(value string) *ScheduledInterviewRequestOrganizer {
	return &ScheduledInterviewRequestOrganizer{typeName: "string", String: value}
}

func NewScheduledInterviewRequestOrganizerFromRemoteUser(value *RemoteUser) *ScheduledInterviewRequestOrganizer {
	return &ScheduledInterviewRequestOrganizer{typeName: "remoteUser", RemoteUser: value}
}

func (s *ScheduledInterviewRequestOrganizer) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		s.typeName = "remoteUser"
		s.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewRequestOrganizer) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "remoteUser":
		return json.Marshal(s.RemoteUser)
	}
}

type ScheduledInterviewRequestOrganizerVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (s *ScheduledInterviewRequestOrganizer) Accept(visitor ScheduledInterviewRequestOrganizerVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "remoteUser":
		return visitor.VisitRemoteUser(s.RemoteUser)
	}
}

// The interview's status.
//
// - `SCHEDULED` - SCHEDULED
// - `AWAITING_FEEDBACK` - AWAITING_FEEDBACK
// - `COMPLETE` - COMPLETE
type ScheduledInterviewRequestStatus struct {
	typeName                     string
	ScheduledInterviewStatusEnum ScheduledInterviewStatusEnum
	String                       string
}

func NewScheduledInterviewRequestStatusFromScheduledInterviewStatusEnum(value ScheduledInterviewStatusEnum) *ScheduledInterviewRequestStatus {
	return &ScheduledInterviewRequestStatus{typeName: "scheduledInterviewStatusEnum", ScheduledInterviewStatusEnum: value}
}

func NewScheduledInterviewRequestStatusFromString(value string) *ScheduledInterviewRequestStatus {
	return &ScheduledInterviewRequestStatus{typeName: "string", String: value}
}

func (s *ScheduledInterviewRequestStatus) UnmarshalJSON(data []byte) error {
	var valueScheduledInterviewStatusEnum ScheduledInterviewStatusEnum
	if err := json.Unmarshal(data, &valueScheduledInterviewStatusEnum); err == nil {
		s.typeName = "scheduledInterviewStatusEnum"
		s.ScheduledInterviewStatusEnum = valueScheduledInterviewStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewRequestStatus) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "scheduledInterviewStatusEnum":
		return json.Marshal(s.ScheduledInterviewStatusEnum)
	case "string":
		return json.Marshal(s.String)
	}
}

type ScheduledInterviewRequestStatusVisitor interface {
	VisitScheduledInterviewStatusEnum(ScheduledInterviewStatusEnum) error
	VisitString(string) error
}

func (s *ScheduledInterviewRequestStatus) Accept(visitor ScheduledInterviewRequestStatusVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "scheduledInterviewStatusEnum":
		return visitor.VisitScheduledInterviewStatusEnum(s.ScheduledInterviewStatusEnum)
	case "string":
		return visitor.VisitString(s.String)
	}
}

type ScheduledInterviewResponse struct {
	Model    *ScheduledInterview         `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (s *ScheduledInterviewResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ScheduledInterviewResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScheduledInterviewResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScheduledInterviewResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The interview's status.
//
// - `SCHEDULED` - SCHEDULED
// - `AWAITING_FEEDBACK` - AWAITING_FEEDBACK
// - `COMPLETE` - COMPLETE
type ScheduledInterviewStatus struct {
	typeName                     string
	ScheduledInterviewStatusEnum ScheduledInterviewStatusEnum
	String                       string
}

func NewScheduledInterviewStatusFromScheduledInterviewStatusEnum(value ScheduledInterviewStatusEnum) *ScheduledInterviewStatus {
	return &ScheduledInterviewStatus{typeName: "scheduledInterviewStatusEnum", ScheduledInterviewStatusEnum: value}
}

func NewScheduledInterviewStatusFromString(value string) *ScheduledInterviewStatus {
	return &ScheduledInterviewStatus{typeName: "string", String: value}
}

func (s *ScheduledInterviewStatus) UnmarshalJSON(data []byte) error {
	var valueScheduledInterviewStatusEnum ScheduledInterviewStatusEnum
	if err := json.Unmarshal(data, &valueScheduledInterviewStatusEnum); err == nil {
		s.typeName = "scheduledInterviewStatusEnum"
		s.ScheduledInterviewStatusEnum = valueScheduledInterviewStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScheduledInterviewStatus) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "scheduledInterviewStatusEnum":
		return json.Marshal(s.ScheduledInterviewStatusEnum)
	case "string":
		return json.Marshal(s.String)
	}
}

type ScheduledInterviewStatusVisitor interface {
	VisitScheduledInterviewStatusEnum(ScheduledInterviewStatusEnum) error
	VisitString(string) error
}

func (s *ScheduledInterviewStatus) Accept(visitor ScheduledInterviewStatusVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "scheduledInterviewStatusEnum":
		return visitor.VisitScheduledInterviewStatusEnum(s.ScheduledInterviewStatusEnum)
	case "string":
		return visitor.VisitString(s.String)
	}
}

// - `SCHEDULED` - SCHEDULED
// - `AWAITING_FEEDBACK` - AWAITING_FEEDBACK
// - `COMPLETE` - COMPLETE
type ScheduledInterviewStatusEnum string

const (
	ScheduledInterviewStatusEnumScheduled        ScheduledInterviewStatusEnum = "SCHEDULED"
	ScheduledInterviewStatusEnumAwaitingFeedback ScheduledInterviewStatusEnum = "AWAITING_FEEDBACK"
	ScheduledInterviewStatusEnumComplete         ScheduledInterviewStatusEnum = "COMPLETE"
)

func NewScheduledInterviewStatusEnumFromString(s string) (ScheduledInterviewStatusEnum, error) {
	switch s {
	case "SCHEDULED":
		return ScheduledInterviewStatusEnumScheduled, nil
	case "AWAITING_FEEDBACK":
		return ScheduledInterviewStatusEnumAwaitingFeedback, nil
	case "COMPLETE":
		return ScheduledInterviewStatusEnumComplete, nil
	}
	var t ScheduledInterviewStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ScheduledInterviewStatusEnum) Ptr() *ScheduledInterviewStatusEnum {
	return &s
}

// # The Scorecard Object
//
// ### Description
//
// The `Scorecard` object is used to represent an interviewer's candidate recommendation based on a particular interview.
//
// ### Usage Example
//
// Fetch from the `LIST Scorecards` endpoint and filter by `application` to show all scorecard for an applicant.
type Scorecard struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The application being scored.
	Application *ScorecardApplication `json:"application,omitempty"`
	// The interview being scored.
	Interview *ScorecardInterview `json:"interview,omitempty"`
	// The interviewer doing the scoring.
	Interviewer *ScorecardInterviewer `json:"interviewer,omitempty"`
	// When the third party's scorecard was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// When the scorecard was submitted.
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`
	// The inteviewer's recommendation.
	//
	// - `DEFINITELY_NO` - DEFINITELY_NO
	// - `NO` - NO
	// - `YES` - YES
	// - `STRONG_YES` - STRONG_YES
	// - `NO_DECISION` - NO_DECISION
	OverallRecommendation *ScorecardOverallRecommendation `json:"overall_recommendation,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (s *Scorecard) UnmarshalJSON(data []byte) error {
	type unmarshaler Scorecard
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Scorecard(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *Scorecard) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The application being scored.
type ScorecardApplication struct {
	typeName    string
	String      string
	Application *Application
}

func NewScorecardApplicationFromString(value string) *ScorecardApplication {
	return &ScorecardApplication{typeName: "string", String: value}
}

func NewScorecardApplicationFromApplication(value *Application) *ScorecardApplication {
	return &ScorecardApplication{typeName: "application", Application: value}
}

func (s *ScorecardApplication) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueApplication := new(Application)
	if err := json.Unmarshal(data, &valueApplication); err == nil {
		s.typeName = "application"
		s.Application = valueApplication
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScorecardApplication) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "application":
		return json.Marshal(s.Application)
	}
}

type ScorecardApplicationVisitor interface {
	VisitString(string) error
	VisitApplication(*Application) error
}

func (s *ScorecardApplication) Accept(visitor ScorecardApplicationVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "application":
		return visitor.VisitApplication(s.Application)
	}
}

// The interview being scored.
type ScorecardInterview struct {
	typeName           string
	String             string
	ScheduledInterview *ScheduledInterview
}

func NewScorecardInterviewFromString(value string) *ScorecardInterview {
	return &ScorecardInterview{typeName: "string", String: value}
}

func NewScorecardInterviewFromScheduledInterview(value *ScheduledInterview) *ScorecardInterview {
	return &ScorecardInterview{typeName: "scheduledInterview", ScheduledInterview: value}
}

func (s *ScorecardInterview) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueScheduledInterview := new(ScheduledInterview)
	if err := json.Unmarshal(data, &valueScheduledInterview); err == nil {
		s.typeName = "scheduledInterview"
		s.ScheduledInterview = valueScheduledInterview
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScorecardInterview) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "scheduledInterview":
		return json.Marshal(s.ScheduledInterview)
	}
}

type ScorecardInterviewVisitor interface {
	VisitString(string) error
	VisitScheduledInterview(*ScheduledInterview) error
}

func (s *ScorecardInterview) Accept(visitor ScorecardInterviewVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "scheduledInterview":
		return visitor.VisitScheduledInterview(s.ScheduledInterview)
	}
}

// The interviewer doing the scoring.
type ScorecardInterviewer struct {
	typeName   string
	String     string
	RemoteUser *RemoteUser
}

func NewScorecardInterviewerFromString(value string) *ScorecardInterviewer {
	return &ScorecardInterviewer{typeName: "string", String: value}
}

func NewScorecardInterviewerFromRemoteUser(value *RemoteUser) *ScorecardInterviewer {
	return &ScorecardInterviewer{typeName: "remoteUser", RemoteUser: value}
}

func (s *ScorecardInterviewer) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueRemoteUser := new(RemoteUser)
	if err := json.Unmarshal(data, &valueRemoteUser); err == nil {
		s.typeName = "remoteUser"
		s.RemoteUser = valueRemoteUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScorecardInterviewer) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "remoteUser":
		return json.Marshal(s.RemoteUser)
	}
}

type ScorecardInterviewerVisitor interface {
	VisitString(string) error
	VisitRemoteUser(*RemoteUser) error
}

func (s *ScorecardInterviewer) Accept(visitor ScorecardInterviewerVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "remoteUser":
		return visitor.VisitRemoteUser(s.RemoteUser)
	}
}

// The inteviewer's recommendation.
//
// - `DEFINITELY_NO` - DEFINITELY_NO
// - `NO` - NO
// - `YES` - YES
// - `STRONG_YES` - STRONG_YES
// - `NO_DECISION` - NO_DECISION
type ScorecardOverallRecommendation struct {
	typeName                  string
	OverallRecommendationEnum OverallRecommendationEnum
	String                    string
}

func NewScorecardOverallRecommendationFromOverallRecommendationEnum(value OverallRecommendationEnum) *ScorecardOverallRecommendation {
	return &ScorecardOverallRecommendation{typeName: "overallRecommendationEnum", OverallRecommendationEnum: value}
}

func NewScorecardOverallRecommendationFromString(value string) *ScorecardOverallRecommendation {
	return &ScorecardOverallRecommendation{typeName: "string", String: value}
}

func (s *ScorecardOverallRecommendation) UnmarshalJSON(data []byte) error {
	var valueOverallRecommendationEnum OverallRecommendationEnum
	if err := json.Unmarshal(data, &valueOverallRecommendationEnum); err == nil {
		s.typeName = "overallRecommendationEnum"
		s.OverallRecommendationEnum = valueOverallRecommendationEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScorecardOverallRecommendation) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "overallRecommendationEnum":
		return json.Marshal(s.OverallRecommendationEnum)
	case "string":
		return json.Marshal(s.String)
	}
}

type ScorecardOverallRecommendationVisitor interface {
	VisitOverallRecommendationEnum(OverallRecommendationEnum) error
	VisitString(string) error
}

func (s *ScorecardOverallRecommendation) Accept(visitor ScorecardOverallRecommendationVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "overallRecommendationEnum":
		return visitor.VisitOverallRecommendationEnum(s.OverallRecommendationEnum)
	case "string":
		return visitor.VisitString(s.String)
	}
}

// # The ScreeningQuestion Object
//
// ### Description
//
// The `ScreeningQuestion` object is used to represent questions asked to screen candidates for a job.
//
// ### Usage Example
//
// TODO
type ScreeningQuestion struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The job associated with the screening question.
	Job *ScreeningQuestionJob `json:"job,omitempty"`
	// The description of the screening question
	Description *string `json:"description,omitempty"`
	// The title of the screening question
	Title *string `json:"title,omitempty"`
	// The data type for the screening question.
	//
	// - `DATE` - DATE
	// - `FILE` - FILE
	// - `SINGLE_SELECT` - SINGLE_SELECT
	// - `MULTI_SELECT` - MULTI_SELECT
	// - `SINGLE_LINE_TEXT` - SINGLE_LINE_TEXT
	// - `MULTI_LINE_TEXT` - MULTI_LINE_TEXT
	// - `NUMERIC` - NUMERIC
	// - `BOOLEAN` - BOOLEAN
	Type *ScreeningQuestionType `json:"type,omitempty"`
	// Whether or not the screening question is required.
	Required *bool         `json:"required,omitempty"`
	Options  []interface{} `json:"options,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`

	_rawJSON json.RawMessage
}

func (s *ScreeningQuestion) UnmarshalJSON(data []byte) error {
	type unmarshaler ScreeningQuestion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScreeningQuestion(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScreeningQuestion) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// # The ScreeningQuestionAnswer Object
//
// ### Description
//
// The `ScreeningQuestionAnswer` object is used to represent candidate responses to a screening question, for a specific application.
//
// ### Usage Example
//
// TODO
type ScreeningQuestionAnswer struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The screening question associated with the candidate’s answer. To determine the data type of the answer, you can expand on the screening question by adding `screening_question_answers.question` to the `expand` query parameter.
	Question *ScreeningQuestionAnswerQuestion `json:"question,omitempty"`
	// The candidate’s response to the screening question.
	Answer *string `json:"answer,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`

	_rawJSON json.RawMessage
}

func (s *ScreeningQuestionAnswer) UnmarshalJSON(data []byte) error {
	type unmarshaler ScreeningQuestionAnswer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScreeningQuestionAnswer(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScreeningQuestionAnswer) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The screening question associated with the candidate’s answer. To determine the data type of the answer, you can expand on the screening question by adding `screening_question_answers.question` to the `expand` query parameter.
type ScreeningQuestionAnswerQuestion struct {
	typeName          string
	String            string
	ScreeningQuestion *ScreeningQuestion
}

func NewScreeningQuestionAnswerQuestionFromString(value string) *ScreeningQuestionAnswerQuestion {
	return &ScreeningQuestionAnswerQuestion{typeName: "string", String: value}
}

func NewScreeningQuestionAnswerQuestionFromScreeningQuestion(value *ScreeningQuestion) *ScreeningQuestionAnswerQuestion {
	return &ScreeningQuestionAnswerQuestion{typeName: "screeningQuestion", ScreeningQuestion: value}
}

func (s *ScreeningQuestionAnswerQuestion) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueScreeningQuestion := new(ScreeningQuestion)
	if err := json.Unmarshal(data, &valueScreeningQuestion); err == nil {
		s.typeName = "screeningQuestion"
		s.ScreeningQuestion = valueScreeningQuestion
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScreeningQuestionAnswerQuestion) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "screeningQuestion":
		return json.Marshal(s.ScreeningQuestion)
	}
}

type ScreeningQuestionAnswerQuestionVisitor interface {
	VisitString(string) error
	VisitScreeningQuestion(*ScreeningQuestion) error
}

func (s *ScreeningQuestionAnswerQuestion) Accept(visitor ScreeningQuestionAnswerQuestionVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "screeningQuestion":
		return visitor.VisitScreeningQuestion(s.ScreeningQuestion)
	}
}

// # The ScreeningQuestionAnswer Object
//
// ### Description
//
// The `ScreeningQuestionAnswer` object is used to represent candidate responses to a screening question, for a specific application.
//
// ### Usage Example
//
// TODO
type ScreeningQuestionAnswerRequest struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The screening question associated with the candidate’s answer. To determine the data type of the answer, you can expand on the screening question by adding `screening_question_answers.question` to the `expand` query parameter.
	Question *ScreeningQuestionAnswerRequestQuestion `json:"question,omitempty"`
	// The candidate’s response to the screening question.
	Answer              *string                `json:"answer,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (s *ScreeningQuestionAnswerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ScreeningQuestionAnswerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScreeningQuestionAnswerRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScreeningQuestionAnswerRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The screening question associated with the candidate’s answer. To determine the data type of the answer, you can expand on the screening question by adding `screening_question_answers.question` to the `expand` query parameter.
type ScreeningQuestionAnswerRequestQuestion struct {
	typeName          string
	String            string
	ScreeningQuestion *ScreeningQuestion
}

func NewScreeningQuestionAnswerRequestQuestionFromString(value string) *ScreeningQuestionAnswerRequestQuestion {
	return &ScreeningQuestionAnswerRequestQuestion{typeName: "string", String: value}
}

func NewScreeningQuestionAnswerRequestQuestionFromScreeningQuestion(value *ScreeningQuestion) *ScreeningQuestionAnswerRequestQuestion {
	return &ScreeningQuestionAnswerRequestQuestion{typeName: "screeningQuestion", ScreeningQuestion: value}
}

func (s *ScreeningQuestionAnswerRequestQuestion) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueScreeningQuestion := new(ScreeningQuestion)
	if err := json.Unmarshal(data, &valueScreeningQuestion); err == nil {
		s.typeName = "screeningQuestion"
		s.ScreeningQuestion = valueScreeningQuestion
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScreeningQuestionAnswerRequestQuestion) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "screeningQuestion":
		return json.Marshal(s.ScreeningQuestion)
	}
}

type ScreeningQuestionAnswerRequestQuestionVisitor interface {
	VisitString(string) error
	VisitScreeningQuestion(*ScreeningQuestion) error
}

func (s *ScreeningQuestionAnswerRequestQuestion) Accept(visitor ScreeningQuestionAnswerRequestQuestionVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "screeningQuestion":
		return visitor.VisitScreeningQuestion(s.ScreeningQuestion)
	}
}

// The job associated with the screening question.
type ScreeningQuestionJob struct {
	typeName string
	String   string
	Job      *Job
}

func NewScreeningQuestionJobFromString(value string) *ScreeningQuestionJob {
	return &ScreeningQuestionJob{typeName: "string", String: value}
}

func NewScreeningQuestionJobFromJob(value *Job) *ScreeningQuestionJob {
	return &ScreeningQuestionJob{typeName: "job", Job: value}
}

func (s *ScreeningQuestionJob) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueJob := new(Job)
	if err := json.Unmarshal(data, &valueJob); err == nil {
		s.typeName = "job"
		s.Job = valueJob
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScreeningQuestionJob) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "job":
		return json.Marshal(s.Job)
	}
}

type ScreeningQuestionJobVisitor interface {
	VisitString(string) error
	VisitJob(*Job) error
}

func (s *ScreeningQuestionJob) Accept(visitor ScreeningQuestionJobVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "job":
		return visitor.VisitJob(s.Job)
	}
}

// # The ScreeningQuestionOption Object
//
// ### Description
//
// # The `ScreeningQuestionOption` object is used to represent options for a `ScreeningQuestion` object
//
// ### Usage Example
//
// TODO
type ScreeningQuestionOption struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// Available response options
	Label *string `json:"label,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`

	_rawJSON json.RawMessage
}

func (s *ScreeningQuestionOption) UnmarshalJSON(data []byte) error {
	type unmarshaler ScreeningQuestionOption
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScreeningQuestionOption(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScreeningQuestionOption) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The data type for the screening question.
//
// - `DATE` - DATE
// - `FILE` - FILE
// - `SINGLE_SELECT` - SINGLE_SELECT
// - `MULTI_SELECT` - MULTI_SELECT
// - `SINGLE_LINE_TEXT` - SINGLE_LINE_TEXT
// - `MULTI_LINE_TEXT` - MULTI_LINE_TEXT
// - `NUMERIC` - NUMERIC
// - `BOOLEAN` - BOOLEAN
type ScreeningQuestionType struct {
	typeName                  string
	ScreeningQuestionTypeEnum ScreeningQuestionTypeEnum
	String                    string
}

func NewScreeningQuestionTypeFromScreeningQuestionTypeEnum(value ScreeningQuestionTypeEnum) *ScreeningQuestionType {
	return &ScreeningQuestionType{typeName: "screeningQuestionTypeEnum", ScreeningQuestionTypeEnum: value}
}

func NewScreeningQuestionTypeFromString(value string) *ScreeningQuestionType {
	return &ScreeningQuestionType{typeName: "string", String: value}
}

func (s *ScreeningQuestionType) UnmarshalJSON(data []byte) error {
	var valueScreeningQuestionTypeEnum ScreeningQuestionTypeEnum
	if err := json.Unmarshal(data, &valueScreeningQuestionTypeEnum); err == nil {
		s.typeName = "screeningQuestionTypeEnum"
		s.ScreeningQuestionTypeEnum = valueScreeningQuestionTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScreeningQuestionType) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "screeningQuestionTypeEnum":
		return json.Marshal(s.ScreeningQuestionTypeEnum)
	case "string":
		return json.Marshal(s.String)
	}
}

type ScreeningQuestionTypeVisitor interface {
	VisitScreeningQuestionTypeEnum(ScreeningQuestionTypeEnum) error
	VisitString(string) error
}

func (s *ScreeningQuestionType) Accept(visitor ScreeningQuestionTypeVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "screeningQuestionTypeEnum":
		return visitor.VisitScreeningQuestionTypeEnum(s.ScreeningQuestionTypeEnum)
	case "string":
		return visitor.VisitString(s.String)
	}
}

// - `DATE` - DATE
// - `FILE` - FILE
// - `SINGLE_SELECT` - SINGLE_SELECT
// - `MULTI_SELECT` - MULTI_SELECT
// - `SINGLE_LINE_TEXT` - SINGLE_LINE_TEXT
// - `MULTI_LINE_TEXT` - MULTI_LINE_TEXT
// - `NUMERIC` - NUMERIC
// - `BOOLEAN` - BOOLEAN
type ScreeningQuestionTypeEnum string

const (
	ScreeningQuestionTypeEnumDate           ScreeningQuestionTypeEnum = "DATE"
	ScreeningQuestionTypeEnumFile           ScreeningQuestionTypeEnum = "FILE"
	ScreeningQuestionTypeEnumSingleSelect   ScreeningQuestionTypeEnum = "SINGLE_SELECT"
	ScreeningQuestionTypeEnumMultiSelect    ScreeningQuestionTypeEnum = "MULTI_SELECT"
	ScreeningQuestionTypeEnumSingleLineText ScreeningQuestionTypeEnum = "SINGLE_LINE_TEXT"
	ScreeningQuestionTypeEnumMultiLineText  ScreeningQuestionTypeEnum = "MULTI_LINE_TEXT"
	ScreeningQuestionTypeEnumNumeric        ScreeningQuestionTypeEnum = "NUMERIC"
	ScreeningQuestionTypeEnumBoolean        ScreeningQuestionTypeEnum = "BOOLEAN"
)

func NewScreeningQuestionTypeEnumFromString(s string) (ScreeningQuestionTypeEnum, error) {
	switch s {
	case "DATE":
		return ScreeningQuestionTypeEnumDate, nil
	case "FILE":
		return ScreeningQuestionTypeEnumFile, nil
	case "SINGLE_SELECT":
		return ScreeningQuestionTypeEnumSingleSelect, nil
	case "MULTI_SELECT":
		return ScreeningQuestionTypeEnumMultiSelect, nil
	case "SINGLE_LINE_TEXT":
		return ScreeningQuestionTypeEnumSingleLineText, nil
	case "MULTI_LINE_TEXT":
		return ScreeningQuestionTypeEnumMultiLineText, nil
	case "NUMERIC":
		return ScreeningQuestionTypeEnumNumeric, nil
	case "BOOLEAN":
		return ScreeningQuestionTypeEnumBoolean, nil
	}
	var t ScreeningQuestionTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ScreeningQuestionTypeEnum) Ptr() *ScreeningQuestionTypeEnum {
	return &s
}

// - `IN_NEXT_SYNC` - IN_NEXT_SYNC
// - `IN_LAST_SYNC` - IN_LAST_SYNC
type SelectiveSyncConfigurationsUsageEnum string

const (
	SelectiveSyncConfigurationsUsageEnumInNextSync SelectiveSyncConfigurationsUsageEnum = "IN_NEXT_SYNC"
	SelectiveSyncConfigurationsUsageEnumInLastSync SelectiveSyncConfigurationsUsageEnum = "IN_LAST_SYNC"
)

func NewSelectiveSyncConfigurationsUsageEnumFromString(s string) (SelectiveSyncConfigurationsUsageEnum, error) {
	switch s {
	case "IN_NEXT_SYNC":
		return SelectiveSyncConfigurationsUsageEnumInNextSync, nil
	case "IN_LAST_SYNC":
		return SelectiveSyncConfigurationsUsageEnumInLastSync, nil
	}
	var t SelectiveSyncConfigurationsUsageEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SelectiveSyncConfigurationsUsageEnum) Ptr() *SelectiveSyncConfigurationsUsageEnum {
	return &s
}

// # The SyncStatus Object
//
// ### Description
//
// # The `SyncStatus` object is used to represent the syncing state of an account
//
// ### Usage Example
//
// View the `SyncStatus` for an account to see how recently its models were synced.
type SyncStatus struct {
	ModelName                        string                                `json:"model_name"`
	ModelId                          string                                `json:"model_id"`
	LastSyncStart                    *time.Time                            `json:"last_sync_start,omitempty"`
	NextSyncStart                    *time.Time                            `json:"next_sync_start,omitempty"`
	Status                           SyncStatusStatusEnum                  `json:"status,omitempty"`
	IsInitialSync                    bool                                  `json:"is_initial_sync"`
	SelectiveSyncConfigurationsUsage *SelectiveSyncConfigurationsUsageEnum `json:"selective_sync_configurations_usage,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SyncStatus) UnmarshalJSON(data []byte) error {
	type unmarshaler SyncStatus
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SyncStatus(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SyncStatus) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// - `SYNCING` - SYNCING
// - `DONE` - DONE
// - `FAILED` - FAILED
// - `DISABLED` - DISABLED
// - `PAUSED` - PAUSED
// - `PARTIALLY_SYNCED` - PARTIALLY_SYNCED
type SyncStatusStatusEnum string

const (
	SyncStatusStatusEnumSyncing         SyncStatusStatusEnum = "SYNCING"
	SyncStatusStatusEnumDone            SyncStatusStatusEnum = "DONE"
	SyncStatusStatusEnumFailed          SyncStatusStatusEnum = "FAILED"
	SyncStatusStatusEnumDisabled        SyncStatusStatusEnum = "DISABLED"
	SyncStatusStatusEnumPaused          SyncStatusStatusEnum = "PAUSED"
	SyncStatusStatusEnumPartiallySynced SyncStatusStatusEnum = "PARTIALLY_SYNCED"
)

func NewSyncStatusStatusEnumFromString(s string) (SyncStatusStatusEnum, error) {
	switch s {
	case "SYNCING":
		return SyncStatusStatusEnumSyncing, nil
	case "DONE":
		return SyncStatusStatusEnumDone, nil
	case "FAILED":
		return SyncStatusStatusEnumFailed, nil
	case "DISABLED":
		return SyncStatusStatusEnumDisabled, nil
	case "PAUSED":
		return SyncStatusStatusEnumPaused, nil
	case "PARTIALLY_SYNCED":
		return SyncStatusStatusEnumPartiallySynced, nil
	}
	var t SyncStatusStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SyncStatusStatusEnum) Ptr() *SyncStatusStatusEnum {
	return &s
}

// # The Tag Object
//
// ### Description
//
// The `Tag` object is used to represent a tag for a candidate.
//
// ### Usage Example
//
// Fetch from the `LIST Tags` endpoint and view the tags used within a company.
type Tag struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The tag's name.
	Name *string `json:"name,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                    `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{}   `json:"field_mappings,omitempty"`
	RemoteData       []map[string]interface{} `json:"remote_data,omitempty"`

	_rawJSON json.RawMessage
}

func (t *Tag) UnmarshalJSON(data []byte) error {
	type unmarshaler Tag
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Tag(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *Tag) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// # The Url Object
//
// ### Description
//
// The `Url` object is used to represent hyperlinks associated with the parent model.
//
// ### Usage Example
//
// Fetch from the `GET Candidate` endpoint and view their website urls.
type Url struct {
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The site's url.
	Value *string `json:"value,omitempty"`
	// The type of site.
	//
	// - `PERSONAL` - PERSONAL
	// - `COMPANY` - COMPANY
	// - `PORTFOLIO` - PORTFOLIO
	// - `BLOG` - BLOG
	// - `SOCIAL_MEDIA` - SOCIAL_MEDIA
	// - `OTHER` - OTHER
	// - `JOB_POSTING` - JOB_POSTING
	UrlType *UrlUrlType `json:"url_type,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`

	_rawJSON json.RawMessage
}

func (u *Url) UnmarshalJSON(data []byte) error {
	type unmarshaler Url
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = Url(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *Url) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// # The Url Object
//
// ### Description
//
// The `Url` object is used to represent hyperlinks associated with the parent model.
//
// ### Usage Example
//
// Fetch from the `GET Candidate` endpoint and view their website urls.
type UrlRequest struct {
	// The site's url.
	Value *string `json:"value,omitempty"`
	// The type of site.
	//
	// - `PERSONAL` - PERSONAL
	// - `COMPANY` - COMPANY
	// - `PORTFOLIO` - PORTFOLIO
	// - `BLOG` - BLOG
	// - `SOCIAL_MEDIA` - SOCIAL_MEDIA
	// - `OTHER` - OTHER
	// - `JOB_POSTING` - JOB_POSTING
	UrlType             *UrlRequestUrlType     `json:"url_type,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UrlRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UrlRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UrlRequest(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UrlRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// The type of site.
//
// - `PERSONAL` - PERSONAL
// - `COMPANY` - COMPANY
// - `PORTFOLIO` - PORTFOLIO
// - `BLOG` - BLOG
// - `SOCIAL_MEDIA` - SOCIAL_MEDIA
// - `OTHER` - OTHER
// - `JOB_POSTING` - JOB_POSTING
type UrlRequestUrlType struct {
	typeName    string
	UrlTypeEnum UrlTypeEnum
	String      string
}

func NewUrlRequestUrlTypeFromUrlTypeEnum(value UrlTypeEnum) *UrlRequestUrlType {
	return &UrlRequestUrlType{typeName: "urlTypeEnum", UrlTypeEnum: value}
}

func NewUrlRequestUrlTypeFromString(value string) *UrlRequestUrlType {
	return &UrlRequestUrlType{typeName: "string", String: value}
}

func (u *UrlRequestUrlType) UnmarshalJSON(data []byte) error {
	var valueUrlTypeEnum UrlTypeEnum
	if err := json.Unmarshal(data, &valueUrlTypeEnum); err == nil {
		u.typeName = "urlTypeEnum"
		u.UrlTypeEnum = valueUrlTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typeName = "string"
		u.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UrlRequestUrlType) MarshalJSON() ([]byte, error) {
	switch u.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "urlTypeEnum":
		return json.Marshal(u.UrlTypeEnum)
	case "string":
		return json.Marshal(u.String)
	}
}

type UrlRequestUrlTypeVisitor interface {
	VisitUrlTypeEnum(UrlTypeEnum) error
	VisitString(string) error
}

func (u *UrlRequestUrlType) Accept(visitor UrlRequestUrlTypeVisitor) error {
	switch u.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "urlTypeEnum":
		return visitor.VisitUrlTypeEnum(u.UrlTypeEnum)
	case "string":
		return visitor.VisitString(u.String)
	}
}

// - `PERSONAL` - PERSONAL
// - `COMPANY` - COMPANY
// - `PORTFOLIO` - PORTFOLIO
// - `BLOG` - BLOG
// - `SOCIAL_MEDIA` - SOCIAL_MEDIA
// - `OTHER` - OTHER
// - `JOB_POSTING` - JOB_POSTING
type UrlTypeEnum string

const (
	UrlTypeEnumPersonal    UrlTypeEnum = "PERSONAL"
	UrlTypeEnumCompany     UrlTypeEnum = "COMPANY"
	UrlTypeEnumPortfolio   UrlTypeEnum = "PORTFOLIO"
	UrlTypeEnumBlog        UrlTypeEnum = "BLOG"
	UrlTypeEnumSocialMedia UrlTypeEnum = "SOCIAL_MEDIA"
	UrlTypeEnumOther       UrlTypeEnum = "OTHER"
	UrlTypeEnumJobPosting  UrlTypeEnum = "JOB_POSTING"
)

func NewUrlTypeEnumFromString(s string) (UrlTypeEnum, error) {
	switch s {
	case "PERSONAL":
		return UrlTypeEnumPersonal, nil
	case "COMPANY":
		return UrlTypeEnumCompany, nil
	case "PORTFOLIO":
		return UrlTypeEnumPortfolio, nil
	case "BLOG":
		return UrlTypeEnumBlog, nil
	case "SOCIAL_MEDIA":
		return UrlTypeEnumSocialMedia, nil
	case "OTHER":
		return UrlTypeEnumOther, nil
	case "JOB_POSTING":
		return UrlTypeEnumJobPosting, nil
	}
	var t UrlTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UrlTypeEnum) Ptr() *UrlTypeEnum {
	return &u
}

// The type of site.
//
// - `PERSONAL` - PERSONAL
// - `COMPANY` - COMPANY
// - `PORTFOLIO` - PORTFOLIO
// - `BLOG` - BLOG
// - `SOCIAL_MEDIA` - SOCIAL_MEDIA
// - `OTHER` - OTHER
// - `JOB_POSTING` - JOB_POSTING
type UrlUrlType struct {
	typeName    string
	UrlTypeEnum UrlTypeEnum
	String      string
}

func NewUrlUrlTypeFromUrlTypeEnum(value UrlTypeEnum) *UrlUrlType {
	return &UrlUrlType{typeName: "urlTypeEnum", UrlTypeEnum: value}
}

func NewUrlUrlTypeFromString(value string) *UrlUrlType {
	return &UrlUrlType{typeName: "string", String: value}
}

func (u *UrlUrlType) UnmarshalJSON(data []byte) error {
	var valueUrlTypeEnum UrlTypeEnum
	if err := json.Unmarshal(data, &valueUrlTypeEnum); err == nil {
		u.typeName = "urlTypeEnum"
		u.UrlTypeEnum = valueUrlTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typeName = "string"
		u.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UrlUrlType) MarshalJSON() ([]byte, error) {
	switch u.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "urlTypeEnum":
		return json.Marshal(u.UrlTypeEnum)
	case "string":
		return json.Marshal(u.String)
	}
}

type UrlUrlTypeVisitor interface {
	VisitUrlTypeEnum(UrlTypeEnum) error
	VisitString(string) error
}

func (u *UrlUrlType) Accept(visitor UrlUrlTypeVisitor) error {
	switch u.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "urlTypeEnum":
		return visitor.VisitUrlTypeEnum(u.UrlTypeEnum)
	case "string":
		return visitor.VisitString(u.String)
	}
}

type ValidationProblemSource struct {
	Pointer string `json:"pointer"`

	_rawJSON json.RawMessage
}

func (v *ValidationProblemSource) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidationProblemSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidationProblemSource(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidationProblemSource) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// - `I_AM_NOT_A_PROTECTED_VETERAN` - I_AM_NOT_A_PROTECTED_VETERAN
// - `I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN` - I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN
// - `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
type VeteranStatusEnum string

const (
	VeteranStatusEnumIAmNotAProtectedVeteran                                     VeteranStatusEnum = "I_AM_NOT_A_PROTECTED_VETERAN"
	VeteranStatusEnumIIdentifyAsOneOrMoreOfTheClassificationsOfAProtectedVeteran VeteranStatusEnum = "I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN"
	VeteranStatusEnumIDontWishToAnswer                                           VeteranStatusEnum = "I_DONT_WISH_TO_ANSWER"
)

func NewVeteranStatusEnumFromString(s string) (VeteranStatusEnum, error) {
	switch s {
	case "I_AM_NOT_A_PROTECTED_VETERAN":
		return VeteranStatusEnumIAmNotAProtectedVeteran, nil
	case "I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN":
		return VeteranStatusEnumIIdentifyAsOneOrMoreOfTheClassificationsOfAProtectedVeteran, nil
	case "I_DONT_WISH_TO_ANSWER":
		return VeteranStatusEnumIDontWishToAnswer, nil
	}
	var t VeteranStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VeteranStatusEnum) Ptr() *VeteranStatusEnum {
	return &v
}

// - `ADMIN_ONLY` - ADMIN_ONLY
// - `PUBLIC` - PUBLIC
// - `PRIVATE` - PRIVATE
type VisibilityEnum string

const (
	VisibilityEnumAdminOnly VisibilityEnum = "ADMIN_ONLY"
	VisibilityEnumPublic    VisibilityEnum = "PUBLIC"
	VisibilityEnumPrivate   VisibilityEnum = "PRIVATE"
)

func NewVisibilityEnumFromString(s string) (VisibilityEnum, error) {
	switch s {
	case "ADMIN_ONLY":
		return VisibilityEnumAdminOnly, nil
	case "PUBLIC":
		return VisibilityEnumPublic, nil
	case "PRIVATE":
		return VisibilityEnumPrivate, nil
	}
	var t VisibilityEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VisibilityEnum) Ptr() *VisibilityEnum {
	return &v
}

type WarningValidationProblem struct {
	Source      *ValidationProblemSource `json:"source,omitempty"`
	Title       string                   `json:"title"`
	Detail      string                   `json:"detail"`
	ProblemType string                   `json:"problem_type"`

	_rawJSON json.RawMessage
}

func (w *WarningValidationProblem) UnmarshalJSON(data []byte) error {
	type unmarshaler WarningValidationProblem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WarningValidationProblem(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WarningValidationProblem) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookReceiver struct {
	Event    string  `json:"event"`
	IsActive bool    `json:"is_active"`
	Key      *string `json:"key,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WebhookReceiver) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookReceiver
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhookReceiver(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookReceiver) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
