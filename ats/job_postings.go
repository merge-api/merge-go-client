// Code generated by Fern. DO NOT EDIT.

package ats

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type JobPostingsListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// If provided, will only return Job Postings with this status. Options: ('PUBLISHED', 'CLOSED', 'DRAFT', 'INTERNAL', 'PENDING')
	//
	// * `PUBLISHED` - PUBLISHED
	// * `CLOSED` - CLOSED
	// * `DRAFT` - DRAFT
	// * `INTERNAL` - INTERNAL
	// * `PENDING` - PENDING
	Status *JobPostingsListRequestStatus `json:"-" url:"status,omitempty"`
}

type JobPostingsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

type JobPostingsListRequestStatus string

const (
	JobPostingsListRequestStatusClosed    JobPostingsListRequestStatus = "CLOSED"
	JobPostingsListRequestStatusDraft     JobPostingsListRequestStatus = "DRAFT"
	JobPostingsListRequestStatusInternal  JobPostingsListRequestStatus = "INTERNAL"
	JobPostingsListRequestStatusPending   JobPostingsListRequestStatus = "PENDING"
	JobPostingsListRequestStatusPublished JobPostingsListRequestStatus = "PUBLISHED"
)

func NewJobPostingsListRequestStatusFromString(s string) (JobPostingsListRequestStatus, error) {
	switch s {
	case "CLOSED":
		return JobPostingsListRequestStatusClosed, nil
	case "DRAFT":
		return JobPostingsListRequestStatusDraft, nil
	case "INTERNAL":
		return JobPostingsListRequestStatusInternal, nil
	case "PENDING":
		return JobPostingsListRequestStatusPending, nil
	case "PUBLISHED":
		return JobPostingsListRequestStatusPublished, nil
	}
	var t JobPostingsListRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (j JobPostingsListRequestStatus) Ptr() *JobPostingsListRequestStatus {
	return &j
}

// # The JobPosting Object
// ### Description
// The `JobPosting` object represents an external announcement on a job board created by an organization to attract qualified candidates to apply for a specific `Job` opening
// ### Usage Example
// Fetch from the `LIST JobPostings` endpoint to show all job postings.
type JobPosting struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The job posting’s title.
	Title *string `json:"title,omitempty" url:"title,omitempty"`
	// The Url object is used to represent hyperlinks for a candidate to apply to a given job.
	JobPostingUrls []*JobPostingJobPostingUrlsItem `json:"job_posting_urls,omitempty" url:"job_posting_urls,omitempty"`
	// ID of `Job` object for this `JobPosting`.
	Job *JobPostingJob `json:"job,omitempty" url:"job,omitempty"`
	// The job posting's status.
	//
	// * `PUBLISHED` - PUBLISHED
	// * `CLOSED` - CLOSED
	// * `DRAFT` - DRAFT
	// * `INTERNAL` - INTERNAL
	// * `PENDING` - PENDING
	Status *JobPostingStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// The job posting’s content.
	Content *string `json:"content,omitempty" url:"content,omitempty"`
	// When the third party's job posting was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty" url:"remote_created_at,omitempty"`
	// When the third party's job posting was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty" url:"remote_updated_at,omitempty"`
	// Indicates whether the job posting is internal or external.
	IsInternal *bool `json:"is_internal,omitempty" url:"is_internal,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *JobPosting) GetId() *string {
	if j == nil {
		return nil
	}
	return j.Id
}

func (j *JobPosting) GetRemoteId() *string {
	if j == nil {
		return nil
	}
	return j.RemoteId
}

func (j *JobPosting) GetCreatedAt() *time.Time {
	if j == nil {
		return nil
	}
	return j.CreatedAt
}

func (j *JobPosting) GetModifiedAt() *time.Time {
	if j == nil {
		return nil
	}
	return j.ModifiedAt
}

func (j *JobPosting) GetTitle() *string {
	if j == nil {
		return nil
	}
	return j.Title
}

func (j *JobPosting) GetJobPostingUrls() []*JobPostingJobPostingUrlsItem {
	if j == nil {
		return nil
	}
	return j.JobPostingUrls
}

func (j *JobPosting) GetJob() *JobPostingJob {
	if j == nil {
		return nil
	}
	return j.Job
}

func (j *JobPosting) GetStatus() *JobPostingStatusEnum {
	if j == nil {
		return nil
	}
	return j.Status
}

func (j *JobPosting) GetContent() *string {
	if j == nil {
		return nil
	}
	return j.Content
}

func (j *JobPosting) GetRemoteCreatedAt() *time.Time {
	if j == nil {
		return nil
	}
	return j.RemoteCreatedAt
}

func (j *JobPosting) GetRemoteUpdatedAt() *time.Time {
	if j == nil {
		return nil
	}
	return j.RemoteUpdatedAt
}

func (j *JobPosting) GetIsInternal() *bool {
	if j == nil {
		return nil
	}
	return j.IsInternal
}

func (j *JobPosting) GetRemoteWasDeleted() *bool {
	if j == nil {
		return nil
	}
	return j.RemoteWasDeleted
}

func (j *JobPosting) GetFieldMappings() map[string]interface{} {
	if j == nil {
		return nil
	}
	return j.FieldMappings
}

func (j *JobPosting) GetRemoteData() []*RemoteData {
	if j == nil {
		return nil
	}
	return j.RemoteData
}

func (j *JobPosting) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JobPosting) UnmarshalJSON(data []byte) error {
	type embed JobPosting
	var unmarshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
		RemoteUpdatedAt *internal.DateTime `json:"remote_updated_at,omitempty"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JobPosting(unmarshaler.embed)
	j.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	j.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	j.RemoteCreatedAt = unmarshaler.RemoteCreatedAt.TimePtr()
	j.RemoteUpdatedAt = unmarshaler.RemoteUpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *JobPosting) MarshalJSON() ([]byte, error) {
	type embed JobPosting
	var marshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
		RemoteUpdatedAt *internal.DateTime `json:"remote_updated_at,omitempty"`
	}{
		embed:           embed(*j),
		CreatedAt:       internal.NewOptionalDateTime(j.CreatedAt),
		ModifiedAt:      internal.NewOptionalDateTime(j.ModifiedAt),
		RemoteCreatedAt: internal.NewOptionalDateTime(j.RemoteCreatedAt),
		RemoteUpdatedAt: internal.NewOptionalDateTime(j.RemoteUpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (j *JobPosting) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// ID of `Job` object for this `JobPosting`.
type JobPostingJob struct {
	String string
	Job    *Job

	typ string
}

func (j *JobPostingJob) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JobPostingJob) GetJob() *Job {
	if j == nil {
		return nil
	}
	return j.Job
}

func (j *JobPostingJob) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueJob := new(Job)
	if err := json.Unmarshal(data, &valueJob); err == nil {
		j.typ = "Job"
		j.Job = valueJob
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JobPostingJob) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "Job" || j.Job != nil {
		return json.Marshal(j.Job)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JobPostingJobVisitor interface {
	VisitString(string) error
	VisitJob(*Job) error
}

func (j *JobPostingJob) Accept(visitor JobPostingJobVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "Job" || j.Job != nil {
		return visitor.VisitJob(j.Job)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JobPostingJobPostingUrlsItem struct {
	String string
	Url    *Url

	typ string
}

func (j *JobPostingJobPostingUrlsItem) GetString() string {
	if j == nil {
		return ""
	}
	return j.String
}

func (j *JobPostingJobPostingUrlsItem) GetUrl() *Url {
	if j == nil {
		return nil
	}
	return j.Url
}

func (j *JobPostingJobPostingUrlsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typ = "String"
		j.String = valueString
		return nil
	}
	valueUrl := new(Url)
	if err := json.Unmarshal(data, &valueUrl); err == nil {
		j.typ = "Url"
		j.Url = valueUrl
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JobPostingJobPostingUrlsItem) MarshalJSON() ([]byte, error) {
	if j.typ == "String" || j.String != "" {
		return json.Marshal(j.String)
	}
	if j.typ == "Url" || j.Url != nil {
		return json.Marshal(j.Url)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", j)
}

type JobPostingJobPostingUrlsItemVisitor interface {
	VisitString(string) error
	VisitUrl(*Url) error
}

func (j *JobPostingJobPostingUrlsItem) Accept(visitor JobPostingJobPostingUrlsItemVisitor) error {
	if j.typ == "String" || j.String != "" {
		return visitor.VisitString(j.String)
	}
	if j.typ == "Url" || j.Url != nil {
		return visitor.VisitUrl(j.Url)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", j)
}

// * `PUBLISHED` - PUBLISHED
// * `CLOSED` - CLOSED
// * `DRAFT` - DRAFT
// * `INTERNAL` - INTERNAL
// * `PENDING` - PENDING
type JobPostingStatusEnum string

const (
	JobPostingStatusEnumPublished JobPostingStatusEnum = "PUBLISHED"
	JobPostingStatusEnumClosed    JobPostingStatusEnum = "CLOSED"
	JobPostingStatusEnumDraft     JobPostingStatusEnum = "DRAFT"
	JobPostingStatusEnumInternal  JobPostingStatusEnum = "INTERNAL"
	JobPostingStatusEnumPending   JobPostingStatusEnum = "PENDING"
)

func NewJobPostingStatusEnumFromString(s string) (JobPostingStatusEnum, error) {
	switch s {
	case "PUBLISHED":
		return JobPostingStatusEnumPublished, nil
	case "CLOSED":
		return JobPostingStatusEnumClosed, nil
	case "DRAFT":
		return JobPostingStatusEnumDraft, nil
	case "INTERNAL":
		return JobPostingStatusEnumInternal, nil
	case "PENDING":
		return JobPostingStatusEnumPending, nil
	}
	var t JobPostingStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (j JobPostingStatusEnum) Ptr() *JobPostingStatusEnum {
	return &j
}

type PaginatedJobPostingList struct {
	Next     *string       `json:"next,omitempty" url:"next,omitempty"`
	Previous *string       `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*JobPosting `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedJobPostingList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedJobPostingList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedJobPostingList) GetResults() []*JobPosting {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedJobPostingList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedJobPostingList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedJobPostingList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedJobPostingList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedJobPostingList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
