// Code generated by Fern. DO NOT EDIT.

package ats

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type AttachmentEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync     *bool              `json:"-" url:"run_async,omitempty"`
	Model        *AttachmentRequest `json:"model,omitempty" url:"-"`
	RemoteUserId string             `json:"remote_user_id" url:"-"`
}

type AttachmentsListRequest struct {
	// If provided, will only return attachments for this candidate.
	CandidateId *string `json:"-" url:"candidate_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type AttachmentsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

// # The Attachment Object
// ### Description
// The `Attachment` object is used to represent a file attached to a candidate.
// ### Usage Example
// Fetch from the `LIST Attachments` endpoint and view attachments accessible by a company.
type AttachmentRequest struct {
	// The attachment's name.
	FileName *string `json:"file_name,omitempty" url:"file_name,omitempty"`
	// The attachment's url.
	FileUrl   *string `json:"file_url,omitempty" url:"file_url,omitempty"`
	Candidate *string `json:"candidate,omitempty" url:"candidate,omitempty"`
	// The attachment's type.
	//
	// * `RESUME` - RESUME
	// * `COVER_LETTER` - COVER_LETTER
	// * `OFFER_LETTER` - OFFER_LETTER
	// * `OTHER` - OTHER
	AttachmentType      *AttachmentRequestAttachmentType `json:"attachment_type,omitempty" url:"attachment_type,omitempty"`
	IntegrationParams   map[string]interface{}           `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}           `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AttachmentRequest) GetFileName() *string {
	if a == nil {
		return nil
	}
	return a.FileName
}

func (a *AttachmentRequest) GetFileUrl() *string {
	if a == nil {
		return nil
	}
	return a.FileUrl
}

func (a *AttachmentRequest) GetCandidate() *string {
	if a == nil {
		return nil
	}
	return a.Candidate
}

func (a *AttachmentRequest) GetAttachmentType() *AttachmentRequestAttachmentType {
	if a == nil {
		return nil
	}
	return a.AttachmentType
}

func (a *AttachmentRequest) GetIntegrationParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.IntegrationParams
}

func (a *AttachmentRequest) GetLinkedAccountParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.LinkedAccountParams
}

func (a *AttachmentRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttachmentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler AttachmentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttachmentRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttachmentRequest) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The attachment's type.
//
// * `RESUME` - RESUME
// * `COVER_LETTER` - COVER_LETTER
// * `OFFER_LETTER` - OFFER_LETTER
// * `OTHER` - OTHER
type AttachmentRequestAttachmentType struct {
	AttachmentTypeEnum AttachmentTypeEnum
	String             string

	typ string
}

func (a *AttachmentRequestAttachmentType) GetAttachmentTypeEnum() AttachmentTypeEnum {
	if a == nil {
		return ""
	}
	return a.AttachmentTypeEnum
}

func (a *AttachmentRequestAttachmentType) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AttachmentRequestAttachmentType) UnmarshalJSON(data []byte) error {
	var valueAttachmentTypeEnum AttachmentTypeEnum
	if err := json.Unmarshal(data, &valueAttachmentTypeEnum); err == nil {
		a.typ = "AttachmentTypeEnum"
		a.AttachmentTypeEnum = valueAttachmentTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AttachmentRequestAttachmentType) MarshalJSON() ([]byte, error) {
	if a.typ == "AttachmentTypeEnum" || a.AttachmentTypeEnum != "" {
		return json.Marshal(a.AttachmentTypeEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AttachmentRequestAttachmentTypeVisitor interface {
	VisitAttachmentTypeEnum(AttachmentTypeEnum) error
	VisitString(string) error
}

func (a *AttachmentRequestAttachmentType) Accept(visitor AttachmentRequestAttachmentTypeVisitor) error {
	if a.typ == "AttachmentTypeEnum" || a.AttachmentTypeEnum != "" {
		return visitor.VisitAttachmentTypeEnum(a.AttachmentTypeEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AttachmentResponse struct {
	Model    *Attachment                 `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AttachmentResponse) GetModel() *Attachment {
	if a == nil {
		return nil
	}
	return a.Model
}

func (a *AttachmentResponse) GetWarnings() []*WarningValidationProblem {
	if a == nil {
		return nil
	}
	return a.Warnings
}

func (a *AttachmentResponse) GetErrors() []*ErrorValidationProblem {
	if a == nil {
		return nil
	}
	return a.Errors
}

func (a *AttachmentResponse) GetLogs() []*DebugModeLog {
	if a == nil {
		return nil
	}
	return a.Logs
}

func (a *AttachmentResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttachmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AttachmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttachmentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttachmentResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type PaginatedAttachmentList struct {
	Next     *string       `json:"next,omitempty" url:"next,omitempty"`
	Previous *string       `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Attachment `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedAttachmentList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedAttachmentList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedAttachmentList) GetResults() []*Attachment {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedAttachmentList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedAttachmentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAttachmentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAttachmentList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAttachmentList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
