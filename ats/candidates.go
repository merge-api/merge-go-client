// Code generated by Fern. DO NOT EDIT.

package ats

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type CandidateEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync     *bool             `json:"-" url:"run_async,omitempty"`
	Model        *CandidateRequest `json:"model,omitempty" url:"-"`
	RemoteUserId string            `json:"remote_user_id" url:"-"`
}

type CandidatesListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will only return candidates with these email addresses; multiple addresses can be separated by commas.
	EmailAddresses *string `json:"-" url:"email_addresses,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*CandidatesListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// If provided, will only return candidates with this first name.
	FirstName *string `json:"-" url:"first_name,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return candidates with this last name.
	LastName *string `json:"-" url:"last_name,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// If provided, will only return candidates with these tags; multiple tags can be separated by commas.
	Tags *string `json:"-" url:"tags,omitempty"`
}

type PatchedCandidateEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync     *bool                    `json:"-" url:"run_async,omitempty"`
	Model        *PatchedCandidateRequest `json:"model,omitempty" url:"-"`
	RemoteUserId string                   `json:"remote_user_id" url:"-"`
}

type CandidatesRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*CandidatesRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

type CandidatesListRequestExpandItem string

const (
	CandidatesListRequestExpandItemApplications CandidatesListRequestExpandItem = "applications"
	CandidatesListRequestExpandItemAttachments  CandidatesListRequestExpandItem = "attachments"
)

func NewCandidatesListRequestExpandItemFromString(s string) (CandidatesListRequestExpandItem, error) {
	switch s {
	case "applications":
		return CandidatesListRequestExpandItemApplications, nil
	case "attachments":
		return CandidatesListRequestExpandItemAttachments, nil
	}
	var t CandidatesListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CandidatesListRequestExpandItem) Ptr() *CandidatesListRequestExpandItem {
	return &c
}

type CandidatesRetrieveRequestExpandItem string

const (
	CandidatesRetrieveRequestExpandItemApplications CandidatesRetrieveRequestExpandItem = "applications"
	CandidatesRetrieveRequestExpandItemAttachments  CandidatesRetrieveRequestExpandItem = "attachments"
)

func NewCandidatesRetrieveRequestExpandItemFromString(s string) (CandidatesRetrieveRequestExpandItem, error) {
	switch s {
	case "applications":
		return CandidatesRetrieveRequestExpandItemApplications, nil
	case "attachments":
		return CandidatesRetrieveRequestExpandItemAttachments, nil
	}
	var t CandidatesRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CandidatesRetrieveRequestExpandItem) Ptr() *CandidatesRetrieveRequestExpandItem {
	return &c
}

// # The Candidate Object
// ### Description
// The `Candidate` object is used to represent profile information about a given Candidate. Because it is specific to a Candidate, this information stays constant across applications.
// ### Usage Example
// Fetch from the `LIST Candidates` endpoint and filter by `ID` to show all candidates.
type CandidateRequest struct {
	// The candidate's first name.
	FirstName *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	// The candidate's last name.
	LastName *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	// The candidate's current company.
	Company *string `json:"company,omitempty" url:"company,omitempty"`
	// The candidate's current title.
	Title *string `json:"title,omitempty" url:"title,omitempty"`
	// When the most recent interaction with the candidate occurred.
	LastInteractionAt *time.Time `json:"last_interaction_at,omitempty" url:"last_interaction_at,omitempty"`
	// Whether or not the candidate is private.
	IsPrivate *bool `json:"is_private,omitempty" url:"is_private,omitempty"`
	// Whether or not the candidate can be emailed.
	CanEmail *bool `json:"can_email,omitempty" url:"can_email,omitempty"`
	// The candidate's locations.
	Locations      []*string              `json:"locations,omitempty" url:"locations,omitempty"`
	PhoneNumbers   []*PhoneNumberRequest  `json:"phone_numbers,omitempty" url:"phone_numbers,omitempty"`
	EmailAddresses []*EmailAddressRequest `json:"email_addresses,omitempty" url:"email_addresses,omitempty"`
	Urls           []*UrlRequest          `json:"urls,omitempty" url:"urls,omitempty"`
	// Array of `Tag` names as strings.
	Tags []*string `json:"tags,omitempty" url:"tags,omitempty"`
	// Array of `Application` object IDs.
	Applications []*CandidateRequestApplicationsItem `json:"applications,omitempty" url:"applications,omitempty"`
	// Array of `Attachment` object IDs.
	Attachments         []*CandidateRequestAttachmentsItem `json:"attachments,omitempty" url:"attachments,omitempty"`
	RemoteTemplateId    *string                            `json:"remote_template_id,omitempty" url:"remote_template_id,omitempty"`
	IntegrationParams   map[string]interface{}             `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}             `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CandidateRequest) GetFirstName() *string {
	if c == nil {
		return nil
	}
	return c.FirstName
}

func (c *CandidateRequest) GetLastName() *string {
	if c == nil {
		return nil
	}
	return c.LastName
}

func (c *CandidateRequest) GetCompany() *string {
	if c == nil {
		return nil
	}
	return c.Company
}

func (c *CandidateRequest) GetTitle() *string {
	if c == nil {
		return nil
	}
	return c.Title
}

func (c *CandidateRequest) GetLastInteractionAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastInteractionAt
}

func (c *CandidateRequest) GetIsPrivate() *bool {
	if c == nil {
		return nil
	}
	return c.IsPrivate
}

func (c *CandidateRequest) GetCanEmail() *bool {
	if c == nil {
		return nil
	}
	return c.CanEmail
}

func (c *CandidateRequest) GetLocations() []*string {
	if c == nil {
		return nil
	}
	return c.Locations
}

func (c *CandidateRequest) GetPhoneNumbers() []*PhoneNumberRequest {
	if c == nil {
		return nil
	}
	return c.PhoneNumbers
}

func (c *CandidateRequest) GetEmailAddresses() []*EmailAddressRequest {
	if c == nil {
		return nil
	}
	return c.EmailAddresses
}

func (c *CandidateRequest) GetUrls() []*UrlRequest {
	if c == nil {
		return nil
	}
	return c.Urls
}

func (c *CandidateRequest) GetTags() []*string {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *CandidateRequest) GetApplications() []*CandidateRequestApplicationsItem {
	if c == nil {
		return nil
	}
	return c.Applications
}

func (c *CandidateRequest) GetAttachments() []*CandidateRequestAttachmentsItem {
	if c == nil {
		return nil
	}
	return c.Attachments
}

func (c *CandidateRequest) GetRemoteTemplateId() *string {
	if c == nil {
		return nil
	}
	return c.RemoteTemplateId
}

func (c *CandidateRequest) GetIntegrationParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.IntegrationParams
}

func (c *CandidateRequest) GetLinkedAccountParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.LinkedAccountParams
}

func (c *CandidateRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CandidateRequest) UnmarshalJSON(data []byte) error {
	type embed CandidateRequest
	var unmarshaler = struct {
		embed
		LastInteractionAt *internal.DateTime `json:"last_interaction_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CandidateRequest(unmarshaler.embed)
	c.LastInteractionAt = unmarshaler.LastInteractionAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CandidateRequest) MarshalJSON() ([]byte, error) {
	type embed CandidateRequest
	var marshaler = struct {
		embed
		LastInteractionAt *internal.DateTime `json:"last_interaction_at,omitempty"`
	}{
		embed:             embed(*c),
		LastInteractionAt: internal.NewOptionalDateTime(c.LastInteractionAt),
	}
	return json.Marshal(marshaler)
}

func (c *CandidateRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CandidateRequestApplicationsItem struct {
	String      string
	Application *Application

	typ string
}

func (c *CandidateRequestApplicationsItem) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *CandidateRequestApplicationsItem) GetApplication() *Application {
	if c == nil {
		return nil
	}
	return c.Application
}

func (c *CandidateRequestApplicationsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueApplication := new(Application)
	if err := json.Unmarshal(data, &valueApplication); err == nil {
		c.typ = "Application"
		c.Application = valueApplication
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CandidateRequestApplicationsItem) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "Application" || c.Application != nil {
		return json.Marshal(c.Application)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CandidateRequestApplicationsItemVisitor interface {
	VisitString(string) error
	VisitApplication(*Application) error
}

func (c *CandidateRequestApplicationsItem) Accept(visitor CandidateRequestApplicationsItemVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "Application" || c.Application != nil {
		return visitor.VisitApplication(c.Application)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CandidateRequestAttachmentsItem struct {
	String     string
	Attachment *Attachment

	typ string
}

func (c *CandidateRequestAttachmentsItem) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *CandidateRequestAttachmentsItem) GetAttachment() *Attachment {
	if c == nil {
		return nil
	}
	return c.Attachment
}

func (c *CandidateRequestAttachmentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueAttachment := new(Attachment)
	if err := json.Unmarshal(data, &valueAttachment); err == nil {
		c.typ = "Attachment"
		c.Attachment = valueAttachment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CandidateRequestAttachmentsItem) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "Attachment" || c.Attachment != nil {
		return json.Marshal(c.Attachment)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CandidateRequestAttachmentsItemVisitor interface {
	VisitString(string) error
	VisitAttachment(*Attachment) error
}

func (c *CandidateRequestAttachmentsItem) Accept(visitor CandidateRequestAttachmentsItemVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "Attachment" || c.Attachment != nil {
		return visitor.VisitAttachment(c.Attachment)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CandidateResponse struct {
	Model    *Candidate                  `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CandidateResponse) GetModel() *Candidate {
	if c == nil {
		return nil
	}
	return c.Model
}

func (c *CandidateResponse) GetWarnings() []*WarningValidationProblem {
	if c == nil {
		return nil
	}
	return c.Warnings
}

func (c *CandidateResponse) GetErrors() []*ErrorValidationProblem {
	if c == nil {
		return nil
	}
	return c.Errors
}

func (c *CandidateResponse) GetLogs() []*DebugModeLog {
	if c == nil {
		return nil
	}
	return c.Logs
}

func (c *CandidateResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CandidateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CandidateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CandidateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CandidateResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// # The EmailAddress Object
// ### Description
// The `EmailAddress` object is used to represent a candidate's email address.
// ### Usage Example
// Fetch from the `GET Candidate` endpoint and view their email addresses.
type EmailAddressRequest struct {
	// The email address.
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	// The type of email address.
	//
	// * `PERSONAL` - PERSONAL
	// * `WORK` - WORK
	// * `OTHER` - OTHER
	EmailAddressType    *EmailAddressRequestEmailAddressType `json:"email_address_type,omitempty" url:"email_address_type,omitempty"`
	IntegrationParams   map[string]interface{}               `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}               `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailAddressRequest) GetValue() *string {
	if e == nil {
		return nil
	}
	return e.Value
}

func (e *EmailAddressRequest) GetEmailAddressType() *EmailAddressRequestEmailAddressType {
	if e == nil {
		return nil
	}
	return e.EmailAddressType
}

func (e *EmailAddressRequest) GetIntegrationParams() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.IntegrationParams
}

func (e *EmailAddressRequest) GetLinkedAccountParams() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.LinkedAccountParams
}

func (e *EmailAddressRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailAddressRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailAddressRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailAddressRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailAddressRequest) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The type of email address.
//
// * `PERSONAL` - PERSONAL
// * `WORK` - WORK
// * `OTHER` - OTHER
type EmailAddressRequestEmailAddressType struct {
	EmailAddressTypeEnum EmailAddressTypeEnum
	String               string

	typ string
}

func (e *EmailAddressRequestEmailAddressType) GetEmailAddressTypeEnum() EmailAddressTypeEnum {
	if e == nil {
		return ""
	}
	return e.EmailAddressTypeEnum
}

func (e *EmailAddressRequestEmailAddressType) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EmailAddressRequestEmailAddressType) UnmarshalJSON(data []byte) error {
	var valueEmailAddressTypeEnum EmailAddressTypeEnum
	if err := json.Unmarshal(data, &valueEmailAddressTypeEnum); err == nil {
		e.typ = "EmailAddressTypeEnum"
		e.EmailAddressTypeEnum = valueEmailAddressTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EmailAddressRequestEmailAddressType) MarshalJSON() ([]byte, error) {
	if e.typ == "EmailAddressTypeEnum" || e.EmailAddressTypeEnum != "" {
		return json.Marshal(e.EmailAddressTypeEnum)
	}
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EmailAddressRequestEmailAddressTypeVisitor interface {
	VisitEmailAddressTypeEnum(EmailAddressTypeEnum) error
	VisitString(string) error
}

func (e *EmailAddressRequestEmailAddressType) Accept(visitor EmailAddressRequestEmailAddressTypeVisitor) error {
	if e.typ == "EmailAddressTypeEnum" || e.EmailAddressTypeEnum != "" {
		return visitor.VisitEmailAddressTypeEnum(e.EmailAddressTypeEnum)
	}
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type IgnoreCommonModelRequest struct {
	Reason  *IgnoreCommonModelRequestReason `json:"reason" url:"reason"`
	Message *string                         `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IgnoreCommonModelRequest) GetReason() *IgnoreCommonModelRequestReason {
	if i == nil {
		return nil
	}
	return i.Reason
}

func (i *IgnoreCommonModelRequest) GetMessage() *string {
	if i == nil {
		return nil
	}
	return i.Message
}

func (i *IgnoreCommonModelRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IgnoreCommonModelRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler IgnoreCommonModelRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IgnoreCommonModelRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IgnoreCommonModelRequest) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IgnoreCommonModelRequestReason struct {
	ReasonEnum ReasonEnum
	String     string

	typ string
}

func (i *IgnoreCommonModelRequestReason) GetReasonEnum() ReasonEnum {
	if i == nil {
		return ""
	}
	return i.ReasonEnum
}

func (i *IgnoreCommonModelRequestReason) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *IgnoreCommonModelRequestReason) UnmarshalJSON(data []byte) error {
	var valueReasonEnum ReasonEnum
	if err := json.Unmarshal(data, &valueReasonEnum); err == nil {
		i.typ = "ReasonEnum"
		i.ReasonEnum = valueReasonEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IgnoreCommonModelRequestReason) MarshalJSON() ([]byte, error) {
	if i.typ == "ReasonEnum" || i.ReasonEnum != "" {
		return json.Marshal(i.ReasonEnum)
	}
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IgnoreCommonModelRequestReasonVisitor interface {
	VisitReasonEnum(ReasonEnum) error
	VisitString(string) error
}

func (i *IgnoreCommonModelRequestReason) Accept(visitor IgnoreCommonModelRequestReasonVisitor) error {
	if i.typ == "ReasonEnum" || i.ReasonEnum != "" {
		return visitor.VisitReasonEnum(i.ReasonEnum)
	}
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type PaginatedCandidateList struct {
	Next     *string      `json:"next,omitempty" url:"next,omitempty"`
	Previous *string      `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Candidate `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedCandidateList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedCandidateList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedCandidateList) GetResults() []*Candidate {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedCandidateList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedCandidateList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedCandidateList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedCandidateList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedCandidateList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Candidate Object
// ### Description
// The `Candidate` object is used to represent profile information about a given Candidate. Because it is specific to a Candidate, this information stays constant across applications.
// ### Usage Example
// Fetch from the `LIST Candidates` endpoint and filter by `ID` to show all candidates.
type PatchedCandidateRequest struct {
	// The candidate's first name.
	FirstName *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	// The candidate's last name.
	LastName *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	// The candidate's current company.
	Company *string `json:"company,omitempty" url:"company,omitempty"`
	// The candidate's current title.
	Title *string `json:"title,omitempty" url:"title,omitempty"`
	// When the most recent interaction with the candidate occurred.
	LastInteractionAt *time.Time `json:"last_interaction_at,omitempty" url:"last_interaction_at,omitempty"`
	// Whether or not the candidate is private.
	IsPrivate *bool `json:"is_private,omitempty" url:"is_private,omitempty"`
	// Whether or not the candidate can be emailed.
	CanEmail *bool `json:"can_email,omitempty" url:"can_email,omitempty"`
	// The candidate's locations.
	Locations      []*string              `json:"locations,omitempty" url:"locations,omitempty"`
	PhoneNumbers   []*PhoneNumberRequest  `json:"phone_numbers,omitempty" url:"phone_numbers,omitempty"`
	EmailAddresses []*EmailAddressRequest `json:"email_addresses,omitempty" url:"email_addresses,omitempty"`
	Urls           []*UrlRequest          `json:"urls,omitempty" url:"urls,omitempty"`
	// Array of `Tag` names as strings.
	Tags []*string `json:"tags,omitempty" url:"tags,omitempty"`
	// Array of `Application` object IDs.
	Applications []*string `json:"applications,omitempty" url:"applications,omitempty"`
	// Array of `Attachment` object IDs.
	Attachments         []*string              `json:"attachments,omitempty" url:"attachments,omitempty"`
	RemoteTemplateId    *string                `json:"remote_template_id,omitempty" url:"remote_template_id,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PatchedCandidateRequest) GetFirstName() *string {
	if p == nil {
		return nil
	}
	return p.FirstName
}

func (p *PatchedCandidateRequest) GetLastName() *string {
	if p == nil {
		return nil
	}
	return p.LastName
}

func (p *PatchedCandidateRequest) GetCompany() *string {
	if p == nil {
		return nil
	}
	return p.Company
}

func (p *PatchedCandidateRequest) GetTitle() *string {
	if p == nil {
		return nil
	}
	return p.Title
}

func (p *PatchedCandidateRequest) GetLastInteractionAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastInteractionAt
}

func (p *PatchedCandidateRequest) GetIsPrivate() *bool {
	if p == nil {
		return nil
	}
	return p.IsPrivate
}

func (p *PatchedCandidateRequest) GetCanEmail() *bool {
	if p == nil {
		return nil
	}
	return p.CanEmail
}

func (p *PatchedCandidateRequest) GetLocations() []*string {
	if p == nil {
		return nil
	}
	return p.Locations
}

func (p *PatchedCandidateRequest) GetPhoneNumbers() []*PhoneNumberRequest {
	if p == nil {
		return nil
	}
	return p.PhoneNumbers
}

func (p *PatchedCandidateRequest) GetEmailAddresses() []*EmailAddressRequest {
	if p == nil {
		return nil
	}
	return p.EmailAddresses
}

func (p *PatchedCandidateRequest) GetUrls() []*UrlRequest {
	if p == nil {
		return nil
	}
	return p.Urls
}

func (p *PatchedCandidateRequest) GetTags() []*string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *PatchedCandidateRequest) GetApplications() []*string {
	if p == nil {
		return nil
	}
	return p.Applications
}

func (p *PatchedCandidateRequest) GetAttachments() []*string {
	if p == nil {
		return nil
	}
	return p.Attachments
}

func (p *PatchedCandidateRequest) GetRemoteTemplateId() *string {
	if p == nil {
		return nil
	}
	return p.RemoteTemplateId
}

func (p *PatchedCandidateRequest) GetIntegrationParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.IntegrationParams
}

func (p *PatchedCandidateRequest) GetLinkedAccountParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.LinkedAccountParams
}

func (p *PatchedCandidateRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PatchedCandidateRequest) UnmarshalJSON(data []byte) error {
	type embed PatchedCandidateRequest
	var unmarshaler = struct {
		embed
		LastInteractionAt *internal.DateTime `json:"last_interaction_at,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PatchedCandidateRequest(unmarshaler.embed)
	p.LastInteractionAt = unmarshaler.LastInteractionAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedCandidateRequest) MarshalJSON() ([]byte, error) {
	type embed PatchedCandidateRequest
	var marshaler = struct {
		embed
		LastInteractionAt *internal.DateTime `json:"last_interaction_at,omitempty"`
	}{
		embed:             embed(*p),
		LastInteractionAt: internal.NewOptionalDateTime(p.LastInteractionAt),
	}
	return json.Marshal(marshaler)
}

func (p *PatchedCandidateRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The PhoneNumber Object
// ### Description
// The `PhoneNumber` object is used to represent a candidate's phone number.
// ### Usage Example
// Fetch from the `GET Candidate` endpoint and view their phone numbers.
type PhoneNumberRequest struct {
	// The phone number.
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	// The type of phone number.
	//
	// * `HOME` - HOME
	// * `WORK` - WORK
	// * `MOBILE` - MOBILE
	// * `SKYPE` - SKYPE
	// * `OTHER` - OTHER
	PhoneNumberType     *PhoneNumberRequestPhoneNumberType `json:"phone_number_type,omitempty" url:"phone_number_type,omitempty"`
	IntegrationParams   map[string]interface{}             `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}             `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PhoneNumberRequest) GetValue() *string {
	if p == nil {
		return nil
	}
	return p.Value
}

func (p *PhoneNumberRequest) GetPhoneNumberType() *PhoneNumberRequestPhoneNumberType {
	if p == nil {
		return nil
	}
	return p.PhoneNumberType
}

func (p *PhoneNumberRequest) GetIntegrationParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.IntegrationParams
}

func (p *PhoneNumberRequest) GetLinkedAccountParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.LinkedAccountParams
}

func (p *PhoneNumberRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PhoneNumberRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneNumberRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneNumberRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneNumberRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The type of phone number.
//
// * `HOME` - HOME
// * `WORK` - WORK
// * `MOBILE` - MOBILE
// * `SKYPE` - SKYPE
// * `OTHER` - OTHER
type PhoneNumberRequestPhoneNumberType struct {
	PhoneNumberTypeEnum PhoneNumberTypeEnum
	String              string

	typ string
}

func (p *PhoneNumberRequestPhoneNumberType) GetPhoneNumberTypeEnum() PhoneNumberTypeEnum {
	if p == nil {
		return ""
	}
	return p.PhoneNumberTypeEnum
}

func (p *PhoneNumberRequestPhoneNumberType) GetString() string {
	if p == nil {
		return ""
	}
	return p.String
}

func (p *PhoneNumberRequestPhoneNumberType) UnmarshalJSON(data []byte) error {
	var valuePhoneNumberTypeEnum PhoneNumberTypeEnum
	if err := json.Unmarshal(data, &valuePhoneNumberTypeEnum); err == nil {
		p.typ = "PhoneNumberTypeEnum"
		p.PhoneNumberTypeEnum = valuePhoneNumberTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typ = "String"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PhoneNumberRequestPhoneNumberType) MarshalJSON() ([]byte, error) {
	if p.typ == "PhoneNumberTypeEnum" || p.PhoneNumberTypeEnum != "" {
		return json.Marshal(p.PhoneNumberTypeEnum)
	}
	if p.typ == "String" || p.String != "" {
		return json.Marshal(p.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneNumberRequestPhoneNumberTypeVisitor interface {
	VisitPhoneNumberTypeEnum(PhoneNumberTypeEnum) error
	VisitString(string) error
}

func (p *PhoneNumberRequestPhoneNumberType) Accept(visitor PhoneNumberRequestPhoneNumberTypeVisitor) error {
	if p.typ == "PhoneNumberTypeEnum" || p.PhoneNumberTypeEnum != "" {
		return visitor.VisitPhoneNumberTypeEnum(p.PhoneNumberTypeEnum)
	}
	if p.typ == "String" || p.String != "" {
		return visitor.VisitString(p.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// * `GENERAL_CUSTOMER_REQUEST` - GENERAL_CUSTOMER_REQUEST
// * `GDPR` - GDPR
// * `OTHER` - OTHER
type ReasonEnum string

const (
	ReasonEnumGeneralCustomerRequest ReasonEnum = "GENERAL_CUSTOMER_REQUEST"
	ReasonEnumGdpr                   ReasonEnum = "GDPR"
	ReasonEnumOther                  ReasonEnum = "OTHER"
)

func NewReasonEnumFromString(s string) (ReasonEnum, error) {
	switch s {
	case "GENERAL_CUSTOMER_REQUEST":
		return ReasonEnumGeneralCustomerRequest, nil
	case "GDPR":
		return ReasonEnumGdpr, nil
	case "OTHER":
		return ReasonEnumOther, nil
	}
	var t ReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReasonEnum) Ptr() *ReasonEnum {
	return &r
}

// # The Url Object
// ### Description
// The `Url` object is used to represent hyperlinks associated with the parent model.
// ### Usage Example
// Fetch from the `GET Candidate` endpoint and view their website urls.
type UrlRequest struct {
	// The site's url.
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	// The type of site.
	//
	// * `PERSONAL` - PERSONAL
	// * `COMPANY` - COMPANY
	// * `PORTFOLIO` - PORTFOLIO
	// * `BLOG` - BLOG
	// * `SOCIAL_MEDIA` - SOCIAL_MEDIA
	// * `OTHER` - OTHER
	// * `JOB_POSTING` - JOB_POSTING
	UrlType             *UrlRequestUrlType     `json:"url_type,omitempty" url:"url_type,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UrlRequest) GetValue() *string {
	if u == nil {
		return nil
	}
	return u.Value
}

func (u *UrlRequest) GetUrlType() *UrlRequestUrlType {
	if u == nil {
		return nil
	}
	return u.UrlType
}

func (u *UrlRequest) GetIntegrationParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.IntegrationParams
}

func (u *UrlRequest) GetLinkedAccountParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.LinkedAccountParams
}

func (u *UrlRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UrlRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UrlRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UrlRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UrlRequest) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// The type of site.
//
// * `PERSONAL` - PERSONAL
// * `COMPANY` - COMPANY
// * `PORTFOLIO` - PORTFOLIO
// * `BLOG` - BLOG
// * `SOCIAL_MEDIA` - SOCIAL_MEDIA
// * `OTHER` - OTHER
// * `JOB_POSTING` - JOB_POSTING
type UrlRequestUrlType struct {
	UrlTypeEnum UrlTypeEnum
	String      string

	typ string
}

func (u *UrlRequestUrlType) GetUrlTypeEnum() UrlTypeEnum {
	if u == nil {
		return ""
	}
	return u.UrlTypeEnum
}

func (u *UrlRequestUrlType) GetString() string {
	if u == nil {
		return ""
	}
	return u.String
}

func (u *UrlRequestUrlType) UnmarshalJSON(data []byte) error {
	var valueUrlTypeEnum UrlTypeEnum
	if err := json.Unmarshal(data, &valueUrlTypeEnum); err == nil {
		u.typ = "UrlTypeEnum"
		u.UrlTypeEnum = valueUrlTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typ = "String"
		u.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UrlRequestUrlType) MarshalJSON() ([]byte, error) {
	if u.typ == "UrlTypeEnum" || u.UrlTypeEnum != "" {
		return json.Marshal(u.UrlTypeEnum)
	}
	if u.typ == "String" || u.String != "" {
		return json.Marshal(u.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UrlRequestUrlTypeVisitor interface {
	VisitUrlTypeEnum(UrlTypeEnum) error
	VisitString(string) error
}

func (u *UrlRequestUrlType) Accept(visitor UrlRequestUrlTypeVisitor) error {
	if u.typ == "UrlTypeEnum" || u.UrlTypeEnum != "" {
		return visitor.VisitUrlTypeEnum(u.UrlTypeEnum)
	}
	if u.typ == "String" || u.String != "" {
		return visitor.VisitString(u.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}
