// Code generated by Fern. DO NOT EDIT.

package client

import (
	core "github.com/merge-api/merge-go-client/v2/core"
	accountdetails "github.com/merge-api/merge-go-client/v2/filestorage/accountdetails"
	accounttoken "github.com/merge-api/merge-go-client/v2/filestorage/accounttoken"
	asyncpassthrough "github.com/merge-api/merge-go-client/v2/filestorage/asyncpassthrough"
	audittrail "github.com/merge-api/merge-go-client/v2/filestorage/audittrail"
	availableactions "github.com/merge-api/merge-go-client/v2/filestorage/availableactions"
	deleteaccount "github.com/merge-api/merge-go-client/v2/filestorage/deleteaccount"
	drives "github.com/merge-api/merge-go-client/v2/filestorage/drives"
	fieldmapping "github.com/merge-api/merge-go-client/v2/filestorage/fieldmapping"
	files "github.com/merge-api/merge-go-client/v2/filestorage/files"
	folders "github.com/merge-api/merge-go-client/v2/filestorage/folders"
	forceresync "github.com/merge-api/merge-go-client/v2/filestorage/forceresync"
	generatekey "github.com/merge-api/merge-go-client/v2/filestorage/generatekey"
	groups "github.com/merge-api/merge-go-client/v2/filestorage/groups"
	issues "github.com/merge-api/merge-go-client/v2/filestorage/issues"
	linkedaccounts "github.com/merge-api/merge-go-client/v2/filestorage/linkedaccounts"
	linktoken "github.com/merge-api/merge-go-client/v2/filestorage/linktoken"
	passthrough "github.com/merge-api/merge-go-client/v2/filestorage/passthrough"
	regeneratekey "github.com/merge-api/merge-go-client/v2/filestorage/regeneratekey"
	scopes "github.com/merge-api/merge-go-client/v2/filestorage/scopes"
	syncstatus "github.com/merge-api/merge-go-client/v2/filestorage/syncstatus"
	users "github.com/merge-api/merge-go-client/v2/filestorage/users"
	webhookreceivers "github.com/merge-api/merge-go-client/v2/filestorage/webhookreceivers"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	option "github.com/merge-api/merge-go-client/v2/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header

	AccountDetails   *accountdetails.Client
	AccountToken     *accounttoken.Client
	AsyncPassthrough *asyncpassthrough.Client
	AuditTrail       *audittrail.Client
	AvailableActions *availableactions.Client
	Scopes           *scopes.Client
	DeleteAccount    *deleteaccount.Client
	Drives           *drives.Client
	FieldMapping     *fieldmapping.Client
	Files            *files.Client
	Folders          *folders.Client
	GenerateKey      *generatekey.Client
	Groups           *groups.Client
	Issues           *issues.Client
	LinkToken        *linktoken.Client
	LinkedAccounts   *linkedaccounts.Client
	Passthrough      *passthrough.Client
	RegenerateKey    *regeneratekey.Client
	SyncStatus       *syncstatus.Client
	ForceResync      *forceresync.Client
	Users            *users.Client
	WebhookReceivers *webhookreceivers.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:           options.ToHeader(),
		AccountDetails:   accountdetails.NewClient(opts...),
		AccountToken:     accounttoken.NewClient(opts...),
		AsyncPassthrough: asyncpassthrough.NewClient(opts...),
		AuditTrail:       audittrail.NewClient(opts...),
		AvailableActions: availableactions.NewClient(opts...),
		Scopes:           scopes.NewClient(opts...),
		DeleteAccount:    deleteaccount.NewClient(opts...),
		Drives:           drives.NewClient(opts...),
		FieldMapping:     fieldmapping.NewClient(opts...),
		Files:            files.NewClient(opts...),
		Folders:          folders.NewClient(opts...),
		GenerateKey:      generatekey.NewClient(opts...),
		Groups:           groups.NewClient(opts...),
		Issues:           issues.NewClient(opts...),
		LinkToken:        linktoken.NewClient(opts...),
		LinkedAccounts:   linkedaccounts.NewClient(opts...),
		Passthrough:      passthrough.NewClient(opts...),
		RegenerateKey:    regeneratekey.NewClient(opts...),
		SyncStatus:       syncstatus.NewClient(opts...),
		ForceResync:      forceresync.NewClient(opts...),
		Users:            users.NewClient(opts...),
		WebhookReceivers: webhookreceivers.NewClient(opts...),
	}
}
