// This file was auto-generated by Fern from our API Definition.

package filestorage

import (
	fmt "fmt"
	time "time"
)

type FileStorageFileEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool        `json:"-"`
	Model    *FileRequest `json:"model,omitempty"`
}

type FilesDownloadRetrieveRequest struct {
	// If provided, specifies the export format of the file to be downloaded. For information on supported export formats, please refer to our <a href='https://help.merge.dev/en/articles/8615316-file-export-and-download-specification' target='_blank'>export format help center article</a>.
	MimeType *string `json:"-"`
}

type FilesListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-"`
	// The pagination cursor value.
	Cursor *string `json:"-"`
	// Specifying a drive id returns only the files in that drive. Specifying null returns only the files outside the top-level drive.
	DriveId *string `json:"-"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *FilesListRequestExpand `json:"-"`
	// Specifying a folder id returns only the files in that folder. Specifying null returns only the files in root directory.
	FolderId *string `json:"-"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-"`
	// If provided, will only return files with these mime_types. Multiple values can be separated by commas.
	MimeType *string `json:"-"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-"`
	// If provided, will only return files with this name. This performs an exact match.
	Name *string `json:"-"`
	// Number of results to return per page.
	PageSize *int `json:"-"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-"`
}

type FilesRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *FilesRetrieveRequestExpand `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
}

type FilesListRequestExpand string

const (
	FilesListRequestExpandDrive                  FilesListRequestExpand = "drive"
	FilesListRequestExpandFolder                 FilesListRequestExpand = "folder"
	FilesListRequestExpandFolderDrive            FilesListRequestExpand = "folder,drive"
	FilesListRequestExpandPermissions            FilesListRequestExpand = "permissions"
	FilesListRequestExpandPermissionsDrive       FilesListRequestExpand = "permissions,drive"
	FilesListRequestExpandPermissionsFolder      FilesListRequestExpand = "permissions,folder"
	FilesListRequestExpandPermissionsFolderDrive FilesListRequestExpand = "permissions,folder,drive"
)

func NewFilesListRequestExpandFromString(s string) (FilesListRequestExpand, error) {
	switch s {
	case "drive":
		return FilesListRequestExpandDrive, nil
	case "folder":
		return FilesListRequestExpandFolder, nil
	case "folder,drive":
		return FilesListRequestExpandFolderDrive, nil
	case "permissions":
		return FilesListRequestExpandPermissions, nil
	case "permissions,drive":
		return FilesListRequestExpandPermissionsDrive, nil
	case "permissions,folder":
		return FilesListRequestExpandPermissionsFolder, nil
	case "permissions,folder,drive":
		return FilesListRequestExpandPermissionsFolderDrive, nil
	}
	var t FilesListRequestExpand
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesListRequestExpand) Ptr() *FilesListRequestExpand {
	return &f
}

type FilesRetrieveRequestExpand string

const (
	FilesRetrieveRequestExpandDrive                  FilesRetrieveRequestExpand = "drive"
	FilesRetrieveRequestExpandFolder                 FilesRetrieveRequestExpand = "folder"
	FilesRetrieveRequestExpandFolderDrive            FilesRetrieveRequestExpand = "folder,drive"
	FilesRetrieveRequestExpandPermissions            FilesRetrieveRequestExpand = "permissions"
	FilesRetrieveRequestExpandPermissionsDrive       FilesRetrieveRequestExpand = "permissions,drive"
	FilesRetrieveRequestExpandPermissionsFolder      FilesRetrieveRequestExpand = "permissions,folder"
	FilesRetrieveRequestExpandPermissionsFolderDrive FilesRetrieveRequestExpand = "permissions,folder,drive"
)

func NewFilesRetrieveRequestExpandFromString(s string) (FilesRetrieveRequestExpand, error) {
	switch s {
	case "drive":
		return FilesRetrieveRequestExpandDrive, nil
	case "folder":
		return FilesRetrieveRequestExpandFolder, nil
	case "folder,drive":
		return FilesRetrieveRequestExpandFolderDrive, nil
	case "permissions":
		return FilesRetrieveRequestExpandPermissions, nil
	case "permissions,drive":
		return FilesRetrieveRequestExpandPermissionsDrive, nil
	case "permissions,folder":
		return FilesRetrieveRequestExpandPermissionsFolder, nil
	case "permissions,folder,drive":
		return FilesRetrieveRequestExpandPermissionsFolderDrive, nil
	}
	var t FilesRetrieveRequestExpand
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesRetrieveRequestExpand) Ptr() *FilesRetrieveRequestExpand {
	return &f
}
