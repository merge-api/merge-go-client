// Code generated by Fern. DO NOT EDIT.

package filestorage

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type FileStorageFolderEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool          `json:"-" url:"run_async,omitempty"`
	Model    *FolderRequest `json:"model,omitempty" url:"-"`
}

type FoldersListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will only return folders in this drive.
	DriveId *string `json:"-" url:"drive_id,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*FoldersListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// If provided, will only return folders with this name. This performs an exact match.
	Name *string `json:"-" url:"name,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// If provided, will only return folders in this parent folder. If null, will return folders in root directory.
	ParentFolderId *string `json:"-" url:"parent_folder_id,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
}

type FoldersRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*FoldersRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

type FoldersListRequestExpandItem string

const (
	FoldersListRequestExpandItemDrive        FoldersListRequestExpandItem = "drive"
	FoldersListRequestExpandItemParentFolder FoldersListRequestExpandItem = "parent_folder"
	FoldersListRequestExpandItemPermissions  FoldersListRequestExpandItem = "permissions"
)

func NewFoldersListRequestExpandItemFromString(s string) (FoldersListRequestExpandItem, error) {
	switch s {
	case "drive":
		return FoldersListRequestExpandItemDrive, nil
	case "parent_folder":
		return FoldersListRequestExpandItemParentFolder, nil
	case "permissions":
		return FoldersListRequestExpandItemPermissions, nil
	}
	var t FoldersListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FoldersListRequestExpandItem) Ptr() *FoldersListRequestExpandItem {
	return &f
}

type FoldersRetrieveRequestExpandItem string

const (
	FoldersRetrieveRequestExpandItemDrive        FoldersRetrieveRequestExpandItem = "drive"
	FoldersRetrieveRequestExpandItemParentFolder FoldersRetrieveRequestExpandItem = "parent_folder"
	FoldersRetrieveRequestExpandItemPermissions  FoldersRetrieveRequestExpandItem = "permissions"
)

func NewFoldersRetrieveRequestExpandItemFromString(s string) (FoldersRetrieveRequestExpandItem, error) {
	switch s {
	case "drive":
		return FoldersRetrieveRequestExpandItemDrive, nil
	case "parent_folder":
		return FoldersRetrieveRequestExpandItemParentFolder, nil
	case "permissions":
		return FoldersRetrieveRequestExpandItemPermissions, nil
	}
	var t FoldersRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FoldersRetrieveRequestExpandItem) Ptr() *FoldersRetrieveRequestExpandItem {
	return &f
}

type FileStorageFolderResponse struct {
	Model    *Folder                     `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FileStorageFolderResponse) GetModel() *Folder {
	if f == nil {
		return nil
	}
	return f.Model
}

func (f *FileStorageFolderResponse) GetWarnings() []*WarningValidationProblem {
	if f == nil {
		return nil
	}
	return f.Warnings
}

func (f *FileStorageFolderResponse) GetErrors() []*ErrorValidationProblem {
	if f == nil {
		return nil
	}
	return f.Errors
}

func (f *FileStorageFolderResponse) GetLogs() []*DebugModeLog {
	if f == nil {
		return nil
	}
	return f.Logs
}

func (f *FileStorageFolderResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileStorageFolderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FileStorageFolderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FileStorageFolderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FileStorageFolderResponse) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// # The Folder Object
// ### Description
// The `Folder` object is used to represent a collection of files and/or folders in the workspace. Could be within a drive, if it exists.
// ### Usage Example
// Fetch from the `GET /api/filestorage/v1/folders` endpoint and view their folders.
type FolderRequest struct {
	// The folder's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The URL to access the folder.
	FolderUrl *string `json:"folder_url,omitempty" url:"folder_url,omitempty"`
	// The folder's size, in bytes.
	Size *int64 `json:"size,omitempty" url:"size,omitempty"`
	// The folder's description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The folder that the folder belongs to.
	ParentFolder *FolderRequestParentFolder `json:"parent_folder,omitempty" url:"parent_folder,omitempty"`
	// The drive that the folder belongs to.
	Drive *FolderRequestDrive `json:"drive,omitempty" url:"drive,omitempty"`
	// The Permission object is used to represent a user's or group's access to a File or Folder. Permissions are unexpanded by default. Use the query param `expand=permissions` to see more details under `GET /folders`.
	Permissions         *FolderRequestPermissions `json:"permissions,omitempty" url:"permissions,omitempty"`
	IntegrationParams   map[string]interface{}    `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}    `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FolderRequest) GetName() *string {
	if f == nil {
		return nil
	}
	return f.Name
}

func (f *FolderRequest) GetFolderUrl() *string {
	if f == nil {
		return nil
	}
	return f.FolderUrl
}

func (f *FolderRequest) GetSize() *int64 {
	if f == nil {
		return nil
	}
	return f.Size
}

func (f *FolderRequest) GetDescription() *string {
	if f == nil {
		return nil
	}
	return f.Description
}

func (f *FolderRequest) GetParentFolder() *FolderRequestParentFolder {
	if f == nil {
		return nil
	}
	return f.ParentFolder
}

func (f *FolderRequest) GetDrive() *FolderRequestDrive {
	if f == nil {
		return nil
	}
	return f.Drive
}

func (f *FolderRequest) GetPermissions() *FolderRequestPermissions {
	if f == nil {
		return nil
	}
	return f.Permissions
}

func (f *FolderRequest) GetIntegrationParams() map[string]interface{} {
	if f == nil {
		return nil
	}
	return f.IntegrationParams
}

func (f *FolderRequest) GetLinkedAccountParams() map[string]interface{} {
	if f == nil {
		return nil
	}
	return f.LinkedAccountParams
}

func (f *FolderRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FolderRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FolderRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FolderRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FolderRequest) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The drive that the folder belongs to.
type FolderRequestDrive struct {
	String string
	Drive  *Drive

	typ string
}

func (f *FolderRequestDrive) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FolderRequestDrive) GetDrive() *Drive {
	if f == nil {
		return nil
	}
	return f.Drive
}

func (f *FolderRequestDrive) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	valueDrive := new(Drive)
	if err := json.Unmarshal(data, &valueDrive); err == nil {
		f.typ = "Drive"
		f.Drive = valueDrive
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FolderRequestDrive) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Drive" || f.Drive != nil {
		return json.Marshal(f.Drive)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FolderRequestDriveVisitor interface {
	VisitString(string) error
	VisitDrive(*Drive) error
}

func (f *FolderRequestDrive) Accept(visitor FolderRequestDriveVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Drive" || f.Drive != nil {
		return visitor.VisitDrive(f.Drive)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

// The folder that the folder belongs to.
type FolderRequestParentFolder struct {
	String string
	Folder *Folder

	typ string
}

func (f *FolderRequestParentFolder) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FolderRequestParentFolder) GetFolder() *Folder {
	if f == nil {
		return nil
	}
	return f.Folder
}

func (f *FolderRequestParentFolder) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	valueFolder := new(Folder)
	if err := json.Unmarshal(data, &valueFolder); err == nil {
		f.typ = "Folder"
		f.Folder = valueFolder
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FolderRequestParentFolder) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "Folder" || f.Folder != nil {
		return json.Marshal(f.Folder)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FolderRequestParentFolderVisitor interface {
	VisitString(string) error
	VisitFolder(*Folder) error
}

func (f *FolderRequestParentFolder) Accept(visitor FolderRequestParentFolderVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "Folder" || f.Folder != nil {
		return visitor.VisitFolder(f.Folder)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

// The Permission object is used to represent a user's or group's access to a File or Folder. Permissions are unexpanded by default. Use the query param `expand=permissions` to see more details under `GET /folders`.
type FolderRequestPermissions struct {
	String                           string
	PermissionRequest                *PermissionRequest
	FolderRequestPermissionsItemList []*FolderRequestPermissionsItem

	typ string
}

func (f *FolderRequestPermissions) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FolderRequestPermissions) GetPermissionRequest() *PermissionRequest {
	if f == nil {
		return nil
	}
	return f.PermissionRequest
}

func (f *FolderRequestPermissions) GetFolderRequestPermissionsItemList() []*FolderRequestPermissionsItem {
	if f == nil {
		return nil
	}
	return f.FolderRequestPermissionsItemList
}

func (f *FolderRequestPermissions) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	valuePermissionRequest := new(PermissionRequest)
	if err := json.Unmarshal(data, &valuePermissionRequest); err == nil {
		f.typ = "PermissionRequest"
		f.PermissionRequest = valuePermissionRequest
		return nil
	}
	var valueFolderRequestPermissionsItemList []*FolderRequestPermissionsItem
	if err := json.Unmarshal(data, &valueFolderRequestPermissionsItemList); err == nil {
		f.typ = "FolderRequestPermissionsItemList"
		f.FolderRequestPermissionsItemList = valueFolderRequestPermissionsItemList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FolderRequestPermissions) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "PermissionRequest" || f.PermissionRequest != nil {
		return json.Marshal(f.PermissionRequest)
	}
	if f.typ == "FolderRequestPermissionsItemList" || f.FolderRequestPermissionsItemList != nil {
		return json.Marshal(f.FolderRequestPermissionsItemList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FolderRequestPermissionsVisitor interface {
	VisitString(string) error
	VisitPermissionRequest(*PermissionRequest) error
	VisitFolderRequestPermissionsItemList([]*FolderRequestPermissionsItem) error
}

func (f *FolderRequestPermissions) Accept(visitor FolderRequestPermissionsVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "PermissionRequest" || f.PermissionRequest != nil {
		return visitor.VisitPermissionRequest(f.PermissionRequest)
	}
	if f.typ == "FolderRequestPermissionsItemList" || f.FolderRequestPermissionsItemList != nil {
		return visitor.VisitFolderRequestPermissionsItemList(f.FolderRequestPermissionsItemList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FolderRequestPermissionsItem struct {
	String            string
	PermissionRequest *PermissionRequest

	typ string
}

func (f *FolderRequestPermissionsItem) GetString() string {
	if f == nil {
		return ""
	}
	return f.String
}

func (f *FolderRequestPermissionsItem) GetPermissionRequest() *PermissionRequest {
	if f == nil {
		return nil
	}
	return f.PermissionRequest
}

func (f *FolderRequestPermissionsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		f.typ = "String"
		f.String = valueString
		return nil
	}
	valuePermissionRequest := new(PermissionRequest)
	if err := json.Unmarshal(data, &valuePermissionRequest); err == nil {
		f.typ = "PermissionRequest"
		f.PermissionRequest = valuePermissionRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FolderRequestPermissionsItem) MarshalJSON() ([]byte, error) {
	if f.typ == "String" || f.String != "" {
		return json.Marshal(f.String)
	}
	if f.typ == "PermissionRequest" || f.PermissionRequest != nil {
		return json.Marshal(f.PermissionRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FolderRequestPermissionsItemVisitor interface {
	VisitString(string) error
	VisitPermissionRequest(*PermissionRequest) error
}

func (f *FolderRequestPermissionsItem) Accept(visitor FolderRequestPermissionsItemVisitor) error {
	if f.typ == "String" || f.String != "" {
		return visitor.VisitString(f.String)
	}
	if f.typ == "PermissionRequest" || f.PermissionRequest != nil {
		return visitor.VisitPermissionRequest(f.PermissionRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

type PaginatedFolderList struct {
	Next     *string   `json:"next,omitempty" url:"next,omitempty"`
	Previous *string   `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Folder `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedFolderList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedFolderList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedFolderList) GetResults() []*Folder {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedFolderList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedFolderList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedFolderList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedFolderList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedFolderList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
