// Code generated by Fern. DO NOT EDIT.

package crm

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type CrmAccountEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool           `json:"-" url:"run_async,omitempty"`
	Model    *AccountRequest `json:"model,omitempty" url:"-"`
}

type AccountsListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// If provided, will only return accounts with this name.
	Name *string `json:"-" url:"name,omitempty"`
	// If provided, will only return accounts with this owner.
	OwnerId *string `json:"-" url:"owner_id,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
}

type PatchedCrmAccountEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool                  `json:"-" url:"run_async,omitempty"`
	Model    *PatchedAccountRequest `json:"model,omitempty" url:"-"`
}

type AccountsRemoteFieldClassesListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return remote field classes with this is_common_model_field value
	IsCommonModelField *bool `json:"-" url:"is_common_model_field,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type AccountsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

// # The Account Object
// ### Description
// The `Account` object is used to represent a company in a CRM system.
// ### Usage Example
// TODO
type AccountRequest struct {
	// The account's owner.
	Owner *AccountRequestOwner `json:"owner,omitempty" url:"owner,omitempty"`
	// The account's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The account's description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The account's industry.
	Industry *string `json:"industry,omitempty" url:"industry,omitempty"`
	// The account's website.
	Website *string `json:"website,omitempty" url:"website,omitempty"`
	// The account's number of employees.
	NumberOfEmployees *int              `json:"number_of_employees,omitempty" url:"number_of_employees,omitempty"`
	Addresses         []*AddressRequest `json:"addresses,omitempty" url:"addresses,omitempty"`
	// The last date (either most recent or furthest in the future) of when an activity occurs in an account.
	LastActivityAt      *time.Time             `json:"last_activity_at,omitempty" url:"last_activity_at,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountRequest) GetOwner() *AccountRequestOwner {
	if a == nil {
		return nil
	}
	return a.Owner
}

func (a *AccountRequest) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AccountRequest) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AccountRequest) GetIndustry() *string {
	if a == nil {
		return nil
	}
	return a.Industry
}

func (a *AccountRequest) GetWebsite() *string {
	if a == nil {
		return nil
	}
	return a.Website
}

func (a *AccountRequest) GetNumberOfEmployees() *int {
	if a == nil {
		return nil
	}
	return a.NumberOfEmployees
}

func (a *AccountRequest) GetAddresses() []*AddressRequest {
	if a == nil {
		return nil
	}
	return a.Addresses
}

func (a *AccountRequest) GetLastActivityAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastActivityAt
}

func (a *AccountRequest) GetIntegrationParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.IntegrationParams
}

func (a *AccountRequest) GetLinkedAccountParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.LinkedAccountParams
}

func (a *AccountRequest) GetRemoteFields() []*RemoteFieldRequest {
	if a == nil {
		return nil
	}
	return a.RemoteFields
}

func (a *AccountRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountRequest) UnmarshalJSON(data []byte) error {
	type embed AccountRequest
	var unmarshaler = struct {
		embed
		LastActivityAt *internal.DateTime `json:"last_activity_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AccountRequest(unmarshaler.embed)
	a.LastActivityAt = unmarshaler.LastActivityAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountRequest) MarshalJSON() ([]byte, error) {
	type embed AccountRequest
	var marshaler = struct {
		embed
		LastActivityAt *internal.DateTime `json:"last_activity_at,omitempty"`
	}{
		embed:          embed(*a),
		LastActivityAt: internal.NewOptionalDateTime(a.LastActivityAt),
	}
	return json.Marshal(marshaler)
}

func (a *AccountRequest) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The account's owner.
type AccountRequestOwner struct {
	String string
	User   *User

	typ string
}

func (a *AccountRequestOwner) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AccountRequestOwner) GetUser() *User {
	if a == nil {
		return nil
	}
	return a.User
}

func (a *AccountRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		a.typ = "User"
		a.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountRequestOwner) MarshalJSON() ([]byte, error) {
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	if a.typ == "User" || a.User != nil {
		return json.Marshal(a.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AccountRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (a *AccountRequestOwner) Accept(visitor AccountRequestOwnerVisitor) error {
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	if a.typ == "User" || a.User != nil {
		return visitor.VisitUser(a.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type CrmAccountResponse struct {
	Model    *Account                    `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CrmAccountResponse) GetModel() *Account {
	if c == nil {
		return nil
	}
	return c.Model
}

func (c *CrmAccountResponse) GetWarnings() []*WarningValidationProblem {
	if c == nil {
		return nil
	}
	return c.Warnings
}

func (c *CrmAccountResponse) GetErrors() []*ErrorValidationProblem {
	if c == nil {
		return nil
	}
	return c.Errors
}

func (c *CrmAccountResponse) GetLogs() []*DebugModeLog {
	if c == nil {
		return nil
	}
	return c.Logs
}

func (c *CrmAccountResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CrmAccountResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CrmAccountResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CrmAccountResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmAccountResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type PaginatedAccountList struct {
	Next     *string    `json:"next,omitempty" url:"next,omitempty"`
	Previous *string    `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Account `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedAccountList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedAccountList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedAccountList) GetResults() []*Account {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedAccountList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedAccountList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAccountList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAccountList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAccountList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Account Object
// ### Description
// The `Account` object is used to represent a company in a CRM system.
// ### Usage Example
// TODO
type PatchedAccountRequest struct {
	// The account's owner.
	Owner *string `json:"owner,omitempty" url:"owner,omitempty"`
	// The account's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The account's description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The account's industry.
	Industry *string `json:"industry,omitempty" url:"industry,omitempty"`
	// The account's website.
	Website *string `json:"website,omitempty" url:"website,omitempty"`
	// The account's number of employees.
	NumberOfEmployees *int              `json:"number_of_employees,omitempty" url:"number_of_employees,omitempty"`
	Addresses         []*AddressRequest `json:"addresses,omitempty" url:"addresses,omitempty"`
	// The last date (either most recent or furthest in the future) of when an activity occurs in an account.
	LastActivityAt      *time.Time             `json:"last_activity_at,omitempty" url:"last_activity_at,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PatchedAccountRequest) GetOwner() *string {
	if p == nil {
		return nil
	}
	return p.Owner
}

func (p *PatchedAccountRequest) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PatchedAccountRequest) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PatchedAccountRequest) GetIndustry() *string {
	if p == nil {
		return nil
	}
	return p.Industry
}

func (p *PatchedAccountRequest) GetWebsite() *string {
	if p == nil {
		return nil
	}
	return p.Website
}

func (p *PatchedAccountRequest) GetNumberOfEmployees() *int {
	if p == nil {
		return nil
	}
	return p.NumberOfEmployees
}

func (p *PatchedAccountRequest) GetAddresses() []*AddressRequest {
	if p == nil {
		return nil
	}
	return p.Addresses
}

func (p *PatchedAccountRequest) GetLastActivityAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastActivityAt
}

func (p *PatchedAccountRequest) GetIntegrationParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.IntegrationParams
}

func (p *PatchedAccountRequest) GetLinkedAccountParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.LinkedAccountParams
}

func (p *PatchedAccountRequest) GetRemoteFields() []*RemoteFieldRequest {
	if p == nil {
		return nil
	}
	return p.RemoteFields
}

func (p *PatchedAccountRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PatchedAccountRequest) UnmarshalJSON(data []byte) error {
	type embed PatchedAccountRequest
	var unmarshaler = struct {
		embed
		LastActivityAt *internal.DateTime `json:"last_activity_at,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PatchedAccountRequest(unmarshaler.embed)
	p.LastActivityAt = unmarshaler.LastActivityAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedAccountRequest) MarshalJSON() ([]byte, error) {
	type embed PatchedAccountRequest
	var marshaler = struct {
		embed
		LastActivityAt *internal.DateTime `json:"last_activity_at,omitempty"`
	}{
		embed:          embed(*p),
		LastActivityAt: internal.NewOptionalDateTime(p.LastActivityAt),
	}
	return json.Marshal(marshaler)
}

func (p *PatchedAccountRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
