// Code generated by Fern. DO NOT EDIT.

package crm

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type CustomObjectClassesCustomObjectsAssociationsListRequest struct {
	// If provided, will only return opportunities with this association_type.
	AssociationTypeId *string `json:"-" url:"association_type_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*string `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
}

type CustomObjectClassesCustomObjectsAssociationsUpdateRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool `json:"-" url:"run_async,omitempty"`
}

// # The Association Object
// ### Description
// The `Association` record refers to an instance of an Association Type.
// ### Usage Example
// TODO
type Association struct {
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt   *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	SourceObject *string    `json:"source_object,omitempty" url:"source_object,omitempty"`
	TargetObject *string    `json:"target_object,omitempty" url:"target_object,omitempty"`
	// The association type the association belongs to.
	AssociationType *AssociationAssociationType `json:"association_type,omitempty" url:"association_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Association) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *Association) GetModifiedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ModifiedAt
}

func (a *Association) GetSourceObject() *string {
	if a == nil {
		return nil
	}
	return a.SourceObject
}

func (a *Association) GetTargetObject() *string {
	if a == nil {
		return nil
	}
	return a.TargetObject
}

func (a *Association) GetAssociationType() *AssociationAssociationType {
	if a == nil {
		return nil
	}
	return a.AssociationType
}

func (a *Association) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Association) UnmarshalJSON(data []byte) error {
	type embed Association
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Association(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Association) MarshalJSON() ([]byte, error) {
	type embed Association
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*a),
		CreatedAt:  internal.NewOptionalDateTime(a.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(a.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (a *Association) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The association type the association belongs to.
type AssociationAssociationType struct {
	String          string
	AssociationType *AssociationType

	typ string
}

func (a *AssociationAssociationType) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AssociationAssociationType) GetAssociationType() *AssociationType {
	if a == nil {
		return nil
	}
	return a.AssociationType
}

func (a *AssociationAssociationType) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	valueAssociationType := new(AssociationType)
	if err := json.Unmarshal(data, &valueAssociationType); err == nil {
		a.typ = "AssociationType"
		a.AssociationType = valueAssociationType
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AssociationAssociationType) MarshalJSON() ([]byte, error) {
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	if a.typ == "AssociationType" || a.AssociationType != nil {
		return json.Marshal(a.AssociationType)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AssociationAssociationTypeVisitor interface {
	VisitString(string) error
	VisitAssociationType(*AssociationType) error
}

func (a *AssociationAssociationType) Accept(visitor AssociationAssociationTypeVisitor) error {
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	if a.typ == "AssociationType" || a.AssociationType != nil {
		return visitor.VisitAssociationType(a.AssociationType)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type PaginatedAssociationList struct {
	Next     *string        `json:"next,omitempty" url:"next,omitempty"`
	Previous *string        `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Association `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedAssociationList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedAssociationList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedAssociationList) GetResults() []*Association {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedAssociationList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedAssociationList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAssociationList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAssociationList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAssociationList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
