// Code generated by Fern. DO NOT EDIT.

package crm

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type CrmContactEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool           `json:"-" url:"run_async,omitempty"`
	Model    *ContactRequest `json:"model,omitempty" url:"-"`
}

type ContactsListRequest struct {
	// If provided, will only return contacts with this account.
	AccountId *string `json:"-" url:"account_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// If provided, will only return contacts matching the email addresses; multiple email_addresses can be separated by commas.
	EmailAddresses *string `json:"-" url:"email_addresses,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*ContactsListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// If provided, will only return contacts matching the phone numbers; multiple phone numbers can be separated by commas.
	PhoneNumbers *string `json:"-" url:"phone_numbers,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
}

type PatchedCrmContactEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool                  `json:"-" url:"run_async,omitempty"`
	Model    *PatchedContactRequest `json:"model,omitempty" url:"-"`
}

type ContactsRemoteFieldClassesListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return remote field classes with this is_common_model_field value
	IsCommonModelField *bool `json:"-" url:"is_common_model_field,omitempty"`
	// If provided, will only return remote fields classes with this is_custom value
	IsCustom *bool `json:"-" url:"is_custom,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type ContactsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*ContactsRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

type ContactsListRequestExpandItem string

const (
	ContactsListRequestExpandItemAccount ContactsListRequestExpandItem = "account"
	ContactsListRequestExpandItemOwner   ContactsListRequestExpandItem = "owner"
)

func NewContactsListRequestExpandItemFromString(s string) (ContactsListRequestExpandItem, error) {
	switch s {
	case "account":
		return ContactsListRequestExpandItemAccount, nil
	case "owner":
		return ContactsListRequestExpandItemOwner, nil
	}
	var t ContactsListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ContactsListRequestExpandItem) Ptr() *ContactsListRequestExpandItem {
	return &c
}

type ContactsRetrieveRequestExpandItem string

const (
	ContactsRetrieveRequestExpandItemAccount ContactsRetrieveRequestExpandItem = "account"
	ContactsRetrieveRequestExpandItemOwner   ContactsRetrieveRequestExpandItem = "owner"
)

func NewContactsRetrieveRequestExpandItemFromString(s string) (ContactsRetrieveRequestExpandItem, error) {
	switch s {
	case "account":
		return ContactsRetrieveRequestExpandItemAccount, nil
	case "owner":
		return ContactsRetrieveRequestExpandItemOwner, nil
	}
	var t ContactsRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ContactsRetrieveRequestExpandItem) Ptr() *ContactsRetrieveRequestExpandItem {
	return &c
}

// # The Contact Object
// ### Description
// The `Contact` object is used to represent an existing point of contact at a company in a CRM system.
// ### Usage Example
// TODO
type ContactRequest struct {
	// The contact's first name.
	FirstName *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	// The contact's last name.
	LastName *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	// The contact's account.
	Account *ContactRequestAccount `json:"account,omitempty" url:"account,omitempty"`
	// The contact's owner.
	Owner          *ContactRequestOwner   `json:"owner,omitempty" url:"owner,omitempty"`
	Addresses      []*AddressRequest      `json:"addresses,omitempty" url:"addresses,omitempty"`
	EmailAddresses []*EmailAddressRequest `json:"email_addresses,omitempty" url:"email_addresses,omitempty"`
	PhoneNumbers   []*PhoneNumberRequest  `json:"phone_numbers,omitempty" url:"phone_numbers,omitempty"`
	// When the contact's last activity occurred.
	LastActivityAt      *time.Time             `json:"last_activity_at,omitempty" url:"last_activity_at,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ContactRequest) GetFirstName() *string {
	if c == nil {
		return nil
	}
	return c.FirstName
}

func (c *ContactRequest) GetLastName() *string {
	if c == nil {
		return nil
	}
	return c.LastName
}

func (c *ContactRequest) GetAccount() *ContactRequestAccount {
	if c == nil {
		return nil
	}
	return c.Account
}

func (c *ContactRequest) GetOwner() *ContactRequestOwner {
	if c == nil {
		return nil
	}
	return c.Owner
}

func (c *ContactRequest) GetAddresses() []*AddressRequest {
	if c == nil {
		return nil
	}
	return c.Addresses
}

func (c *ContactRequest) GetEmailAddresses() []*EmailAddressRequest {
	if c == nil {
		return nil
	}
	return c.EmailAddresses
}

func (c *ContactRequest) GetPhoneNumbers() []*PhoneNumberRequest {
	if c == nil {
		return nil
	}
	return c.PhoneNumbers
}

func (c *ContactRequest) GetLastActivityAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastActivityAt
}

func (c *ContactRequest) GetIntegrationParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.IntegrationParams
}

func (c *ContactRequest) GetLinkedAccountParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.LinkedAccountParams
}

func (c *ContactRequest) GetRemoteFields() []*RemoteFieldRequest {
	if c == nil {
		return nil
	}
	return c.RemoteFields
}

func (c *ContactRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ContactRequest) UnmarshalJSON(data []byte) error {
	type embed ContactRequest
	var unmarshaler = struct {
		embed
		LastActivityAt *internal.DateTime `json:"last_activity_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ContactRequest(unmarshaler.embed)
	c.LastActivityAt = unmarshaler.LastActivityAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContactRequest) MarshalJSON() ([]byte, error) {
	type embed ContactRequest
	var marshaler = struct {
		embed
		LastActivityAt *internal.DateTime `json:"last_activity_at,omitempty"`
	}{
		embed:          embed(*c),
		LastActivityAt: internal.NewOptionalDateTime(c.LastActivityAt),
	}
	return json.Marshal(marshaler)
}

func (c *ContactRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The contact's account.
type ContactRequestAccount struct {
	String  string
	Account *Account

	typ string
}

func (c *ContactRequestAccount) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *ContactRequestAccount) GetAccount() *Account {
	if c == nil {
		return nil
	}
	return c.Account
}

func (c *ContactRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		c.typ = "Account"
		c.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactRequestAccount) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "Account" || c.Account != nil {
		return json.Marshal(c.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ContactRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (c *ContactRequestAccount) Accept(visitor ContactRequestAccountVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "Account" || c.Account != nil {
		return visitor.VisitAccount(c.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// The contact's owner.
type ContactRequestOwner struct {
	String string
	User   *User

	typ string
}

func (c *ContactRequestOwner) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *ContactRequestOwner) GetUser() *User {
	if c == nil {
		return nil
	}
	return c.User
}

func (c *ContactRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		c.typ = "User"
		c.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactRequestOwner) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "User" || c.User != nil {
		return json.Marshal(c.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ContactRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (c *ContactRequestOwner) Accept(visitor ContactRequestOwnerVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "User" || c.User != nil {
		return visitor.VisitUser(c.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CrmContactResponse struct {
	Model    *Contact                    `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CrmContactResponse) GetModel() *Contact {
	if c == nil {
		return nil
	}
	return c.Model
}

func (c *CrmContactResponse) GetWarnings() []*WarningValidationProblem {
	if c == nil {
		return nil
	}
	return c.Warnings
}

func (c *CrmContactResponse) GetErrors() []*ErrorValidationProblem {
	if c == nil {
		return nil
	}
	return c.Errors
}

func (c *CrmContactResponse) GetLogs() []*DebugModeLog {
	if c == nil {
		return nil
	}
	return c.Logs
}

func (c *CrmContactResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CrmContactResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CrmContactResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CrmContactResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmContactResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type PaginatedContactList struct {
	Next     *string    `json:"next,omitempty" url:"next,omitempty"`
	Previous *string    `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Contact `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedContactList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedContactList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedContactList) GetResults() []*Contact {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedContactList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedContactList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedContactList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedContactList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedContactList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Contact Object
// ### Description
// The `Contact` object is used to represent an existing point of contact at a company in a CRM system.
// ### Usage Example
// TODO
type PatchedContactRequest struct {
	// The contact's first name.
	FirstName *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	// The contact's last name.
	LastName *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	// The contact's account.
	Account *string `json:"account,omitempty" url:"account,omitempty"`
	// The contact's owner.
	Owner          *PatchedContactRequestOwner `json:"owner,omitempty" url:"owner,omitempty"`
	Addresses      []*AddressRequest           `json:"addresses,omitempty" url:"addresses,omitempty"`
	EmailAddresses []*EmailAddressRequest      `json:"email_addresses,omitempty" url:"email_addresses,omitempty"`
	PhoneNumbers   []*PhoneNumberRequest       `json:"phone_numbers,omitempty" url:"phone_numbers,omitempty"`
	// When the contact's last activity occurred.
	LastActivityAt      *time.Time             `json:"last_activity_at,omitempty" url:"last_activity_at,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PatchedContactRequest) GetFirstName() *string {
	if p == nil {
		return nil
	}
	return p.FirstName
}

func (p *PatchedContactRequest) GetLastName() *string {
	if p == nil {
		return nil
	}
	return p.LastName
}

func (p *PatchedContactRequest) GetAccount() *string {
	if p == nil {
		return nil
	}
	return p.Account
}

func (p *PatchedContactRequest) GetOwner() *PatchedContactRequestOwner {
	if p == nil {
		return nil
	}
	return p.Owner
}

func (p *PatchedContactRequest) GetAddresses() []*AddressRequest {
	if p == nil {
		return nil
	}
	return p.Addresses
}

func (p *PatchedContactRequest) GetEmailAddresses() []*EmailAddressRequest {
	if p == nil {
		return nil
	}
	return p.EmailAddresses
}

func (p *PatchedContactRequest) GetPhoneNumbers() []*PhoneNumberRequest {
	if p == nil {
		return nil
	}
	return p.PhoneNumbers
}

func (p *PatchedContactRequest) GetLastActivityAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastActivityAt
}

func (p *PatchedContactRequest) GetIntegrationParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.IntegrationParams
}

func (p *PatchedContactRequest) GetLinkedAccountParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.LinkedAccountParams
}

func (p *PatchedContactRequest) GetRemoteFields() []*RemoteFieldRequest {
	if p == nil {
		return nil
	}
	return p.RemoteFields
}

func (p *PatchedContactRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PatchedContactRequest) UnmarshalJSON(data []byte) error {
	type embed PatchedContactRequest
	var unmarshaler = struct {
		embed
		LastActivityAt *internal.DateTime `json:"last_activity_at,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PatchedContactRequest(unmarshaler.embed)
	p.LastActivityAt = unmarshaler.LastActivityAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedContactRequest) MarshalJSON() ([]byte, error) {
	type embed PatchedContactRequest
	var marshaler = struct {
		embed
		LastActivityAt *internal.DateTime `json:"last_activity_at,omitempty"`
	}{
		embed:          embed(*p),
		LastActivityAt: internal.NewOptionalDateTime(p.LastActivityAt),
	}
	return json.Marshal(marshaler)
}

func (p *PatchedContactRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The contact's owner.
type PatchedContactRequestOwner struct {
	String string
	User   *User

	typ string
}

func (p *PatchedContactRequestOwner) GetString() string {
	if p == nil {
		return ""
	}
	return p.String
}

func (p *PatchedContactRequestOwner) GetUser() *User {
	if p == nil {
		return nil
	}
	return p.User
}

func (p *PatchedContactRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typ = "String"
		p.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		p.typ = "User"
		p.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PatchedContactRequestOwner) MarshalJSON() ([]byte, error) {
	if p.typ == "String" || p.String != "" {
		return json.Marshal(p.String)
	}
	if p.typ == "User" || p.User != nil {
		return json.Marshal(p.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PatchedContactRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (p *PatchedContactRequestOwner) Accept(visitor PatchedContactRequestOwnerVisitor) error {
	if p.typ == "String" || p.String != "" {
		return visitor.VisitString(p.String)
	}
	if p.typ == "User" || p.User != nil {
		return visitor.VisitUser(p.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}
