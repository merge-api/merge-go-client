// Code generated by Fern. DO NOT EDIT.

package crm

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type TaskEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool        `json:"-" url:"run_async,omitempty"`
	Model    *TaskRequest `json:"model,omitempty" url:"-"`
}

type TasksListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*TasksListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
}

type PatchedTaskEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool               `json:"-" url:"run_async,omitempty"`
	Model    *PatchedTaskRequest `json:"model,omitempty" url:"-"`
}

type TasksRemoteFieldClassesListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return remote field classes with this is_common_model_field value
	IsCommonModelField *bool `json:"-" url:"is_common_model_field,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type TasksRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*TasksRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
}

type TasksListRequestExpandItem string

const (
	TasksListRequestExpandItemAccount     TasksListRequestExpandItem = "account"
	TasksListRequestExpandItemOpportunity TasksListRequestExpandItem = "opportunity"
	TasksListRequestExpandItemOwner       TasksListRequestExpandItem = "owner"
)

func NewTasksListRequestExpandItemFromString(s string) (TasksListRequestExpandItem, error) {
	switch s {
	case "account":
		return TasksListRequestExpandItemAccount, nil
	case "opportunity":
		return TasksListRequestExpandItemOpportunity, nil
	case "owner":
		return TasksListRequestExpandItemOwner, nil
	}
	var t TasksListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TasksListRequestExpandItem) Ptr() *TasksListRequestExpandItem {
	return &t
}

type TasksRetrieveRequestExpandItem string

const (
	TasksRetrieveRequestExpandItemAccount     TasksRetrieveRequestExpandItem = "account"
	TasksRetrieveRequestExpandItemOpportunity TasksRetrieveRequestExpandItem = "opportunity"
	TasksRetrieveRequestExpandItemOwner       TasksRetrieveRequestExpandItem = "owner"
)

func NewTasksRetrieveRequestExpandItemFromString(s string) (TasksRetrieveRequestExpandItem, error) {
	switch s {
	case "account":
		return TasksRetrieveRequestExpandItemAccount, nil
	case "opportunity":
		return TasksRetrieveRequestExpandItemOpportunity, nil
	case "owner":
		return TasksRetrieveRequestExpandItemOwner, nil
	}
	var t TasksRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TasksRetrieveRequestExpandItem) Ptr() *TasksRetrieveRequestExpandItem {
	return &t
}

type PaginatedTaskList struct {
	Next     *string `json:"next,omitempty" url:"next,omitempty"`
	Previous *string `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Task `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedTaskList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedTaskList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedTaskList) GetResults() []*Task {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedTaskList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedTaskList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTaskList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTaskList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTaskList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Task Object
// ### Description
// The `Task` object is used to represent a task, such as a to-do item.
// ### Usage Example
// TODO
type PatchedTaskRequest struct {
	// The task's subject.
	Subject *string `json:"subject,omitempty" url:"subject,omitempty"`
	// The task's content.
	Content *string `json:"content,omitempty" url:"content,omitempty"`
	// The task's owner.
	Owner *string `json:"owner,omitempty" url:"owner,omitempty"`
	// The task's account.
	Account *string `json:"account,omitempty" url:"account,omitempty"`
	// The task's opportunity.
	Opportunity *string `json:"opportunity,omitempty" url:"opportunity,omitempty"`
	// When the task is completed.
	CompletedDate *time.Time `json:"completed_date,omitempty" url:"completed_date,omitempty"`
	// When the task is due.
	DueDate *time.Time `json:"due_date,omitempty" url:"due_date,omitempty"`
	// The task's status.
	//
	// * `OPEN` - OPEN
	// * `CLOSED` - CLOSED
	Status              *TaskStatusEnum        `json:"status,omitempty" url:"status,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PatchedTaskRequest) GetSubject() *string {
	if p == nil {
		return nil
	}
	return p.Subject
}

func (p *PatchedTaskRequest) GetContent() *string {
	if p == nil {
		return nil
	}
	return p.Content
}

func (p *PatchedTaskRequest) GetOwner() *string {
	if p == nil {
		return nil
	}
	return p.Owner
}

func (p *PatchedTaskRequest) GetAccount() *string {
	if p == nil {
		return nil
	}
	return p.Account
}

func (p *PatchedTaskRequest) GetOpportunity() *string {
	if p == nil {
		return nil
	}
	return p.Opportunity
}

func (p *PatchedTaskRequest) GetCompletedDate() *time.Time {
	if p == nil {
		return nil
	}
	return p.CompletedDate
}

func (p *PatchedTaskRequest) GetDueDate() *time.Time {
	if p == nil {
		return nil
	}
	return p.DueDate
}

func (p *PatchedTaskRequest) GetStatus() *TaskStatusEnum {
	if p == nil {
		return nil
	}
	return p.Status
}

func (p *PatchedTaskRequest) GetIntegrationParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.IntegrationParams
}

func (p *PatchedTaskRequest) GetLinkedAccountParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.LinkedAccountParams
}

func (p *PatchedTaskRequest) GetRemoteFields() []*RemoteFieldRequest {
	if p == nil {
		return nil
	}
	return p.RemoteFields
}

func (p *PatchedTaskRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PatchedTaskRequest) UnmarshalJSON(data []byte) error {
	type embed PatchedTaskRequest
	var unmarshaler = struct {
		embed
		CompletedDate *internal.DateTime `json:"completed_date,omitempty"`
		DueDate       *internal.DateTime `json:"due_date,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PatchedTaskRequest(unmarshaler.embed)
	p.CompletedDate = unmarshaler.CompletedDate.TimePtr()
	p.DueDate = unmarshaler.DueDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedTaskRequest) MarshalJSON() ([]byte, error) {
	type embed PatchedTaskRequest
	var marshaler = struct {
		embed
		CompletedDate *internal.DateTime `json:"completed_date,omitempty"`
		DueDate       *internal.DateTime `json:"due_date,omitempty"`
	}{
		embed:         embed(*p),
		CompletedDate: internal.NewOptionalDateTime(p.CompletedDate),
		DueDate:       internal.NewOptionalDateTime(p.DueDate),
	}
	return json.Marshal(marshaler)
}

func (p *PatchedTaskRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Task Object
// ### Description
// The `Task` object is used to represent a task, such as a to-do item.
// ### Usage Example
// TODO
type Task struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The task's subject.
	Subject *string `json:"subject,omitempty" url:"subject,omitempty"`
	// The task's content.
	Content *string `json:"content,omitempty" url:"content,omitempty"`
	// The task's owner.
	Owner *TaskOwner `json:"owner,omitempty" url:"owner,omitempty"`
	// The task's account.
	Account *TaskAccount `json:"account,omitempty" url:"account,omitempty"`
	// The task's opportunity.
	Opportunity *TaskOpportunity `json:"opportunity,omitempty" url:"opportunity,omitempty"`
	// When the task is completed.
	CompletedDate *time.Time `json:"completed_date,omitempty" url:"completed_date,omitempty"`
	// When the task is due.
	DueDate *time.Time `json:"due_date,omitempty" url:"due_date,omitempty"`
	// The task's status.
	//
	// * `OPEN` - OPEN
	// * `CLOSED` - CLOSED
	Status *TaskStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Task) GetId() *string {
	if t == nil {
		return nil
	}
	return t.Id
}

func (t *Task) GetRemoteId() *string {
	if t == nil {
		return nil
	}
	return t.RemoteId
}

func (t *Task) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *Task) GetModifiedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.ModifiedAt
}

func (t *Task) GetSubject() *string {
	if t == nil {
		return nil
	}
	return t.Subject
}

func (t *Task) GetContent() *string {
	if t == nil {
		return nil
	}
	return t.Content
}

func (t *Task) GetOwner() *TaskOwner {
	if t == nil {
		return nil
	}
	return t.Owner
}

func (t *Task) GetAccount() *TaskAccount {
	if t == nil {
		return nil
	}
	return t.Account
}

func (t *Task) GetOpportunity() *TaskOpportunity {
	if t == nil {
		return nil
	}
	return t.Opportunity
}

func (t *Task) GetCompletedDate() *time.Time {
	if t == nil {
		return nil
	}
	return t.CompletedDate
}

func (t *Task) GetDueDate() *time.Time {
	if t == nil {
		return nil
	}
	return t.DueDate
}

func (t *Task) GetStatus() *TaskStatusEnum {
	if t == nil {
		return nil
	}
	return t.Status
}

func (t *Task) GetRemoteWasDeleted() *bool {
	if t == nil {
		return nil
	}
	return t.RemoteWasDeleted
}

func (t *Task) GetFieldMappings() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.FieldMappings
}

func (t *Task) GetRemoteData() []*RemoteData {
	if t == nil {
		return nil
	}
	return t.RemoteData
}

func (t *Task) GetRemoteFields() []*RemoteField {
	if t == nil {
		return nil
	}
	return t.RemoteFields
}

func (t *Task) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Task) UnmarshalJSON(data []byte) error {
	type embed Task
	var unmarshaler = struct {
		embed
		CreatedAt     *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt    *internal.DateTime `json:"modified_at,omitempty"`
		CompletedDate *internal.DateTime `json:"completed_date,omitempty"`
		DueDate       *internal.DateTime `json:"due_date,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = Task(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	t.CompletedDate = unmarshaler.CompletedDate.TimePtr()
	t.DueDate = unmarshaler.DueDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Task) MarshalJSON() ([]byte, error) {
	type embed Task
	var marshaler = struct {
		embed
		CreatedAt     *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt    *internal.DateTime `json:"modified_at,omitempty"`
		CompletedDate *internal.DateTime `json:"completed_date,omitempty"`
		DueDate       *internal.DateTime `json:"due_date,omitempty"`
	}{
		embed:         embed(*t),
		CreatedAt:     internal.NewOptionalDateTime(t.CreatedAt),
		ModifiedAt:    internal.NewOptionalDateTime(t.ModifiedAt),
		CompletedDate: internal.NewOptionalDateTime(t.CompletedDate),
		DueDate:       internal.NewOptionalDateTime(t.DueDate),
	}
	return json.Marshal(marshaler)
}

func (t *Task) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The task's account.
type TaskAccount struct {
	String  string
	Account *Account

	typ string
}

func (t *TaskAccount) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TaskAccount) GetAccount() *Account {
	if t == nil {
		return nil
	}
	return t.Account
}

func (t *TaskAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		t.typ = "Account"
		t.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskAccount) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Account" || t.Account != nil {
		return json.Marshal(t.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TaskAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (t *TaskAccount) Accept(visitor TaskAccountVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Account" || t.Account != nil {
		return visitor.VisitAccount(t.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// The task's opportunity.
type TaskOpportunity struct {
	String      string
	Opportunity *Opportunity

	typ string
}

func (t *TaskOpportunity) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TaskOpportunity) GetOpportunity() *Opportunity {
	if t == nil {
		return nil
	}
	return t.Opportunity
}

func (t *TaskOpportunity) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueOpportunity := new(Opportunity)
	if err := json.Unmarshal(data, &valueOpportunity); err == nil {
		t.typ = "Opportunity"
		t.Opportunity = valueOpportunity
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskOpportunity) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Opportunity" || t.Opportunity != nil {
		return json.Marshal(t.Opportunity)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TaskOpportunityVisitor interface {
	VisitString(string) error
	VisitOpportunity(*Opportunity) error
}

func (t *TaskOpportunity) Accept(visitor TaskOpportunityVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Opportunity" || t.Opportunity != nil {
		return visitor.VisitOpportunity(t.Opportunity)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// The task's owner.
type TaskOwner struct {
	String string
	User   *User

	typ string
}

func (t *TaskOwner) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TaskOwner) GetUser() *User {
	if t == nil {
		return nil
	}
	return t.User
}

func (t *TaskOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typ = "User"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskOwner) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "User" || t.User != nil {
		return json.Marshal(t.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TaskOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TaskOwner) Accept(visitor TaskOwnerVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "User" || t.User != nil {
		return visitor.VisitUser(t.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// # The Task Object
// ### Description
// The `Task` object is used to represent a task, such as a to-do item.
// ### Usage Example
// TODO
type TaskRequest struct {
	// The task's subject.
	Subject *string `json:"subject,omitempty" url:"subject,omitempty"`
	// The task's content.
	Content *string `json:"content,omitempty" url:"content,omitempty"`
	// The task's owner.
	Owner *TaskRequestOwner `json:"owner,omitempty" url:"owner,omitempty"`
	// The task's account.
	Account *TaskRequestAccount `json:"account,omitempty" url:"account,omitempty"`
	// The task's opportunity.
	Opportunity *TaskRequestOpportunity `json:"opportunity,omitempty" url:"opportunity,omitempty"`
	// When the task is completed.
	CompletedDate *time.Time `json:"completed_date,omitempty" url:"completed_date,omitempty"`
	// When the task is due.
	DueDate *time.Time `json:"due_date,omitempty" url:"due_date,omitempty"`
	// The task's status.
	//
	// * `OPEN` - OPEN
	// * `CLOSED` - CLOSED
	Status              *TaskStatusEnum        `json:"status,omitempty" url:"status,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskRequest) GetSubject() *string {
	if t == nil {
		return nil
	}
	return t.Subject
}

func (t *TaskRequest) GetContent() *string {
	if t == nil {
		return nil
	}
	return t.Content
}

func (t *TaskRequest) GetOwner() *TaskRequestOwner {
	if t == nil {
		return nil
	}
	return t.Owner
}

func (t *TaskRequest) GetAccount() *TaskRequestAccount {
	if t == nil {
		return nil
	}
	return t.Account
}

func (t *TaskRequest) GetOpportunity() *TaskRequestOpportunity {
	if t == nil {
		return nil
	}
	return t.Opportunity
}

func (t *TaskRequest) GetCompletedDate() *time.Time {
	if t == nil {
		return nil
	}
	return t.CompletedDate
}

func (t *TaskRequest) GetDueDate() *time.Time {
	if t == nil {
		return nil
	}
	return t.DueDate
}

func (t *TaskRequest) GetStatus() *TaskStatusEnum {
	if t == nil {
		return nil
	}
	return t.Status
}

func (t *TaskRequest) GetIntegrationParams() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.IntegrationParams
}

func (t *TaskRequest) GetLinkedAccountParams() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.LinkedAccountParams
}

func (t *TaskRequest) GetRemoteFields() []*RemoteFieldRequest {
	if t == nil {
		return nil
	}
	return t.RemoteFields
}

func (t *TaskRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskRequest) UnmarshalJSON(data []byte) error {
	type embed TaskRequest
	var unmarshaler = struct {
		embed
		CompletedDate *internal.DateTime `json:"completed_date,omitempty"`
		DueDate       *internal.DateTime `json:"due_date,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TaskRequest(unmarshaler.embed)
	t.CompletedDate = unmarshaler.CompletedDate.TimePtr()
	t.DueDate = unmarshaler.DueDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskRequest) MarshalJSON() ([]byte, error) {
	type embed TaskRequest
	var marshaler = struct {
		embed
		CompletedDate *internal.DateTime `json:"completed_date,omitempty"`
		DueDate       *internal.DateTime `json:"due_date,omitempty"`
	}{
		embed:         embed(*t),
		CompletedDate: internal.NewOptionalDateTime(t.CompletedDate),
		DueDate:       internal.NewOptionalDateTime(t.DueDate),
	}
	return json.Marshal(marshaler)
}

func (t *TaskRequest) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The task's account.
type TaskRequestAccount struct {
	String  string
	Account *Account

	typ string
}

func (t *TaskRequestAccount) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TaskRequestAccount) GetAccount() *Account {
	if t == nil {
		return nil
	}
	return t.Account
}

func (t *TaskRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		t.typ = "Account"
		t.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskRequestAccount) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Account" || t.Account != nil {
		return json.Marshal(t.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TaskRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (t *TaskRequestAccount) Accept(visitor TaskRequestAccountVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Account" || t.Account != nil {
		return visitor.VisitAccount(t.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// The task's opportunity.
type TaskRequestOpportunity struct {
	String      string
	Opportunity *Opportunity

	typ string
}

func (t *TaskRequestOpportunity) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TaskRequestOpportunity) GetOpportunity() *Opportunity {
	if t == nil {
		return nil
	}
	return t.Opportunity
}

func (t *TaskRequestOpportunity) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueOpportunity := new(Opportunity)
	if err := json.Unmarshal(data, &valueOpportunity); err == nil {
		t.typ = "Opportunity"
		t.Opportunity = valueOpportunity
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskRequestOpportunity) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "Opportunity" || t.Opportunity != nil {
		return json.Marshal(t.Opportunity)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TaskRequestOpportunityVisitor interface {
	VisitString(string) error
	VisitOpportunity(*Opportunity) error
}

func (t *TaskRequestOpportunity) Accept(visitor TaskRequestOpportunityVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "Opportunity" || t.Opportunity != nil {
		return visitor.VisitOpportunity(t.Opportunity)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// The task's owner.
type TaskRequestOwner struct {
	String string
	User   *User

	typ string
}

func (t *TaskRequestOwner) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *TaskRequestOwner) GetUser() *User {
	if t == nil {
		return nil
	}
	return t.User
}

func (t *TaskRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typ = "String"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typ = "User"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskRequestOwner) MarshalJSON() ([]byte, error) {
	if t.typ == "String" || t.String != "" {
		return json.Marshal(t.String)
	}
	if t.typ == "User" || t.User != nil {
		return json.Marshal(t.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TaskRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TaskRequestOwner) Accept(visitor TaskRequestOwnerVisitor) error {
	if t.typ == "String" || t.String != "" {
		return visitor.VisitString(t.String)
	}
	if t.typ == "User" || t.User != nil {
		return visitor.VisitUser(t.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TaskResponse struct {
	Model    *Task                       `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskResponse) GetModel() *Task {
	if t == nil {
		return nil
	}
	return t.Model
}

func (t *TaskResponse) GetWarnings() []*WarningValidationProblem {
	if t == nil {
		return nil
	}
	return t.Warnings
}

func (t *TaskResponse) GetErrors() []*ErrorValidationProblem {
	if t == nil {
		return nil
	}
	return t.Errors
}

func (t *TaskResponse) GetLogs() []*DebugModeLog {
	if t == nil {
		return nil
	}
	return t.Logs
}

func (t *TaskResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TaskResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaskResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// * `OPEN` - OPEN
// * `CLOSED` - CLOSED
type TaskStatusEnum string

const (
	TaskStatusEnumOpen   TaskStatusEnum = "OPEN"
	TaskStatusEnumClosed TaskStatusEnum = "CLOSED"
)

func NewTaskStatusEnumFromString(s string) (TaskStatusEnum, error) {
	switch s {
	case "OPEN":
		return TaskStatusEnumOpen, nil
	case "CLOSED":
		return TaskStatusEnumClosed, nil
	}
	var t TaskStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskStatusEnum) Ptr() *TaskStatusEnum {
	return &t
}
