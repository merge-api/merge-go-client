// Code generated by Fern. DO NOT EDIT.

package crm

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

// # The Account Object
// ### Description
// The `Account` object is used to represent a company in a CRM system.
// ### Usage Example
// TODO
type Account struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The account's owner.
	Owner *AccountOwner `json:"owner,omitempty" url:"owner,omitempty"`
	// The account's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The account's description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The account's industry.
	Industry *string `json:"industry,omitempty" url:"industry,omitempty"`
	// The account's website.
	Website *string `json:"website,omitempty" url:"website,omitempty"`
	// The account's number of employees.
	NumberOfEmployees *int           `json:"number_of_employees,omitempty" url:"number_of_employees,omitempty"`
	Addresses         []*Address     `json:"addresses,omitempty" url:"addresses,omitempty"`
	PhoneNumbers      []*PhoneNumber `json:"phone_numbers,omitempty" url:"phone_numbers,omitempty"`
	// The last date (either most recent or furthest in the future) of when an activity occurs in an account.
	LastActivityAt *time.Time `json:"last_activity_at,omitempty" url:"last_activity_at,omitempty"`
	// When the CRM system account data was last modified by a user with a login.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty" url:"remote_updated_at,omitempty"`
	// When the third party's account was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty" url:"remote_created_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Account) GetId() *string {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *Account) GetRemoteId() *string {
	if a == nil {
		return nil
	}
	return a.RemoteId
}

func (a *Account) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *Account) GetModifiedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ModifiedAt
}

func (a *Account) GetOwner() *AccountOwner {
	if a == nil {
		return nil
	}
	return a.Owner
}

func (a *Account) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *Account) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *Account) GetIndustry() *string {
	if a == nil {
		return nil
	}
	return a.Industry
}

func (a *Account) GetWebsite() *string {
	if a == nil {
		return nil
	}
	return a.Website
}

func (a *Account) GetNumberOfEmployees() *int {
	if a == nil {
		return nil
	}
	return a.NumberOfEmployees
}

func (a *Account) GetAddresses() []*Address {
	if a == nil {
		return nil
	}
	return a.Addresses
}

func (a *Account) GetPhoneNumbers() []*PhoneNumber {
	if a == nil {
		return nil
	}
	return a.PhoneNumbers
}

func (a *Account) GetLastActivityAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastActivityAt
}

func (a *Account) GetRemoteUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.RemoteUpdatedAt
}

func (a *Account) GetRemoteCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.RemoteCreatedAt
}

func (a *Account) GetRemoteWasDeleted() *bool {
	if a == nil {
		return nil
	}
	return a.RemoteWasDeleted
}

func (a *Account) GetFieldMappings() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.FieldMappings
}

func (a *Account) GetRemoteData() []*RemoteData {
	if a == nil {
		return nil
	}
	return a.RemoteData
}

func (a *Account) GetRemoteFields() []*RemoteField {
	if a == nil {
		return nil
	}
	return a.RemoteFields
}

func (a *Account) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Account) UnmarshalJSON(data []byte) error {
	type embed Account
	var unmarshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		LastActivityAt  *internal.DateTime `json:"last_activity_at,omitempty"`
		RemoteUpdatedAt *internal.DateTime `json:"remote_updated_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Account(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	a.LastActivityAt = unmarshaler.LastActivityAt.TimePtr()
	a.RemoteUpdatedAt = unmarshaler.RemoteUpdatedAt.TimePtr()
	a.RemoteCreatedAt = unmarshaler.RemoteCreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Account) MarshalJSON() ([]byte, error) {
	type embed Account
	var marshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		LastActivityAt  *internal.DateTime `json:"last_activity_at,omitempty"`
		RemoteUpdatedAt *internal.DateTime `json:"remote_updated_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
	}{
		embed:           embed(*a),
		CreatedAt:       internal.NewOptionalDateTime(a.CreatedAt),
		ModifiedAt:      internal.NewOptionalDateTime(a.ModifiedAt),
		LastActivityAt:  internal.NewOptionalDateTime(a.LastActivityAt),
		RemoteUpdatedAt: internal.NewOptionalDateTime(a.RemoteUpdatedAt),
		RemoteCreatedAt: internal.NewOptionalDateTime(a.RemoteCreatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *Account) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountIntegration struct {
	// Company name.
	Name string `json:"name" url:"name"`
	// Optional. This shortened name appears in places with limited space, usually in conjunction with the platform's logo (e.g., Merge Link menu).<br><br>Example: <i>Workforce Now (in lieu of ADP Workforce Now), SuccessFactors (in lieu of SAP SuccessFactors)</i>
	AbbreviatedName *string `json:"abbreviated_name,omitempty" url:"abbreviated_name,omitempty"`
	// Category or categories this integration belongs to. Multiple categories should be comma separated, i.e. [ats, hris].
	Categories []CategoriesEnum `json:"categories,omitempty" url:"categories,omitempty"`
	// Company logo in rectangular shape.
	Image *string `json:"image,omitempty" url:"image,omitempty"`
	// Company logo in square shape.
	SquareImage *string `json:"square_image,omitempty" url:"square_image,omitempty"`
	// The color of this integration used for buttons and text throughout the app and landing pages. <b>Choose a darker, saturated color.</b>
	Color *string `json:"color,omitempty" url:"color,omitempty"`
	Slug  *string `json:"slug,omitempty" url:"slug,omitempty"`
	// Mapping of API endpoints to documentation urls for support. Example: {'GET': [['/common-model-scopes', 'https://docs.merge.dev/accounting/common-model-scopes/#common_model_scopes_retrieve'],['/common-model-actions', 'https://docs.merge.dev/accounting/common-model-actions/#common_model_actions_retrieve']], 'POST': []}
	ApiEndpointsToDocumentationUrls map[string]interface{} `json:"api_endpoints_to_documentation_urls,omitempty" url:"api_endpoints_to_documentation_urls,omitempty"`
	// Setup guide URL for third party webhook creation. Exposed in Merge Docs.
	WebhookSetupGuideUrl *string `json:"webhook_setup_guide_url,omitempty" url:"webhook_setup_guide_url,omitempty"`
	// Category or categories this integration is in beta status for.
	CategoryBetaStatus map[string]interface{} `json:"category_beta_status,omitempty" url:"category_beta_status,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountIntegration) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AccountIntegration) GetAbbreviatedName() *string {
	if a == nil {
		return nil
	}
	return a.AbbreviatedName
}

func (a *AccountIntegration) GetCategories() []CategoriesEnum {
	if a == nil {
		return nil
	}
	return a.Categories
}

func (a *AccountIntegration) GetImage() *string {
	if a == nil {
		return nil
	}
	return a.Image
}

func (a *AccountIntegration) GetSquareImage() *string {
	if a == nil {
		return nil
	}
	return a.SquareImage
}

func (a *AccountIntegration) GetColor() *string {
	if a == nil {
		return nil
	}
	return a.Color
}

func (a *AccountIntegration) GetSlug() *string {
	if a == nil {
		return nil
	}
	return a.Slug
}

func (a *AccountIntegration) GetApiEndpointsToDocumentationUrls() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.ApiEndpointsToDocumentationUrls
}

func (a *AccountIntegration) GetWebhookSetupGuideUrl() *string {
	if a == nil {
		return nil
	}
	return a.WebhookSetupGuideUrl
}

func (a *AccountIntegration) GetCategoryBetaStatus() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.CategoryBetaStatus
}

func (a *AccountIntegration) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountIntegration) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountIntegration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountIntegration(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountIntegration) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The account's owner.
type AccountOwner struct {
	String string
	User   *User

	typ string
}

func (a *AccountOwner) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AccountOwner) GetUser() *User {
	if a == nil {
		return nil
	}
	return a.User
}

func (a *AccountOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		a.typ = "User"
		a.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountOwner) MarshalJSON() ([]byte, error) {
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	if a.typ == "User" || a.User != nil {
		return json.Marshal(a.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AccountOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (a *AccountOwner) Accept(visitor AccountOwnerVisitor) error {
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	if a.typ == "User" || a.User != nil {
		return visitor.VisitUser(a.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// * `CALL` - CALL
// * `MEETING` - MEETING
// * `EMAIL` - EMAIL
type ActivityTypeEnum string

const (
	ActivityTypeEnumCall    ActivityTypeEnum = "CALL"
	ActivityTypeEnumMeeting ActivityTypeEnum = "MEETING"
	ActivityTypeEnumEmail   ActivityTypeEnum = "EMAIL"
)

func NewActivityTypeEnumFromString(s string) (ActivityTypeEnum, error) {
	switch s {
	case "CALL":
		return ActivityTypeEnumCall, nil
	case "MEETING":
		return ActivityTypeEnumMeeting, nil
	case "EMAIL":
		return ActivityTypeEnumEmail, nil
	}
	var t ActivityTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActivityTypeEnum) Ptr() *ActivityTypeEnum {
	return &a
}

// # The Address Object
// ### Description
// The `Address` object is used to represent an entity's address.
// ### Usage Example
// TODO
type Address struct {
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// Line 1 of the address's street.
	Street1 *string `json:"street_1,omitempty" url:"street_1,omitempty"`
	// Line 2 of the address's street.
	Street2 *string `json:"street_2,omitempty" url:"street_2,omitempty"`
	// The address's city.
	City *string `json:"city,omitempty" url:"city,omitempty"`
	// The address's state.
	State *string `json:"state,omitempty" url:"state,omitempty"`
	// The address's postal code.
	PostalCode *string `json:"postal_code,omitempty" url:"postal_code,omitempty"`
	// The address's country.
	//
	// * `AF` - Afghanistan
	// * `AX` - Åland Islands
	// * `AL` - Albania
	// * `DZ` - Algeria
	// * `AS` - American Samoa
	// * `AD` - Andorra
	// * `AO` - Angola
	// * `AI` - Anguilla
	// * `AQ` - Antarctica
	// * `AG` - Antigua and Barbuda
	// * `AR` - Argentina
	// * `AM` - Armenia
	// * `AW` - Aruba
	// * `AU` - Australia
	// * `AT` - Austria
	// * `AZ` - Azerbaijan
	// * `BS` - Bahamas
	// * `BH` - Bahrain
	// * `BD` - Bangladesh
	// * `BB` - Barbados
	// * `BY` - Belarus
	// * `BE` - Belgium
	// * `BZ` - Belize
	// * `BJ` - Benin
	// * `BM` - Bermuda
	// * `BT` - Bhutan
	// * `BO` - Bolivia
	// * `BQ` - Bonaire, Sint Eustatius and Saba
	// * `BA` - Bosnia and Herzegovina
	// * `BW` - Botswana
	// * `BV` - Bouvet Island
	// * `BR` - Brazil
	// * `IO` - British Indian Ocean Territory
	// * `BN` - Brunei
	// * `BG` - Bulgaria
	// * `BF` - Burkina Faso
	// * `BI` - Burundi
	// * `CV` - Cabo Verde
	// * `KH` - Cambodia
	// * `CM` - Cameroon
	// * `CA` - Canada
	// * `KY` - Cayman Islands
	// * `CF` - Central African Republic
	// * `TD` - Chad
	// * `CL` - Chile
	// * `CN` - China
	// * `CX` - Christmas Island
	// * `CC` - Cocos (Keeling) Islands
	// * `CO` - Colombia
	// * `KM` - Comoros
	// * `CG` - Congo
	// * `CD` - Congo (the Democratic Republic of the)
	// * `CK` - Cook Islands
	// * `CR` - Costa Rica
	// * `CI` - Côte d'Ivoire
	// * `HR` - Croatia
	// * `CU` - Cuba
	// * `CW` - Curaçao
	// * `CY` - Cyprus
	// * `CZ` - Czechia
	// * `DK` - Denmark
	// * `DJ` - Djibouti
	// * `DM` - Dominica
	// * `DO` - Dominican Republic
	// * `EC` - Ecuador
	// * `EG` - Egypt
	// * `SV` - El Salvador
	// * `GQ` - Equatorial Guinea
	// * `ER` - Eritrea
	// * `EE` - Estonia
	// * `SZ` - Eswatini
	// * `ET` - Ethiopia
	// * `FK` - Falkland Islands (Malvinas)
	// * `FO` - Faroe Islands
	// * `FJ` - Fiji
	// * `FI` - Finland
	// * `FR` - France
	// * `GF` - French Guiana
	// * `PF` - French Polynesia
	// * `TF` - French Southern Territories
	// * `GA` - Gabon
	// * `GM` - Gambia
	// * `GE` - Georgia
	// * `DE` - Germany
	// * `GH` - Ghana
	// * `GI` - Gibraltar
	// * `GR` - Greece
	// * `GL` - Greenland
	// * `GD` - Grenada
	// * `GP` - Guadeloupe
	// * `GU` - Guam
	// * `GT` - Guatemala
	// * `GG` - Guernsey
	// * `GN` - Guinea
	// * `GW` - Guinea-Bissau
	// * `GY` - Guyana
	// * `HT` - Haiti
	// * `HM` - Heard Island and McDonald Islands
	// * `VA` - Holy See
	// * `HN` - Honduras
	// * `HK` - Hong Kong
	// * `HU` - Hungary
	// * `IS` - Iceland
	// * `IN` - India
	// * `ID` - Indonesia
	// * `IR` - Iran
	// * `IQ` - Iraq
	// * `IE` - Ireland
	// * `IM` - Isle of Man
	// * `IL` - Israel
	// * `IT` - Italy
	// * `JM` - Jamaica
	// * `JP` - Japan
	// * `JE` - Jersey
	// * `JO` - Jordan
	// * `KZ` - Kazakhstan
	// * `KE` - Kenya
	// * `KI` - Kiribati
	// * `KW` - Kuwait
	// * `KG` - Kyrgyzstan
	// * `LA` - Laos
	// * `LV` - Latvia
	// * `LB` - Lebanon
	// * `LS` - Lesotho
	// * `LR` - Liberia
	// * `LY` - Libya
	// * `LI` - Liechtenstein
	// * `LT` - Lithuania
	// * `LU` - Luxembourg
	// * `MO` - Macao
	// * `MG` - Madagascar
	// * `MW` - Malawi
	// * `MY` - Malaysia
	// * `MV` - Maldives
	// * `ML` - Mali
	// * `MT` - Malta
	// * `MH` - Marshall Islands
	// * `MQ` - Martinique
	// * `MR` - Mauritania
	// * `MU` - Mauritius
	// * `YT` - Mayotte
	// * `MX` - Mexico
	// * `FM` - Micronesia (Federated States of)
	// * `MD` - Moldova
	// * `MC` - Monaco
	// * `MN` - Mongolia
	// * `ME` - Montenegro
	// * `MS` - Montserrat
	// * `MA` - Morocco
	// * `MZ` - Mozambique
	// * `MM` - Myanmar
	// * `NA` - Namibia
	// * `NR` - Nauru
	// * `NP` - Nepal
	// * `NL` - Netherlands
	// * `NC` - New Caledonia
	// * `NZ` - New Zealand
	// * `NI` - Nicaragua
	// * `NE` - Niger
	// * `NG` - Nigeria
	// * `NU` - Niue
	// * `NF` - Norfolk Island
	// * `KP` - North Korea
	// * `MK` - North Macedonia
	// * `MP` - Northern Mariana Islands
	// * `NO` - Norway
	// * `OM` - Oman
	// * `PK` - Pakistan
	// * `PW` - Palau
	// * `PS` - Palestine, State of
	// * `PA` - Panama
	// * `PG` - Papua New Guinea
	// * `PY` - Paraguay
	// * `PE` - Peru
	// * `PH` - Philippines
	// * `PN` - Pitcairn
	// * `PL` - Poland
	// * `PT` - Portugal
	// * `PR` - Puerto Rico
	// * `QA` - Qatar
	// * `RE` - Réunion
	// * `RO` - Romania
	// * `RU` - Russia
	// * `RW` - Rwanda
	// * `BL` - Saint Barthélemy
	// * `SH` - Saint Helena, Ascension and Tristan da Cunha
	// * `KN` - Saint Kitts and Nevis
	// * `LC` - Saint Lucia
	// * `MF` - Saint Martin (French part)
	// * `PM` - Saint Pierre and Miquelon
	// * `VC` - Saint Vincent and the Grenadines
	// * `WS` - Samoa
	// * `SM` - San Marino
	// * `ST` - Sao Tome and Principe
	// * `SA` - Saudi Arabia
	// * `SN` - Senegal
	// * `RS` - Serbia
	// * `SC` - Seychelles
	// * `SL` - Sierra Leone
	// * `SG` - Singapore
	// * `SX` - Sint Maarten (Dutch part)
	// * `SK` - Slovakia
	// * `SI` - Slovenia
	// * `SB` - Solomon Islands
	// * `SO` - Somalia
	// * `ZA` - South Africa
	// * `GS` - South Georgia and the South Sandwich Islands
	// * `KR` - South Korea
	// * `SS` - South Sudan
	// * `ES` - Spain
	// * `LK` - Sri Lanka
	// * `SD` - Sudan
	// * `SR` - Suriname
	// * `SJ` - Svalbard and Jan Mayen
	// * `SE` - Sweden
	// * `CH` - Switzerland
	// * `SY` - Syria
	// * `TW` - Taiwan
	// * `TJ` - Tajikistan
	// * `TZ` - Tanzania
	// * `TH` - Thailand
	// * `TL` - Timor-Leste
	// * `TG` - Togo
	// * `TK` - Tokelau
	// * `TO` - Tonga
	// * `TT` - Trinidad and Tobago
	// * `TN` - Tunisia
	// * `TR` - Turkey
	// * `TM` - Turkmenistan
	// * `TC` - Turks and Caicos Islands
	// * `TV` - Tuvalu
	// * `UG` - Uganda
	// * `UA` - Ukraine
	// * `AE` - United Arab Emirates
	// * `GB` - United Kingdom
	// * `UM` - United States Minor Outlying Islands
	// * `US` - United States of America
	// * `UY` - Uruguay
	// * `UZ` - Uzbekistan
	// * `VU` - Vanuatu
	// * `VE` - Venezuela
	// * `VN` - Vietnam
	// * `VG` - Virgin Islands (British)
	// * `VI` - Virgin Islands (U.S.)
	// * `WF` - Wallis and Futuna
	// * `EH` - Western Sahara
	// * `YE` - Yemen
	// * `ZM` - Zambia
	// * `ZW` - Zimbabwe
	Country *AddressCountry `json:"country,omitempty" url:"country,omitempty"`
	// The address type.
	//
	// * `BILLING` - BILLING
	// * `SHIPPING` - SHIPPING
	AddressType *AddressAddressType `json:"address_type,omitempty" url:"address_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Address) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *Address) GetModifiedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ModifiedAt
}

func (a *Address) GetStreet1() *string {
	if a == nil {
		return nil
	}
	return a.Street1
}

func (a *Address) GetStreet2() *string {
	if a == nil {
		return nil
	}
	return a.Street2
}

func (a *Address) GetCity() *string {
	if a == nil {
		return nil
	}
	return a.City
}

func (a *Address) GetState() *string {
	if a == nil {
		return nil
	}
	return a.State
}

func (a *Address) GetPostalCode() *string {
	if a == nil {
		return nil
	}
	return a.PostalCode
}

func (a *Address) GetCountry() *AddressCountry {
	if a == nil {
		return nil
	}
	return a.Country
}

func (a *Address) GetAddressType() *AddressAddressType {
	if a == nil {
		return nil
	}
	return a.AddressType
}

func (a *Address) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Address) UnmarshalJSON(data []byte) error {
	type embed Address
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Address(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Address) MarshalJSON() ([]byte, error) {
	type embed Address
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*a),
		CreatedAt:  internal.NewOptionalDateTime(a.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(a.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (a *Address) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The address type.
//
// * `BILLING` - BILLING
// * `SHIPPING` - SHIPPING
type AddressAddressType struct {
	AddressTypeEnum AddressTypeEnum
	String          string

	typ string
}

func (a *AddressAddressType) GetAddressTypeEnum() AddressTypeEnum {
	if a == nil {
		return ""
	}
	return a.AddressTypeEnum
}

func (a *AddressAddressType) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AddressAddressType) UnmarshalJSON(data []byte) error {
	var valueAddressTypeEnum AddressTypeEnum
	if err := json.Unmarshal(data, &valueAddressTypeEnum); err == nil {
		a.typ = "AddressTypeEnum"
		a.AddressTypeEnum = valueAddressTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddressAddressType) MarshalJSON() ([]byte, error) {
	if a.typ == "AddressTypeEnum" || a.AddressTypeEnum != "" {
		return json.Marshal(a.AddressTypeEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AddressAddressTypeVisitor interface {
	VisitAddressTypeEnum(AddressTypeEnum) error
	VisitString(string) error
}

func (a *AddressAddressType) Accept(visitor AddressAddressTypeVisitor) error {
	if a.typ == "AddressTypeEnum" || a.AddressTypeEnum != "" {
		return visitor.VisitAddressTypeEnum(a.AddressTypeEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// The address's country.
//
// * `AF` - Afghanistan
// * `AX` - Åland Islands
// * `AL` - Albania
// * `DZ` - Algeria
// * `AS` - American Samoa
// * `AD` - Andorra
// * `AO` - Angola
// * `AI` - Anguilla
// * `AQ` - Antarctica
// * `AG` - Antigua and Barbuda
// * `AR` - Argentina
// * `AM` - Armenia
// * `AW` - Aruba
// * `AU` - Australia
// * `AT` - Austria
// * `AZ` - Azerbaijan
// * `BS` - Bahamas
// * `BH` - Bahrain
// * `BD` - Bangladesh
// * `BB` - Barbados
// * `BY` - Belarus
// * `BE` - Belgium
// * `BZ` - Belize
// * `BJ` - Benin
// * `BM` - Bermuda
// * `BT` - Bhutan
// * `BO` - Bolivia
// * `BQ` - Bonaire, Sint Eustatius and Saba
// * `BA` - Bosnia and Herzegovina
// * `BW` - Botswana
// * `BV` - Bouvet Island
// * `BR` - Brazil
// * `IO` - British Indian Ocean Territory
// * `BN` - Brunei
// * `BG` - Bulgaria
// * `BF` - Burkina Faso
// * `BI` - Burundi
// * `CV` - Cabo Verde
// * `KH` - Cambodia
// * `CM` - Cameroon
// * `CA` - Canada
// * `KY` - Cayman Islands
// * `CF` - Central African Republic
// * `TD` - Chad
// * `CL` - Chile
// * `CN` - China
// * `CX` - Christmas Island
// * `CC` - Cocos (Keeling) Islands
// * `CO` - Colombia
// * `KM` - Comoros
// * `CG` - Congo
// * `CD` - Congo (the Democratic Republic of the)
// * `CK` - Cook Islands
// * `CR` - Costa Rica
// * `CI` - Côte d'Ivoire
// * `HR` - Croatia
// * `CU` - Cuba
// * `CW` - Curaçao
// * `CY` - Cyprus
// * `CZ` - Czechia
// * `DK` - Denmark
// * `DJ` - Djibouti
// * `DM` - Dominica
// * `DO` - Dominican Republic
// * `EC` - Ecuador
// * `EG` - Egypt
// * `SV` - El Salvador
// * `GQ` - Equatorial Guinea
// * `ER` - Eritrea
// * `EE` - Estonia
// * `SZ` - Eswatini
// * `ET` - Ethiopia
// * `FK` - Falkland Islands (Malvinas)
// * `FO` - Faroe Islands
// * `FJ` - Fiji
// * `FI` - Finland
// * `FR` - France
// * `GF` - French Guiana
// * `PF` - French Polynesia
// * `TF` - French Southern Territories
// * `GA` - Gabon
// * `GM` - Gambia
// * `GE` - Georgia
// * `DE` - Germany
// * `GH` - Ghana
// * `GI` - Gibraltar
// * `GR` - Greece
// * `GL` - Greenland
// * `GD` - Grenada
// * `GP` - Guadeloupe
// * `GU` - Guam
// * `GT` - Guatemala
// * `GG` - Guernsey
// * `GN` - Guinea
// * `GW` - Guinea-Bissau
// * `GY` - Guyana
// * `HT` - Haiti
// * `HM` - Heard Island and McDonald Islands
// * `VA` - Holy See
// * `HN` - Honduras
// * `HK` - Hong Kong
// * `HU` - Hungary
// * `IS` - Iceland
// * `IN` - India
// * `ID` - Indonesia
// * `IR` - Iran
// * `IQ` - Iraq
// * `IE` - Ireland
// * `IM` - Isle of Man
// * `IL` - Israel
// * `IT` - Italy
// * `JM` - Jamaica
// * `JP` - Japan
// * `JE` - Jersey
// * `JO` - Jordan
// * `KZ` - Kazakhstan
// * `KE` - Kenya
// * `KI` - Kiribati
// * `KW` - Kuwait
// * `KG` - Kyrgyzstan
// * `LA` - Laos
// * `LV` - Latvia
// * `LB` - Lebanon
// * `LS` - Lesotho
// * `LR` - Liberia
// * `LY` - Libya
// * `LI` - Liechtenstein
// * `LT` - Lithuania
// * `LU` - Luxembourg
// * `MO` - Macao
// * `MG` - Madagascar
// * `MW` - Malawi
// * `MY` - Malaysia
// * `MV` - Maldives
// * `ML` - Mali
// * `MT` - Malta
// * `MH` - Marshall Islands
// * `MQ` - Martinique
// * `MR` - Mauritania
// * `MU` - Mauritius
// * `YT` - Mayotte
// * `MX` - Mexico
// * `FM` - Micronesia (Federated States of)
// * `MD` - Moldova
// * `MC` - Monaco
// * `MN` - Mongolia
// * `ME` - Montenegro
// * `MS` - Montserrat
// * `MA` - Morocco
// * `MZ` - Mozambique
// * `MM` - Myanmar
// * `NA` - Namibia
// * `NR` - Nauru
// * `NP` - Nepal
// * `NL` - Netherlands
// * `NC` - New Caledonia
// * `NZ` - New Zealand
// * `NI` - Nicaragua
// * `NE` - Niger
// * `NG` - Nigeria
// * `NU` - Niue
// * `NF` - Norfolk Island
// * `KP` - North Korea
// * `MK` - North Macedonia
// * `MP` - Northern Mariana Islands
// * `NO` - Norway
// * `OM` - Oman
// * `PK` - Pakistan
// * `PW` - Palau
// * `PS` - Palestine, State of
// * `PA` - Panama
// * `PG` - Papua New Guinea
// * `PY` - Paraguay
// * `PE` - Peru
// * `PH` - Philippines
// * `PN` - Pitcairn
// * `PL` - Poland
// * `PT` - Portugal
// * `PR` - Puerto Rico
// * `QA` - Qatar
// * `RE` - Réunion
// * `RO` - Romania
// * `RU` - Russia
// * `RW` - Rwanda
// * `BL` - Saint Barthélemy
// * `SH` - Saint Helena, Ascension and Tristan da Cunha
// * `KN` - Saint Kitts and Nevis
// * `LC` - Saint Lucia
// * `MF` - Saint Martin (French part)
// * `PM` - Saint Pierre and Miquelon
// * `VC` - Saint Vincent and the Grenadines
// * `WS` - Samoa
// * `SM` - San Marino
// * `ST` - Sao Tome and Principe
// * `SA` - Saudi Arabia
// * `SN` - Senegal
// * `RS` - Serbia
// * `SC` - Seychelles
// * `SL` - Sierra Leone
// * `SG` - Singapore
// * `SX` - Sint Maarten (Dutch part)
// * `SK` - Slovakia
// * `SI` - Slovenia
// * `SB` - Solomon Islands
// * `SO` - Somalia
// * `ZA` - South Africa
// * `GS` - South Georgia and the South Sandwich Islands
// * `KR` - South Korea
// * `SS` - South Sudan
// * `ES` - Spain
// * `LK` - Sri Lanka
// * `SD` - Sudan
// * `SR` - Suriname
// * `SJ` - Svalbard and Jan Mayen
// * `SE` - Sweden
// * `CH` - Switzerland
// * `SY` - Syria
// * `TW` - Taiwan
// * `TJ` - Tajikistan
// * `TZ` - Tanzania
// * `TH` - Thailand
// * `TL` - Timor-Leste
// * `TG` - Togo
// * `TK` - Tokelau
// * `TO` - Tonga
// * `TT` - Trinidad and Tobago
// * `TN` - Tunisia
// * `TR` - Turkey
// * `TM` - Turkmenistan
// * `TC` - Turks and Caicos Islands
// * `TV` - Tuvalu
// * `UG` - Uganda
// * `UA` - Ukraine
// * `AE` - United Arab Emirates
// * `GB` - United Kingdom
// * `UM` - United States Minor Outlying Islands
// * `US` - United States of America
// * `UY` - Uruguay
// * `UZ` - Uzbekistan
// * `VU` - Vanuatu
// * `VE` - Venezuela
// * `VN` - Vietnam
// * `VG` - Virgin Islands (British)
// * `VI` - Virgin Islands (U.S.)
// * `WF` - Wallis and Futuna
// * `EH` - Western Sahara
// * `YE` - Yemen
// * `ZM` - Zambia
// * `ZW` - Zimbabwe
type AddressCountry struct {
	CountryEnum CountryEnum
	String      string

	typ string
}

func (a *AddressCountry) GetCountryEnum() CountryEnum {
	if a == nil {
		return ""
	}
	return a.CountryEnum
}

func (a *AddressCountry) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AddressCountry) UnmarshalJSON(data []byte) error {
	var valueCountryEnum CountryEnum
	if err := json.Unmarshal(data, &valueCountryEnum); err == nil {
		a.typ = "CountryEnum"
		a.CountryEnum = valueCountryEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddressCountry) MarshalJSON() ([]byte, error) {
	if a.typ == "CountryEnum" || a.CountryEnum != "" {
		return json.Marshal(a.CountryEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AddressCountryVisitor interface {
	VisitCountryEnum(CountryEnum) error
	VisitString(string) error
}

func (a *AddressCountry) Accept(visitor AddressCountryVisitor) error {
	if a.typ == "CountryEnum" || a.CountryEnum != "" {
		return visitor.VisitCountryEnum(a.CountryEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// # The Address Object
// ### Description
// The `Address` object is used to represent an entity's address.
// ### Usage Example
// TODO
type AddressRequest struct {
	// Line 1 of the address's street.
	Street1 *string `json:"street_1,omitempty" url:"street_1,omitempty"`
	// Line 2 of the address's street.
	Street2 *string `json:"street_2,omitempty" url:"street_2,omitempty"`
	// The address's city.
	City *string `json:"city,omitempty" url:"city,omitempty"`
	// The address's state.
	State *string `json:"state,omitempty" url:"state,omitempty"`
	// The address's postal code.
	PostalCode *string `json:"postal_code,omitempty" url:"postal_code,omitempty"`
	// The address's country.
	//
	// * `AF` - Afghanistan
	// * `AX` - Åland Islands
	// * `AL` - Albania
	// * `DZ` - Algeria
	// * `AS` - American Samoa
	// * `AD` - Andorra
	// * `AO` - Angola
	// * `AI` - Anguilla
	// * `AQ` - Antarctica
	// * `AG` - Antigua and Barbuda
	// * `AR` - Argentina
	// * `AM` - Armenia
	// * `AW` - Aruba
	// * `AU` - Australia
	// * `AT` - Austria
	// * `AZ` - Azerbaijan
	// * `BS` - Bahamas
	// * `BH` - Bahrain
	// * `BD` - Bangladesh
	// * `BB` - Barbados
	// * `BY` - Belarus
	// * `BE` - Belgium
	// * `BZ` - Belize
	// * `BJ` - Benin
	// * `BM` - Bermuda
	// * `BT` - Bhutan
	// * `BO` - Bolivia
	// * `BQ` - Bonaire, Sint Eustatius and Saba
	// * `BA` - Bosnia and Herzegovina
	// * `BW` - Botswana
	// * `BV` - Bouvet Island
	// * `BR` - Brazil
	// * `IO` - British Indian Ocean Territory
	// * `BN` - Brunei
	// * `BG` - Bulgaria
	// * `BF` - Burkina Faso
	// * `BI` - Burundi
	// * `CV` - Cabo Verde
	// * `KH` - Cambodia
	// * `CM` - Cameroon
	// * `CA` - Canada
	// * `KY` - Cayman Islands
	// * `CF` - Central African Republic
	// * `TD` - Chad
	// * `CL` - Chile
	// * `CN` - China
	// * `CX` - Christmas Island
	// * `CC` - Cocos (Keeling) Islands
	// * `CO` - Colombia
	// * `KM` - Comoros
	// * `CG` - Congo
	// * `CD` - Congo (the Democratic Republic of the)
	// * `CK` - Cook Islands
	// * `CR` - Costa Rica
	// * `CI` - Côte d'Ivoire
	// * `HR` - Croatia
	// * `CU` - Cuba
	// * `CW` - Curaçao
	// * `CY` - Cyprus
	// * `CZ` - Czechia
	// * `DK` - Denmark
	// * `DJ` - Djibouti
	// * `DM` - Dominica
	// * `DO` - Dominican Republic
	// * `EC` - Ecuador
	// * `EG` - Egypt
	// * `SV` - El Salvador
	// * `GQ` - Equatorial Guinea
	// * `ER` - Eritrea
	// * `EE` - Estonia
	// * `SZ` - Eswatini
	// * `ET` - Ethiopia
	// * `FK` - Falkland Islands (Malvinas)
	// * `FO` - Faroe Islands
	// * `FJ` - Fiji
	// * `FI` - Finland
	// * `FR` - France
	// * `GF` - French Guiana
	// * `PF` - French Polynesia
	// * `TF` - French Southern Territories
	// * `GA` - Gabon
	// * `GM` - Gambia
	// * `GE` - Georgia
	// * `DE` - Germany
	// * `GH` - Ghana
	// * `GI` - Gibraltar
	// * `GR` - Greece
	// * `GL` - Greenland
	// * `GD` - Grenada
	// * `GP` - Guadeloupe
	// * `GU` - Guam
	// * `GT` - Guatemala
	// * `GG` - Guernsey
	// * `GN` - Guinea
	// * `GW` - Guinea-Bissau
	// * `GY` - Guyana
	// * `HT` - Haiti
	// * `HM` - Heard Island and McDonald Islands
	// * `VA` - Holy See
	// * `HN` - Honduras
	// * `HK` - Hong Kong
	// * `HU` - Hungary
	// * `IS` - Iceland
	// * `IN` - India
	// * `ID` - Indonesia
	// * `IR` - Iran
	// * `IQ` - Iraq
	// * `IE` - Ireland
	// * `IM` - Isle of Man
	// * `IL` - Israel
	// * `IT` - Italy
	// * `JM` - Jamaica
	// * `JP` - Japan
	// * `JE` - Jersey
	// * `JO` - Jordan
	// * `KZ` - Kazakhstan
	// * `KE` - Kenya
	// * `KI` - Kiribati
	// * `KW` - Kuwait
	// * `KG` - Kyrgyzstan
	// * `LA` - Laos
	// * `LV` - Latvia
	// * `LB` - Lebanon
	// * `LS` - Lesotho
	// * `LR` - Liberia
	// * `LY` - Libya
	// * `LI` - Liechtenstein
	// * `LT` - Lithuania
	// * `LU` - Luxembourg
	// * `MO` - Macao
	// * `MG` - Madagascar
	// * `MW` - Malawi
	// * `MY` - Malaysia
	// * `MV` - Maldives
	// * `ML` - Mali
	// * `MT` - Malta
	// * `MH` - Marshall Islands
	// * `MQ` - Martinique
	// * `MR` - Mauritania
	// * `MU` - Mauritius
	// * `YT` - Mayotte
	// * `MX` - Mexico
	// * `FM` - Micronesia (Federated States of)
	// * `MD` - Moldova
	// * `MC` - Monaco
	// * `MN` - Mongolia
	// * `ME` - Montenegro
	// * `MS` - Montserrat
	// * `MA` - Morocco
	// * `MZ` - Mozambique
	// * `MM` - Myanmar
	// * `NA` - Namibia
	// * `NR` - Nauru
	// * `NP` - Nepal
	// * `NL` - Netherlands
	// * `NC` - New Caledonia
	// * `NZ` - New Zealand
	// * `NI` - Nicaragua
	// * `NE` - Niger
	// * `NG` - Nigeria
	// * `NU` - Niue
	// * `NF` - Norfolk Island
	// * `KP` - North Korea
	// * `MK` - North Macedonia
	// * `MP` - Northern Mariana Islands
	// * `NO` - Norway
	// * `OM` - Oman
	// * `PK` - Pakistan
	// * `PW` - Palau
	// * `PS` - Palestine, State of
	// * `PA` - Panama
	// * `PG` - Papua New Guinea
	// * `PY` - Paraguay
	// * `PE` - Peru
	// * `PH` - Philippines
	// * `PN` - Pitcairn
	// * `PL` - Poland
	// * `PT` - Portugal
	// * `PR` - Puerto Rico
	// * `QA` - Qatar
	// * `RE` - Réunion
	// * `RO` - Romania
	// * `RU` - Russia
	// * `RW` - Rwanda
	// * `BL` - Saint Barthélemy
	// * `SH` - Saint Helena, Ascension and Tristan da Cunha
	// * `KN` - Saint Kitts and Nevis
	// * `LC` - Saint Lucia
	// * `MF` - Saint Martin (French part)
	// * `PM` - Saint Pierre and Miquelon
	// * `VC` - Saint Vincent and the Grenadines
	// * `WS` - Samoa
	// * `SM` - San Marino
	// * `ST` - Sao Tome and Principe
	// * `SA` - Saudi Arabia
	// * `SN` - Senegal
	// * `RS` - Serbia
	// * `SC` - Seychelles
	// * `SL` - Sierra Leone
	// * `SG` - Singapore
	// * `SX` - Sint Maarten (Dutch part)
	// * `SK` - Slovakia
	// * `SI` - Slovenia
	// * `SB` - Solomon Islands
	// * `SO` - Somalia
	// * `ZA` - South Africa
	// * `GS` - South Georgia and the South Sandwich Islands
	// * `KR` - South Korea
	// * `SS` - South Sudan
	// * `ES` - Spain
	// * `LK` - Sri Lanka
	// * `SD` - Sudan
	// * `SR` - Suriname
	// * `SJ` - Svalbard and Jan Mayen
	// * `SE` - Sweden
	// * `CH` - Switzerland
	// * `SY` - Syria
	// * `TW` - Taiwan
	// * `TJ` - Tajikistan
	// * `TZ` - Tanzania
	// * `TH` - Thailand
	// * `TL` - Timor-Leste
	// * `TG` - Togo
	// * `TK` - Tokelau
	// * `TO` - Tonga
	// * `TT` - Trinidad and Tobago
	// * `TN` - Tunisia
	// * `TR` - Turkey
	// * `TM` - Turkmenistan
	// * `TC` - Turks and Caicos Islands
	// * `TV` - Tuvalu
	// * `UG` - Uganda
	// * `UA` - Ukraine
	// * `AE` - United Arab Emirates
	// * `GB` - United Kingdom
	// * `UM` - United States Minor Outlying Islands
	// * `US` - United States of America
	// * `UY` - Uruguay
	// * `UZ` - Uzbekistan
	// * `VU` - Vanuatu
	// * `VE` - Venezuela
	// * `VN` - Vietnam
	// * `VG` - Virgin Islands (British)
	// * `VI` - Virgin Islands (U.S.)
	// * `WF` - Wallis and Futuna
	// * `EH` - Western Sahara
	// * `YE` - Yemen
	// * `ZM` - Zambia
	// * `ZW` - Zimbabwe
	Country *AddressRequestCountry `json:"country,omitempty" url:"country,omitempty"`
	// The address type.
	//
	// * `BILLING` - BILLING
	// * `SHIPPING` - SHIPPING
	AddressType         *AddressRequestAddressType `json:"address_type,omitempty" url:"address_type,omitempty"`
	IntegrationParams   map[string]interface{}     `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}     `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddressRequest) GetStreet1() *string {
	if a == nil {
		return nil
	}
	return a.Street1
}

func (a *AddressRequest) GetStreet2() *string {
	if a == nil {
		return nil
	}
	return a.Street2
}

func (a *AddressRequest) GetCity() *string {
	if a == nil {
		return nil
	}
	return a.City
}

func (a *AddressRequest) GetState() *string {
	if a == nil {
		return nil
	}
	return a.State
}

func (a *AddressRequest) GetPostalCode() *string {
	if a == nil {
		return nil
	}
	return a.PostalCode
}

func (a *AddressRequest) GetCountry() *AddressRequestCountry {
	if a == nil {
		return nil
	}
	return a.Country
}

func (a *AddressRequest) GetAddressType() *AddressRequestAddressType {
	if a == nil {
		return nil
	}
	return a.AddressType
}

func (a *AddressRequest) GetIntegrationParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.IntegrationParams
}

func (a *AddressRequest) GetLinkedAccountParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.LinkedAccountParams
}

func (a *AddressRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddressRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler AddressRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddressRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddressRequest) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The address type.
//
// * `BILLING` - BILLING
// * `SHIPPING` - SHIPPING
type AddressRequestAddressType struct {
	AddressTypeEnum AddressTypeEnum
	String          string

	typ string
}

func (a *AddressRequestAddressType) GetAddressTypeEnum() AddressTypeEnum {
	if a == nil {
		return ""
	}
	return a.AddressTypeEnum
}

func (a *AddressRequestAddressType) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AddressRequestAddressType) UnmarshalJSON(data []byte) error {
	var valueAddressTypeEnum AddressTypeEnum
	if err := json.Unmarshal(data, &valueAddressTypeEnum); err == nil {
		a.typ = "AddressTypeEnum"
		a.AddressTypeEnum = valueAddressTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddressRequestAddressType) MarshalJSON() ([]byte, error) {
	if a.typ == "AddressTypeEnum" || a.AddressTypeEnum != "" {
		return json.Marshal(a.AddressTypeEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AddressRequestAddressTypeVisitor interface {
	VisitAddressTypeEnum(AddressTypeEnum) error
	VisitString(string) error
}

func (a *AddressRequestAddressType) Accept(visitor AddressRequestAddressTypeVisitor) error {
	if a.typ == "AddressTypeEnum" || a.AddressTypeEnum != "" {
		return visitor.VisitAddressTypeEnum(a.AddressTypeEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// The address's country.
//
// * `AF` - Afghanistan
// * `AX` - Åland Islands
// * `AL` - Albania
// * `DZ` - Algeria
// * `AS` - American Samoa
// * `AD` - Andorra
// * `AO` - Angola
// * `AI` - Anguilla
// * `AQ` - Antarctica
// * `AG` - Antigua and Barbuda
// * `AR` - Argentina
// * `AM` - Armenia
// * `AW` - Aruba
// * `AU` - Australia
// * `AT` - Austria
// * `AZ` - Azerbaijan
// * `BS` - Bahamas
// * `BH` - Bahrain
// * `BD` - Bangladesh
// * `BB` - Barbados
// * `BY` - Belarus
// * `BE` - Belgium
// * `BZ` - Belize
// * `BJ` - Benin
// * `BM` - Bermuda
// * `BT` - Bhutan
// * `BO` - Bolivia
// * `BQ` - Bonaire, Sint Eustatius and Saba
// * `BA` - Bosnia and Herzegovina
// * `BW` - Botswana
// * `BV` - Bouvet Island
// * `BR` - Brazil
// * `IO` - British Indian Ocean Territory
// * `BN` - Brunei
// * `BG` - Bulgaria
// * `BF` - Burkina Faso
// * `BI` - Burundi
// * `CV` - Cabo Verde
// * `KH` - Cambodia
// * `CM` - Cameroon
// * `CA` - Canada
// * `KY` - Cayman Islands
// * `CF` - Central African Republic
// * `TD` - Chad
// * `CL` - Chile
// * `CN` - China
// * `CX` - Christmas Island
// * `CC` - Cocos (Keeling) Islands
// * `CO` - Colombia
// * `KM` - Comoros
// * `CG` - Congo
// * `CD` - Congo (the Democratic Republic of the)
// * `CK` - Cook Islands
// * `CR` - Costa Rica
// * `CI` - Côte d'Ivoire
// * `HR` - Croatia
// * `CU` - Cuba
// * `CW` - Curaçao
// * `CY` - Cyprus
// * `CZ` - Czechia
// * `DK` - Denmark
// * `DJ` - Djibouti
// * `DM` - Dominica
// * `DO` - Dominican Republic
// * `EC` - Ecuador
// * `EG` - Egypt
// * `SV` - El Salvador
// * `GQ` - Equatorial Guinea
// * `ER` - Eritrea
// * `EE` - Estonia
// * `SZ` - Eswatini
// * `ET` - Ethiopia
// * `FK` - Falkland Islands (Malvinas)
// * `FO` - Faroe Islands
// * `FJ` - Fiji
// * `FI` - Finland
// * `FR` - France
// * `GF` - French Guiana
// * `PF` - French Polynesia
// * `TF` - French Southern Territories
// * `GA` - Gabon
// * `GM` - Gambia
// * `GE` - Georgia
// * `DE` - Germany
// * `GH` - Ghana
// * `GI` - Gibraltar
// * `GR` - Greece
// * `GL` - Greenland
// * `GD` - Grenada
// * `GP` - Guadeloupe
// * `GU` - Guam
// * `GT` - Guatemala
// * `GG` - Guernsey
// * `GN` - Guinea
// * `GW` - Guinea-Bissau
// * `GY` - Guyana
// * `HT` - Haiti
// * `HM` - Heard Island and McDonald Islands
// * `VA` - Holy See
// * `HN` - Honduras
// * `HK` - Hong Kong
// * `HU` - Hungary
// * `IS` - Iceland
// * `IN` - India
// * `ID` - Indonesia
// * `IR` - Iran
// * `IQ` - Iraq
// * `IE` - Ireland
// * `IM` - Isle of Man
// * `IL` - Israel
// * `IT` - Italy
// * `JM` - Jamaica
// * `JP` - Japan
// * `JE` - Jersey
// * `JO` - Jordan
// * `KZ` - Kazakhstan
// * `KE` - Kenya
// * `KI` - Kiribati
// * `KW` - Kuwait
// * `KG` - Kyrgyzstan
// * `LA` - Laos
// * `LV` - Latvia
// * `LB` - Lebanon
// * `LS` - Lesotho
// * `LR` - Liberia
// * `LY` - Libya
// * `LI` - Liechtenstein
// * `LT` - Lithuania
// * `LU` - Luxembourg
// * `MO` - Macao
// * `MG` - Madagascar
// * `MW` - Malawi
// * `MY` - Malaysia
// * `MV` - Maldives
// * `ML` - Mali
// * `MT` - Malta
// * `MH` - Marshall Islands
// * `MQ` - Martinique
// * `MR` - Mauritania
// * `MU` - Mauritius
// * `YT` - Mayotte
// * `MX` - Mexico
// * `FM` - Micronesia (Federated States of)
// * `MD` - Moldova
// * `MC` - Monaco
// * `MN` - Mongolia
// * `ME` - Montenegro
// * `MS` - Montserrat
// * `MA` - Morocco
// * `MZ` - Mozambique
// * `MM` - Myanmar
// * `NA` - Namibia
// * `NR` - Nauru
// * `NP` - Nepal
// * `NL` - Netherlands
// * `NC` - New Caledonia
// * `NZ` - New Zealand
// * `NI` - Nicaragua
// * `NE` - Niger
// * `NG` - Nigeria
// * `NU` - Niue
// * `NF` - Norfolk Island
// * `KP` - North Korea
// * `MK` - North Macedonia
// * `MP` - Northern Mariana Islands
// * `NO` - Norway
// * `OM` - Oman
// * `PK` - Pakistan
// * `PW` - Palau
// * `PS` - Palestine, State of
// * `PA` - Panama
// * `PG` - Papua New Guinea
// * `PY` - Paraguay
// * `PE` - Peru
// * `PH` - Philippines
// * `PN` - Pitcairn
// * `PL` - Poland
// * `PT` - Portugal
// * `PR` - Puerto Rico
// * `QA` - Qatar
// * `RE` - Réunion
// * `RO` - Romania
// * `RU` - Russia
// * `RW` - Rwanda
// * `BL` - Saint Barthélemy
// * `SH` - Saint Helena, Ascension and Tristan da Cunha
// * `KN` - Saint Kitts and Nevis
// * `LC` - Saint Lucia
// * `MF` - Saint Martin (French part)
// * `PM` - Saint Pierre and Miquelon
// * `VC` - Saint Vincent and the Grenadines
// * `WS` - Samoa
// * `SM` - San Marino
// * `ST` - Sao Tome and Principe
// * `SA` - Saudi Arabia
// * `SN` - Senegal
// * `RS` - Serbia
// * `SC` - Seychelles
// * `SL` - Sierra Leone
// * `SG` - Singapore
// * `SX` - Sint Maarten (Dutch part)
// * `SK` - Slovakia
// * `SI` - Slovenia
// * `SB` - Solomon Islands
// * `SO` - Somalia
// * `ZA` - South Africa
// * `GS` - South Georgia and the South Sandwich Islands
// * `KR` - South Korea
// * `SS` - South Sudan
// * `ES` - Spain
// * `LK` - Sri Lanka
// * `SD` - Sudan
// * `SR` - Suriname
// * `SJ` - Svalbard and Jan Mayen
// * `SE` - Sweden
// * `CH` - Switzerland
// * `SY` - Syria
// * `TW` - Taiwan
// * `TJ` - Tajikistan
// * `TZ` - Tanzania
// * `TH` - Thailand
// * `TL` - Timor-Leste
// * `TG` - Togo
// * `TK` - Tokelau
// * `TO` - Tonga
// * `TT` - Trinidad and Tobago
// * `TN` - Tunisia
// * `TR` - Turkey
// * `TM` - Turkmenistan
// * `TC` - Turks and Caicos Islands
// * `TV` - Tuvalu
// * `UG` - Uganda
// * `UA` - Ukraine
// * `AE` - United Arab Emirates
// * `GB` - United Kingdom
// * `UM` - United States Minor Outlying Islands
// * `US` - United States of America
// * `UY` - Uruguay
// * `UZ` - Uzbekistan
// * `VU` - Vanuatu
// * `VE` - Venezuela
// * `VN` - Vietnam
// * `VG` - Virgin Islands (British)
// * `VI` - Virgin Islands (U.S.)
// * `WF` - Wallis and Futuna
// * `EH` - Western Sahara
// * `YE` - Yemen
// * `ZM` - Zambia
// * `ZW` - Zimbabwe
type AddressRequestCountry struct {
	CountryEnum CountryEnum
	String      string

	typ string
}

func (a *AddressRequestCountry) GetCountryEnum() CountryEnum {
	if a == nil {
		return ""
	}
	return a.CountryEnum
}

func (a *AddressRequestCountry) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AddressRequestCountry) UnmarshalJSON(data []byte) error {
	var valueCountryEnum CountryEnum
	if err := json.Unmarshal(data, &valueCountryEnum); err == nil {
		a.typ = "CountryEnum"
		a.CountryEnum = valueCountryEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddressRequestCountry) MarshalJSON() ([]byte, error) {
	if a.typ == "CountryEnum" || a.CountryEnum != "" {
		return json.Marshal(a.CountryEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AddressRequestCountryVisitor interface {
	VisitCountryEnum(CountryEnum) error
	VisitString(string) error
}

func (a *AddressRequestCountry) Accept(visitor AddressRequestCountryVisitor) error {
	if a.typ == "CountryEnum" || a.CountryEnum != "" {
		return visitor.VisitCountryEnum(a.CountryEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// * `BILLING` - BILLING
// * `SHIPPING` - SHIPPING
type AddressTypeEnum string

const (
	AddressTypeEnumBilling  AddressTypeEnum = "BILLING"
	AddressTypeEnumShipping AddressTypeEnum = "SHIPPING"
)

func NewAddressTypeEnumFromString(s string) (AddressTypeEnum, error) {
	switch s {
	case "BILLING":
		return AddressTypeEnumBilling, nil
	case "SHIPPING":
		return AddressTypeEnumShipping, nil
	}
	var t AddressTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AddressTypeEnum) Ptr() *AddressTypeEnum {
	return &a
}

type AssociationSubType struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	OriginType *string    `json:"origin_type,omitempty" url:"origin_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AssociationSubType) GetId() *string {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AssociationSubType) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AssociationSubType) GetModifiedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ModifiedAt
}

func (a *AssociationSubType) GetOriginType() *string {
	if a == nil {
		return nil
	}
	return a.OriginType
}

func (a *AssociationSubType) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AssociationSubType) UnmarshalJSON(data []byte) error {
	type embed AssociationSubType
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AssociationSubType(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AssociationSubType) MarshalJSON() ([]byte, error) {
	type embed AssociationSubType
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*a),
		CreatedAt:  internal.NewOptionalDateTime(a.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(a.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (a *AssociationSubType) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The AssociationType Object
// ### Description
// The `Association Type` object represents the relationship between two objects.
// ### Usage Example
// TODO
type AssociationType struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The class of the source object (Custom Object or Common Model) for the association type.
	SourceObjectClass   map[string]interface{}      `json:"source_object_class,omitempty" url:"source_object_class,omitempty"`
	TargetObjectClasses []*AssociationSubType       `json:"target_object_classes,omitempty" url:"target_object_classes,omitempty"`
	RemoteKeyName       *string                     `json:"remote_key_name,omitempty" url:"remote_key_name,omitempty"`
	DisplayName         *string                     `json:"display_name,omitempty" url:"display_name,omitempty"`
	Cardinality         *AssociationTypeCardinality `json:"cardinality,omitempty" url:"cardinality,omitempty"`
	IsRequired          *bool                       `json:"is_required,omitempty" url:"is_required,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AssociationType) GetId() *string {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AssociationType) GetRemoteId() *string {
	if a == nil {
		return nil
	}
	return a.RemoteId
}

func (a *AssociationType) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AssociationType) GetModifiedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ModifiedAt
}

func (a *AssociationType) GetSourceObjectClass() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.SourceObjectClass
}

func (a *AssociationType) GetTargetObjectClasses() []*AssociationSubType {
	if a == nil {
		return nil
	}
	return a.TargetObjectClasses
}

func (a *AssociationType) GetRemoteKeyName() *string {
	if a == nil {
		return nil
	}
	return a.RemoteKeyName
}

func (a *AssociationType) GetDisplayName() *string {
	if a == nil {
		return nil
	}
	return a.DisplayName
}

func (a *AssociationType) GetCardinality() *AssociationTypeCardinality {
	if a == nil {
		return nil
	}
	return a.Cardinality
}

func (a *AssociationType) GetIsRequired() *bool {
	if a == nil {
		return nil
	}
	return a.IsRequired
}

func (a *AssociationType) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AssociationType) UnmarshalJSON(data []byte) error {
	type embed AssociationType
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AssociationType(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	a.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AssociationType) MarshalJSON() ([]byte, error) {
	type embed AssociationType
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*a),
		CreatedAt:  internal.NewOptionalDateTime(a.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(a.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (a *AssociationType) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AssociationTypeCardinality struct {
	CardinalityEnum CardinalityEnum
	String          string

	typ string
}

func (a *AssociationTypeCardinality) GetCardinalityEnum() CardinalityEnum {
	if a == nil {
		return ""
	}
	return a.CardinalityEnum
}

func (a *AssociationTypeCardinality) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AssociationTypeCardinality) UnmarshalJSON(data []byte) error {
	var valueCardinalityEnum CardinalityEnum
	if err := json.Unmarshal(data, &valueCardinalityEnum); err == nil {
		a.typ = "CardinalityEnum"
		a.CardinalityEnum = valueCardinalityEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AssociationTypeCardinality) MarshalJSON() ([]byte, error) {
	if a.typ == "CardinalityEnum" || a.CardinalityEnum != "" {
		return json.Marshal(a.CardinalityEnum)
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AssociationTypeCardinalityVisitor interface {
	VisitCardinalityEnum(CardinalityEnum) error
	VisitString(string) error
}

func (a *AssociationTypeCardinality) Accept(visitor AssociationTypeCardinalityVisitor) error {
	if a.typ == "CardinalityEnum" || a.CardinalityEnum != "" {
		return visitor.VisitCardinalityEnum(a.CardinalityEnum)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// * `ONE_TO_ONE` - ONE_TO_ONE
// * `MANY_TO_ONE` - MANY_TO_ONE
// * `MANY_TO_MANY` - MANY_TO_MANY
// * `ONE_TO_MANY` - ONE_TO_MANY
type CardinalityEnum string

const (
	CardinalityEnumOneToOne   CardinalityEnum = "ONE_TO_ONE"
	CardinalityEnumManyToOne  CardinalityEnum = "MANY_TO_ONE"
	CardinalityEnumManyToMany CardinalityEnum = "MANY_TO_MANY"
	CardinalityEnumOneToMany  CardinalityEnum = "ONE_TO_MANY"
)

func NewCardinalityEnumFromString(s string) (CardinalityEnum, error) {
	switch s {
	case "ONE_TO_ONE":
		return CardinalityEnumOneToOne, nil
	case "MANY_TO_ONE":
		return CardinalityEnumManyToOne, nil
	case "MANY_TO_MANY":
		return CardinalityEnumManyToMany, nil
	case "ONE_TO_MANY":
		return CardinalityEnumOneToMany, nil
	}
	var t CardinalityEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CardinalityEnum) Ptr() *CardinalityEnum {
	return &c
}

// * `hris` - hris
// * `ats` - ats
// * `accounting` - accounting
// * `ticketing` - ticketing
// * `crm` - crm
// * `mktg` - mktg
// * `filestorage` - filestorage
type CategoriesEnum string

const (
	CategoriesEnumHris        CategoriesEnum = "hris"
	CategoriesEnumAts         CategoriesEnum = "ats"
	CategoriesEnumAccounting  CategoriesEnum = "accounting"
	CategoriesEnumTicketing   CategoriesEnum = "ticketing"
	CategoriesEnumCrm         CategoriesEnum = "crm"
	CategoriesEnumMktg        CategoriesEnum = "mktg"
	CategoriesEnumFilestorage CategoriesEnum = "filestorage"
)

func NewCategoriesEnumFromString(s string) (CategoriesEnum, error) {
	switch s {
	case "hris":
		return CategoriesEnumHris, nil
	case "ats":
		return CategoriesEnumAts, nil
	case "accounting":
		return CategoriesEnumAccounting, nil
	case "ticketing":
		return CategoriesEnumTicketing, nil
	case "crm":
		return CategoriesEnumCrm, nil
	case "mktg":
		return CategoriesEnumMktg, nil
	case "filestorage":
		return CategoriesEnumFilestorage, nil
	}
	var t CategoriesEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CategoriesEnum) Ptr() *CategoriesEnum {
	return &c
}

// * `hris` - hris
// * `ats` - ats
// * `accounting` - accounting
// * `ticketing` - ticketing
// * `crm` - crm
// * `mktg` - mktg
// * `filestorage` - filestorage
type CategoryEnum string

const (
	CategoryEnumHris        CategoryEnum = "hris"
	CategoryEnumAts         CategoryEnum = "ats"
	CategoryEnumAccounting  CategoryEnum = "accounting"
	CategoryEnumTicketing   CategoryEnum = "ticketing"
	CategoryEnumCrm         CategoryEnum = "crm"
	CategoryEnumMktg        CategoryEnum = "mktg"
	CategoryEnumFilestorage CategoryEnum = "filestorage"
)

func NewCategoryEnumFromString(s string) (CategoryEnum, error) {
	switch s {
	case "hris":
		return CategoryEnumHris, nil
	case "ats":
		return CategoryEnumAts, nil
	case "accounting":
		return CategoryEnumAccounting, nil
	case "ticketing":
		return CategoryEnumTicketing, nil
	case "crm":
		return CategoryEnumCrm, nil
	case "mktg":
		return CategoryEnumMktg, nil
	case "filestorage":
		return CategoryEnumFilestorage, nil
	}
	var t CategoryEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CategoryEnum) Ptr() *CategoryEnum {
	return &c
}

// # The Contact Object
// ### Description
// The `Contact` object is used to represent an existing point of contact at a company in a CRM system.
// ### Usage Example
// TODO
type Contact struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The contact's first name.
	FirstName *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	// The contact's last name.
	LastName *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	// The contact's account.
	Account *ContactAccount `json:"account,omitempty" url:"account,omitempty"`
	// The contact's owner.
	Owner          *ContactOwner   `json:"owner,omitempty" url:"owner,omitempty"`
	Addresses      []*Address      `json:"addresses,omitempty" url:"addresses,omitempty"`
	EmailAddresses []*EmailAddress `json:"email_addresses,omitempty" url:"email_addresses,omitempty"`
	PhoneNumbers   []*PhoneNumber  `json:"phone_numbers,omitempty" url:"phone_numbers,omitempty"`
	// When the contact's last activity occurred.
	LastActivityAt *time.Time `json:"last_activity_at,omitempty" url:"last_activity_at,omitempty"`
	// When the third party's contact was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty" url:"remote_created_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Contact) GetId() *string {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *Contact) GetRemoteId() *string {
	if c == nil {
		return nil
	}
	return c.RemoteId
}

func (c *Contact) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *Contact) GetModifiedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.ModifiedAt
}

func (c *Contact) GetFirstName() *string {
	if c == nil {
		return nil
	}
	return c.FirstName
}

func (c *Contact) GetLastName() *string {
	if c == nil {
		return nil
	}
	return c.LastName
}

func (c *Contact) GetAccount() *ContactAccount {
	if c == nil {
		return nil
	}
	return c.Account
}

func (c *Contact) GetOwner() *ContactOwner {
	if c == nil {
		return nil
	}
	return c.Owner
}

func (c *Contact) GetAddresses() []*Address {
	if c == nil {
		return nil
	}
	return c.Addresses
}

func (c *Contact) GetEmailAddresses() []*EmailAddress {
	if c == nil {
		return nil
	}
	return c.EmailAddresses
}

func (c *Contact) GetPhoneNumbers() []*PhoneNumber {
	if c == nil {
		return nil
	}
	return c.PhoneNumbers
}

func (c *Contact) GetLastActivityAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastActivityAt
}

func (c *Contact) GetRemoteCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.RemoteCreatedAt
}

func (c *Contact) GetRemoteWasDeleted() *bool {
	if c == nil {
		return nil
	}
	return c.RemoteWasDeleted
}

func (c *Contact) GetFieldMappings() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.FieldMappings
}

func (c *Contact) GetRemoteData() []*RemoteData {
	if c == nil {
		return nil
	}
	return c.RemoteData
}

func (c *Contact) GetRemoteFields() []*RemoteField {
	if c == nil {
		return nil
	}
	return c.RemoteFields
}

func (c *Contact) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Contact) UnmarshalJSON(data []byte) error {
	type embed Contact
	var unmarshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		LastActivityAt  *internal.DateTime `json:"last_activity_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = Contact(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	c.LastActivityAt = unmarshaler.LastActivityAt.TimePtr()
	c.RemoteCreatedAt = unmarshaler.RemoteCreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Contact) MarshalJSON() ([]byte, error) {
	type embed Contact
	var marshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		LastActivityAt  *internal.DateTime `json:"last_activity_at,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
	}{
		embed:           embed(*c),
		CreatedAt:       internal.NewOptionalDateTime(c.CreatedAt),
		ModifiedAt:      internal.NewOptionalDateTime(c.ModifiedAt),
		LastActivityAt:  internal.NewOptionalDateTime(c.LastActivityAt),
		RemoteCreatedAt: internal.NewOptionalDateTime(c.RemoteCreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *Contact) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The contact's account.
type ContactAccount struct {
	String  string
	Account *Account

	typ string
}

func (c *ContactAccount) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *ContactAccount) GetAccount() *Account {
	if c == nil {
		return nil
	}
	return c.Account
}

func (c *ContactAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		c.typ = "Account"
		c.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactAccount) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "Account" || c.Account != nil {
		return json.Marshal(c.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ContactAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (c *ContactAccount) Accept(visitor ContactAccountVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "Account" || c.Account != nil {
		return visitor.VisitAccount(c.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// The contact's owner.
type ContactOwner struct {
	String string
	User   *User

	typ string
}

func (c *ContactOwner) GetString() string {
	if c == nil {
		return ""
	}
	return c.String
}

func (c *ContactOwner) GetUser() *User {
	if c == nil {
		return nil
	}
	return c.User
}

func (c *ContactOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typ = "String"
		c.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		c.typ = "User"
		c.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactOwner) MarshalJSON() ([]byte, error) {
	if c.typ == "String" || c.String != "" {
		return json.Marshal(c.String)
	}
	if c.typ == "User" || c.User != nil {
		return json.Marshal(c.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ContactOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (c *ContactOwner) Accept(visitor ContactOwnerVisitor) error {
	if c.typ == "String" || c.String != "" {
		return visitor.VisitString(c.String)
	}
	if c.typ == "User" || c.User != nil {
		return visitor.VisitUser(c.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// * `AF` - Afghanistan
// * `AX` - Åland Islands
// * `AL` - Albania
// * `DZ` - Algeria
// * `AS` - American Samoa
// * `AD` - Andorra
// * `AO` - Angola
// * `AI` - Anguilla
// * `AQ` - Antarctica
// * `AG` - Antigua and Barbuda
// * `AR` - Argentina
// * `AM` - Armenia
// * `AW` - Aruba
// * `AU` - Australia
// * `AT` - Austria
// * `AZ` - Azerbaijan
// * `BS` - Bahamas
// * `BH` - Bahrain
// * `BD` - Bangladesh
// * `BB` - Barbados
// * `BY` - Belarus
// * `BE` - Belgium
// * `BZ` - Belize
// * `BJ` - Benin
// * `BM` - Bermuda
// * `BT` - Bhutan
// * `BO` - Bolivia
// * `BQ` - Bonaire, Sint Eustatius and Saba
// * `BA` - Bosnia and Herzegovina
// * `BW` - Botswana
// * `BV` - Bouvet Island
// * `BR` - Brazil
// * `IO` - British Indian Ocean Territory
// * `BN` - Brunei
// * `BG` - Bulgaria
// * `BF` - Burkina Faso
// * `BI` - Burundi
// * `CV` - Cabo Verde
// * `KH` - Cambodia
// * `CM` - Cameroon
// * `CA` - Canada
// * `KY` - Cayman Islands
// * `CF` - Central African Republic
// * `TD` - Chad
// * `CL` - Chile
// * `CN` - China
// * `CX` - Christmas Island
// * `CC` - Cocos (Keeling) Islands
// * `CO` - Colombia
// * `KM` - Comoros
// * `CG` - Congo
// * `CD` - Congo (the Democratic Republic of the)
// * `CK` - Cook Islands
// * `CR` - Costa Rica
// * `CI` - Côte d'Ivoire
// * `HR` - Croatia
// * `CU` - Cuba
// * `CW` - Curaçao
// * `CY` - Cyprus
// * `CZ` - Czechia
// * `DK` - Denmark
// * `DJ` - Djibouti
// * `DM` - Dominica
// * `DO` - Dominican Republic
// * `EC` - Ecuador
// * `EG` - Egypt
// * `SV` - El Salvador
// * `GQ` - Equatorial Guinea
// * `ER` - Eritrea
// * `EE` - Estonia
// * `SZ` - Eswatini
// * `ET` - Ethiopia
// * `FK` - Falkland Islands (Malvinas)
// * `FO` - Faroe Islands
// * `FJ` - Fiji
// * `FI` - Finland
// * `FR` - France
// * `GF` - French Guiana
// * `PF` - French Polynesia
// * `TF` - French Southern Territories
// * `GA` - Gabon
// * `GM` - Gambia
// * `GE` - Georgia
// * `DE` - Germany
// * `GH` - Ghana
// * `GI` - Gibraltar
// * `GR` - Greece
// * `GL` - Greenland
// * `GD` - Grenada
// * `GP` - Guadeloupe
// * `GU` - Guam
// * `GT` - Guatemala
// * `GG` - Guernsey
// * `GN` - Guinea
// * `GW` - Guinea-Bissau
// * `GY` - Guyana
// * `HT` - Haiti
// * `HM` - Heard Island and McDonald Islands
// * `VA` - Holy See
// * `HN` - Honduras
// * `HK` - Hong Kong
// * `HU` - Hungary
// * `IS` - Iceland
// * `IN` - India
// * `ID` - Indonesia
// * `IR` - Iran
// * `IQ` - Iraq
// * `IE` - Ireland
// * `IM` - Isle of Man
// * `IL` - Israel
// * `IT` - Italy
// * `JM` - Jamaica
// * `JP` - Japan
// * `JE` - Jersey
// * `JO` - Jordan
// * `KZ` - Kazakhstan
// * `KE` - Kenya
// * `KI` - Kiribati
// * `KW` - Kuwait
// * `KG` - Kyrgyzstan
// * `LA` - Laos
// * `LV` - Latvia
// * `LB` - Lebanon
// * `LS` - Lesotho
// * `LR` - Liberia
// * `LY` - Libya
// * `LI` - Liechtenstein
// * `LT` - Lithuania
// * `LU` - Luxembourg
// * `MO` - Macao
// * `MG` - Madagascar
// * `MW` - Malawi
// * `MY` - Malaysia
// * `MV` - Maldives
// * `ML` - Mali
// * `MT` - Malta
// * `MH` - Marshall Islands
// * `MQ` - Martinique
// * `MR` - Mauritania
// * `MU` - Mauritius
// * `YT` - Mayotte
// * `MX` - Mexico
// * `FM` - Micronesia (Federated States of)
// * `MD` - Moldova
// * `MC` - Monaco
// * `MN` - Mongolia
// * `ME` - Montenegro
// * `MS` - Montserrat
// * `MA` - Morocco
// * `MZ` - Mozambique
// * `MM` - Myanmar
// * `NA` - Namibia
// * `NR` - Nauru
// * `NP` - Nepal
// * `NL` - Netherlands
// * `NC` - New Caledonia
// * `NZ` - New Zealand
// * `NI` - Nicaragua
// * `NE` - Niger
// * `NG` - Nigeria
// * `NU` - Niue
// * `NF` - Norfolk Island
// * `KP` - North Korea
// * `MK` - North Macedonia
// * `MP` - Northern Mariana Islands
// * `NO` - Norway
// * `OM` - Oman
// * `PK` - Pakistan
// * `PW` - Palau
// * `PS` - Palestine, State of
// * `PA` - Panama
// * `PG` - Papua New Guinea
// * `PY` - Paraguay
// * `PE` - Peru
// * `PH` - Philippines
// * `PN` - Pitcairn
// * `PL` - Poland
// * `PT` - Portugal
// * `PR` - Puerto Rico
// * `QA` - Qatar
// * `RE` - Réunion
// * `RO` - Romania
// * `RU` - Russia
// * `RW` - Rwanda
// * `BL` - Saint Barthélemy
// * `SH` - Saint Helena, Ascension and Tristan da Cunha
// * `KN` - Saint Kitts and Nevis
// * `LC` - Saint Lucia
// * `MF` - Saint Martin (French part)
// * `PM` - Saint Pierre and Miquelon
// * `VC` - Saint Vincent and the Grenadines
// * `WS` - Samoa
// * `SM` - San Marino
// * `ST` - Sao Tome and Principe
// * `SA` - Saudi Arabia
// * `SN` - Senegal
// * `RS` - Serbia
// * `SC` - Seychelles
// * `SL` - Sierra Leone
// * `SG` - Singapore
// * `SX` - Sint Maarten (Dutch part)
// * `SK` - Slovakia
// * `SI` - Slovenia
// * `SB` - Solomon Islands
// * `SO` - Somalia
// * `ZA` - South Africa
// * `GS` - South Georgia and the South Sandwich Islands
// * `KR` - South Korea
// * `SS` - South Sudan
// * `ES` - Spain
// * `LK` - Sri Lanka
// * `SD` - Sudan
// * `SR` - Suriname
// * `SJ` - Svalbard and Jan Mayen
// * `SE` - Sweden
// * `CH` - Switzerland
// * `SY` - Syria
// * `TW` - Taiwan
// * `TJ` - Tajikistan
// * `TZ` - Tanzania
// * `TH` - Thailand
// * `TL` - Timor-Leste
// * `TG` - Togo
// * `TK` - Tokelau
// * `TO` - Tonga
// * `TT` - Trinidad and Tobago
// * `TN` - Tunisia
// * `TR` - Turkey
// * `TM` - Turkmenistan
// * `TC` - Turks and Caicos Islands
// * `TV` - Tuvalu
// * `UG` - Uganda
// * `UA` - Ukraine
// * `AE` - United Arab Emirates
// * `GB` - United Kingdom
// * `UM` - United States Minor Outlying Islands
// * `US` - United States of America
// * `UY` - Uruguay
// * `UZ` - Uzbekistan
// * `VU` - Vanuatu
// * `VE` - Venezuela
// * `VN` - Vietnam
// * `VG` - Virgin Islands (British)
// * `VI` - Virgin Islands (U.S.)
// * `WF` - Wallis and Futuna
// * `EH` - Western Sahara
// * `YE` - Yemen
// * `ZM` - Zambia
// * `ZW` - Zimbabwe
type CountryEnum string

const (
	CountryEnumAf CountryEnum = "AF"
	CountryEnumAx CountryEnum = "AX"
	CountryEnumAl CountryEnum = "AL"
	CountryEnumDz CountryEnum = "DZ"
	CountryEnumAs CountryEnum = "AS"
	CountryEnumAd CountryEnum = "AD"
	CountryEnumAo CountryEnum = "AO"
	CountryEnumAi CountryEnum = "AI"
	CountryEnumAq CountryEnum = "AQ"
	CountryEnumAg CountryEnum = "AG"
	CountryEnumAr CountryEnum = "AR"
	CountryEnumAm CountryEnum = "AM"
	CountryEnumAw CountryEnum = "AW"
	CountryEnumAu CountryEnum = "AU"
	CountryEnumAt CountryEnum = "AT"
	CountryEnumAz CountryEnum = "AZ"
	CountryEnumBs CountryEnum = "BS"
	CountryEnumBh CountryEnum = "BH"
	CountryEnumBd CountryEnum = "BD"
	CountryEnumBb CountryEnum = "BB"
	CountryEnumBy CountryEnum = "BY"
	CountryEnumBe CountryEnum = "BE"
	CountryEnumBz CountryEnum = "BZ"
	CountryEnumBj CountryEnum = "BJ"
	CountryEnumBm CountryEnum = "BM"
	CountryEnumBt CountryEnum = "BT"
	CountryEnumBo CountryEnum = "BO"
	CountryEnumBq CountryEnum = "BQ"
	CountryEnumBa CountryEnum = "BA"
	CountryEnumBw CountryEnum = "BW"
	CountryEnumBv CountryEnum = "BV"
	CountryEnumBr CountryEnum = "BR"
	CountryEnumIo CountryEnum = "IO"
	CountryEnumBn CountryEnum = "BN"
	CountryEnumBg CountryEnum = "BG"
	CountryEnumBf CountryEnum = "BF"
	CountryEnumBi CountryEnum = "BI"
	CountryEnumCv CountryEnum = "CV"
	CountryEnumKh CountryEnum = "KH"
	CountryEnumCm CountryEnum = "CM"
	CountryEnumCa CountryEnum = "CA"
	CountryEnumKy CountryEnum = "KY"
	CountryEnumCf CountryEnum = "CF"
	CountryEnumTd CountryEnum = "TD"
	CountryEnumCl CountryEnum = "CL"
	CountryEnumCn CountryEnum = "CN"
	CountryEnumCx CountryEnum = "CX"
	CountryEnumCc CountryEnum = "CC"
	CountryEnumCo CountryEnum = "CO"
	CountryEnumKm CountryEnum = "KM"
	CountryEnumCg CountryEnum = "CG"
	CountryEnumCd CountryEnum = "CD"
	CountryEnumCk CountryEnum = "CK"
	CountryEnumCr CountryEnum = "CR"
	CountryEnumCi CountryEnum = "CI"
	CountryEnumHr CountryEnum = "HR"
	CountryEnumCu CountryEnum = "CU"
	CountryEnumCw CountryEnum = "CW"
	CountryEnumCy CountryEnum = "CY"
	CountryEnumCz CountryEnum = "CZ"
	CountryEnumDk CountryEnum = "DK"
	CountryEnumDj CountryEnum = "DJ"
	CountryEnumDm CountryEnum = "DM"
	CountryEnumDo CountryEnum = "DO"
	CountryEnumEc CountryEnum = "EC"
	CountryEnumEg CountryEnum = "EG"
	CountryEnumSv CountryEnum = "SV"
	CountryEnumGq CountryEnum = "GQ"
	CountryEnumEr CountryEnum = "ER"
	CountryEnumEe CountryEnum = "EE"
	CountryEnumSz CountryEnum = "SZ"
	CountryEnumEt CountryEnum = "ET"
	CountryEnumFk CountryEnum = "FK"
	CountryEnumFo CountryEnum = "FO"
	CountryEnumFj CountryEnum = "FJ"
	CountryEnumFi CountryEnum = "FI"
	CountryEnumFr CountryEnum = "FR"
	CountryEnumGf CountryEnum = "GF"
	CountryEnumPf CountryEnum = "PF"
	CountryEnumTf CountryEnum = "TF"
	CountryEnumGa CountryEnum = "GA"
	CountryEnumGm CountryEnum = "GM"
	CountryEnumGe CountryEnum = "GE"
	CountryEnumDe CountryEnum = "DE"
	CountryEnumGh CountryEnum = "GH"
	CountryEnumGi CountryEnum = "GI"
	CountryEnumGr CountryEnum = "GR"
	CountryEnumGl CountryEnum = "GL"
	CountryEnumGd CountryEnum = "GD"
	CountryEnumGp CountryEnum = "GP"
	CountryEnumGu CountryEnum = "GU"
	CountryEnumGt CountryEnum = "GT"
	CountryEnumGg CountryEnum = "GG"
	CountryEnumGn CountryEnum = "GN"
	CountryEnumGw CountryEnum = "GW"
	CountryEnumGy CountryEnum = "GY"
	CountryEnumHt CountryEnum = "HT"
	CountryEnumHm CountryEnum = "HM"
	CountryEnumVa CountryEnum = "VA"
	CountryEnumHn CountryEnum = "HN"
	CountryEnumHk CountryEnum = "HK"
	CountryEnumHu CountryEnum = "HU"
	CountryEnumIs CountryEnum = "IS"
	CountryEnumIn CountryEnum = "IN"
	CountryEnumId CountryEnum = "ID"
	CountryEnumIr CountryEnum = "IR"
	CountryEnumIq CountryEnum = "IQ"
	CountryEnumIe CountryEnum = "IE"
	CountryEnumIm CountryEnum = "IM"
	CountryEnumIl CountryEnum = "IL"
	CountryEnumIt CountryEnum = "IT"
	CountryEnumJm CountryEnum = "JM"
	CountryEnumJp CountryEnum = "JP"
	CountryEnumJe CountryEnum = "JE"
	CountryEnumJo CountryEnum = "JO"
	CountryEnumKz CountryEnum = "KZ"
	CountryEnumKe CountryEnum = "KE"
	CountryEnumKi CountryEnum = "KI"
	CountryEnumKw CountryEnum = "KW"
	CountryEnumKg CountryEnum = "KG"
	CountryEnumLa CountryEnum = "LA"
	CountryEnumLv CountryEnum = "LV"
	CountryEnumLb CountryEnum = "LB"
	CountryEnumLs CountryEnum = "LS"
	CountryEnumLr CountryEnum = "LR"
	CountryEnumLy CountryEnum = "LY"
	CountryEnumLi CountryEnum = "LI"
	CountryEnumLt CountryEnum = "LT"
	CountryEnumLu CountryEnum = "LU"
	CountryEnumMo CountryEnum = "MO"
	CountryEnumMg CountryEnum = "MG"
	CountryEnumMw CountryEnum = "MW"
	CountryEnumMy CountryEnum = "MY"
	CountryEnumMv CountryEnum = "MV"
	CountryEnumMl CountryEnum = "ML"
	CountryEnumMt CountryEnum = "MT"
	CountryEnumMh CountryEnum = "MH"
	CountryEnumMq CountryEnum = "MQ"
	CountryEnumMr CountryEnum = "MR"
	CountryEnumMu CountryEnum = "MU"
	CountryEnumYt CountryEnum = "YT"
	CountryEnumMx CountryEnum = "MX"
	CountryEnumFm CountryEnum = "FM"
	CountryEnumMd CountryEnum = "MD"
	CountryEnumMc CountryEnum = "MC"
	CountryEnumMn CountryEnum = "MN"
	CountryEnumMe CountryEnum = "ME"
	CountryEnumMs CountryEnum = "MS"
	CountryEnumMa CountryEnum = "MA"
	CountryEnumMz CountryEnum = "MZ"
	CountryEnumMm CountryEnum = "MM"
	CountryEnumNa CountryEnum = "NA"
	CountryEnumNr CountryEnum = "NR"
	CountryEnumNp CountryEnum = "NP"
	CountryEnumNl CountryEnum = "NL"
	CountryEnumNc CountryEnum = "NC"
	CountryEnumNz CountryEnum = "NZ"
	CountryEnumNi CountryEnum = "NI"
	CountryEnumNe CountryEnum = "NE"
	CountryEnumNg CountryEnum = "NG"
	CountryEnumNu CountryEnum = "NU"
	CountryEnumNf CountryEnum = "NF"
	CountryEnumKp CountryEnum = "KP"
	CountryEnumMk CountryEnum = "MK"
	CountryEnumMp CountryEnum = "MP"
	CountryEnumNo CountryEnum = "NO"
	CountryEnumOm CountryEnum = "OM"
	CountryEnumPk CountryEnum = "PK"
	CountryEnumPw CountryEnum = "PW"
	CountryEnumPs CountryEnum = "PS"
	CountryEnumPa CountryEnum = "PA"
	CountryEnumPg CountryEnum = "PG"
	CountryEnumPy CountryEnum = "PY"
	CountryEnumPe CountryEnum = "PE"
	CountryEnumPh CountryEnum = "PH"
	CountryEnumPn CountryEnum = "PN"
	CountryEnumPl CountryEnum = "PL"
	CountryEnumPt CountryEnum = "PT"
	CountryEnumPr CountryEnum = "PR"
	CountryEnumQa CountryEnum = "QA"
	CountryEnumRe CountryEnum = "RE"
	CountryEnumRo CountryEnum = "RO"
	CountryEnumRu CountryEnum = "RU"
	CountryEnumRw CountryEnum = "RW"
	CountryEnumBl CountryEnum = "BL"
	CountryEnumSh CountryEnum = "SH"
	CountryEnumKn CountryEnum = "KN"
	CountryEnumLc CountryEnum = "LC"
	CountryEnumMf CountryEnum = "MF"
	CountryEnumPm CountryEnum = "PM"
	CountryEnumVc CountryEnum = "VC"
	CountryEnumWs CountryEnum = "WS"
	CountryEnumSm CountryEnum = "SM"
	CountryEnumSt CountryEnum = "ST"
	CountryEnumSa CountryEnum = "SA"
	CountryEnumSn CountryEnum = "SN"
	CountryEnumRs CountryEnum = "RS"
	CountryEnumSc CountryEnum = "SC"
	CountryEnumSl CountryEnum = "SL"
	CountryEnumSg CountryEnum = "SG"
	CountryEnumSx CountryEnum = "SX"
	CountryEnumSk CountryEnum = "SK"
	CountryEnumSi CountryEnum = "SI"
	CountryEnumSb CountryEnum = "SB"
	CountryEnumSo CountryEnum = "SO"
	CountryEnumZa CountryEnum = "ZA"
	CountryEnumGs CountryEnum = "GS"
	CountryEnumKr CountryEnum = "KR"
	CountryEnumSs CountryEnum = "SS"
	CountryEnumEs CountryEnum = "ES"
	CountryEnumLk CountryEnum = "LK"
	CountryEnumSd CountryEnum = "SD"
	CountryEnumSr CountryEnum = "SR"
	CountryEnumSj CountryEnum = "SJ"
	CountryEnumSe CountryEnum = "SE"
	CountryEnumCh CountryEnum = "CH"
	CountryEnumSy CountryEnum = "SY"
	CountryEnumTw CountryEnum = "TW"
	CountryEnumTj CountryEnum = "TJ"
	CountryEnumTz CountryEnum = "TZ"
	CountryEnumTh CountryEnum = "TH"
	CountryEnumTl CountryEnum = "TL"
	CountryEnumTg CountryEnum = "TG"
	CountryEnumTk CountryEnum = "TK"
	CountryEnumTo CountryEnum = "TO"
	CountryEnumTt CountryEnum = "TT"
	CountryEnumTn CountryEnum = "TN"
	CountryEnumTr CountryEnum = "TR"
	CountryEnumTm CountryEnum = "TM"
	CountryEnumTc CountryEnum = "TC"
	CountryEnumTv CountryEnum = "TV"
	CountryEnumUg CountryEnum = "UG"
	CountryEnumUa CountryEnum = "UA"
	CountryEnumAe CountryEnum = "AE"
	CountryEnumGb CountryEnum = "GB"
	CountryEnumUm CountryEnum = "UM"
	CountryEnumUs CountryEnum = "US"
	CountryEnumUy CountryEnum = "UY"
	CountryEnumUz CountryEnum = "UZ"
	CountryEnumVu CountryEnum = "VU"
	CountryEnumVe CountryEnum = "VE"
	CountryEnumVn CountryEnum = "VN"
	CountryEnumVg CountryEnum = "VG"
	CountryEnumVi CountryEnum = "VI"
	CountryEnumWf CountryEnum = "WF"
	CountryEnumEh CountryEnum = "EH"
	CountryEnumYe CountryEnum = "YE"
	CountryEnumZm CountryEnum = "ZM"
	CountryEnumZw CountryEnum = "ZW"
)

func NewCountryEnumFromString(s string) (CountryEnum, error) {
	switch s {
	case "AF":
		return CountryEnumAf, nil
	case "AX":
		return CountryEnumAx, nil
	case "AL":
		return CountryEnumAl, nil
	case "DZ":
		return CountryEnumDz, nil
	case "AS":
		return CountryEnumAs, nil
	case "AD":
		return CountryEnumAd, nil
	case "AO":
		return CountryEnumAo, nil
	case "AI":
		return CountryEnumAi, nil
	case "AQ":
		return CountryEnumAq, nil
	case "AG":
		return CountryEnumAg, nil
	case "AR":
		return CountryEnumAr, nil
	case "AM":
		return CountryEnumAm, nil
	case "AW":
		return CountryEnumAw, nil
	case "AU":
		return CountryEnumAu, nil
	case "AT":
		return CountryEnumAt, nil
	case "AZ":
		return CountryEnumAz, nil
	case "BS":
		return CountryEnumBs, nil
	case "BH":
		return CountryEnumBh, nil
	case "BD":
		return CountryEnumBd, nil
	case "BB":
		return CountryEnumBb, nil
	case "BY":
		return CountryEnumBy, nil
	case "BE":
		return CountryEnumBe, nil
	case "BZ":
		return CountryEnumBz, nil
	case "BJ":
		return CountryEnumBj, nil
	case "BM":
		return CountryEnumBm, nil
	case "BT":
		return CountryEnumBt, nil
	case "BO":
		return CountryEnumBo, nil
	case "BQ":
		return CountryEnumBq, nil
	case "BA":
		return CountryEnumBa, nil
	case "BW":
		return CountryEnumBw, nil
	case "BV":
		return CountryEnumBv, nil
	case "BR":
		return CountryEnumBr, nil
	case "IO":
		return CountryEnumIo, nil
	case "BN":
		return CountryEnumBn, nil
	case "BG":
		return CountryEnumBg, nil
	case "BF":
		return CountryEnumBf, nil
	case "BI":
		return CountryEnumBi, nil
	case "CV":
		return CountryEnumCv, nil
	case "KH":
		return CountryEnumKh, nil
	case "CM":
		return CountryEnumCm, nil
	case "CA":
		return CountryEnumCa, nil
	case "KY":
		return CountryEnumKy, nil
	case "CF":
		return CountryEnumCf, nil
	case "TD":
		return CountryEnumTd, nil
	case "CL":
		return CountryEnumCl, nil
	case "CN":
		return CountryEnumCn, nil
	case "CX":
		return CountryEnumCx, nil
	case "CC":
		return CountryEnumCc, nil
	case "CO":
		return CountryEnumCo, nil
	case "KM":
		return CountryEnumKm, nil
	case "CG":
		return CountryEnumCg, nil
	case "CD":
		return CountryEnumCd, nil
	case "CK":
		return CountryEnumCk, nil
	case "CR":
		return CountryEnumCr, nil
	case "CI":
		return CountryEnumCi, nil
	case "HR":
		return CountryEnumHr, nil
	case "CU":
		return CountryEnumCu, nil
	case "CW":
		return CountryEnumCw, nil
	case "CY":
		return CountryEnumCy, nil
	case "CZ":
		return CountryEnumCz, nil
	case "DK":
		return CountryEnumDk, nil
	case "DJ":
		return CountryEnumDj, nil
	case "DM":
		return CountryEnumDm, nil
	case "DO":
		return CountryEnumDo, nil
	case "EC":
		return CountryEnumEc, nil
	case "EG":
		return CountryEnumEg, nil
	case "SV":
		return CountryEnumSv, nil
	case "GQ":
		return CountryEnumGq, nil
	case "ER":
		return CountryEnumEr, nil
	case "EE":
		return CountryEnumEe, nil
	case "SZ":
		return CountryEnumSz, nil
	case "ET":
		return CountryEnumEt, nil
	case "FK":
		return CountryEnumFk, nil
	case "FO":
		return CountryEnumFo, nil
	case "FJ":
		return CountryEnumFj, nil
	case "FI":
		return CountryEnumFi, nil
	case "FR":
		return CountryEnumFr, nil
	case "GF":
		return CountryEnumGf, nil
	case "PF":
		return CountryEnumPf, nil
	case "TF":
		return CountryEnumTf, nil
	case "GA":
		return CountryEnumGa, nil
	case "GM":
		return CountryEnumGm, nil
	case "GE":
		return CountryEnumGe, nil
	case "DE":
		return CountryEnumDe, nil
	case "GH":
		return CountryEnumGh, nil
	case "GI":
		return CountryEnumGi, nil
	case "GR":
		return CountryEnumGr, nil
	case "GL":
		return CountryEnumGl, nil
	case "GD":
		return CountryEnumGd, nil
	case "GP":
		return CountryEnumGp, nil
	case "GU":
		return CountryEnumGu, nil
	case "GT":
		return CountryEnumGt, nil
	case "GG":
		return CountryEnumGg, nil
	case "GN":
		return CountryEnumGn, nil
	case "GW":
		return CountryEnumGw, nil
	case "GY":
		return CountryEnumGy, nil
	case "HT":
		return CountryEnumHt, nil
	case "HM":
		return CountryEnumHm, nil
	case "VA":
		return CountryEnumVa, nil
	case "HN":
		return CountryEnumHn, nil
	case "HK":
		return CountryEnumHk, nil
	case "HU":
		return CountryEnumHu, nil
	case "IS":
		return CountryEnumIs, nil
	case "IN":
		return CountryEnumIn, nil
	case "ID":
		return CountryEnumId, nil
	case "IR":
		return CountryEnumIr, nil
	case "IQ":
		return CountryEnumIq, nil
	case "IE":
		return CountryEnumIe, nil
	case "IM":
		return CountryEnumIm, nil
	case "IL":
		return CountryEnumIl, nil
	case "IT":
		return CountryEnumIt, nil
	case "JM":
		return CountryEnumJm, nil
	case "JP":
		return CountryEnumJp, nil
	case "JE":
		return CountryEnumJe, nil
	case "JO":
		return CountryEnumJo, nil
	case "KZ":
		return CountryEnumKz, nil
	case "KE":
		return CountryEnumKe, nil
	case "KI":
		return CountryEnumKi, nil
	case "KW":
		return CountryEnumKw, nil
	case "KG":
		return CountryEnumKg, nil
	case "LA":
		return CountryEnumLa, nil
	case "LV":
		return CountryEnumLv, nil
	case "LB":
		return CountryEnumLb, nil
	case "LS":
		return CountryEnumLs, nil
	case "LR":
		return CountryEnumLr, nil
	case "LY":
		return CountryEnumLy, nil
	case "LI":
		return CountryEnumLi, nil
	case "LT":
		return CountryEnumLt, nil
	case "LU":
		return CountryEnumLu, nil
	case "MO":
		return CountryEnumMo, nil
	case "MG":
		return CountryEnumMg, nil
	case "MW":
		return CountryEnumMw, nil
	case "MY":
		return CountryEnumMy, nil
	case "MV":
		return CountryEnumMv, nil
	case "ML":
		return CountryEnumMl, nil
	case "MT":
		return CountryEnumMt, nil
	case "MH":
		return CountryEnumMh, nil
	case "MQ":
		return CountryEnumMq, nil
	case "MR":
		return CountryEnumMr, nil
	case "MU":
		return CountryEnumMu, nil
	case "YT":
		return CountryEnumYt, nil
	case "MX":
		return CountryEnumMx, nil
	case "FM":
		return CountryEnumFm, nil
	case "MD":
		return CountryEnumMd, nil
	case "MC":
		return CountryEnumMc, nil
	case "MN":
		return CountryEnumMn, nil
	case "ME":
		return CountryEnumMe, nil
	case "MS":
		return CountryEnumMs, nil
	case "MA":
		return CountryEnumMa, nil
	case "MZ":
		return CountryEnumMz, nil
	case "MM":
		return CountryEnumMm, nil
	case "NA":
		return CountryEnumNa, nil
	case "NR":
		return CountryEnumNr, nil
	case "NP":
		return CountryEnumNp, nil
	case "NL":
		return CountryEnumNl, nil
	case "NC":
		return CountryEnumNc, nil
	case "NZ":
		return CountryEnumNz, nil
	case "NI":
		return CountryEnumNi, nil
	case "NE":
		return CountryEnumNe, nil
	case "NG":
		return CountryEnumNg, nil
	case "NU":
		return CountryEnumNu, nil
	case "NF":
		return CountryEnumNf, nil
	case "KP":
		return CountryEnumKp, nil
	case "MK":
		return CountryEnumMk, nil
	case "MP":
		return CountryEnumMp, nil
	case "NO":
		return CountryEnumNo, nil
	case "OM":
		return CountryEnumOm, nil
	case "PK":
		return CountryEnumPk, nil
	case "PW":
		return CountryEnumPw, nil
	case "PS":
		return CountryEnumPs, nil
	case "PA":
		return CountryEnumPa, nil
	case "PG":
		return CountryEnumPg, nil
	case "PY":
		return CountryEnumPy, nil
	case "PE":
		return CountryEnumPe, nil
	case "PH":
		return CountryEnumPh, nil
	case "PN":
		return CountryEnumPn, nil
	case "PL":
		return CountryEnumPl, nil
	case "PT":
		return CountryEnumPt, nil
	case "PR":
		return CountryEnumPr, nil
	case "QA":
		return CountryEnumQa, nil
	case "RE":
		return CountryEnumRe, nil
	case "RO":
		return CountryEnumRo, nil
	case "RU":
		return CountryEnumRu, nil
	case "RW":
		return CountryEnumRw, nil
	case "BL":
		return CountryEnumBl, nil
	case "SH":
		return CountryEnumSh, nil
	case "KN":
		return CountryEnumKn, nil
	case "LC":
		return CountryEnumLc, nil
	case "MF":
		return CountryEnumMf, nil
	case "PM":
		return CountryEnumPm, nil
	case "VC":
		return CountryEnumVc, nil
	case "WS":
		return CountryEnumWs, nil
	case "SM":
		return CountryEnumSm, nil
	case "ST":
		return CountryEnumSt, nil
	case "SA":
		return CountryEnumSa, nil
	case "SN":
		return CountryEnumSn, nil
	case "RS":
		return CountryEnumRs, nil
	case "SC":
		return CountryEnumSc, nil
	case "SL":
		return CountryEnumSl, nil
	case "SG":
		return CountryEnumSg, nil
	case "SX":
		return CountryEnumSx, nil
	case "SK":
		return CountryEnumSk, nil
	case "SI":
		return CountryEnumSi, nil
	case "SB":
		return CountryEnumSb, nil
	case "SO":
		return CountryEnumSo, nil
	case "ZA":
		return CountryEnumZa, nil
	case "GS":
		return CountryEnumGs, nil
	case "KR":
		return CountryEnumKr, nil
	case "SS":
		return CountryEnumSs, nil
	case "ES":
		return CountryEnumEs, nil
	case "LK":
		return CountryEnumLk, nil
	case "SD":
		return CountryEnumSd, nil
	case "SR":
		return CountryEnumSr, nil
	case "SJ":
		return CountryEnumSj, nil
	case "SE":
		return CountryEnumSe, nil
	case "CH":
		return CountryEnumCh, nil
	case "SY":
		return CountryEnumSy, nil
	case "TW":
		return CountryEnumTw, nil
	case "TJ":
		return CountryEnumTj, nil
	case "TZ":
		return CountryEnumTz, nil
	case "TH":
		return CountryEnumTh, nil
	case "TL":
		return CountryEnumTl, nil
	case "TG":
		return CountryEnumTg, nil
	case "TK":
		return CountryEnumTk, nil
	case "TO":
		return CountryEnumTo, nil
	case "TT":
		return CountryEnumTt, nil
	case "TN":
		return CountryEnumTn, nil
	case "TR":
		return CountryEnumTr, nil
	case "TM":
		return CountryEnumTm, nil
	case "TC":
		return CountryEnumTc, nil
	case "TV":
		return CountryEnumTv, nil
	case "UG":
		return CountryEnumUg, nil
	case "UA":
		return CountryEnumUa, nil
	case "AE":
		return CountryEnumAe, nil
	case "GB":
		return CountryEnumGb, nil
	case "UM":
		return CountryEnumUm, nil
	case "US":
		return CountryEnumUs, nil
	case "UY":
		return CountryEnumUy, nil
	case "UZ":
		return CountryEnumUz, nil
	case "VU":
		return CountryEnumVu, nil
	case "VE":
		return CountryEnumVe, nil
	case "VN":
		return CountryEnumVn, nil
	case "VG":
		return CountryEnumVg, nil
	case "VI":
		return CountryEnumVi, nil
	case "WF":
		return CountryEnumWf, nil
	case "EH":
		return CountryEnumEh, nil
	case "YE":
		return CountryEnumYe, nil
	case "ZM":
		return CountryEnumZm, nil
	case "ZW":
		return CountryEnumZw, nil
	}
	var t CountryEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountryEnum) Ptr() *CountryEnum {
	return &c
}

// # The DataPassthrough Object
// ### Description
// The `DataPassthrough` object is used to send information to an otherwise-unsupported third-party endpoint.
//
// ### Usage Example
// Create a `DataPassthrough` to get team hierarchies from your Rippling integration.
type DataPassthroughRequest struct {
	Method MethodEnum `json:"method" url:"method"`
	// The path of the request in the third party's platform.
	Path string `json:"path" url:"path"`
	// An optional override of the third party's base url for the request.
	BaseUrlOverride *string `json:"base_url_override,omitempty" url:"base_url_override,omitempty"`
	// The data with the request. You must include a `request_format` parameter matching the data's format
	Data *string `json:"data,omitempty" url:"data,omitempty"`
	// Pass an array of `MultipartFormField` objects in here instead of using the `data` param if `request_format` is set to `MULTIPART`.
	MultipartFormData []*MultipartFormFieldRequest `json:"multipart_form_data,omitempty" url:"multipart_form_data,omitempty"`
	// The headers to use for the request (Merge will handle the account's authorization headers). `Content-Type` header is required for passthrough. Choose content type corresponding to expected format of receiving server.
	Headers       map[string]interface{} `json:"headers,omitempty" url:"headers,omitempty"`
	RequestFormat *RequestFormatEnum     `json:"request_format,omitempty" url:"request_format,omitempty"`
	// Optional. If true, the response will always be an object of the form `{"type": T, "value": ...}` where `T` will be one of `string, boolean, number, null, array, object`.
	NormalizeResponse *bool `json:"normalize_response,omitempty" url:"normalize_response,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DataPassthroughRequest) GetMethod() MethodEnum {
	if d == nil {
		return ""
	}
	return d.Method
}

func (d *DataPassthroughRequest) GetPath() string {
	if d == nil {
		return ""
	}
	return d.Path
}

func (d *DataPassthroughRequest) GetBaseUrlOverride() *string {
	if d == nil {
		return nil
	}
	return d.BaseUrlOverride
}

func (d *DataPassthroughRequest) GetData() *string {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DataPassthroughRequest) GetMultipartFormData() []*MultipartFormFieldRequest {
	if d == nil {
		return nil
	}
	return d.MultipartFormData
}

func (d *DataPassthroughRequest) GetHeaders() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Headers
}

func (d *DataPassthroughRequest) GetRequestFormat() *RequestFormatEnum {
	if d == nil {
		return nil
	}
	return d.RequestFormat
}

func (d *DataPassthroughRequest) GetNormalizeResponse() *bool {
	if d == nil {
		return nil
	}
	return d.NormalizeResponse
}

func (d *DataPassthroughRequest) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DataPassthroughRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler DataPassthroughRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DataPassthroughRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DataPassthroughRequest) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DebugModeLog struct {
	LogId         string                `json:"log_id" url:"log_id"`
	DashboardView string                `json:"dashboard_view" url:"dashboard_view"`
	LogSummary    *DebugModelLogSummary `json:"log_summary" url:"log_summary"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DebugModeLog) GetLogId() string {
	if d == nil {
		return ""
	}
	return d.LogId
}

func (d *DebugModeLog) GetDashboardView() string {
	if d == nil {
		return ""
	}
	return d.DashboardView
}

func (d *DebugModeLog) GetLogSummary() *DebugModelLogSummary {
	if d == nil {
		return nil
	}
	return d.LogSummary
}

func (d *DebugModeLog) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DebugModeLog) UnmarshalJSON(data []byte) error {
	type unmarshaler DebugModeLog
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DebugModeLog(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DebugModeLog) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DebugModelLogSummary struct {
	Url        string `json:"url" url:"url"`
	Method     string `json:"method" url:"method"`
	StatusCode int    `json:"status_code" url:"status_code"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DebugModelLogSummary) GetUrl() string {
	if d == nil {
		return ""
	}
	return d.Url
}

func (d *DebugModelLogSummary) GetMethod() string {
	if d == nil {
		return ""
	}
	return d.Method
}

func (d *DebugModelLogSummary) GetStatusCode() int {
	if d == nil {
		return 0
	}
	return d.StatusCode
}

func (d *DebugModelLogSummary) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DebugModelLogSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler DebugModelLogSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DebugModelLogSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DebugModelLogSummary) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// # The EmailAddress Object
// ### Description
// The `EmailAddress` object is used to represent an entity's email address.
// ### Usage Example
// Fetch from the `GET Contact` endpoint and view their email addresses.
type EmailAddress struct {
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The email address.
	EmailAddress *string `json:"email_address,omitempty" url:"email_address,omitempty"`
	// The email address's type.
	EmailAddressType *string `json:"email_address_type,omitempty" url:"email_address_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailAddress) GetCreatedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *EmailAddress) GetModifiedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.ModifiedAt
}

func (e *EmailAddress) GetEmailAddress() *string {
	if e == nil {
		return nil
	}
	return e.EmailAddress
}

func (e *EmailAddress) GetEmailAddressType() *string {
	if e == nil {
		return nil
	}
	return e.EmailAddressType
}

func (e *EmailAddress) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailAddress) UnmarshalJSON(data []byte) error {
	type embed EmailAddress
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EmailAddress(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	e.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailAddress) MarshalJSON() ([]byte, error) {
	type embed EmailAddress
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*e),
		CreatedAt:  internal.NewOptionalDateTime(e.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(e.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EmailAddress) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// # The EmailAddress Object
// ### Description
// The `EmailAddress` object is used to represent an entity's email address.
// ### Usage Example
// Fetch from the `GET Contact` endpoint and view their email addresses.
type EmailAddressRequest struct {
	// The email address.
	EmailAddress *string `json:"email_address,omitempty" url:"email_address,omitempty"`
	// The email address's type.
	EmailAddressType    *string                `json:"email_address_type,omitempty" url:"email_address_type,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailAddressRequest) GetEmailAddress() *string {
	if e == nil {
		return nil
	}
	return e.EmailAddress
}

func (e *EmailAddressRequest) GetEmailAddressType() *string {
	if e == nil {
		return nil
	}
	return e.EmailAddressType
}

func (e *EmailAddressRequest) GetIntegrationParams() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.IntegrationParams
}

func (e *EmailAddressRequest) GetLinkedAccountParams() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.LinkedAccountParams
}

func (e *EmailAddressRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailAddressRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailAddressRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailAddressRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailAddressRequest) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// * `RAW` - RAW
// * `BASE64` - BASE64
// * `GZIP_BASE64` - GZIP_BASE64
type EncodingEnum string

const (
	EncodingEnumRaw        EncodingEnum = "RAW"
	EncodingEnumBase64     EncodingEnum = "BASE64"
	EncodingEnumGzipBase64 EncodingEnum = "GZIP_BASE64"
)

func NewEncodingEnumFromString(s string) (EncodingEnum, error) {
	switch s {
	case "RAW":
		return EncodingEnumRaw, nil
	case "BASE64":
		return EncodingEnumBase64, nil
	case "GZIP_BASE64":
		return EncodingEnumGzipBase64, nil
	}
	var t EncodingEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EncodingEnum) Ptr() *EncodingEnum {
	return &e
}

// # The Engagement Type Object
// ### Description
// The `Engagement Type` object is used to represent an interaction activity. A given `Engagement` typically has an `Engagement Type` object represented in the engagement_type field.
// ### Usage Example
// TODO
type EngagementType struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The engagement type's activity type.
	//
	// * `CALL` - CALL
	// * `MEETING` - MEETING
	// * `EMAIL` - EMAIL
	ActivityType *EngagementTypeActivityType `json:"activity_type,omitempty" url:"activity_type,omitempty"`
	// The engagement type's name.
	Name         *string        `json:"name,omitempty" url:"name,omitempty"`
	RemoteFields []*RemoteField `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EngagementType) GetId() *string {
	if e == nil {
		return nil
	}
	return e.Id
}

func (e *EngagementType) GetRemoteId() *string {
	if e == nil {
		return nil
	}
	return e.RemoteId
}

func (e *EngagementType) GetCreatedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *EngagementType) GetModifiedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.ModifiedAt
}

func (e *EngagementType) GetActivityType() *EngagementTypeActivityType {
	if e == nil {
		return nil
	}
	return e.ActivityType
}

func (e *EngagementType) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *EngagementType) GetRemoteFields() []*RemoteField {
	if e == nil {
		return nil
	}
	return e.RemoteFields
}

func (e *EngagementType) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EngagementType) UnmarshalJSON(data []byte) error {
	type embed EngagementType
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EngagementType(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	e.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EngagementType) MarshalJSON() ([]byte, error) {
	type embed EngagementType
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*e),
		CreatedAt:  internal.NewOptionalDateTime(e.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(e.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EngagementType) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The engagement type's activity type.
//
// * `CALL` - CALL
// * `MEETING` - MEETING
// * `EMAIL` - EMAIL
type EngagementTypeActivityType struct {
	ActivityTypeEnum ActivityTypeEnum
	String           string

	typ string
}

func (e *EngagementTypeActivityType) GetActivityTypeEnum() ActivityTypeEnum {
	if e == nil {
		return ""
	}
	return e.ActivityTypeEnum
}

func (e *EngagementTypeActivityType) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EngagementTypeActivityType) UnmarshalJSON(data []byte) error {
	var valueActivityTypeEnum ActivityTypeEnum
	if err := json.Unmarshal(data, &valueActivityTypeEnum); err == nil {
		e.typ = "ActivityTypeEnum"
		e.ActivityTypeEnum = valueActivityTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EngagementTypeActivityType) MarshalJSON() ([]byte, error) {
	if e.typ == "ActivityTypeEnum" || e.ActivityTypeEnum != "" {
		return json.Marshal(e.ActivityTypeEnum)
	}
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EngagementTypeActivityTypeVisitor interface {
	VisitActivityTypeEnum(ActivityTypeEnum) error
	VisitString(string) error
}

func (e *EngagementTypeActivityType) Accept(visitor EngagementTypeActivityTypeVisitor) error {
	if e.typ == "ActivityTypeEnum" || e.ActivityTypeEnum != "" {
		return visitor.VisitActivityTypeEnum(e.ActivityTypeEnum)
	}
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ErrorValidationProblem struct {
	Source      *ValidationProblemSource `json:"source,omitempty" url:"source,omitempty"`
	Title       string                   `json:"title" url:"title"`
	Detail      string                   `json:"detail" url:"detail"`
	ProblemType string                   `json:"problem_type" url:"problem_type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ErrorValidationProblem) GetSource() *ValidationProblemSource {
	if e == nil {
		return nil
	}
	return e.Source
}

func (e *ErrorValidationProblem) GetTitle() string {
	if e == nil {
		return ""
	}
	return e.Title
}

func (e *ErrorValidationProblem) GetDetail() string {
	if e == nil {
		return ""
	}
	return e.Detail
}

func (e *ErrorValidationProblem) GetProblemType() string {
	if e == nil {
		return ""
	}
	return e.ProblemType
}

func (e *ErrorValidationProblem) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorValidationProblem) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorValidationProblem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorValidationProblem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorValidationProblem) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// * `string` - string
// * `number` - number
// * `date` - date
// * `datetime` - datetime
// * `bool` - bool
// * `list` - list
type FieldFormatEnum string

const (
	FieldFormatEnumString   FieldFormatEnum = "string"
	FieldFormatEnumNumber   FieldFormatEnum = "number"
	FieldFormatEnumDate     FieldFormatEnum = "date"
	FieldFormatEnumDatetime FieldFormatEnum = "datetime"
	FieldFormatEnumBool     FieldFormatEnum = "bool"
	FieldFormatEnumList     FieldFormatEnum = "list"
)

func NewFieldFormatEnumFromString(s string) (FieldFormatEnum, error) {
	switch s {
	case "string":
		return FieldFormatEnumString, nil
	case "number":
		return FieldFormatEnumNumber, nil
	case "date":
		return FieldFormatEnumDate, nil
	case "datetime":
		return FieldFormatEnumDatetime, nil
	case "bool":
		return FieldFormatEnumBool, nil
	case "list":
		return FieldFormatEnumList, nil
	}
	var t FieldFormatEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FieldFormatEnum) Ptr() *FieldFormatEnum {
	return &f
}

type FieldPermissionDeserializerRequest struct {
	EnabledFields  []interface{} `json:"enabled_fields,omitempty" url:"enabled_fields,omitempty"`
	DisabledFields []interface{} `json:"disabled_fields,omitempty" url:"disabled_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FieldPermissionDeserializerRequest) GetEnabledFields() []interface{} {
	if f == nil {
		return nil
	}
	return f.EnabledFields
}

func (f *FieldPermissionDeserializerRequest) GetDisabledFields() []interface{} {
	if f == nil {
		return nil
	}
	return f.DisabledFields
}

func (f *FieldPermissionDeserializerRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FieldPermissionDeserializerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldPermissionDeserializerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldPermissionDeserializerRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldPermissionDeserializerRequest) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// * `string` - string
// * `number` - number
// * `date` - date
// * `datetime` - datetime
// * `bool` - bool
// * `list` - list
type FieldTypeEnum string

const (
	FieldTypeEnumString   FieldTypeEnum = "string"
	FieldTypeEnumNumber   FieldTypeEnum = "number"
	FieldTypeEnumDate     FieldTypeEnum = "date"
	FieldTypeEnumDatetime FieldTypeEnum = "datetime"
	FieldTypeEnumBool     FieldTypeEnum = "bool"
	FieldTypeEnumList     FieldTypeEnum = "list"
)

func NewFieldTypeEnumFromString(s string) (FieldTypeEnum, error) {
	switch s {
	case "string":
		return FieldTypeEnumString, nil
	case "number":
		return FieldTypeEnumNumber, nil
	case "date":
		return FieldTypeEnumDate, nil
	case "datetime":
		return FieldTypeEnumDatetime, nil
	case "bool":
		return FieldTypeEnumBool, nil
	case "list":
		return FieldTypeEnumList, nil
	}
	var t FieldTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FieldTypeEnum) Ptr() *FieldTypeEnum {
	return &f
}

type IgnoreCommonModelRequest struct {
	Reason  *IgnoreCommonModelRequestReason `json:"reason" url:"reason"`
	Message *string                         `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IgnoreCommonModelRequest) GetReason() *IgnoreCommonModelRequestReason {
	if i == nil {
		return nil
	}
	return i.Reason
}

func (i *IgnoreCommonModelRequest) GetMessage() *string {
	if i == nil {
		return nil
	}
	return i.Message
}

func (i *IgnoreCommonModelRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IgnoreCommonModelRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler IgnoreCommonModelRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IgnoreCommonModelRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IgnoreCommonModelRequest) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IgnoreCommonModelRequestReason struct {
	ReasonEnum ReasonEnum
	String     string

	typ string
}

func (i *IgnoreCommonModelRequestReason) GetReasonEnum() ReasonEnum {
	if i == nil {
		return ""
	}
	return i.ReasonEnum
}

func (i *IgnoreCommonModelRequestReason) GetString() string {
	if i == nil {
		return ""
	}
	return i.String
}

func (i *IgnoreCommonModelRequestReason) UnmarshalJSON(data []byte) error {
	var valueReasonEnum ReasonEnum
	if err := json.Unmarshal(data, &valueReasonEnum); err == nil {
		i.typ = "ReasonEnum"
		i.ReasonEnum = valueReasonEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typ = "String"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IgnoreCommonModelRequestReason) MarshalJSON() ([]byte, error) {
	if i.typ == "ReasonEnum" || i.ReasonEnum != "" {
		return json.Marshal(i.ReasonEnum)
	}
	if i.typ == "String" || i.String != "" {
		return json.Marshal(i.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IgnoreCommonModelRequestReasonVisitor interface {
	VisitReasonEnum(ReasonEnum) error
	VisitString(string) error
}

func (i *IgnoreCommonModelRequestReason) Accept(visitor IgnoreCommonModelRequestReasonVisitor) error {
	if i.typ == "ReasonEnum" || i.ReasonEnum != "" {
		return visitor.VisitReasonEnum(i.ReasonEnum)
	}
	if i.typ == "String" || i.String != "" {
		return visitor.VisitString(i.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IndividualCommonModelScopeDeserializerRequest struct {
	ModelName        string                                         `json:"model_name" url:"model_name"`
	ModelPermissions map[string]*ModelPermissionDeserializerRequest `json:"model_permissions,omitempty" url:"model_permissions,omitempty"`
	FieldPermissions *FieldPermissionDeserializerRequest            `json:"field_permissions,omitempty" url:"field_permissions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IndividualCommonModelScopeDeserializerRequest) GetModelName() string {
	if i == nil {
		return ""
	}
	return i.ModelName
}

func (i *IndividualCommonModelScopeDeserializerRequest) GetModelPermissions() map[string]*ModelPermissionDeserializerRequest {
	if i == nil {
		return nil
	}
	return i.ModelPermissions
}

func (i *IndividualCommonModelScopeDeserializerRequest) GetFieldPermissions() *FieldPermissionDeserializerRequest {
	if i == nil {
		return nil
	}
	return i.FieldPermissions
}

func (i *IndividualCommonModelScopeDeserializerRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IndividualCommonModelScopeDeserializerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler IndividualCommonModelScopeDeserializerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IndividualCommonModelScopeDeserializerRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IndividualCommonModelScopeDeserializerRequest) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// * `string` - uuid
// * `number` - url
// * `date` - email
// * `datetime` - phone
// * `bool` - currency
// * `list` - decimal
type ItemFormatEnum string

const (
	ItemFormatEnumString   ItemFormatEnum = "string"
	ItemFormatEnumNumber   ItemFormatEnum = "number"
	ItemFormatEnumDate     ItemFormatEnum = "date"
	ItemFormatEnumDatetime ItemFormatEnum = "datetime"
	ItemFormatEnumBool     ItemFormatEnum = "bool"
	ItemFormatEnumList     ItemFormatEnum = "list"
)

func NewItemFormatEnumFromString(s string) (ItemFormatEnum, error) {
	switch s {
	case "string":
		return ItemFormatEnumString, nil
	case "number":
		return ItemFormatEnumNumber, nil
	case "date":
		return ItemFormatEnumDate, nil
	case "datetime":
		return ItemFormatEnumDatetime, nil
	case "bool":
		return ItemFormatEnumBool, nil
	case "list":
		return ItemFormatEnumList, nil
	}
	var t ItemFormatEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i ItemFormatEnum) Ptr() *ItemFormatEnum {
	return &i
}

type ItemSchema struct {
	ItemType    *ItemTypeEnum   `json:"item_type,omitempty" url:"item_type,omitempty"`
	ItemFormat  *ItemFormatEnum `json:"item_format,omitempty" url:"item_format,omitempty"`
	ItemChoices []string        `json:"item_choices,omitempty" url:"item_choices,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *ItemSchema) GetItemType() *ItemTypeEnum {
	if i == nil {
		return nil
	}
	return i.ItemType
}

func (i *ItemSchema) GetItemFormat() *ItemFormatEnum {
	if i == nil {
		return nil
	}
	return i.ItemFormat
}

func (i *ItemSchema) GetItemChoices() []string {
	if i == nil {
		return nil
	}
	return i.ItemChoices
}

func (i *ItemSchema) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ItemSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler ItemSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ItemSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *ItemSchema) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// * `string` - string
// * `number` - number
// * `date` - date
// * `datetime` - datetime
// * `bool` - bool
// * `list` - list
type ItemTypeEnum string

const (
	ItemTypeEnumString   ItemTypeEnum = "string"
	ItemTypeEnumNumber   ItemTypeEnum = "number"
	ItemTypeEnumDate     ItemTypeEnum = "date"
	ItemTypeEnumDatetime ItemTypeEnum = "datetime"
	ItemTypeEnumBool     ItemTypeEnum = "bool"
	ItemTypeEnumList     ItemTypeEnum = "list"
)

func NewItemTypeEnumFromString(s string) (ItemTypeEnum, error) {
	switch s {
	case "string":
		return ItemTypeEnumString, nil
	case "number":
		return ItemTypeEnumNumber, nil
	case "date":
		return ItemTypeEnumDate, nil
	case "datetime":
		return ItemTypeEnumDatetime, nil
	case "bool":
		return ItemTypeEnumBool, nil
	case "list":
		return ItemTypeEnumList, nil
	}
	var t ItemTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i ItemTypeEnum) Ptr() *ItemTypeEnum {
	return &i
}

// * `SYNCING` - SYNCING
// * `DONE` - DONE
// * `FAILED` - FAILED
// * `DISABLED` - DISABLED
// * `PAUSED` - PAUSED
// * `PARTIALLY_SYNCED` - PARTIALLY_SYNCED
type LastSyncResultEnum string

const (
	LastSyncResultEnumSyncing         LastSyncResultEnum = "SYNCING"
	LastSyncResultEnumDone            LastSyncResultEnum = "DONE"
	LastSyncResultEnumFailed          LastSyncResultEnum = "FAILED"
	LastSyncResultEnumDisabled        LastSyncResultEnum = "DISABLED"
	LastSyncResultEnumPaused          LastSyncResultEnum = "PAUSED"
	LastSyncResultEnumPartiallySynced LastSyncResultEnum = "PARTIALLY_SYNCED"
)

func NewLastSyncResultEnumFromString(s string) (LastSyncResultEnum, error) {
	switch s {
	case "SYNCING":
		return LastSyncResultEnumSyncing, nil
	case "DONE":
		return LastSyncResultEnumDone, nil
	case "FAILED":
		return LastSyncResultEnumFailed, nil
	case "DISABLED":
		return LastSyncResultEnumDisabled, nil
	case "PAUSED":
		return LastSyncResultEnumPaused, nil
	case "PARTIALLY_SYNCED":
		return LastSyncResultEnumPartiallySynced, nil
	}
	var t LastSyncResultEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LastSyncResultEnum) Ptr() *LastSyncResultEnum {
	return &l
}

type LinkedAccountStatus struct {
	LinkedAccountStatus string `json:"linked_account_status" url:"linked_account_status"`
	CanMakeRequest      bool   `json:"can_make_request" url:"can_make_request"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LinkedAccountStatus) GetLinkedAccountStatus() string {
	if l == nil {
		return ""
	}
	return l.LinkedAccountStatus
}

func (l *LinkedAccountStatus) GetCanMakeRequest() bool {
	if l == nil {
		return false
	}
	return l.CanMakeRequest
}

func (l *LinkedAccountStatus) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LinkedAccountStatus) UnmarshalJSON(data []byte) error {
	type unmarshaler LinkedAccountStatus
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LinkedAccountStatus(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LinkedAccountStatus) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type MetaResponse struct {
	RequestSchema                  map[string]interface{} `json:"request_schema" url:"request_schema"`
	RemoteFieldClasses             map[string]interface{} `json:"remote_field_classes,omitempty" url:"remote_field_classes,omitempty"`
	Status                         *LinkedAccountStatus   `json:"status,omitempty" url:"status,omitempty"`
	HasConditionalParams           bool                   `json:"has_conditional_params" url:"has_conditional_params"`
	HasRequiredLinkedAccountParams bool                   `json:"has_required_linked_account_params" url:"has_required_linked_account_params"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MetaResponse) GetRequestSchema() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.RequestSchema
}

func (m *MetaResponse) GetRemoteFieldClasses() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.RemoteFieldClasses
}

func (m *MetaResponse) GetStatus() *LinkedAccountStatus {
	if m == nil {
		return nil
	}
	return m.Status
}

func (m *MetaResponse) GetHasConditionalParams() bool {
	if m == nil {
		return false
	}
	return m.HasConditionalParams
}

func (m *MetaResponse) GetHasRequiredLinkedAccountParams() bool {
	if m == nil {
		return false
	}
	return m.HasRequiredLinkedAccountParams
}

func (m *MetaResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetaResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MetaResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetaResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetaResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// * `GET` - GET
// * `OPTIONS` - OPTIONS
// * `HEAD` - HEAD
// * `POST` - POST
// * `PUT` - PUT
// * `PATCH` - PATCH
// * `DELETE` - DELETE
type MethodEnum string

const (
	MethodEnumGet     MethodEnum = "GET"
	MethodEnumOptions MethodEnum = "OPTIONS"
	MethodEnumHead    MethodEnum = "HEAD"
	MethodEnumPost    MethodEnum = "POST"
	MethodEnumPut     MethodEnum = "PUT"
	MethodEnumPatch   MethodEnum = "PATCH"
	MethodEnumDelete  MethodEnum = "DELETE"
)

func NewMethodEnumFromString(s string) (MethodEnum, error) {
	switch s {
	case "GET":
		return MethodEnumGet, nil
	case "OPTIONS":
		return MethodEnumOptions, nil
	case "HEAD":
		return MethodEnumHead, nil
	case "POST":
		return MethodEnumPost, nil
	case "PUT":
		return MethodEnumPut, nil
	case "PATCH":
		return MethodEnumPatch, nil
	case "DELETE":
		return MethodEnumDelete, nil
	}
	var t MethodEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MethodEnum) Ptr() *MethodEnum {
	return &m
}

// # The ModelOperation Object
// ### Description
// The `ModelOperation` object is used to represent the operations that are currently supported for a given model.
//
// ### Usage Example
// View what operations are supported for the `Candidate` endpoint.
type ModelOperation struct {
	ModelName              string   `json:"model_name" url:"model_name"`
	AvailableOperations    []string `json:"available_operations" url:"available_operations"`
	RequiredPostParameters []string `json:"required_post_parameters" url:"required_post_parameters"`
	SupportedFields        []string `json:"supported_fields" url:"supported_fields"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *ModelOperation) GetModelName() string {
	if m == nil {
		return ""
	}
	return m.ModelName
}

func (m *ModelOperation) GetAvailableOperations() []string {
	if m == nil {
		return nil
	}
	return m.AvailableOperations
}

func (m *ModelOperation) GetRequiredPostParameters() []string {
	if m == nil {
		return nil
	}
	return m.RequiredPostParameters
}

func (m *ModelOperation) GetSupportedFields() []string {
	if m == nil {
		return nil
	}
	return m.SupportedFields
}

func (m *ModelOperation) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *ModelOperation) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelOperation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelOperation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelOperation) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelPermissionDeserializerRequest struct {
	IsEnabled *bool `json:"is_enabled,omitempty" url:"is_enabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *ModelPermissionDeserializerRequest) GetIsEnabled() *bool {
	if m == nil {
		return nil
	}
	return m.IsEnabled
}

func (m *ModelPermissionDeserializerRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *ModelPermissionDeserializerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelPermissionDeserializerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelPermissionDeserializerRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelPermissionDeserializerRequest) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// # The MultipartFormField Object
// ### Description
// The `MultipartFormField` object is used to represent fields in an HTTP request using `multipart/form-data`.
//
// ### Usage Example
// Create a `MultipartFormField` to define a multipart form entry.
type MultipartFormFieldRequest struct {
	// The name of the form field
	Name string `json:"name" url:"name"`
	// The data for the form field.
	Data string `json:"data" url:"data"`
	// The encoding of the value of `data`. Defaults to `RAW` if not defined.
	//
	// * `RAW` - RAW
	// * `BASE64` - BASE64
	// * `GZIP_BASE64` - GZIP_BASE64
	Encoding *MultipartFormFieldRequestEncoding `json:"encoding,omitempty" url:"encoding,omitempty"`
	// The file name of the form field, if the field is for a file.
	FileName *string `json:"file_name,omitempty" url:"file_name,omitempty"`
	// The MIME type of the file, if the field is for a file.
	ContentType *string `json:"content_type,omitempty" url:"content_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MultipartFormFieldRequest) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MultipartFormFieldRequest) GetData() string {
	if m == nil {
		return ""
	}
	return m.Data
}

func (m *MultipartFormFieldRequest) GetEncoding() *MultipartFormFieldRequestEncoding {
	if m == nil {
		return nil
	}
	return m.Encoding
}

func (m *MultipartFormFieldRequest) GetFileName() *string {
	if m == nil {
		return nil
	}
	return m.FileName
}

func (m *MultipartFormFieldRequest) GetContentType() *string {
	if m == nil {
		return nil
	}
	return m.ContentType
}

func (m *MultipartFormFieldRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MultipartFormFieldRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MultipartFormFieldRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MultipartFormFieldRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MultipartFormFieldRequest) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// The encoding of the value of `data`. Defaults to `RAW` if not defined.
//
// * `RAW` - RAW
// * `BASE64` - BASE64
// * `GZIP_BASE64` - GZIP_BASE64
type MultipartFormFieldRequestEncoding struct {
	EncodingEnum EncodingEnum
	String       string

	typ string
}

func (m *MultipartFormFieldRequestEncoding) GetEncodingEnum() EncodingEnum {
	if m == nil {
		return ""
	}
	return m.EncodingEnum
}

func (m *MultipartFormFieldRequestEncoding) GetString() string {
	if m == nil {
		return ""
	}
	return m.String
}

func (m *MultipartFormFieldRequestEncoding) UnmarshalJSON(data []byte) error {
	var valueEncodingEnum EncodingEnum
	if err := json.Unmarshal(data, &valueEncodingEnum); err == nil {
		m.typ = "EncodingEnum"
		m.EncodingEnum = valueEncodingEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		m.typ = "String"
		m.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MultipartFormFieldRequestEncoding) MarshalJSON() ([]byte, error) {
	if m.typ == "EncodingEnum" || m.EncodingEnum != "" {
		return json.Marshal(m.EncodingEnum)
	}
	if m.typ == "String" || m.String != "" {
		return json.Marshal(m.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", m)
}

type MultipartFormFieldRequestEncodingVisitor interface {
	VisitEncodingEnum(EncodingEnum) error
	VisitString(string) error
}

func (m *MultipartFormFieldRequestEncoding) Accept(visitor MultipartFormFieldRequestEncodingVisitor) error {
	if m.typ == "EncodingEnum" || m.EncodingEnum != "" {
		return visitor.VisitEncodingEnum(m.EncodingEnum)
	}
	if m.typ == "String" || m.String != "" {
		return visitor.VisitString(m.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", m)
}

// # The Opportunity Object
// ### Description
// The `Opportunity` object is used to represent a deal opportunity in a CRM system.
// ### Usage Example
// TODO
type Opportunity struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The opportunity's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The opportunity's description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The opportunity's amount.
	Amount *int `json:"amount,omitempty" url:"amount,omitempty"`
	// The opportunity's owner.
	Owner *OpportunityOwner `json:"owner,omitempty" url:"owner,omitempty"`
	// The account of the opportunity.
	Account *OpportunityAccount `json:"account,omitempty" url:"account,omitempty"`
	// The stage of the opportunity.
	Stage *OpportunityStage `json:"stage,omitempty" url:"stage,omitempty"`
	// The opportunity's status.
	//
	// * `OPEN` - OPEN
	// * `WON` - WON
	// * `LOST` - LOST
	Status *OpportunityStatus `json:"status,omitempty" url:"status,omitempty"`
	// When the opportunity's last activity occurred.
	LastActivityAt *time.Time `json:"last_activity_at,omitempty" url:"last_activity_at,omitempty"`
	// When the opportunity was closed.
	CloseDate *time.Time `json:"close_date,omitempty" url:"close_date,omitempty"`
	// When the third party's opportunity was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty" url:"remote_created_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *Opportunity) GetId() *string {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *Opportunity) GetRemoteId() *string {
	if o == nil {
		return nil
	}
	return o.RemoteId
}

func (o *Opportunity) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Opportunity) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *Opportunity) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Opportunity) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Opportunity) GetAmount() *int {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *Opportunity) GetOwner() *OpportunityOwner {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *Opportunity) GetAccount() *OpportunityAccount {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *Opportunity) GetStage() *OpportunityStage {
	if o == nil {
		return nil
	}
	return o.Stage
}

func (o *Opportunity) GetStatus() *OpportunityStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Opportunity) GetLastActivityAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastActivityAt
}

func (o *Opportunity) GetCloseDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.CloseDate
}

func (o *Opportunity) GetRemoteCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *Opportunity) GetRemoteWasDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.RemoteWasDeleted
}

func (o *Opportunity) GetFieldMappings() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *Opportunity) GetRemoteData() []*RemoteData {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *Opportunity) GetRemoteFields() []*RemoteField {
	if o == nil {
		return nil
	}
	return o.RemoteFields
}

func (o *Opportunity) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *Opportunity) UnmarshalJSON(data []byte) error {
	type embed Opportunity
	var unmarshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		LastActivityAt  *internal.DateTime `json:"last_activity_at,omitempty"`
		CloseDate       *internal.DateTime `json:"close_date,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = Opportunity(unmarshaler.embed)
	o.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	o.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	o.LastActivityAt = unmarshaler.LastActivityAt.TimePtr()
	o.CloseDate = unmarshaler.CloseDate.TimePtr()
	o.RemoteCreatedAt = unmarshaler.RemoteCreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *Opportunity) MarshalJSON() ([]byte, error) {
	type embed Opportunity
	var marshaler = struct {
		embed
		CreatedAt       *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt      *internal.DateTime `json:"modified_at,omitempty"`
		LastActivityAt  *internal.DateTime `json:"last_activity_at,omitempty"`
		CloseDate       *internal.DateTime `json:"close_date,omitempty"`
		RemoteCreatedAt *internal.DateTime `json:"remote_created_at,omitempty"`
	}{
		embed:           embed(*o),
		CreatedAt:       internal.NewOptionalDateTime(o.CreatedAt),
		ModifiedAt:      internal.NewOptionalDateTime(o.ModifiedAt),
		LastActivityAt:  internal.NewOptionalDateTime(o.LastActivityAt),
		CloseDate:       internal.NewOptionalDateTime(o.CloseDate),
		RemoteCreatedAt: internal.NewOptionalDateTime(o.RemoteCreatedAt),
	}
	return json.Marshal(marshaler)
}

func (o *Opportunity) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// The account of the opportunity.
type OpportunityAccount struct {
	String  string
	Account *Account

	typ string
}

func (o *OpportunityAccount) GetString() string {
	if o == nil {
		return ""
	}
	return o.String
}

func (o *OpportunityAccount) GetAccount() *Account {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *OpportunityAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typ = "String"
		o.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		o.typ = "Account"
		o.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityAccount) MarshalJSON() ([]byte, error) {
	if o.typ == "String" || o.String != "" {
		return json.Marshal(o.String)
	}
	if o.typ == "Account" || o.Account != nil {
		return json.Marshal(o.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", o)
}

type OpportunityAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (o *OpportunityAccount) Accept(visitor OpportunityAccountVisitor) error {
	if o.typ == "String" || o.String != "" {
		return visitor.VisitString(o.String)
	}
	if o.typ == "Account" || o.Account != nil {
		return visitor.VisitAccount(o.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", o)
}

// The opportunity's owner.
type OpportunityOwner struct {
	String string
	User   *User

	typ string
}

func (o *OpportunityOwner) GetString() string {
	if o == nil {
		return ""
	}
	return o.String
}

func (o *OpportunityOwner) GetUser() *User {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *OpportunityOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typ = "String"
		o.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		o.typ = "User"
		o.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityOwner) MarshalJSON() ([]byte, error) {
	if o.typ == "String" || o.String != "" {
		return json.Marshal(o.String)
	}
	if o.typ == "User" || o.User != nil {
		return json.Marshal(o.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", o)
}

type OpportunityOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (o *OpportunityOwner) Accept(visitor OpportunityOwnerVisitor) error {
	if o.typ == "String" || o.String != "" {
		return visitor.VisitString(o.String)
	}
	if o.typ == "User" || o.User != nil {
		return visitor.VisitUser(o.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", o)
}

// The stage of the opportunity.
type OpportunityStage struct {
	String string
	Stage  *Stage

	typ string
}

func (o *OpportunityStage) GetString() string {
	if o == nil {
		return ""
	}
	return o.String
}

func (o *OpportunityStage) GetStage() *Stage {
	if o == nil {
		return nil
	}
	return o.Stage
}

func (o *OpportunityStage) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typ = "String"
		o.String = valueString
		return nil
	}
	valueStage := new(Stage)
	if err := json.Unmarshal(data, &valueStage); err == nil {
		o.typ = "Stage"
		o.Stage = valueStage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityStage) MarshalJSON() ([]byte, error) {
	if o.typ == "String" || o.String != "" {
		return json.Marshal(o.String)
	}
	if o.typ == "Stage" || o.Stage != nil {
		return json.Marshal(o.Stage)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", o)
}

type OpportunityStageVisitor interface {
	VisitString(string) error
	VisitStage(*Stage) error
}

func (o *OpportunityStage) Accept(visitor OpportunityStageVisitor) error {
	if o.typ == "String" || o.String != "" {
		return visitor.VisitString(o.String)
	}
	if o.typ == "Stage" || o.Stage != nil {
		return visitor.VisitStage(o.Stage)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", o)
}

// The opportunity's status.
//
// * `OPEN` - OPEN
// * `WON` - WON
// * `LOST` - LOST
type OpportunityStatus struct {
	OpportunityStatusEnum OpportunityStatusEnum
	String                string

	typ string
}

func (o *OpportunityStatus) GetOpportunityStatusEnum() OpportunityStatusEnum {
	if o == nil {
		return ""
	}
	return o.OpportunityStatusEnum
}

func (o *OpportunityStatus) GetString() string {
	if o == nil {
		return ""
	}
	return o.String
}

func (o *OpportunityStatus) UnmarshalJSON(data []byte) error {
	var valueOpportunityStatusEnum OpportunityStatusEnum
	if err := json.Unmarshal(data, &valueOpportunityStatusEnum); err == nil {
		o.typ = "OpportunityStatusEnum"
		o.OpportunityStatusEnum = valueOpportunityStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typ = "String"
		o.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityStatus) MarshalJSON() ([]byte, error) {
	if o.typ == "OpportunityStatusEnum" || o.OpportunityStatusEnum != "" {
		return json.Marshal(o.OpportunityStatusEnum)
	}
	if o.typ == "String" || o.String != "" {
		return json.Marshal(o.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", o)
}

type OpportunityStatusVisitor interface {
	VisitOpportunityStatusEnum(OpportunityStatusEnum) error
	VisitString(string) error
}

func (o *OpportunityStatus) Accept(visitor OpportunityStatusVisitor) error {
	if o.typ == "OpportunityStatusEnum" || o.OpportunityStatusEnum != "" {
		return visitor.VisitOpportunityStatusEnum(o.OpportunityStatusEnum)
	}
	if o.typ == "String" || o.String != "" {
		return visitor.VisitString(o.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", o)
}

// * `OPEN` - OPEN
// * `WON` - WON
// * `LOST` - LOST
type OpportunityStatusEnum string

const (
	OpportunityStatusEnumOpen OpportunityStatusEnum = "OPEN"
	OpportunityStatusEnumWon  OpportunityStatusEnum = "WON"
	OpportunityStatusEnumLost OpportunityStatusEnum = "LOST"
)

func NewOpportunityStatusEnumFromString(s string) (OpportunityStatusEnum, error) {
	switch s {
	case "OPEN":
		return OpportunityStatusEnumOpen, nil
	case "WON":
		return OpportunityStatusEnumWon, nil
	case "LOST":
		return OpportunityStatusEnumLost, nil
	}
	var t OpportunityStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OpportunityStatusEnum) Ptr() *OpportunityStatusEnum {
	return &o
}

type PaginatedRemoteFieldClassList struct {
	Next     *string             `json:"next,omitempty" url:"next,omitempty"`
	Previous *string             `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*RemoteFieldClass `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedRemoteFieldClassList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedRemoteFieldClassList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedRemoteFieldClassList) GetResults() []*RemoteFieldClass {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedRemoteFieldClassList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedRemoteFieldClassList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedRemoteFieldClassList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedRemoteFieldClassList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedRemoteFieldClassList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The PhoneNumber Object
// ### Description
// The `PhoneNumber` object is used to represent an entity's phone number.
// ### Usage Example
// Fetch from the `GET Contact` endpoint and view their phone numbers.
type PhoneNumber struct {
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The phone number.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// The phone number's type.
	PhoneNumberType *string `json:"phone_number_type,omitempty" url:"phone_number_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PhoneNumber) GetCreatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *PhoneNumber) GetModifiedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.ModifiedAt
}

func (p *PhoneNumber) GetPhoneNumber() *string {
	if p == nil {
		return nil
	}
	return p.PhoneNumber
}

func (p *PhoneNumber) GetPhoneNumberType() *string {
	if p == nil {
		return nil
	}
	return p.PhoneNumberType
}

func (p *PhoneNumber) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PhoneNumber) UnmarshalJSON(data []byte) error {
	type embed PhoneNumber
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PhoneNumber(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	p.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneNumber) MarshalJSON() ([]byte, error) {
	type embed PhoneNumber
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*p),
		CreatedAt:  internal.NewOptionalDateTime(p.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(p.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PhoneNumber) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The PhoneNumber Object
// ### Description
// The `PhoneNumber` object is used to represent an entity's phone number.
// ### Usage Example
// Fetch from the `GET Contact` endpoint and view their phone numbers.
type PhoneNumberRequest struct {
	// The phone number.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// The phone number's type.
	PhoneNumberType     *string                `json:"phone_number_type,omitempty" url:"phone_number_type,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PhoneNumberRequest) GetPhoneNumber() *string {
	if p == nil {
		return nil
	}
	return p.PhoneNumber
}

func (p *PhoneNumberRequest) GetPhoneNumberType() *string {
	if p == nil {
		return nil
	}
	return p.PhoneNumberType
}

func (p *PhoneNumberRequest) GetIntegrationParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.IntegrationParams
}

func (p *PhoneNumberRequest) GetLinkedAccountParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.LinkedAccountParams
}

func (p *PhoneNumberRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PhoneNumberRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneNumberRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneNumberRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneNumberRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// * `GENERAL_CUSTOMER_REQUEST` - GENERAL_CUSTOMER_REQUEST
// * `GDPR` - GDPR
// * `OTHER` - OTHER
type ReasonEnum string

const (
	ReasonEnumGeneralCustomerRequest ReasonEnum = "GENERAL_CUSTOMER_REQUEST"
	ReasonEnumGdpr                   ReasonEnum = "GDPR"
	ReasonEnumOther                  ReasonEnum = "OTHER"
)

func NewReasonEnumFromString(s string) (ReasonEnum, error) {
	switch s {
	case "GENERAL_CUSTOMER_REQUEST":
		return ReasonEnumGeneralCustomerRequest, nil
	case "GDPR":
		return ReasonEnumGdpr, nil
	case "OTHER":
		return ReasonEnumOther, nil
	}
	var t ReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReasonEnum) Ptr() *ReasonEnum {
	return &r
}

// # The RemoteData Object
// ### Description
// The `RemoteData` object is used to represent the full data pulled from the third-party API for an object.
//
// ### Usage Example
// TODO
type RemoteData struct {
	// The third-party API path that is being called.
	Path string      `json:"path" url:"path"`
	Data interface{} `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoteData) GetPath() string {
	if r == nil {
		return ""
	}
	return r.Path
}

func (r *RemoteData) GetData() interface{} {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *RemoteData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoteData) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteData) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteField struct {
	RemoteFieldClass *RemoteFieldRemoteFieldClass `json:"remote_field_class" url:"remote_field_class"`
	Value            interface{}                  `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoteField) GetRemoteFieldClass() *RemoteFieldRemoteFieldClass {
	if r == nil {
		return nil
	}
	return r.RemoteFieldClass
}

func (r *RemoteField) GetValue() interface{} {
	if r == nil {
		return nil
	}
	return r.Value
}

func (r *RemoteField) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoteField) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteField) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldClass struct {
	Id            *string                             `json:"id,omitempty" url:"id,omitempty"`
	DisplayName   *string                             `json:"display_name,omitempty" url:"display_name,omitempty"`
	RemoteKeyName *string                             `json:"remote_key_name,omitempty" url:"remote_key_name,omitempty"`
	Description   *string                             `json:"description,omitempty" url:"description,omitempty"`
	IsCustom      *bool                               `json:"is_custom,omitempty" url:"is_custom,omitempty"`
	IsRequired    *bool                               `json:"is_required,omitempty" url:"is_required,omitempty"`
	FieldType     *FieldTypeEnum                      `json:"field_type,omitempty" url:"field_type,omitempty"`
	FieldFormat   *FieldFormatEnum                    `json:"field_format,omitempty" url:"field_format,omitempty"`
	FieldChoices  []*RemoteFieldClassFieldChoicesItem `json:"field_choices,omitempty" url:"field_choices,omitempty"`
	ItemSchema    *ItemSchema                         `json:"item_schema,omitempty" url:"item_schema,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoteFieldClass) GetId() *string {
	if r == nil {
		return nil
	}
	return r.Id
}

func (r *RemoteFieldClass) GetDisplayName() *string {
	if r == nil {
		return nil
	}
	return r.DisplayName
}

func (r *RemoteFieldClass) GetRemoteKeyName() *string {
	if r == nil {
		return nil
	}
	return r.RemoteKeyName
}

func (r *RemoteFieldClass) GetDescription() *string {
	if r == nil {
		return nil
	}
	return r.Description
}

func (r *RemoteFieldClass) GetIsCustom() *bool {
	if r == nil {
		return nil
	}
	return r.IsCustom
}

func (r *RemoteFieldClass) GetIsRequired() *bool {
	if r == nil {
		return nil
	}
	return r.IsRequired
}

func (r *RemoteFieldClass) GetFieldType() *FieldTypeEnum {
	if r == nil {
		return nil
	}
	return r.FieldType
}

func (r *RemoteFieldClass) GetFieldFormat() *FieldFormatEnum {
	if r == nil {
		return nil
	}
	return r.FieldFormat
}

func (r *RemoteFieldClass) GetFieldChoices() []*RemoteFieldClassFieldChoicesItem {
	if r == nil {
		return nil
	}
	return r.FieldChoices
}

func (r *RemoteFieldClass) GetItemSchema() *ItemSchema {
	if r == nil {
		return nil
	}
	return r.ItemSchema
}

func (r *RemoteFieldClass) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoteFieldClass) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldClass
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldClass(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldClass) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldClassFieldChoicesItem struct {
	Value       interface{} `json:"value,omitempty" url:"value,omitempty"`
	DisplayName *string     `json:"display_name,omitempty" url:"display_name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoteFieldClassFieldChoicesItem) GetValue() interface{} {
	if r == nil {
		return nil
	}
	return r.Value
}

func (r *RemoteFieldClassFieldChoicesItem) GetDisplayName() *string {
	if r == nil {
		return nil
	}
	return r.DisplayName
}

func (r *RemoteFieldClassFieldChoicesItem) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoteFieldClassFieldChoicesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldClassFieldChoicesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldClassFieldChoicesItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldClassFieldChoicesItem) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldRemoteFieldClass struct {
	String           string
	RemoteFieldClass *RemoteFieldClass

	typ string
}

func (r *RemoteFieldRemoteFieldClass) GetString() string {
	if r == nil {
		return ""
	}
	return r.String
}

func (r *RemoteFieldRemoteFieldClass) GetRemoteFieldClass() *RemoteFieldClass {
	if r == nil {
		return nil
	}
	return r.RemoteFieldClass
}

func (r *RemoteFieldRemoteFieldClass) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typ = "String"
		r.String = valueString
		return nil
	}
	valueRemoteFieldClass := new(RemoteFieldClass)
	if err := json.Unmarshal(data, &valueRemoteFieldClass); err == nil {
		r.typ = "RemoteFieldClass"
		r.RemoteFieldClass = valueRemoteFieldClass
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldRemoteFieldClass) MarshalJSON() ([]byte, error) {
	if r.typ == "String" || r.String != "" {
		return json.Marshal(r.String)
	}
	if r.typ == "RemoteFieldClass" || r.RemoteFieldClass != nil {
		return json.Marshal(r.RemoteFieldClass)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RemoteFieldRemoteFieldClassVisitor interface {
	VisitString(string) error
	VisitRemoteFieldClass(*RemoteFieldClass) error
}

func (r *RemoteFieldRemoteFieldClass) Accept(visitor RemoteFieldRemoteFieldClassVisitor) error {
	if r.typ == "String" || r.String != "" {
		return visitor.VisitString(r.String)
	}
	if r.typ == "RemoteFieldClass" || r.RemoteFieldClass != nil {
		return visitor.VisitRemoteFieldClass(r.RemoteFieldClass)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RemoteFieldRequest struct {
	RemoteFieldClass *RemoteFieldRequestRemoteFieldClass `json:"remote_field_class" url:"remote_field_class"`
	Value            interface{}                         `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoteFieldRequest) GetRemoteFieldClass() *RemoteFieldRequestRemoteFieldClass {
	if r == nil {
		return nil
	}
	return r.RemoteFieldClass
}

func (r *RemoteFieldRequest) GetValue() interface{} {
	if r == nil {
		return nil
	}
	return r.Value
}

func (r *RemoteFieldRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoteFieldRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldRequest) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldRequestRemoteFieldClass struct {
	String           string
	RemoteFieldClass *RemoteFieldClass

	typ string
}

func (r *RemoteFieldRequestRemoteFieldClass) GetString() string {
	if r == nil {
		return ""
	}
	return r.String
}

func (r *RemoteFieldRequestRemoteFieldClass) GetRemoteFieldClass() *RemoteFieldClass {
	if r == nil {
		return nil
	}
	return r.RemoteFieldClass
}

func (r *RemoteFieldRequestRemoteFieldClass) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typ = "String"
		r.String = valueString
		return nil
	}
	valueRemoteFieldClass := new(RemoteFieldClass)
	if err := json.Unmarshal(data, &valueRemoteFieldClass); err == nil {
		r.typ = "RemoteFieldClass"
		r.RemoteFieldClass = valueRemoteFieldClass
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldRequestRemoteFieldClass) MarshalJSON() ([]byte, error) {
	if r.typ == "String" || r.String != "" {
		return json.Marshal(r.String)
	}
	if r.typ == "RemoteFieldClass" || r.RemoteFieldClass != nil {
		return json.Marshal(r.RemoteFieldClass)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RemoteFieldRequestRemoteFieldClassVisitor interface {
	VisitString(string) error
	VisitRemoteFieldClass(*RemoteFieldClass) error
}

func (r *RemoteFieldRequestRemoteFieldClass) Accept(visitor RemoteFieldRequestRemoteFieldClassVisitor) error {
	if r.typ == "String" || r.String != "" {
		return visitor.VisitString(r.String)
	}
	if r.typ == "RemoteFieldClass" || r.RemoteFieldClass != nil {
		return visitor.VisitRemoteFieldClass(r.RemoteFieldClass)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// # The RemoteKey Object
// ### Description
// The `RemoteKey` object is used to represent a request for a new remote key.
//
// ### Usage Example
// Post a `GenerateRemoteKey` to receive a new `RemoteKey`.
type RemoteKey struct {
	Name string `json:"name" url:"name"`
	Key  string `json:"key" url:"key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoteKey) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *RemoteKey) GetKey() string {
	if r == nil {
		return ""
	}
	return r.Key
}

func (r *RemoteKey) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoteKey) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteKey) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// # The RemoteResponse Object
// ### Description
// The `RemoteResponse` object is used to represent information returned from a third-party endpoint.
//
// ### Usage Example
// View the `RemoteResponse` returned from your `DataPassthrough`.
type RemoteResponse struct {
	Method          string                      `json:"method" url:"method"`
	Path            string                      `json:"path" url:"path"`
	Status          int                         `json:"status" url:"status"`
	Response        interface{}                 `json:"response" url:"response"`
	ResponseHeaders map[string]interface{}      `json:"response_headers,omitempty" url:"response_headers,omitempty"`
	ResponseType    *RemoteResponseResponseType `json:"response_type,omitempty" url:"response_type,omitempty"`
	Headers         map[string]interface{}      `json:"headers,omitempty" url:"headers,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RemoteResponse) GetMethod() string {
	if r == nil {
		return ""
	}
	return r.Method
}

func (r *RemoteResponse) GetPath() string {
	if r == nil {
		return ""
	}
	return r.Path
}

func (r *RemoteResponse) GetStatus() int {
	if r == nil {
		return 0
	}
	return r.Status
}

func (r *RemoteResponse) GetResponse() interface{} {
	if r == nil {
		return nil
	}
	return r.Response
}

func (r *RemoteResponse) GetResponseHeaders() map[string]interface{} {
	if r == nil {
		return nil
	}
	return r.ResponseHeaders
}

func (r *RemoteResponse) GetResponseType() *RemoteResponseResponseType {
	if r == nil {
		return nil
	}
	return r.ResponseType
}

func (r *RemoteResponse) GetHeaders() map[string]interface{} {
	if r == nil {
		return nil
	}
	return r.Headers
}

func (r *RemoteResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemoteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteResponseResponseType struct {
	ResponseTypeEnum ResponseTypeEnum
	String           string

	typ string
}

func (r *RemoteResponseResponseType) GetResponseTypeEnum() ResponseTypeEnum {
	if r == nil {
		return ""
	}
	return r.ResponseTypeEnum
}

func (r *RemoteResponseResponseType) GetString() string {
	if r == nil {
		return ""
	}
	return r.String
}

func (r *RemoteResponseResponseType) UnmarshalJSON(data []byte) error {
	var valueResponseTypeEnum ResponseTypeEnum
	if err := json.Unmarshal(data, &valueResponseTypeEnum); err == nil {
		r.typ = "ResponseTypeEnum"
		r.ResponseTypeEnum = valueResponseTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typ = "String"
		r.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteResponseResponseType) MarshalJSON() ([]byte, error) {
	if r.typ == "ResponseTypeEnum" || r.ResponseTypeEnum != "" {
		return json.Marshal(r.ResponseTypeEnum)
	}
	if r.typ == "String" || r.String != "" {
		return json.Marshal(r.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RemoteResponseResponseTypeVisitor interface {
	VisitResponseTypeEnum(ResponseTypeEnum) error
	VisitString(string) error
}

func (r *RemoteResponseResponseType) Accept(visitor RemoteResponseResponseTypeVisitor) error {
	if r.typ == "ResponseTypeEnum" || r.ResponseTypeEnum != "" {
		return visitor.VisitResponseTypeEnum(r.ResponseTypeEnum)
	}
	if r.typ == "String" || r.String != "" {
		return visitor.VisitString(r.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// * `JSON` - JSON
// * `XML` - XML
// * `MULTIPART` - MULTIPART
type RequestFormatEnum string

const (
	RequestFormatEnumJson      RequestFormatEnum = "JSON"
	RequestFormatEnumXml       RequestFormatEnum = "XML"
	RequestFormatEnumMultipart RequestFormatEnum = "MULTIPART"
)

func NewRequestFormatEnumFromString(s string) (RequestFormatEnum, error) {
	switch s {
	case "JSON":
		return RequestFormatEnumJson, nil
	case "XML":
		return RequestFormatEnumXml, nil
	case "MULTIPART":
		return RequestFormatEnumMultipart, nil
	}
	var t RequestFormatEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestFormatEnum) Ptr() *RequestFormatEnum {
	return &r
}

// * `JSON` - JSON
// * `BASE64_GZIP` - BASE64_GZIP
type ResponseTypeEnum string

const (
	ResponseTypeEnumJson       ResponseTypeEnum = "JSON"
	ResponseTypeEnumBase64Gzip ResponseTypeEnum = "BASE64_GZIP"
)

func NewResponseTypeEnumFromString(s string) (ResponseTypeEnum, error) {
	switch s {
	case "JSON":
		return ResponseTypeEnumJson, nil
	case "BASE64_GZIP":
		return ResponseTypeEnumBase64Gzip, nil
	}
	var t ResponseTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ResponseTypeEnum) Ptr() *ResponseTypeEnum {
	return &r
}

// * `IN_NEXT_SYNC` - IN_NEXT_SYNC
// * `IN_LAST_SYNC` - IN_LAST_SYNC
type SelectiveSyncConfigurationsUsageEnum string

const (
	SelectiveSyncConfigurationsUsageEnumInNextSync SelectiveSyncConfigurationsUsageEnum = "IN_NEXT_SYNC"
	SelectiveSyncConfigurationsUsageEnumInLastSync SelectiveSyncConfigurationsUsageEnum = "IN_LAST_SYNC"
)

func NewSelectiveSyncConfigurationsUsageEnumFromString(s string) (SelectiveSyncConfigurationsUsageEnum, error) {
	switch s {
	case "IN_NEXT_SYNC":
		return SelectiveSyncConfigurationsUsageEnumInNextSync, nil
	case "IN_LAST_SYNC":
		return SelectiveSyncConfigurationsUsageEnumInLastSync, nil
	}
	var t SelectiveSyncConfigurationsUsageEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SelectiveSyncConfigurationsUsageEnum) Ptr() *SelectiveSyncConfigurationsUsageEnum {
	return &s
}

// # The Stage Object
// ### Description
// The `Stage` object is used to represent the stage of an opportunity.
// ### Usage Example
// TODO
type Stage struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The stage's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Stage) GetId() *string {
	if s == nil {
		return nil
	}
	return s.Id
}

func (s *Stage) GetRemoteId() *string {
	if s == nil {
		return nil
	}
	return s.RemoteId
}

func (s *Stage) GetCreatedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *Stage) GetModifiedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.ModifiedAt
}

func (s *Stage) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *Stage) GetRemoteWasDeleted() *bool {
	if s == nil {
		return nil
	}
	return s.RemoteWasDeleted
}

func (s *Stage) GetFieldMappings() map[string]interface{} {
	if s == nil {
		return nil
	}
	return s.FieldMappings
}

func (s *Stage) GetRemoteData() []*RemoteData {
	if s == nil {
		return nil
	}
	return s.RemoteData
}

func (s *Stage) GetRemoteFields() []*RemoteField {
	if s == nil {
		return nil
	}
	return s.RemoteFields
}

func (s *Stage) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Stage) UnmarshalJSON(data []byte) error {
	type embed Stage
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = Stage(unmarshaler.embed)
	s.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	s.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Stage) MarshalJSON() ([]byte, error) {
	type embed Stage
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*s),
		CreatedAt:  internal.NewOptionalDateTime(s.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(s.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (s *Stage) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// * `SYNCING` - SYNCING
// * `DONE` - DONE
// * `FAILED` - FAILED
// * `DISABLED` - DISABLED
// * `PAUSED` - PAUSED
// * `PARTIALLY_SYNCED` - PARTIALLY_SYNCED
type StatusFd5Enum string

const (
	StatusFd5EnumSyncing         StatusFd5Enum = "SYNCING"
	StatusFd5EnumDone            StatusFd5Enum = "DONE"
	StatusFd5EnumFailed          StatusFd5Enum = "FAILED"
	StatusFd5EnumDisabled        StatusFd5Enum = "DISABLED"
	StatusFd5EnumPaused          StatusFd5Enum = "PAUSED"
	StatusFd5EnumPartiallySynced StatusFd5Enum = "PARTIALLY_SYNCED"
)

func NewStatusFd5EnumFromString(s string) (StatusFd5Enum, error) {
	switch s {
	case "SYNCING":
		return StatusFd5EnumSyncing, nil
	case "DONE":
		return StatusFd5EnumDone, nil
	case "FAILED":
		return StatusFd5EnumFailed, nil
	case "DISABLED":
		return StatusFd5EnumDisabled, nil
	case "PAUSED":
		return StatusFd5EnumPaused, nil
	case "PARTIALLY_SYNCED":
		return StatusFd5EnumPartiallySynced, nil
	}
	var t StatusFd5Enum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s StatusFd5Enum) Ptr() *StatusFd5Enum {
	return &s
}

// # The SyncStatus Object
// ### Description
// The `SyncStatus` object is used to represent the syncing state of an account
//
// ### Usage Example
// View the `SyncStatus` for an account to see how recently its models were synced.
type SyncStatus struct {
	ModelName                        string                                `json:"model_name" url:"model_name"`
	ModelId                          string                                `json:"model_id" url:"model_id"`
	LastSyncStart                    *time.Time                            `json:"last_sync_start,omitempty" url:"last_sync_start,omitempty"`
	NextSyncStart                    *time.Time                            `json:"next_sync_start,omitempty" url:"next_sync_start,omitempty"`
	LastSyncResult                   *SyncStatusLastSyncResult             `json:"last_sync_result,omitempty" url:"last_sync_result,omitempty"`
	LastSyncFinished                 *time.Time                            `json:"last_sync_finished,omitempty" url:"last_sync_finished,omitempty"`
	Status                           *SyncStatusStatus                     `json:"status" url:"status"`
	IsInitialSync                    bool                                  `json:"is_initial_sync" url:"is_initial_sync"`
	SelectiveSyncConfigurationsUsage *SelectiveSyncConfigurationsUsageEnum `json:"selective_sync_configurations_usage,omitempty" url:"selective_sync_configurations_usage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SyncStatus) GetModelName() string {
	if s == nil {
		return ""
	}
	return s.ModelName
}

func (s *SyncStatus) GetModelId() string {
	if s == nil {
		return ""
	}
	return s.ModelId
}

func (s *SyncStatus) GetLastSyncStart() *time.Time {
	if s == nil {
		return nil
	}
	return s.LastSyncStart
}

func (s *SyncStatus) GetNextSyncStart() *time.Time {
	if s == nil {
		return nil
	}
	return s.NextSyncStart
}

func (s *SyncStatus) GetLastSyncResult() *SyncStatusLastSyncResult {
	if s == nil {
		return nil
	}
	return s.LastSyncResult
}

func (s *SyncStatus) GetLastSyncFinished() *time.Time {
	if s == nil {
		return nil
	}
	return s.LastSyncFinished
}

func (s *SyncStatus) GetStatus() *SyncStatusStatus {
	if s == nil {
		return nil
	}
	return s.Status
}

func (s *SyncStatus) GetIsInitialSync() bool {
	if s == nil {
		return false
	}
	return s.IsInitialSync
}

func (s *SyncStatus) GetSelectiveSyncConfigurationsUsage() *SelectiveSyncConfigurationsUsageEnum {
	if s == nil {
		return nil
	}
	return s.SelectiveSyncConfigurationsUsage
}

func (s *SyncStatus) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SyncStatus) UnmarshalJSON(data []byte) error {
	type embed SyncStatus
	var unmarshaler = struct {
		embed
		LastSyncStart    *internal.DateTime `json:"last_sync_start,omitempty"`
		NextSyncStart    *internal.DateTime `json:"next_sync_start,omitempty"`
		LastSyncFinished *internal.DateTime `json:"last_sync_finished,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SyncStatus(unmarshaler.embed)
	s.LastSyncStart = unmarshaler.LastSyncStart.TimePtr()
	s.NextSyncStart = unmarshaler.NextSyncStart.TimePtr()
	s.LastSyncFinished = unmarshaler.LastSyncFinished.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SyncStatus) MarshalJSON() ([]byte, error) {
	type embed SyncStatus
	var marshaler = struct {
		embed
		LastSyncStart    *internal.DateTime `json:"last_sync_start,omitempty"`
		NextSyncStart    *internal.DateTime `json:"next_sync_start,omitempty"`
		LastSyncFinished *internal.DateTime `json:"last_sync_finished,omitempty"`
	}{
		embed:            embed(*s),
		LastSyncStart:    internal.NewOptionalDateTime(s.LastSyncStart),
		NextSyncStart:    internal.NewOptionalDateTime(s.NextSyncStart),
		LastSyncFinished: internal.NewOptionalDateTime(s.LastSyncFinished),
	}
	return json.Marshal(marshaler)
}

func (s *SyncStatus) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SyncStatusLastSyncResult struct {
	LastSyncResultEnum LastSyncResultEnum
	String             string

	typ string
}

func (s *SyncStatusLastSyncResult) GetLastSyncResultEnum() LastSyncResultEnum {
	if s == nil {
		return ""
	}
	return s.LastSyncResultEnum
}

func (s *SyncStatusLastSyncResult) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *SyncStatusLastSyncResult) UnmarshalJSON(data []byte) error {
	var valueLastSyncResultEnum LastSyncResultEnum
	if err := json.Unmarshal(data, &valueLastSyncResultEnum); err == nil {
		s.typ = "LastSyncResultEnum"
		s.LastSyncResultEnum = valueLastSyncResultEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SyncStatusLastSyncResult) MarshalJSON() ([]byte, error) {
	if s.typ == "LastSyncResultEnum" || s.LastSyncResultEnum != "" {
		return json.Marshal(s.LastSyncResultEnum)
	}
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SyncStatusLastSyncResultVisitor interface {
	VisitLastSyncResultEnum(LastSyncResultEnum) error
	VisitString(string) error
}

func (s *SyncStatusLastSyncResult) Accept(visitor SyncStatusLastSyncResultVisitor) error {
	if s.typ == "LastSyncResultEnum" || s.LastSyncResultEnum != "" {
		return visitor.VisitLastSyncResultEnum(s.LastSyncResultEnum)
	}
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SyncStatusStatus struct {
	StatusFd5Enum StatusFd5Enum
	String        string

	typ string
}

func (s *SyncStatusStatus) GetStatusFd5Enum() StatusFd5Enum {
	if s == nil {
		return ""
	}
	return s.StatusFd5Enum
}

func (s *SyncStatusStatus) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *SyncStatusStatus) UnmarshalJSON(data []byte) error {
	var valueStatusFd5Enum StatusFd5Enum
	if err := json.Unmarshal(data, &valueStatusFd5Enum); err == nil {
		s.typ = "StatusFd5Enum"
		s.StatusFd5Enum = valueStatusFd5Enum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SyncStatusStatus) MarshalJSON() ([]byte, error) {
	if s.typ == "StatusFd5Enum" || s.StatusFd5Enum != "" {
		return json.Marshal(s.StatusFd5Enum)
	}
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SyncStatusStatusVisitor interface {
	VisitStatusFd5Enum(StatusFd5Enum) error
	VisitString(string) error
}

func (s *SyncStatusStatus) Accept(visitor SyncStatusStatusVisitor) error {
	if s.typ == "StatusFd5Enum" || s.StatusFd5Enum != "" {
		return visitor.VisitStatusFd5Enum(s.StatusFd5Enum)
	}
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// # The User Object
// ### Description
// The `User` object is used to represent a user with a login to the CRM system.
// ### Usage Example
// TODO
type User struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty" url:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty" url:"modified_at,omitempty"`
	// The user's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The user's email address.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Whether or not the user is active.
	IsActive *bool `json:"is_active,omitempty" url:"is_active,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty" url:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty" url:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty" url:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *User) GetId() *string {
	if u == nil {
		return nil
	}
	return u.Id
}

func (u *User) GetRemoteId() *string {
	if u == nil {
		return nil
	}
	return u.RemoteId
}

func (u *User) GetCreatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *User) GetModifiedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.ModifiedAt
}

func (u *User) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *User) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *User) GetIsActive() *bool {
	if u == nil {
		return nil
	}
	return u.IsActive
}

func (u *User) GetRemoteWasDeleted() *bool {
	if u == nil {
		return nil
	}
	return u.RemoteWasDeleted
}

func (u *User) GetFieldMappings() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.FieldMappings
}

func (u *User) GetRemoteData() []*RemoteData {
	if u == nil {
		return nil
	}
	return u.RemoteData
}

func (u *User) GetRemoteFields() []*RemoteField {
	if u == nil {
		return nil
	}
	return u.RemoteFields
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) UnmarshalJSON(data []byte) error {
	type embed User
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = User(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	u.ModifiedAt = unmarshaler.ModifiedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) MarshalJSON() ([]byte, error) {
	type embed User
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at,omitempty"`
		ModifiedAt *internal.DateTime `json:"modified_at,omitempty"`
	}{
		embed:      embed(*u),
		CreatedAt:  internal.NewOptionalDateTime(u.CreatedAt),
		ModifiedAt: internal.NewOptionalDateTime(u.ModifiedAt),
	}
	return json.Marshal(marshaler)
}

func (u *User) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type ValidationProblemSource struct {
	Pointer string `json:"pointer" url:"pointer"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidationProblemSource) GetPointer() string {
	if v == nil {
		return ""
	}
	return v.Pointer
}

func (v *ValidationProblemSource) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidationProblemSource) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidationProblemSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidationProblemSource(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidationProblemSource) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type WarningValidationProblem struct {
	Source      *ValidationProblemSource `json:"source,omitempty" url:"source,omitempty"`
	Title       string                   `json:"title" url:"title"`
	Detail      string                   `json:"detail" url:"detail"`
	ProblemType string                   `json:"problem_type" url:"problem_type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WarningValidationProblem) GetSource() *ValidationProblemSource {
	if w == nil {
		return nil
	}
	return w.Source
}

func (w *WarningValidationProblem) GetTitle() string {
	if w == nil {
		return ""
	}
	return w.Title
}

func (w *WarningValidationProblem) GetDetail() string {
	if w == nil {
		return ""
	}
	return w.Detail
}

func (w *WarningValidationProblem) GetProblemType() string {
	if w == nil {
		return ""
	}
	return w.ProblemType
}

func (w *WarningValidationProblem) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WarningValidationProblem) UnmarshalJSON(data []byte) error {
	type unmarshaler WarningValidationProblem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WarningValidationProblem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WarningValidationProblem) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
