// This file was auto-generated by Fern from our API Definition.

package crm

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/merge-api/merge-go-client/core"
	time "time"
)

// # The Account Object
//
// ### Description
//
// The `Account` object is used to represent a company in a CRM system.
//
// ### Usage Example
//
// TODO
type Account struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The account's owner.
	Owner *AccountOwner `json:"owner,omitempty"`
	// The account's name.
	Name *string `json:"name,omitempty"`
	// The account's description.
	Description *string `json:"description,omitempty"`
	// The account's industry.
	Industry *string `json:"industry,omitempty"`
	// The account's website.
	Website *string `json:"website,omitempty"`
	// The account's number of employees.
	NumberOfEmployees *int           `json:"number_of_employees,omitempty"`
	Addresses         []*Address     `json:"addresses,omitempty"`
	PhoneNumbers      []*PhoneNumber `json:"phone_numbers,omitempty"`
	// The last date (either most recent or furthest in the future) of when an activity occurs in an account.
	LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
	// When the CRM system account data was last modified by a user with a login.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// When the third party's account was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (a *Account) UnmarshalJSON(data []byte) error {
	type unmarshaler Account
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Account(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Account) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountDetails struct {
	Id                      *string       `json:"id,omitempty"`
	Integration             *string       `json:"integration,omitempty"`
	IntegrationSlug         *string       `json:"integration_slug,omitempty"`
	Category                *CategoryEnum `json:"category,omitempty"`
	EndUserOriginId         *string       `json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName *string       `json:"end_user_organization_name,omitempty"`
	EndUserEmailAddress     *string       `json:"end_user_email_address,omitempty"`
	Status                  *string       `json:"status,omitempty"`
	WebhookListenerUrl      *string       `json:"webhook_listener_url,omitempty"`
	// Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.
	IsDuplicate *bool   `json:"is_duplicate,omitempty"`
	AccountType *string `json:"account_type,omitempty"`
	// The time at which account completes the linking flow.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountDetails(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountDetails) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The LinkedAccount Object
//
// ### Description
//
// The `LinkedAccount` object is used to represent an end user's link with a specific integration.
//
// ### Usage Example
//
// View a list of your organization's `LinkedAccount` objects.
type AccountDetailsAndActions struct {
	Id                      string                             `json:"id"`
	Category                *CategoryEnum                      `json:"category,omitempty"`
	Status                  AccountDetailsAndActionsStatusEnum `json:"status,omitempty"`
	StatusDetail            *string                            `json:"status_detail,omitempty"`
	EndUserOriginId         *string                            `json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName string                             `json:"end_user_organization_name"`
	EndUserEmailAddress     string                             `json:"end_user_email_address"`
	// The tenant or domain the customer has provided access to.
	Subdomain          *string `json:"subdomain,omitempty"`
	WebhookListenerUrl string  `json:"webhook_listener_url"`
	// Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.
	IsDuplicate *bool                                `json:"is_duplicate,omitempty"`
	Integration *AccountDetailsAndActionsIntegration `json:"integration,omitempty"`
	AccountType string                               `json:"account_type"`
	CompletedAt time.Time                            `json:"completed_at"`

	_rawJSON json.RawMessage
}

func (a *AccountDetailsAndActions) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountDetailsAndActions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountDetailsAndActions(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountDetailsAndActions) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountDetailsAndActionsIntegration struct {
	Name                     string            `json:"name"`
	Categories               []CategoriesEnum  `json:"categories,omitempty"`
	Image                    *string           `json:"image,omitempty"`
	SquareImage              *string           `json:"square_image,omitempty"`
	Color                    string            `json:"color"`
	Slug                     string            `json:"slug"`
	PassthroughAvailable     bool              `json:"passthrough_available"`
	AvailableModelOperations []*ModelOperation `json:"available_model_operations,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountDetailsAndActionsIntegration) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountDetailsAndActionsIntegration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountDetailsAndActionsIntegration(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountDetailsAndActionsIntegration) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// - `COMPLETE` - COMPLETE
// - `INCOMPLETE` - INCOMPLETE
// - `RELINK_NEEDED` - RELINK_NEEDED
// - `IDLE` - IDLE
type AccountDetailsAndActionsStatusEnum string

const (
	AccountDetailsAndActionsStatusEnumComplete     AccountDetailsAndActionsStatusEnum = "COMPLETE"
	AccountDetailsAndActionsStatusEnumIncomplete   AccountDetailsAndActionsStatusEnum = "INCOMPLETE"
	AccountDetailsAndActionsStatusEnumRelinkNeeded AccountDetailsAndActionsStatusEnum = "RELINK_NEEDED"
	AccountDetailsAndActionsStatusEnumIdle         AccountDetailsAndActionsStatusEnum = "IDLE"
)

func NewAccountDetailsAndActionsStatusEnumFromString(s string) (AccountDetailsAndActionsStatusEnum, error) {
	switch s {
	case "COMPLETE":
		return AccountDetailsAndActionsStatusEnumComplete, nil
	case "INCOMPLETE":
		return AccountDetailsAndActionsStatusEnumIncomplete, nil
	case "RELINK_NEEDED":
		return AccountDetailsAndActionsStatusEnumRelinkNeeded, nil
	case "IDLE":
		return AccountDetailsAndActionsStatusEnumIdle, nil
	}
	var t AccountDetailsAndActionsStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountDetailsAndActionsStatusEnum) Ptr() *AccountDetailsAndActionsStatusEnum {
	return &a
}

type AccountIntegration struct {
	// Company name.
	Name string `json:"name"`
	// Optional. This shortened name appears in places with limited space, usually in conjunction with the platform's logo (e.g., Merge Link menu).<br><br>Example: <i>Workforce Now (in lieu of ADP Workforce Now), SuccessFactors (in lieu of SAP SuccessFactors)</i>
	AbbreviatedName *string `json:"abbreviated_name,omitempty"`
	// Category or categories this integration belongs to. Multiple categories should be comma separated, i.e. [ats, hris].
	Categories []CategoriesEnum `json:"categories,omitempty"`
	// Company logo in rectangular shape.
	Image *string `json:"image,omitempty"`
	// Company logo in square shape.
	SquareImage *string `json:"square_image,omitempty"`
	// The color of this integration used for buttons and text throughout the app and landing pages. <b>Choose a darker, saturated color.</b>
	Color *string `json:"color,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	// Mapping of API endpoints to documentation urls for support. Example: {'GET': [['/common-model-scopes', 'https://docs.merge.dev/accounting/common-model-scopes/#common_model_scopes_retrieve'],['/common-model-actions', 'https://docs.merge.dev/accounting/common-model-actions/#common_model_actions_retrieve']], 'POST': []}
	ApiEndpointsToDocumentationUrls map[string]interface{} `json:"api_endpoints_to_documentation_urls,omitempty"`
	// Setup guide URL for third party webhook creation. Exposed in Merge Docs.
	WebhookSetupGuideUrl *string `json:"webhook_setup_guide_url,omitempty"`
	// Category or categories this integration is in beta status for.
	CategoryBetaStatus map[string]interface{} `json:"category_beta_status,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountIntegration) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountIntegration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountIntegration(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountIntegration) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The account's owner.
type AccountOwner struct {
	typeName string
	String   string
	User     *User
}

func NewAccountOwnerFromString(value string) *AccountOwner {
	return &AccountOwner{typeName: "string", String: value}
}

func NewAccountOwnerFromUser(value *User) *AccountOwner {
	return &AccountOwner{typeName: "user", User: value}
}

func (a *AccountOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		a.typeName = "user"
		a.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountOwner) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "user":
		return json.Marshal(a.User)
	}
}

type AccountOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (a *AccountOwner) Accept(visitor AccountOwnerVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "user":
		return visitor.VisitUser(a.User)
	}
}

// # The Account Object
//
// ### Description
//
// The `Account` object is used to represent a company in a CRM system.
//
// ### Usage Example
//
// TODO
type AccountRequest struct {
	// The account's owner.
	Owner *AccountRequestOwner `json:"owner,omitempty"`
	// The account's name.
	Name *string `json:"name,omitempty"`
	// The account's description.
	Description *string `json:"description,omitempty"`
	// The account's industry.
	Industry *string `json:"industry,omitempty"`
	// The account's website.
	Website *string `json:"website,omitempty"`
	// The account's number of employees.
	NumberOfEmployees *int              `json:"number_of_employees,omitempty"`
	Addresses         []*AddressRequest `json:"addresses,omitempty"`
	// The last date (either most recent or furthest in the future) of when an activity occurs in an account.
	LastActivityAt      *time.Time             `json:"last_activity_at,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountRequest(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The account's owner.
type AccountRequestOwner struct {
	typeName string
	String   string
	User     *User
}

func NewAccountRequestOwnerFromString(value string) *AccountRequestOwner {
	return &AccountRequestOwner{typeName: "string", String: value}
}

func NewAccountRequestOwnerFromUser(value *User) *AccountRequestOwner {
	return &AccountRequestOwner{typeName: "user", User: value}
}

func (a *AccountRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		a.typeName = "user"
		a.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountRequestOwner) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "user":
		return json.Marshal(a.User)
	}
}

type AccountRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (a *AccountRequestOwner) Accept(visitor AccountRequestOwnerVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "user":
		return visitor.VisitUser(a.User)
	}
}

type AccountToken struct {
	AccountToken string              `json:"account_token"`
	Integration  *AccountIntegration `json:"integration,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AccountToken) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountToken(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountToken) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// - `CALL` - CALL
// - `MEETING` - MEETING
// - `EMAIL` - EMAIL
type ActivityTypeEnum string

const (
	ActivityTypeEnumCall    ActivityTypeEnum = "CALL"
	ActivityTypeEnumMeeting ActivityTypeEnum = "MEETING"
	ActivityTypeEnumEmail   ActivityTypeEnum = "EMAIL"
)

func NewActivityTypeEnumFromString(s string) (ActivityTypeEnum, error) {
	switch s {
	case "CALL":
		return ActivityTypeEnumCall, nil
	case "MEETING":
		return ActivityTypeEnumMeeting, nil
	case "EMAIL":
		return ActivityTypeEnumEmail, nil
	}
	var t ActivityTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActivityTypeEnum) Ptr() *ActivityTypeEnum {
	return &a
}

// # The Address Object
//
// ### Description
//
// The `Address` object is used to represent an entity's address.
//
// ### Usage Example
//
// TODO
type Address struct {
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// Line 1 of the address's street.
	Street1 *string `json:"street_1,omitempty"`
	// Line 2 of the address's street.
	Street2 *string `json:"street_2,omitempty"`
	// The address's city.
	City *string `json:"city,omitempty"`
	// The address's state.
	State *string `json:"state,omitempty"`
	// The address's postal code.
	PostalCode *string `json:"postal_code,omitempty"`
	// The address's country.
	//
	// - `AF` - Afghanistan
	// - `AX` - Åland Islands
	// - `AL` - Albania
	// - `DZ` - Algeria
	// - `AS` - American Samoa
	// - `AD` - Andorra
	// - `AO` - Angola
	// - `AI` - Anguilla
	// - `AQ` - Antarctica
	// - `AG` - Antigua and Barbuda
	// - `AR` - Argentina
	// - `AM` - Armenia
	// - `AW` - Aruba
	// - `AU` - Australia
	// - `AT` - Austria
	// - `AZ` - Azerbaijan
	// - `BS` - Bahamas
	// - `BH` - Bahrain
	// - `BD` - Bangladesh
	// - `BB` - Barbados
	// - `BY` - Belarus
	// - `BE` - Belgium
	// - `BZ` - Belize
	// - `BJ` - Benin
	// - `BM` - Bermuda
	// - `BT` - Bhutan
	// - `BO` - Bolivia
	// - `BQ` - Bonaire, Sint Eustatius and Saba
	// - `BA` - Bosnia and Herzegovina
	// - `BW` - Botswana
	// - `BV` - Bouvet Island
	// - `BR` - Brazil
	// - `IO` - British Indian Ocean Territory
	// - `BN` - Brunei
	// - `BG` - Bulgaria
	// - `BF` - Burkina Faso
	// - `BI` - Burundi
	// - `CV` - Cabo Verde
	// - `KH` - Cambodia
	// - `CM` - Cameroon
	// - `CA` - Canada
	// - `KY` - Cayman Islands
	// - `CF` - Central African Republic
	// - `TD` - Chad
	// - `CL` - Chile
	// - `CN` - China
	// - `CX` - Christmas Island
	// - `CC` - Cocos (Keeling) Islands
	// - `CO` - Colombia
	// - `KM` - Comoros
	// - `CG` - Congo
	// - `CD` - Congo (the Democratic Republic of the)
	// - `CK` - Cook Islands
	// - `CR` - Costa Rica
	// - `CI` - Côte d'Ivoire
	// - `HR` - Croatia
	// - `CU` - Cuba
	// - `CW` - Curaçao
	// - `CY` - Cyprus
	// - `CZ` - Czechia
	// - `DK` - Denmark
	// - `DJ` - Djibouti
	// - `DM` - Dominica
	// - `DO` - Dominican Republic
	// - `EC` - Ecuador
	// - `EG` - Egypt
	// - `SV` - El Salvador
	// - `GQ` - Equatorial Guinea
	// - `ER` - Eritrea
	// - `EE` - Estonia
	// - `SZ` - Eswatini
	// - `ET` - Ethiopia
	// - `FK` - Falkland Islands (Malvinas)
	// - `FO` - Faroe Islands
	// - `FJ` - Fiji
	// - `FI` - Finland
	// - `FR` - France
	// - `GF` - French Guiana
	// - `PF` - French Polynesia
	// - `TF` - French Southern Territories
	// - `GA` - Gabon
	// - `GM` - Gambia
	// - `GE` - Georgia
	// - `DE` - Germany
	// - `GH` - Ghana
	// - `GI` - Gibraltar
	// - `GR` - Greece
	// - `GL` - Greenland
	// - `GD` - Grenada
	// - `GP` - Guadeloupe
	// - `GU` - Guam
	// - `GT` - Guatemala
	// - `GG` - Guernsey
	// - `GN` - Guinea
	// - `GW` - Guinea-Bissau
	// - `GY` - Guyana
	// - `HT` - Haiti
	// - `HM` - Heard Island and McDonald Islands
	// - `VA` - Holy See
	// - `HN` - Honduras
	// - `HK` - Hong Kong
	// - `HU` - Hungary
	// - `IS` - Iceland
	// - `IN` - India
	// - `ID` - Indonesia
	// - `IR` - Iran
	// - `IQ` - Iraq
	// - `IE` - Ireland
	// - `IM` - Isle of Man
	// - `IL` - Israel
	// - `IT` - Italy
	// - `JM` - Jamaica
	// - `JP` - Japan
	// - `JE` - Jersey
	// - `JO` - Jordan
	// - `KZ` - Kazakhstan
	// - `KE` - Kenya
	// - `KI` - Kiribati
	// - `KW` - Kuwait
	// - `KG` - Kyrgyzstan
	// - `LA` - Laos
	// - `LV` - Latvia
	// - `LB` - Lebanon
	// - `LS` - Lesotho
	// - `LR` - Liberia
	// - `LY` - Libya
	// - `LI` - Liechtenstein
	// - `LT` - Lithuania
	// - `LU` - Luxembourg
	// - `MO` - Macao
	// - `MG` - Madagascar
	// - `MW` - Malawi
	// - `MY` - Malaysia
	// - `MV` - Maldives
	// - `ML` - Mali
	// - `MT` - Malta
	// - `MH` - Marshall Islands
	// - `MQ` - Martinique
	// - `MR` - Mauritania
	// - `MU` - Mauritius
	// - `YT` - Mayotte
	// - `MX` - Mexico
	// - `FM` - Micronesia (Federated States of)
	// - `MD` - Moldova
	// - `MC` - Monaco
	// - `MN` - Mongolia
	// - `ME` - Montenegro
	// - `MS` - Montserrat
	// - `MA` - Morocco
	// - `MZ` - Mozambique
	// - `MM` - Myanmar
	// - `NA` - Namibia
	// - `NR` - Nauru
	// - `NP` - Nepal
	// - `NL` - Netherlands
	// - `NC` - New Caledonia
	// - `NZ` - New Zealand
	// - `NI` - Nicaragua
	// - `NE` - Niger
	// - `NG` - Nigeria
	// - `NU` - Niue
	// - `NF` - Norfolk Island
	// - `KP` - North Korea
	// - `MK` - North Macedonia
	// - `MP` - Northern Mariana Islands
	// - `NO` - Norway
	// - `OM` - Oman
	// - `PK` - Pakistan
	// - `PW` - Palau
	// - `PS` - Palestine, State of
	// - `PA` - Panama
	// - `PG` - Papua New Guinea
	// - `PY` - Paraguay
	// - `PE` - Peru
	// - `PH` - Philippines
	// - `PN` - Pitcairn
	// - `PL` - Poland
	// - `PT` - Portugal
	// - `PR` - Puerto Rico
	// - `QA` - Qatar
	// - `RE` - Réunion
	// - `RO` - Romania
	// - `RU` - Russia
	// - `RW` - Rwanda
	// - `BL` - Saint Barthélemy
	// - `SH` - Saint Helena, Ascension and Tristan da Cunha
	// - `KN` - Saint Kitts and Nevis
	// - `LC` - Saint Lucia
	// - `MF` - Saint Martin (French part)
	// - `PM` - Saint Pierre and Miquelon
	// - `VC` - Saint Vincent and the Grenadines
	// - `WS` - Samoa
	// - `SM` - San Marino
	// - `ST` - Sao Tome and Principe
	// - `SA` - Saudi Arabia
	// - `SN` - Senegal
	// - `RS` - Serbia
	// - `SC` - Seychelles
	// - `SL` - Sierra Leone
	// - `SG` - Singapore
	// - `SX` - Sint Maarten (Dutch part)
	// - `SK` - Slovakia
	// - `SI` - Slovenia
	// - `SB` - Solomon Islands
	// - `SO` - Somalia
	// - `ZA` - South Africa
	// - `GS` - South Georgia and the South Sandwich Islands
	// - `KR` - South Korea
	// - `SS` - South Sudan
	// - `ES` - Spain
	// - `LK` - Sri Lanka
	// - `SD` - Sudan
	// - `SR` - Suriname
	// - `SJ` - Svalbard and Jan Mayen
	// - `SE` - Sweden
	// - `CH` - Switzerland
	// - `SY` - Syria
	// - `TW` - Taiwan
	// - `TJ` - Tajikistan
	// - `TZ` - Tanzania
	// - `TH` - Thailand
	// - `TL` - Timor-Leste
	// - `TG` - Togo
	// - `TK` - Tokelau
	// - `TO` - Tonga
	// - `TT` - Trinidad and Tobago
	// - `TN` - Tunisia
	// - `TR` - Turkey
	// - `TM` - Turkmenistan
	// - `TC` - Turks and Caicos Islands
	// - `TV` - Tuvalu
	// - `UG` - Uganda
	// - `UA` - Ukraine
	// - `AE` - United Arab Emirates
	// - `GB` - United Kingdom
	// - `UM` - United States Minor Outlying Islands
	// - `US` - United States of America
	// - `UY` - Uruguay
	// - `UZ` - Uzbekistan
	// - `VU` - Vanuatu
	// - `VE` - Venezuela
	// - `VN` - Vietnam
	// - `VG` - Virgin Islands (British)
	// - `VI` - Virgin Islands (U.S.)
	// - `WF` - Wallis and Futuna
	// - `EH` - Western Sahara
	// - `YE` - Yemen
	// - `ZM` - Zambia
	// - `ZW` - Zimbabwe
	Country *AddressCountry `json:"country,omitempty"`
	// The address type.
	//
	// - `BILLING` - BILLING
	// - `SHIPPING` - SHIPPING
	AddressType *AddressAddressType `json:"address_type,omitempty"`

	_rawJSON json.RawMessage
}

func (a *Address) UnmarshalJSON(data []byte) error {
	type unmarshaler Address
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Address(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Address) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The address type.
//
// - `BILLING` - BILLING
// - `SHIPPING` - SHIPPING
type AddressAddressType struct {
	typeName        string
	AddressTypeEnum AddressTypeEnum
	String          string
}

func NewAddressAddressTypeFromAddressTypeEnum(value AddressTypeEnum) *AddressAddressType {
	return &AddressAddressType{typeName: "addressTypeEnum", AddressTypeEnum: value}
}

func NewAddressAddressTypeFromString(value string) *AddressAddressType {
	return &AddressAddressType{typeName: "string", String: value}
}

func (a *AddressAddressType) UnmarshalJSON(data []byte) error {
	var valueAddressTypeEnum AddressTypeEnum
	if err := json.Unmarshal(data, &valueAddressTypeEnum); err == nil {
		a.typeName = "addressTypeEnum"
		a.AddressTypeEnum = valueAddressTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddressAddressType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "addressTypeEnum":
		return json.Marshal(a.AddressTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AddressAddressTypeVisitor interface {
	VisitAddressTypeEnum(AddressTypeEnum) error
	VisitString(string) error
}

func (a *AddressAddressType) Accept(visitor AddressAddressTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "addressTypeEnum":
		return visitor.VisitAddressTypeEnum(a.AddressTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// The address's country.
//
// - `AF` - Afghanistan
// - `AX` - Åland Islands
// - `AL` - Albania
// - `DZ` - Algeria
// - `AS` - American Samoa
// - `AD` - Andorra
// - `AO` - Angola
// - `AI` - Anguilla
// - `AQ` - Antarctica
// - `AG` - Antigua and Barbuda
// - `AR` - Argentina
// - `AM` - Armenia
// - `AW` - Aruba
// - `AU` - Australia
// - `AT` - Austria
// - `AZ` - Azerbaijan
// - `BS` - Bahamas
// - `BH` - Bahrain
// - `BD` - Bangladesh
// - `BB` - Barbados
// - `BY` - Belarus
// - `BE` - Belgium
// - `BZ` - Belize
// - `BJ` - Benin
// - `BM` - Bermuda
// - `BT` - Bhutan
// - `BO` - Bolivia
// - `BQ` - Bonaire, Sint Eustatius and Saba
// - `BA` - Bosnia and Herzegovina
// - `BW` - Botswana
// - `BV` - Bouvet Island
// - `BR` - Brazil
// - `IO` - British Indian Ocean Territory
// - `BN` - Brunei
// - `BG` - Bulgaria
// - `BF` - Burkina Faso
// - `BI` - Burundi
// - `CV` - Cabo Verde
// - `KH` - Cambodia
// - `CM` - Cameroon
// - `CA` - Canada
// - `KY` - Cayman Islands
// - `CF` - Central African Republic
// - `TD` - Chad
// - `CL` - Chile
// - `CN` - China
// - `CX` - Christmas Island
// - `CC` - Cocos (Keeling) Islands
// - `CO` - Colombia
// - `KM` - Comoros
// - `CG` - Congo
// - `CD` - Congo (the Democratic Republic of the)
// - `CK` - Cook Islands
// - `CR` - Costa Rica
// - `CI` - Côte d'Ivoire
// - `HR` - Croatia
// - `CU` - Cuba
// - `CW` - Curaçao
// - `CY` - Cyprus
// - `CZ` - Czechia
// - `DK` - Denmark
// - `DJ` - Djibouti
// - `DM` - Dominica
// - `DO` - Dominican Republic
// - `EC` - Ecuador
// - `EG` - Egypt
// - `SV` - El Salvador
// - `GQ` - Equatorial Guinea
// - `ER` - Eritrea
// - `EE` - Estonia
// - `SZ` - Eswatini
// - `ET` - Ethiopia
// - `FK` - Falkland Islands (Malvinas)
// - `FO` - Faroe Islands
// - `FJ` - Fiji
// - `FI` - Finland
// - `FR` - France
// - `GF` - French Guiana
// - `PF` - French Polynesia
// - `TF` - French Southern Territories
// - `GA` - Gabon
// - `GM` - Gambia
// - `GE` - Georgia
// - `DE` - Germany
// - `GH` - Ghana
// - `GI` - Gibraltar
// - `GR` - Greece
// - `GL` - Greenland
// - `GD` - Grenada
// - `GP` - Guadeloupe
// - `GU` - Guam
// - `GT` - Guatemala
// - `GG` - Guernsey
// - `GN` - Guinea
// - `GW` - Guinea-Bissau
// - `GY` - Guyana
// - `HT` - Haiti
// - `HM` - Heard Island and McDonald Islands
// - `VA` - Holy See
// - `HN` - Honduras
// - `HK` - Hong Kong
// - `HU` - Hungary
// - `IS` - Iceland
// - `IN` - India
// - `ID` - Indonesia
// - `IR` - Iran
// - `IQ` - Iraq
// - `IE` - Ireland
// - `IM` - Isle of Man
// - `IL` - Israel
// - `IT` - Italy
// - `JM` - Jamaica
// - `JP` - Japan
// - `JE` - Jersey
// - `JO` - Jordan
// - `KZ` - Kazakhstan
// - `KE` - Kenya
// - `KI` - Kiribati
// - `KW` - Kuwait
// - `KG` - Kyrgyzstan
// - `LA` - Laos
// - `LV` - Latvia
// - `LB` - Lebanon
// - `LS` - Lesotho
// - `LR` - Liberia
// - `LY` - Libya
// - `LI` - Liechtenstein
// - `LT` - Lithuania
// - `LU` - Luxembourg
// - `MO` - Macao
// - `MG` - Madagascar
// - `MW` - Malawi
// - `MY` - Malaysia
// - `MV` - Maldives
// - `ML` - Mali
// - `MT` - Malta
// - `MH` - Marshall Islands
// - `MQ` - Martinique
// - `MR` - Mauritania
// - `MU` - Mauritius
// - `YT` - Mayotte
// - `MX` - Mexico
// - `FM` - Micronesia (Federated States of)
// - `MD` - Moldova
// - `MC` - Monaco
// - `MN` - Mongolia
// - `ME` - Montenegro
// - `MS` - Montserrat
// - `MA` - Morocco
// - `MZ` - Mozambique
// - `MM` - Myanmar
// - `NA` - Namibia
// - `NR` - Nauru
// - `NP` - Nepal
// - `NL` - Netherlands
// - `NC` - New Caledonia
// - `NZ` - New Zealand
// - `NI` - Nicaragua
// - `NE` - Niger
// - `NG` - Nigeria
// - `NU` - Niue
// - `NF` - Norfolk Island
// - `KP` - North Korea
// - `MK` - North Macedonia
// - `MP` - Northern Mariana Islands
// - `NO` - Norway
// - `OM` - Oman
// - `PK` - Pakistan
// - `PW` - Palau
// - `PS` - Palestine, State of
// - `PA` - Panama
// - `PG` - Papua New Guinea
// - `PY` - Paraguay
// - `PE` - Peru
// - `PH` - Philippines
// - `PN` - Pitcairn
// - `PL` - Poland
// - `PT` - Portugal
// - `PR` - Puerto Rico
// - `QA` - Qatar
// - `RE` - Réunion
// - `RO` - Romania
// - `RU` - Russia
// - `RW` - Rwanda
// - `BL` - Saint Barthélemy
// - `SH` - Saint Helena, Ascension and Tristan da Cunha
// - `KN` - Saint Kitts and Nevis
// - `LC` - Saint Lucia
// - `MF` - Saint Martin (French part)
// - `PM` - Saint Pierre and Miquelon
// - `VC` - Saint Vincent and the Grenadines
// - `WS` - Samoa
// - `SM` - San Marino
// - `ST` - Sao Tome and Principe
// - `SA` - Saudi Arabia
// - `SN` - Senegal
// - `RS` - Serbia
// - `SC` - Seychelles
// - `SL` - Sierra Leone
// - `SG` - Singapore
// - `SX` - Sint Maarten (Dutch part)
// - `SK` - Slovakia
// - `SI` - Slovenia
// - `SB` - Solomon Islands
// - `SO` - Somalia
// - `ZA` - South Africa
// - `GS` - South Georgia and the South Sandwich Islands
// - `KR` - South Korea
// - `SS` - South Sudan
// - `ES` - Spain
// - `LK` - Sri Lanka
// - `SD` - Sudan
// - `SR` - Suriname
// - `SJ` - Svalbard and Jan Mayen
// - `SE` - Sweden
// - `CH` - Switzerland
// - `SY` - Syria
// - `TW` - Taiwan
// - `TJ` - Tajikistan
// - `TZ` - Tanzania
// - `TH` - Thailand
// - `TL` - Timor-Leste
// - `TG` - Togo
// - `TK` - Tokelau
// - `TO` - Tonga
// - `TT` - Trinidad and Tobago
// - `TN` - Tunisia
// - `TR` - Turkey
// - `TM` - Turkmenistan
// - `TC` - Turks and Caicos Islands
// - `TV` - Tuvalu
// - `UG` - Uganda
// - `UA` - Ukraine
// - `AE` - United Arab Emirates
// - `GB` - United Kingdom
// - `UM` - United States Minor Outlying Islands
// - `US` - United States of America
// - `UY` - Uruguay
// - `UZ` - Uzbekistan
// - `VU` - Vanuatu
// - `VE` - Venezuela
// - `VN` - Vietnam
// - `VG` - Virgin Islands (British)
// - `VI` - Virgin Islands (U.S.)
// - `WF` - Wallis and Futuna
// - `EH` - Western Sahara
// - `YE` - Yemen
// - `ZM` - Zambia
// - `ZW` - Zimbabwe
type AddressCountry struct {
	typeName    string
	CountryEnum CountryEnum
	String      string
}

func NewAddressCountryFromCountryEnum(value CountryEnum) *AddressCountry {
	return &AddressCountry{typeName: "countryEnum", CountryEnum: value}
}

func NewAddressCountryFromString(value string) *AddressCountry {
	return &AddressCountry{typeName: "string", String: value}
}

func (a *AddressCountry) UnmarshalJSON(data []byte) error {
	var valueCountryEnum CountryEnum
	if err := json.Unmarshal(data, &valueCountryEnum); err == nil {
		a.typeName = "countryEnum"
		a.CountryEnum = valueCountryEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddressCountry) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "countryEnum":
		return json.Marshal(a.CountryEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AddressCountryVisitor interface {
	VisitCountryEnum(CountryEnum) error
	VisitString(string) error
}

func (a *AddressCountry) Accept(visitor AddressCountryVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "countryEnum":
		return visitor.VisitCountryEnum(a.CountryEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// # The Address Object
//
// ### Description
//
// The `Address` object is used to represent an entity's address.
//
// ### Usage Example
//
// TODO
type AddressRequest struct {
	// Line 1 of the address's street.
	Street1 *string `json:"street_1,omitempty"`
	// Line 2 of the address's street.
	Street2 *string `json:"street_2,omitempty"`
	// The address's city.
	City *string `json:"city,omitempty"`
	// The address's state.
	State *string `json:"state,omitempty"`
	// The address's postal code.
	PostalCode *string `json:"postal_code,omitempty"`
	// The address's country.
	//
	// - `AF` - Afghanistan
	// - `AX` - Åland Islands
	// - `AL` - Albania
	// - `DZ` - Algeria
	// - `AS` - American Samoa
	// - `AD` - Andorra
	// - `AO` - Angola
	// - `AI` - Anguilla
	// - `AQ` - Antarctica
	// - `AG` - Antigua and Barbuda
	// - `AR` - Argentina
	// - `AM` - Armenia
	// - `AW` - Aruba
	// - `AU` - Australia
	// - `AT` - Austria
	// - `AZ` - Azerbaijan
	// - `BS` - Bahamas
	// - `BH` - Bahrain
	// - `BD` - Bangladesh
	// - `BB` - Barbados
	// - `BY` - Belarus
	// - `BE` - Belgium
	// - `BZ` - Belize
	// - `BJ` - Benin
	// - `BM` - Bermuda
	// - `BT` - Bhutan
	// - `BO` - Bolivia
	// - `BQ` - Bonaire, Sint Eustatius and Saba
	// - `BA` - Bosnia and Herzegovina
	// - `BW` - Botswana
	// - `BV` - Bouvet Island
	// - `BR` - Brazil
	// - `IO` - British Indian Ocean Territory
	// - `BN` - Brunei
	// - `BG` - Bulgaria
	// - `BF` - Burkina Faso
	// - `BI` - Burundi
	// - `CV` - Cabo Verde
	// - `KH` - Cambodia
	// - `CM` - Cameroon
	// - `CA` - Canada
	// - `KY` - Cayman Islands
	// - `CF` - Central African Republic
	// - `TD` - Chad
	// - `CL` - Chile
	// - `CN` - China
	// - `CX` - Christmas Island
	// - `CC` - Cocos (Keeling) Islands
	// - `CO` - Colombia
	// - `KM` - Comoros
	// - `CG` - Congo
	// - `CD` - Congo (the Democratic Republic of the)
	// - `CK` - Cook Islands
	// - `CR` - Costa Rica
	// - `CI` - Côte d'Ivoire
	// - `HR` - Croatia
	// - `CU` - Cuba
	// - `CW` - Curaçao
	// - `CY` - Cyprus
	// - `CZ` - Czechia
	// - `DK` - Denmark
	// - `DJ` - Djibouti
	// - `DM` - Dominica
	// - `DO` - Dominican Republic
	// - `EC` - Ecuador
	// - `EG` - Egypt
	// - `SV` - El Salvador
	// - `GQ` - Equatorial Guinea
	// - `ER` - Eritrea
	// - `EE` - Estonia
	// - `SZ` - Eswatini
	// - `ET` - Ethiopia
	// - `FK` - Falkland Islands (Malvinas)
	// - `FO` - Faroe Islands
	// - `FJ` - Fiji
	// - `FI` - Finland
	// - `FR` - France
	// - `GF` - French Guiana
	// - `PF` - French Polynesia
	// - `TF` - French Southern Territories
	// - `GA` - Gabon
	// - `GM` - Gambia
	// - `GE` - Georgia
	// - `DE` - Germany
	// - `GH` - Ghana
	// - `GI` - Gibraltar
	// - `GR` - Greece
	// - `GL` - Greenland
	// - `GD` - Grenada
	// - `GP` - Guadeloupe
	// - `GU` - Guam
	// - `GT` - Guatemala
	// - `GG` - Guernsey
	// - `GN` - Guinea
	// - `GW` - Guinea-Bissau
	// - `GY` - Guyana
	// - `HT` - Haiti
	// - `HM` - Heard Island and McDonald Islands
	// - `VA` - Holy See
	// - `HN` - Honduras
	// - `HK` - Hong Kong
	// - `HU` - Hungary
	// - `IS` - Iceland
	// - `IN` - India
	// - `ID` - Indonesia
	// - `IR` - Iran
	// - `IQ` - Iraq
	// - `IE` - Ireland
	// - `IM` - Isle of Man
	// - `IL` - Israel
	// - `IT` - Italy
	// - `JM` - Jamaica
	// - `JP` - Japan
	// - `JE` - Jersey
	// - `JO` - Jordan
	// - `KZ` - Kazakhstan
	// - `KE` - Kenya
	// - `KI` - Kiribati
	// - `KW` - Kuwait
	// - `KG` - Kyrgyzstan
	// - `LA` - Laos
	// - `LV` - Latvia
	// - `LB` - Lebanon
	// - `LS` - Lesotho
	// - `LR` - Liberia
	// - `LY` - Libya
	// - `LI` - Liechtenstein
	// - `LT` - Lithuania
	// - `LU` - Luxembourg
	// - `MO` - Macao
	// - `MG` - Madagascar
	// - `MW` - Malawi
	// - `MY` - Malaysia
	// - `MV` - Maldives
	// - `ML` - Mali
	// - `MT` - Malta
	// - `MH` - Marshall Islands
	// - `MQ` - Martinique
	// - `MR` - Mauritania
	// - `MU` - Mauritius
	// - `YT` - Mayotte
	// - `MX` - Mexico
	// - `FM` - Micronesia (Federated States of)
	// - `MD` - Moldova
	// - `MC` - Monaco
	// - `MN` - Mongolia
	// - `ME` - Montenegro
	// - `MS` - Montserrat
	// - `MA` - Morocco
	// - `MZ` - Mozambique
	// - `MM` - Myanmar
	// - `NA` - Namibia
	// - `NR` - Nauru
	// - `NP` - Nepal
	// - `NL` - Netherlands
	// - `NC` - New Caledonia
	// - `NZ` - New Zealand
	// - `NI` - Nicaragua
	// - `NE` - Niger
	// - `NG` - Nigeria
	// - `NU` - Niue
	// - `NF` - Norfolk Island
	// - `KP` - North Korea
	// - `MK` - North Macedonia
	// - `MP` - Northern Mariana Islands
	// - `NO` - Norway
	// - `OM` - Oman
	// - `PK` - Pakistan
	// - `PW` - Palau
	// - `PS` - Palestine, State of
	// - `PA` - Panama
	// - `PG` - Papua New Guinea
	// - `PY` - Paraguay
	// - `PE` - Peru
	// - `PH` - Philippines
	// - `PN` - Pitcairn
	// - `PL` - Poland
	// - `PT` - Portugal
	// - `PR` - Puerto Rico
	// - `QA` - Qatar
	// - `RE` - Réunion
	// - `RO` - Romania
	// - `RU` - Russia
	// - `RW` - Rwanda
	// - `BL` - Saint Barthélemy
	// - `SH` - Saint Helena, Ascension and Tristan da Cunha
	// - `KN` - Saint Kitts and Nevis
	// - `LC` - Saint Lucia
	// - `MF` - Saint Martin (French part)
	// - `PM` - Saint Pierre and Miquelon
	// - `VC` - Saint Vincent and the Grenadines
	// - `WS` - Samoa
	// - `SM` - San Marino
	// - `ST` - Sao Tome and Principe
	// - `SA` - Saudi Arabia
	// - `SN` - Senegal
	// - `RS` - Serbia
	// - `SC` - Seychelles
	// - `SL` - Sierra Leone
	// - `SG` - Singapore
	// - `SX` - Sint Maarten (Dutch part)
	// - `SK` - Slovakia
	// - `SI` - Slovenia
	// - `SB` - Solomon Islands
	// - `SO` - Somalia
	// - `ZA` - South Africa
	// - `GS` - South Georgia and the South Sandwich Islands
	// - `KR` - South Korea
	// - `SS` - South Sudan
	// - `ES` - Spain
	// - `LK` - Sri Lanka
	// - `SD` - Sudan
	// - `SR` - Suriname
	// - `SJ` - Svalbard and Jan Mayen
	// - `SE` - Sweden
	// - `CH` - Switzerland
	// - `SY` - Syria
	// - `TW` - Taiwan
	// - `TJ` - Tajikistan
	// - `TZ` - Tanzania
	// - `TH` - Thailand
	// - `TL` - Timor-Leste
	// - `TG` - Togo
	// - `TK` - Tokelau
	// - `TO` - Tonga
	// - `TT` - Trinidad and Tobago
	// - `TN` - Tunisia
	// - `TR` - Turkey
	// - `TM` - Turkmenistan
	// - `TC` - Turks and Caicos Islands
	// - `TV` - Tuvalu
	// - `UG` - Uganda
	// - `UA` - Ukraine
	// - `AE` - United Arab Emirates
	// - `GB` - United Kingdom
	// - `UM` - United States Minor Outlying Islands
	// - `US` - United States of America
	// - `UY` - Uruguay
	// - `UZ` - Uzbekistan
	// - `VU` - Vanuatu
	// - `VE` - Venezuela
	// - `VN` - Vietnam
	// - `VG` - Virgin Islands (British)
	// - `VI` - Virgin Islands (U.S.)
	// - `WF` - Wallis and Futuna
	// - `EH` - Western Sahara
	// - `YE` - Yemen
	// - `ZM` - Zambia
	// - `ZW` - Zimbabwe
	Country *AddressRequestCountry `json:"country,omitempty"`
	// The address type.
	//
	// - `BILLING` - BILLING
	// - `SHIPPING` - SHIPPING
	AddressType         *AddressRequestAddressType `json:"address_type,omitempty"`
	IntegrationParams   map[string]interface{}     `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}     `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AddressRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler AddressRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddressRequest(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddressRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The address type.
//
// - `BILLING` - BILLING
// - `SHIPPING` - SHIPPING
type AddressRequestAddressType struct {
	typeName        string
	AddressTypeEnum AddressTypeEnum
	String          string
}

func NewAddressRequestAddressTypeFromAddressTypeEnum(value AddressTypeEnum) *AddressRequestAddressType {
	return &AddressRequestAddressType{typeName: "addressTypeEnum", AddressTypeEnum: value}
}

func NewAddressRequestAddressTypeFromString(value string) *AddressRequestAddressType {
	return &AddressRequestAddressType{typeName: "string", String: value}
}

func (a *AddressRequestAddressType) UnmarshalJSON(data []byte) error {
	var valueAddressTypeEnum AddressTypeEnum
	if err := json.Unmarshal(data, &valueAddressTypeEnum); err == nil {
		a.typeName = "addressTypeEnum"
		a.AddressTypeEnum = valueAddressTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddressRequestAddressType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "addressTypeEnum":
		return json.Marshal(a.AddressTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AddressRequestAddressTypeVisitor interface {
	VisitAddressTypeEnum(AddressTypeEnum) error
	VisitString(string) error
}

func (a *AddressRequestAddressType) Accept(visitor AddressRequestAddressTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "addressTypeEnum":
		return visitor.VisitAddressTypeEnum(a.AddressTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// The address's country.
//
// - `AF` - Afghanistan
// - `AX` - Åland Islands
// - `AL` - Albania
// - `DZ` - Algeria
// - `AS` - American Samoa
// - `AD` - Andorra
// - `AO` - Angola
// - `AI` - Anguilla
// - `AQ` - Antarctica
// - `AG` - Antigua and Barbuda
// - `AR` - Argentina
// - `AM` - Armenia
// - `AW` - Aruba
// - `AU` - Australia
// - `AT` - Austria
// - `AZ` - Azerbaijan
// - `BS` - Bahamas
// - `BH` - Bahrain
// - `BD` - Bangladesh
// - `BB` - Barbados
// - `BY` - Belarus
// - `BE` - Belgium
// - `BZ` - Belize
// - `BJ` - Benin
// - `BM` - Bermuda
// - `BT` - Bhutan
// - `BO` - Bolivia
// - `BQ` - Bonaire, Sint Eustatius and Saba
// - `BA` - Bosnia and Herzegovina
// - `BW` - Botswana
// - `BV` - Bouvet Island
// - `BR` - Brazil
// - `IO` - British Indian Ocean Territory
// - `BN` - Brunei
// - `BG` - Bulgaria
// - `BF` - Burkina Faso
// - `BI` - Burundi
// - `CV` - Cabo Verde
// - `KH` - Cambodia
// - `CM` - Cameroon
// - `CA` - Canada
// - `KY` - Cayman Islands
// - `CF` - Central African Republic
// - `TD` - Chad
// - `CL` - Chile
// - `CN` - China
// - `CX` - Christmas Island
// - `CC` - Cocos (Keeling) Islands
// - `CO` - Colombia
// - `KM` - Comoros
// - `CG` - Congo
// - `CD` - Congo (the Democratic Republic of the)
// - `CK` - Cook Islands
// - `CR` - Costa Rica
// - `CI` - Côte d'Ivoire
// - `HR` - Croatia
// - `CU` - Cuba
// - `CW` - Curaçao
// - `CY` - Cyprus
// - `CZ` - Czechia
// - `DK` - Denmark
// - `DJ` - Djibouti
// - `DM` - Dominica
// - `DO` - Dominican Republic
// - `EC` - Ecuador
// - `EG` - Egypt
// - `SV` - El Salvador
// - `GQ` - Equatorial Guinea
// - `ER` - Eritrea
// - `EE` - Estonia
// - `SZ` - Eswatini
// - `ET` - Ethiopia
// - `FK` - Falkland Islands (Malvinas)
// - `FO` - Faroe Islands
// - `FJ` - Fiji
// - `FI` - Finland
// - `FR` - France
// - `GF` - French Guiana
// - `PF` - French Polynesia
// - `TF` - French Southern Territories
// - `GA` - Gabon
// - `GM` - Gambia
// - `GE` - Georgia
// - `DE` - Germany
// - `GH` - Ghana
// - `GI` - Gibraltar
// - `GR` - Greece
// - `GL` - Greenland
// - `GD` - Grenada
// - `GP` - Guadeloupe
// - `GU` - Guam
// - `GT` - Guatemala
// - `GG` - Guernsey
// - `GN` - Guinea
// - `GW` - Guinea-Bissau
// - `GY` - Guyana
// - `HT` - Haiti
// - `HM` - Heard Island and McDonald Islands
// - `VA` - Holy See
// - `HN` - Honduras
// - `HK` - Hong Kong
// - `HU` - Hungary
// - `IS` - Iceland
// - `IN` - India
// - `ID` - Indonesia
// - `IR` - Iran
// - `IQ` - Iraq
// - `IE` - Ireland
// - `IM` - Isle of Man
// - `IL` - Israel
// - `IT` - Italy
// - `JM` - Jamaica
// - `JP` - Japan
// - `JE` - Jersey
// - `JO` - Jordan
// - `KZ` - Kazakhstan
// - `KE` - Kenya
// - `KI` - Kiribati
// - `KW` - Kuwait
// - `KG` - Kyrgyzstan
// - `LA` - Laos
// - `LV` - Latvia
// - `LB` - Lebanon
// - `LS` - Lesotho
// - `LR` - Liberia
// - `LY` - Libya
// - `LI` - Liechtenstein
// - `LT` - Lithuania
// - `LU` - Luxembourg
// - `MO` - Macao
// - `MG` - Madagascar
// - `MW` - Malawi
// - `MY` - Malaysia
// - `MV` - Maldives
// - `ML` - Mali
// - `MT` - Malta
// - `MH` - Marshall Islands
// - `MQ` - Martinique
// - `MR` - Mauritania
// - `MU` - Mauritius
// - `YT` - Mayotte
// - `MX` - Mexico
// - `FM` - Micronesia (Federated States of)
// - `MD` - Moldova
// - `MC` - Monaco
// - `MN` - Mongolia
// - `ME` - Montenegro
// - `MS` - Montserrat
// - `MA` - Morocco
// - `MZ` - Mozambique
// - `MM` - Myanmar
// - `NA` - Namibia
// - `NR` - Nauru
// - `NP` - Nepal
// - `NL` - Netherlands
// - `NC` - New Caledonia
// - `NZ` - New Zealand
// - `NI` - Nicaragua
// - `NE` - Niger
// - `NG` - Nigeria
// - `NU` - Niue
// - `NF` - Norfolk Island
// - `KP` - North Korea
// - `MK` - North Macedonia
// - `MP` - Northern Mariana Islands
// - `NO` - Norway
// - `OM` - Oman
// - `PK` - Pakistan
// - `PW` - Palau
// - `PS` - Palestine, State of
// - `PA` - Panama
// - `PG` - Papua New Guinea
// - `PY` - Paraguay
// - `PE` - Peru
// - `PH` - Philippines
// - `PN` - Pitcairn
// - `PL` - Poland
// - `PT` - Portugal
// - `PR` - Puerto Rico
// - `QA` - Qatar
// - `RE` - Réunion
// - `RO` - Romania
// - `RU` - Russia
// - `RW` - Rwanda
// - `BL` - Saint Barthélemy
// - `SH` - Saint Helena, Ascension and Tristan da Cunha
// - `KN` - Saint Kitts and Nevis
// - `LC` - Saint Lucia
// - `MF` - Saint Martin (French part)
// - `PM` - Saint Pierre and Miquelon
// - `VC` - Saint Vincent and the Grenadines
// - `WS` - Samoa
// - `SM` - San Marino
// - `ST` - Sao Tome and Principe
// - `SA` - Saudi Arabia
// - `SN` - Senegal
// - `RS` - Serbia
// - `SC` - Seychelles
// - `SL` - Sierra Leone
// - `SG` - Singapore
// - `SX` - Sint Maarten (Dutch part)
// - `SK` - Slovakia
// - `SI` - Slovenia
// - `SB` - Solomon Islands
// - `SO` - Somalia
// - `ZA` - South Africa
// - `GS` - South Georgia and the South Sandwich Islands
// - `KR` - South Korea
// - `SS` - South Sudan
// - `ES` - Spain
// - `LK` - Sri Lanka
// - `SD` - Sudan
// - `SR` - Suriname
// - `SJ` - Svalbard and Jan Mayen
// - `SE` - Sweden
// - `CH` - Switzerland
// - `SY` - Syria
// - `TW` - Taiwan
// - `TJ` - Tajikistan
// - `TZ` - Tanzania
// - `TH` - Thailand
// - `TL` - Timor-Leste
// - `TG` - Togo
// - `TK` - Tokelau
// - `TO` - Tonga
// - `TT` - Trinidad and Tobago
// - `TN` - Tunisia
// - `TR` - Turkey
// - `TM` - Turkmenistan
// - `TC` - Turks and Caicos Islands
// - `TV` - Tuvalu
// - `UG` - Uganda
// - `UA` - Ukraine
// - `AE` - United Arab Emirates
// - `GB` - United Kingdom
// - `UM` - United States Minor Outlying Islands
// - `US` - United States of America
// - `UY` - Uruguay
// - `UZ` - Uzbekistan
// - `VU` - Vanuatu
// - `VE` - Venezuela
// - `VN` - Vietnam
// - `VG` - Virgin Islands (British)
// - `VI` - Virgin Islands (U.S.)
// - `WF` - Wallis and Futuna
// - `EH` - Western Sahara
// - `YE` - Yemen
// - `ZM` - Zambia
// - `ZW` - Zimbabwe
type AddressRequestCountry struct {
	typeName    string
	CountryEnum CountryEnum
	String      string
}

func NewAddressRequestCountryFromCountryEnum(value CountryEnum) *AddressRequestCountry {
	return &AddressRequestCountry{typeName: "countryEnum", CountryEnum: value}
}

func NewAddressRequestCountryFromString(value string) *AddressRequestCountry {
	return &AddressRequestCountry{typeName: "string", String: value}
}

func (a *AddressRequestCountry) UnmarshalJSON(data []byte) error {
	var valueCountryEnum CountryEnum
	if err := json.Unmarshal(data, &valueCountryEnum); err == nil {
		a.typeName = "countryEnum"
		a.CountryEnum = valueCountryEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddressRequestCountry) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "countryEnum":
		return json.Marshal(a.CountryEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AddressRequestCountryVisitor interface {
	VisitCountryEnum(CountryEnum) error
	VisitString(string) error
}

func (a *AddressRequestCountry) Accept(visitor AddressRequestCountryVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "countryEnum":
		return visitor.VisitCountryEnum(a.CountryEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// - `BILLING` - BILLING
// - `SHIPPING` - SHIPPING
type AddressTypeEnum string

const (
	AddressTypeEnumBilling  AddressTypeEnum = "BILLING"
	AddressTypeEnumShipping AddressTypeEnum = "SHIPPING"
)

func NewAddressTypeEnumFromString(s string) (AddressTypeEnum, error) {
	switch s {
	case "BILLING":
		return AddressTypeEnumBilling, nil
	case "SHIPPING":
		return AddressTypeEnumShipping, nil
	}
	var t AddressTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AddressTypeEnum) Ptr() *AddressTypeEnum {
	return &a
}

type AdvancedMetadata struct {
	Id           string        `json:"id"`
	DisplayName  *string       `json:"display_name,omitempty"`
	Description  *string       `json:"description,omitempty"`
	IsRequired   *bool         `json:"is_required,omitempty"`
	IsCustom     *bool         `json:"is_custom,omitempty"`
	FieldChoices []interface{} `json:"field_choices,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AdvancedMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler AdvancedMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdvancedMetadata(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdvancedMetadata) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The Association Object
//
// ### Description
//
// The `Association` record refers to an instance of an Association Type.
//
// ### Usage Example
//
// TODO
type Association struct {
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt   *time.Time `json:"modified_at,omitempty"`
	SourceObject *string    `json:"source_object,omitempty"`
	TargetObject *string    `json:"target_object,omitempty"`
	// The association type the association belongs to.
	AssociationType *AssociationAssociationType `json:"association_type,omitempty"`

	_rawJSON json.RawMessage
}

func (a *Association) UnmarshalJSON(data []byte) error {
	type unmarshaler Association
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Association(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Association) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The association type the association belongs to.
type AssociationAssociationType struct {
	typeName        string
	String          string
	AssociationType *AssociationType
}

func NewAssociationAssociationTypeFromString(value string) *AssociationAssociationType {
	return &AssociationAssociationType{typeName: "string", String: value}
}

func NewAssociationAssociationTypeFromAssociationType(value *AssociationType) *AssociationAssociationType {
	return &AssociationAssociationType{typeName: "associationType", AssociationType: value}
}

func (a *AssociationAssociationType) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueAssociationType := new(AssociationType)
	if err := json.Unmarshal(data, &valueAssociationType); err == nil {
		a.typeName = "associationType"
		a.AssociationType = valueAssociationType
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AssociationAssociationType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "associationType":
		return json.Marshal(a.AssociationType)
	}
}

type AssociationAssociationTypeVisitor interface {
	VisitString(string) error
	VisitAssociationType(*AssociationType) error
}

func (a *AssociationAssociationType) Accept(visitor AssociationAssociationTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "associationType":
		return visitor.VisitAssociationType(a.AssociationType)
	}
}

type AssociationSubType struct {
	Id *string `json:"id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	OriginType *string    `json:"origin_type,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AssociationSubType) UnmarshalJSON(data []byte) error {
	type unmarshaler AssociationSubType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AssociationSubType(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AssociationSubType) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// # The AssociationType Object
//
// ### Description
//
// The `Association Type` object represents the relationship between two objects.
//
// ### Usage Example
//
// TODO
type AssociationType struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The class of the source object (Custom Object or Common Model) for the association type.
	SourceObjectClass   map[string]interface{}      `json:"source_object_class,omitempty"`
	TargetObjectClasses []*AssociationSubType       `json:"target_object_classes,omitempty"`
	RemoteKeyName       *string                     `json:"remote_key_name,omitempty"`
	DisplayName         *string                     `json:"display_name,omitempty"`
	Cardinality         *AssociationTypeCardinality `json:"cardinality,omitempty"`
	IsRequired          *bool                       `json:"is_required,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AssociationType) UnmarshalJSON(data []byte) error {
	type unmarshaler AssociationType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AssociationType(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AssociationType) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AssociationTypeCardinality struct {
	typeName        string
	CardinalityEnum CardinalityEnum
	String          string
}

func NewAssociationTypeCardinalityFromCardinalityEnum(value CardinalityEnum) *AssociationTypeCardinality {
	return &AssociationTypeCardinality{typeName: "cardinalityEnum", CardinalityEnum: value}
}

func NewAssociationTypeCardinalityFromString(value string) *AssociationTypeCardinality {
	return &AssociationTypeCardinality{typeName: "string", String: value}
}

func (a *AssociationTypeCardinality) UnmarshalJSON(data []byte) error {
	var valueCardinalityEnum CardinalityEnum
	if err := json.Unmarshal(data, &valueCardinalityEnum); err == nil {
		a.typeName = "cardinalityEnum"
		a.CardinalityEnum = valueCardinalityEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AssociationTypeCardinality) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "cardinalityEnum":
		return json.Marshal(a.CardinalityEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AssociationTypeCardinalityVisitor interface {
	VisitCardinalityEnum(CardinalityEnum) error
	VisitString(string) error
}

func (a *AssociationTypeCardinality) Accept(visitor AssociationTypeCardinalityVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "cardinalityEnum":
		return visitor.VisitCardinalityEnum(a.CardinalityEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

type AssociationTypeRequestRequest struct {
	SourceObjectClass   *ObjectClassDescriptionRequest   `json:"source_object_class,omitempty"`
	TargetObjectClasses []*ObjectClassDescriptionRequest `json:"target_object_classes,omitempty"`
	RemoteKeyName       string                           `json:"remote_key_name"`
	DisplayName         *string                          `json:"display_name,omitempty"`
	Cardinality         *CardinalityEnum                 `json:"cardinality,omitempty"`
	IsRequired          *bool                            `json:"is_required,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AssociationTypeRequestRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler AssociationTypeRequestRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AssociationTypeRequestRequest(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AssociationTypeRequestRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AsyncPassthroughReciept struct {
	AsyncPassthroughReceiptId string `json:"async_passthrough_receipt_id"`

	_rawJSON json.RawMessage
}

func (a *AsyncPassthroughReciept) UnmarshalJSON(data []byte) error {
	type unmarshaler AsyncPassthroughReciept
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AsyncPassthroughReciept(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AsyncPassthroughReciept) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuditLogEvent struct {
	Id *string `json:"id,omitempty"`
	// The User's full name at the time of this Event occurring.
	UserName *string `json:"user_name,omitempty"`
	// The User's email at the time of this Event occurring.
	UserEmail *string `json:"user_email,omitempty"`
	// Designates the role of the user (or SYSTEM/API if action not taken by a user) at the time of this Event occurring.
	//
	// - `ADMIN` - ADMIN
	// - `DEVELOPER` - DEVELOPER
	// - `MEMBER` - MEMBER
	// - `API` - API
	// - `SYSTEM` - SYSTEM
	// - `MERGE_TEAM` - MERGE_TEAM
	Role      *AuditLogEventRole `json:"role,omitempty"`
	IpAddress string             `json:"ip_address"`
	// Designates the type of event that occurred.
	//
	// - `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
	// - `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
	// - `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
	// - `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
	// - `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
	// - `INVITED_USER` - INVITED_USER
	// - `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
	// - `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
	// - `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
	// - `CREATED_DESTINATION` - CREATED_DESTINATION
	// - `DELETED_DESTINATION` - DELETED_DESTINATION
	// - `CHANGED_DESTINATION` - CHANGED_DESTINATION
	// - `CHANGED_SCOPES` - CHANGED_SCOPES
	// - `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
	// - `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
	// - `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
	// - `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
	// - `ENABLED_CATEGORY` - ENABLED_CATEGORY
	// - `DISABLED_CATEGORY` - DISABLED_CATEGORY
	// - `CHANGED_PASSWORD` - CHANGED_PASSWORD
	// - `RESET_PASSWORD` - RESET_PASSWORD
	// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
	// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
	// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
	// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
	// - `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
	// - `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
	// - `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
	// - `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
	// - `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
	// - `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
	// - `CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
	// - `CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
	// - `DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
	// - `FORCED_LINKED_ACCOUNT_RESYNC` - FORCED_LINKED_ACCOUNT_RESYNC
	// - `MUTED_ISSUE` - MUTED_ISSUE
	// - `GENERATED_MAGIC_LINK` - GENERATED_MAGIC_LINK
	// - `ENABLED_MERGE_WEBHOOK` - ENABLED_MERGE_WEBHOOK
	// - `DISABLED_MERGE_WEBHOOK` - DISABLED_MERGE_WEBHOOK
	// - `MERGE_WEBHOOK_TARGET_CHANGED` - MERGE_WEBHOOK_TARGET_CHANGED
	// - `END_USER_CREDENTIALS_ACCESSED` - END_USER_CREDENTIALS_ACCESSED
	EventType        *AuditLogEventEventType `json:"event_type,omitempty"`
	EventDescription string                  `json:"event_description"`
	CreatedAt        *time.Time              `json:"created_at,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AuditLogEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler AuditLogEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuditLogEvent(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuditLogEvent) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Designates the type of event that occurred.
//
// - `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
// - `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
// - `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
// - `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
// - `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
// - `INVITED_USER` - INVITED_USER
// - `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
// - `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
// - `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
// - `CREATED_DESTINATION` - CREATED_DESTINATION
// - `DELETED_DESTINATION` - DELETED_DESTINATION
// - `CHANGED_DESTINATION` - CHANGED_DESTINATION
// - `CHANGED_SCOPES` - CHANGED_SCOPES
// - `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
// - `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
// - `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
// - `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
// - `ENABLED_CATEGORY` - ENABLED_CATEGORY
// - `DISABLED_CATEGORY` - DISABLED_CATEGORY
// - `CHANGED_PASSWORD` - CHANGED_PASSWORD
// - `RESET_PASSWORD` - RESET_PASSWORD
// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// - `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
// - `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
// - `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
// - `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
// - `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
// - `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
// - `CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `FORCED_LINKED_ACCOUNT_RESYNC` - FORCED_LINKED_ACCOUNT_RESYNC
// - `MUTED_ISSUE` - MUTED_ISSUE
// - `GENERATED_MAGIC_LINK` - GENERATED_MAGIC_LINK
// - `ENABLED_MERGE_WEBHOOK` - ENABLED_MERGE_WEBHOOK
// - `DISABLED_MERGE_WEBHOOK` - DISABLED_MERGE_WEBHOOK
// - `MERGE_WEBHOOK_TARGET_CHANGED` - MERGE_WEBHOOK_TARGET_CHANGED
// - `END_USER_CREDENTIALS_ACCESSED` - END_USER_CREDENTIALS_ACCESSED
type AuditLogEventEventType struct {
	typeName      string
	EventTypeEnum EventTypeEnum
	String        string
}

func NewAuditLogEventEventTypeFromEventTypeEnum(value EventTypeEnum) *AuditLogEventEventType {
	return &AuditLogEventEventType{typeName: "eventTypeEnum", EventTypeEnum: value}
}

func NewAuditLogEventEventTypeFromString(value string) *AuditLogEventEventType {
	return &AuditLogEventEventType{typeName: "string", String: value}
}

func (a *AuditLogEventEventType) UnmarshalJSON(data []byte) error {
	var valueEventTypeEnum EventTypeEnum
	if err := json.Unmarshal(data, &valueEventTypeEnum); err == nil {
		a.typeName = "eventTypeEnum"
		a.EventTypeEnum = valueEventTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AuditLogEventEventType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "eventTypeEnum":
		return json.Marshal(a.EventTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AuditLogEventEventTypeVisitor interface {
	VisitEventTypeEnum(EventTypeEnum) error
	VisitString(string) error
}

func (a *AuditLogEventEventType) Accept(visitor AuditLogEventEventTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "eventTypeEnum":
		return visitor.VisitEventTypeEnum(a.EventTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// Designates the role of the user (or SYSTEM/API if action not taken by a user) at the time of this Event occurring.
//
// - `ADMIN` - ADMIN
// - `DEVELOPER` - DEVELOPER
// - `MEMBER` - MEMBER
// - `API` - API
// - `SYSTEM` - SYSTEM
// - `MERGE_TEAM` - MERGE_TEAM
type AuditLogEventRole struct {
	typeName string
	RoleEnum RoleEnum
	String   string
}

func NewAuditLogEventRoleFromRoleEnum(value RoleEnum) *AuditLogEventRole {
	return &AuditLogEventRole{typeName: "roleEnum", RoleEnum: value}
}

func NewAuditLogEventRoleFromString(value string) *AuditLogEventRole {
	return &AuditLogEventRole{typeName: "string", String: value}
}

func (a *AuditLogEventRole) UnmarshalJSON(data []byte) error {
	var valueRoleEnum RoleEnum
	if err := json.Unmarshal(data, &valueRoleEnum); err == nil {
		a.typeName = "roleEnum"
		a.RoleEnum = valueRoleEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AuditLogEventRole) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "roleEnum":
		return json.Marshal(a.RoleEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AuditLogEventRoleVisitor interface {
	VisitRoleEnum(RoleEnum) error
	VisitString(string) error
}

func (a *AuditLogEventRole) Accept(visitor AuditLogEventRoleVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "roleEnum":
		return visitor.VisitRoleEnum(a.RoleEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// # The AvailableActions Object
//
// ### Description
//
// The `Activity` object is used to see all available model/operation combinations for an integration.
//
// ### Usage Example
//
// Fetch all the actions available for the `Zenefits` integration.
type AvailableActions struct {
	Integration              *AccountIntegration `json:"integration,omitempty"`
	PassthroughAvailable     bool                `json:"passthrough_available"`
	AvailableModelOperations []*ModelOperation   `json:"available_model_operations,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AvailableActions) UnmarshalJSON(data []byte) error {
	type unmarshaler AvailableActions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AvailableActions(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AvailableActions) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// - `ONE_TO_ONE` - ONE_TO_ONE
// - `MANY_TO_ONE` - MANY_TO_ONE
// - `MANY_TO_MANY` - MANY_TO_MANY
// - `ONE_TO_MANY` - ONE_TO_MANY
type CardinalityEnum string

const (
	CardinalityEnumOneToOne   CardinalityEnum = "ONE_TO_ONE"
	CardinalityEnumManyToOne  CardinalityEnum = "MANY_TO_ONE"
	CardinalityEnumManyToMany CardinalityEnum = "MANY_TO_MANY"
	CardinalityEnumOneToMany  CardinalityEnum = "ONE_TO_MANY"
)

func NewCardinalityEnumFromString(s string) (CardinalityEnum, error) {
	switch s {
	case "ONE_TO_ONE":
		return CardinalityEnumOneToOne, nil
	case "MANY_TO_ONE":
		return CardinalityEnumManyToOne, nil
	case "MANY_TO_MANY":
		return CardinalityEnumManyToMany, nil
	case "ONE_TO_MANY":
		return CardinalityEnumOneToMany, nil
	}
	var t CardinalityEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CardinalityEnum) Ptr() *CardinalityEnum {
	return &c
}

// - `hris` - hris
// - `ats` - ats
// - `accounting` - accounting
// - `ticketing` - ticketing
// - `crm` - crm
// - `mktg` - mktg
// - `filestorage` - filestorage
type CategoriesEnum string

const (
	CategoriesEnumHris        CategoriesEnum = "hris"
	CategoriesEnumAts         CategoriesEnum = "ats"
	CategoriesEnumAccounting  CategoriesEnum = "accounting"
	CategoriesEnumTicketing   CategoriesEnum = "ticketing"
	CategoriesEnumCrm         CategoriesEnum = "crm"
	CategoriesEnumMktg        CategoriesEnum = "mktg"
	CategoriesEnumFilestorage CategoriesEnum = "filestorage"
)

func NewCategoriesEnumFromString(s string) (CategoriesEnum, error) {
	switch s {
	case "hris":
		return CategoriesEnumHris, nil
	case "ats":
		return CategoriesEnumAts, nil
	case "accounting":
		return CategoriesEnumAccounting, nil
	case "ticketing":
		return CategoriesEnumTicketing, nil
	case "crm":
		return CategoriesEnumCrm, nil
	case "mktg":
		return CategoriesEnumMktg, nil
	case "filestorage":
		return CategoriesEnumFilestorage, nil
	}
	var t CategoriesEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CategoriesEnum) Ptr() *CategoriesEnum {
	return &c
}

// - `hris` - hris
// - `ats` - ats
// - `accounting` - accounting
// - `ticketing` - ticketing
// - `crm` - crm
// - `mktg` - mktg
// - `filestorage` - filestorage
type CategoryEnum string

const (
	CategoryEnumHris        CategoryEnum = "hris"
	CategoryEnumAts         CategoryEnum = "ats"
	CategoryEnumAccounting  CategoryEnum = "accounting"
	CategoryEnumTicketing   CategoryEnum = "ticketing"
	CategoryEnumCrm         CategoryEnum = "crm"
	CategoryEnumMktg        CategoryEnum = "mktg"
	CategoryEnumFilestorage CategoryEnum = "filestorage"
)

func NewCategoryEnumFromString(s string) (CategoryEnum, error) {
	switch s {
	case "hris":
		return CategoryEnumHris, nil
	case "ats":
		return CategoryEnumAts, nil
	case "accounting":
		return CategoryEnumAccounting, nil
	case "ticketing":
		return CategoryEnumTicketing, nil
	case "crm":
		return CategoryEnumCrm, nil
	case "mktg":
		return CategoryEnumMktg, nil
	case "filestorage":
		return CategoryEnumFilestorage, nil
	}
	var t CategoryEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CategoryEnum) Ptr() *CategoryEnum {
	return &c
}

type CommonModelScopeApi struct {
	// The common models you want to update the scopes for
	CommonModels []*IndividualCommonModelScopeDeserializer `json:"common_models,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CommonModelScopeApi) UnmarshalJSON(data []byte) error {
	type unmarshaler CommonModelScopeApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommonModelScopeApi(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommonModelScopeApi) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CommonModelScopesBodyRequest struct {
	ModelId        string               `json:"model_id"`
	EnabledActions []EnabledActionsEnum `json:"enabled_actions,omitempty"`
	DisabledFields []string             `json:"disabled_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CommonModelScopesBodyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CommonModelScopesBodyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommonModelScopesBodyRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommonModelScopesBodyRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// # The Contact Object
//
// ### Description
//
// The `Contact` object is used to represent an existing point of contact at a company in a CRM system.
//
// ### Usage Example
//
// TODO
type Contact struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The contact's first name.
	FirstName *string `json:"first_name,omitempty"`
	// The contact's last name.
	LastName *string `json:"last_name,omitempty"`
	// The contact's account.
	Account *ContactAccount `json:"account,omitempty"`
	// The contact's owner.
	Owner          *ContactOwner   `json:"owner,omitempty"`
	Addresses      []*Address      `json:"addresses,omitempty"`
	EmailAddresses []*EmailAddress `json:"email_addresses,omitempty"`
	PhoneNumbers   []*PhoneNumber  `json:"phone_numbers,omitempty"`
	// When the contact's last activity occurred.
	LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
	// When the third party's contact was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (c *Contact) UnmarshalJSON(data []byte) error {
	type unmarshaler Contact
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Contact(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Contact) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The contact's account.
type ContactAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewContactAccountFromString(value string) *ContactAccount {
	return &ContactAccount{typeName: "string", String: value}
}

func NewContactAccountFromAccount(value *Account) *ContactAccount {
	return &ContactAccount{typeName: "account", Account: value}
}

func (c *ContactAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		c.typeName = "account"
		c.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactAccount) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "account":
		return json.Marshal(c.Account)
	}
}

type ContactAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (c *ContactAccount) Accept(visitor ContactAccountVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "account":
		return visitor.VisitAccount(c.Account)
	}
}

// The contact's owner.
type ContactOwner struct {
	typeName string
	String   string
	User     *User
}

func NewContactOwnerFromString(value string) *ContactOwner {
	return &ContactOwner{typeName: "string", String: value}
}

func NewContactOwnerFromUser(value *User) *ContactOwner {
	return &ContactOwner{typeName: "user", User: value}
}

func (c *ContactOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		c.typeName = "user"
		c.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactOwner) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "user":
		return json.Marshal(c.User)
	}
}

type ContactOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (c *ContactOwner) Accept(visitor ContactOwnerVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "user":
		return visitor.VisitUser(c.User)
	}
}

// # The Contact Object
//
// ### Description
//
// The `Contact` object is used to represent an existing point of contact at a company in a CRM system.
//
// ### Usage Example
//
// TODO
type ContactRequest struct {
	// The contact's first name.
	FirstName *string `json:"first_name,omitempty"`
	// The contact's last name.
	LastName *string `json:"last_name,omitempty"`
	// The contact's account.
	Account *ContactRequestAccount `json:"account,omitempty"`
	// The contact's owner.
	Owner          *ContactRequestOwner   `json:"owner,omitempty"`
	Addresses      []*AddressRequest      `json:"addresses,omitempty"`
	EmailAddresses []*EmailAddressRequest `json:"email_addresses,omitempty"`
	PhoneNumbers   []*PhoneNumberRequest  `json:"phone_numbers,omitempty"`
	// When the contact's last activity occurred.
	LastActivityAt      *time.Time             `json:"last_activity_at,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ContactRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ContactRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ContactRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContactRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The contact's account.
type ContactRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewContactRequestAccountFromString(value string) *ContactRequestAccount {
	return &ContactRequestAccount{typeName: "string", String: value}
}

func NewContactRequestAccountFromAccount(value *Account) *ContactRequestAccount {
	return &ContactRequestAccount{typeName: "account", Account: value}
}

func (c *ContactRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		c.typeName = "account"
		c.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactRequestAccount) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "account":
		return json.Marshal(c.Account)
	}
}

type ContactRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (c *ContactRequestAccount) Accept(visitor ContactRequestAccountVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "account":
		return visitor.VisitAccount(c.Account)
	}
}

// The contact's owner.
type ContactRequestOwner struct {
	typeName string
	String   string
	User     *User
}

func NewContactRequestOwnerFromString(value string) *ContactRequestOwner {
	return &ContactRequestOwner{typeName: "string", String: value}
}

func NewContactRequestOwnerFromUser(value *User) *ContactRequestOwner {
	return &ContactRequestOwner{typeName: "user", User: value}
}

func (c *ContactRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		c.typeName = "user"
		c.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactRequestOwner) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "user":
		return json.Marshal(c.User)
	}
}

type ContactRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (c *ContactRequestOwner) Accept(visitor ContactRequestOwnerVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "user":
		return visitor.VisitUser(c.User)
	}
}

// - `AF` - Afghanistan
// - `AX` - Åland Islands
// - `AL` - Albania
// - `DZ` - Algeria
// - `AS` - American Samoa
// - `AD` - Andorra
// - `AO` - Angola
// - `AI` - Anguilla
// - `AQ` - Antarctica
// - `AG` - Antigua and Barbuda
// - `AR` - Argentina
// - `AM` - Armenia
// - `AW` - Aruba
// - `AU` - Australia
// - `AT` - Austria
// - `AZ` - Azerbaijan
// - `BS` - Bahamas
// - `BH` - Bahrain
// - `BD` - Bangladesh
// - `BB` - Barbados
// - `BY` - Belarus
// - `BE` - Belgium
// - `BZ` - Belize
// - `BJ` - Benin
// - `BM` - Bermuda
// - `BT` - Bhutan
// - `BO` - Bolivia
// - `BQ` - Bonaire, Sint Eustatius and Saba
// - `BA` - Bosnia and Herzegovina
// - `BW` - Botswana
// - `BV` - Bouvet Island
// - `BR` - Brazil
// - `IO` - British Indian Ocean Territory
// - `BN` - Brunei
// - `BG` - Bulgaria
// - `BF` - Burkina Faso
// - `BI` - Burundi
// - `CV` - Cabo Verde
// - `KH` - Cambodia
// - `CM` - Cameroon
// - `CA` - Canada
// - `KY` - Cayman Islands
// - `CF` - Central African Republic
// - `TD` - Chad
// - `CL` - Chile
// - `CN` - China
// - `CX` - Christmas Island
// - `CC` - Cocos (Keeling) Islands
// - `CO` - Colombia
// - `KM` - Comoros
// - `CG` - Congo
// - `CD` - Congo (the Democratic Republic of the)
// - `CK` - Cook Islands
// - `CR` - Costa Rica
// - `CI` - Côte d'Ivoire
// - `HR` - Croatia
// - `CU` - Cuba
// - `CW` - Curaçao
// - `CY` - Cyprus
// - `CZ` - Czechia
// - `DK` - Denmark
// - `DJ` - Djibouti
// - `DM` - Dominica
// - `DO` - Dominican Republic
// - `EC` - Ecuador
// - `EG` - Egypt
// - `SV` - El Salvador
// - `GQ` - Equatorial Guinea
// - `ER` - Eritrea
// - `EE` - Estonia
// - `SZ` - Eswatini
// - `ET` - Ethiopia
// - `FK` - Falkland Islands (Malvinas)
// - `FO` - Faroe Islands
// - `FJ` - Fiji
// - `FI` - Finland
// - `FR` - France
// - `GF` - French Guiana
// - `PF` - French Polynesia
// - `TF` - French Southern Territories
// - `GA` - Gabon
// - `GM` - Gambia
// - `GE` - Georgia
// - `DE` - Germany
// - `GH` - Ghana
// - `GI` - Gibraltar
// - `GR` - Greece
// - `GL` - Greenland
// - `GD` - Grenada
// - `GP` - Guadeloupe
// - `GU` - Guam
// - `GT` - Guatemala
// - `GG` - Guernsey
// - `GN` - Guinea
// - `GW` - Guinea-Bissau
// - `GY` - Guyana
// - `HT` - Haiti
// - `HM` - Heard Island and McDonald Islands
// - `VA` - Holy See
// - `HN` - Honduras
// - `HK` - Hong Kong
// - `HU` - Hungary
// - `IS` - Iceland
// - `IN` - India
// - `ID` - Indonesia
// - `IR` - Iran
// - `IQ` - Iraq
// - `IE` - Ireland
// - `IM` - Isle of Man
// - `IL` - Israel
// - `IT` - Italy
// - `JM` - Jamaica
// - `JP` - Japan
// - `JE` - Jersey
// - `JO` - Jordan
// - `KZ` - Kazakhstan
// - `KE` - Kenya
// - `KI` - Kiribati
// - `KW` - Kuwait
// - `KG` - Kyrgyzstan
// - `LA` - Laos
// - `LV` - Latvia
// - `LB` - Lebanon
// - `LS` - Lesotho
// - `LR` - Liberia
// - `LY` - Libya
// - `LI` - Liechtenstein
// - `LT` - Lithuania
// - `LU` - Luxembourg
// - `MO` - Macao
// - `MG` - Madagascar
// - `MW` - Malawi
// - `MY` - Malaysia
// - `MV` - Maldives
// - `ML` - Mali
// - `MT` - Malta
// - `MH` - Marshall Islands
// - `MQ` - Martinique
// - `MR` - Mauritania
// - `MU` - Mauritius
// - `YT` - Mayotte
// - `MX` - Mexico
// - `FM` - Micronesia (Federated States of)
// - `MD` - Moldova
// - `MC` - Monaco
// - `MN` - Mongolia
// - `ME` - Montenegro
// - `MS` - Montserrat
// - `MA` - Morocco
// - `MZ` - Mozambique
// - `MM` - Myanmar
// - `NA` - Namibia
// - `NR` - Nauru
// - `NP` - Nepal
// - `NL` - Netherlands
// - `NC` - New Caledonia
// - `NZ` - New Zealand
// - `NI` - Nicaragua
// - `NE` - Niger
// - `NG` - Nigeria
// - `NU` - Niue
// - `NF` - Norfolk Island
// - `KP` - North Korea
// - `MK` - North Macedonia
// - `MP` - Northern Mariana Islands
// - `NO` - Norway
// - `OM` - Oman
// - `PK` - Pakistan
// - `PW` - Palau
// - `PS` - Palestine, State of
// - `PA` - Panama
// - `PG` - Papua New Guinea
// - `PY` - Paraguay
// - `PE` - Peru
// - `PH` - Philippines
// - `PN` - Pitcairn
// - `PL` - Poland
// - `PT` - Portugal
// - `PR` - Puerto Rico
// - `QA` - Qatar
// - `RE` - Réunion
// - `RO` - Romania
// - `RU` - Russia
// - `RW` - Rwanda
// - `BL` - Saint Barthélemy
// - `SH` - Saint Helena, Ascension and Tristan da Cunha
// - `KN` - Saint Kitts and Nevis
// - `LC` - Saint Lucia
// - `MF` - Saint Martin (French part)
// - `PM` - Saint Pierre and Miquelon
// - `VC` - Saint Vincent and the Grenadines
// - `WS` - Samoa
// - `SM` - San Marino
// - `ST` - Sao Tome and Principe
// - `SA` - Saudi Arabia
// - `SN` - Senegal
// - `RS` - Serbia
// - `SC` - Seychelles
// - `SL` - Sierra Leone
// - `SG` - Singapore
// - `SX` - Sint Maarten (Dutch part)
// - `SK` - Slovakia
// - `SI` - Slovenia
// - `SB` - Solomon Islands
// - `SO` - Somalia
// - `ZA` - South Africa
// - `GS` - South Georgia and the South Sandwich Islands
// - `KR` - South Korea
// - `SS` - South Sudan
// - `ES` - Spain
// - `LK` - Sri Lanka
// - `SD` - Sudan
// - `SR` - Suriname
// - `SJ` - Svalbard and Jan Mayen
// - `SE` - Sweden
// - `CH` - Switzerland
// - `SY` - Syria
// - `TW` - Taiwan
// - `TJ` - Tajikistan
// - `TZ` - Tanzania
// - `TH` - Thailand
// - `TL` - Timor-Leste
// - `TG` - Togo
// - `TK` - Tokelau
// - `TO` - Tonga
// - `TT` - Trinidad and Tobago
// - `TN` - Tunisia
// - `TR` - Turkey
// - `TM` - Turkmenistan
// - `TC` - Turks and Caicos Islands
// - `TV` - Tuvalu
// - `UG` - Uganda
// - `UA` - Ukraine
// - `AE` - United Arab Emirates
// - `GB` - United Kingdom
// - `UM` - United States Minor Outlying Islands
// - `US` - United States of America
// - `UY` - Uruguay
// - `UZ` - Uzbekistan
// - `VU` - Vanuatu
// - `VE` - Venezuela
// - `VN` - Vietnam
// - `VG` - Virgin Islands (British)
// - `VI` - Virgin Islands (U.S.)
// - `WF` - Wallis and Futuna
// - `EH` - Western Sahara
// - `YE` - Yemen
// - `ZM` - Zambia
// - `ZW` - Zimbabwe
type CountryEnum string

const (
	CountryEnumAf CountryEnum = "AF"
	CountryEnumAx CountryEnum = "AX"
	CountryEnumAl CountryEnum = "AL"
	CountryEnumDz CountryEnum = "DZ"
	CountryEnumAs CountryEnum = "AS"
	CountryEnumAd CountryEnum = "AD"
	CountryEnumAo CountryEnum = "AO"
	CountryEnumAi CountryEnum = "AI"
	CountryEnumAq CountryEnum = "AQ"
	CountryEnumAg CountryEnum = "AG"
	CountryEnumAr CountryEnum = "AR"
	CountryEnumAm CountryEnum = "AM"
	CountryEnumAw CountryEnum = "AW"
	CountryEnumAu CountryEnum = "AU"
	CountryEnumAt CountryEnum = "AT"
	CountryEnumAz CountryEnum = "AZ"
	CountryEnumBs CountryEnum = "BS"
	CountryEnumBh CountryEnum = "BH"
	CountryEnumBd CountryEnum = "BD"
	CountryEnumBb CountryEnum = "BB"
	CountryEnumBy CountryEnum = "BY"
	CountryEnumBe CountryEnum = "BE"
	CountryEnumBz CountryEnum = "BZ"
	CountryEnumBj CountryEnum = "BJ"
	CountryEnumBm CountryEnum = "BM"
	CountryEnumBt CountryEnum = "BT"
	CountryEnumBo CountryEnum = "BO"
	CountryEnumBq CountryEnum = "BQ"
	CountryEnumBa CountryEnum = "BA"
	CountryEnumBw CountryEnum = "BW"
	CountryEnumBv CountryEnum = "BV"
	CountryEnumBr CountryEnum = "BR"
	CountryEnumIo CountryEnum = "IO"
	CountryEnumBn CountryEnum = "BN"
	CountryEnumBg CountryEnum = "BG"
	CountryEnumBf CountryEnum = "BF"
	CountryEnumBi CountryEnum = "BI"
	CountryEnumCv CountryEnum = "CV"
	CountryEnumKh CountryEnum = "KH"
	CountryEnumCm CountryEnum = "CM"
	CountryEnumCa CountryEnum = "CA"
	CountryEnumKy CountryEnum = "KY"
	CountryEnumCf CountryEnum = "CF"
	CountryEnumTd CountryEnum = "TD"
	CountryEnumCl CountryEnum = "CL"
	CountryEnumCn CountryEnum = "CN"
	CountryEnumCx CountryEnum = "CX"
	CountryEnumCc CountryEnum = "CC"
	CountryEnumCo CountryEnum = "CO"
	CountryEnumKm CountryEnum = "KM"
	CountryEnumCg CountryEnum = "CG"
	CountryEnumCd CountryEnum = "CD"
	CountryEnumCk CountryEnum = "CK"
	CountryEnumCr CountryEnum = "CR"
	CountryEnumCi CountryEnum = "CI"
	CountryEnumHr CountryEnum = "HR"
	CountryEnumCu CountryEnum = "CU"
	CountryEnumCw CountryEnum = "CW"
	CountryEnumCy CountryEnum = "CY"
	CountryEnumCz CountryEnum = "CZ"
	CountryEnumDk CountryEnum = "DK"
	CountryEnumDj CountryEnum = "DJ"
	CountryEnumDm CountryEnum = "DM"
	CountryEnumDo CountryEnum = "DO"
	CountryEnumEc CountryEnum = "EC"
	CountryEnumEg CountryEnum = "EG"
	CountryEnumSv CountryEnum = "SV"
	CountryEnumGq CountryEnum = "GQ"
	CountryEnumEr CountryEnum = "ER"
	CountryEnumEe CountryEnum = "EE"
	CountryEnumSz CountryEnum = "SZ"
	CountryEnumEt CountryEnum = "ET"
	CountryEnumFk CountryEnum = "FK"
	CountryEnumFo CountryEnum = "FO"
	CountryEnumFj CountryEnum = "FJ"
	CountryEnumFi CountryEnum = "FI"
	CountryEnumFr CountryEnum = "FR"
	CountryEnumGf CountryEnum = "GF"
	CountryEnumPf CountryEnum = "PF"
	CountryEnumTf CountryEnum = "TF"
	CountryEnumGa CountryEnum = "GA"
	CountryEnumGm CountryEnum = "GM"
	CountryEnumGe CountryEnum = "GE"
	CountryEnumDe CountryEnum = "DE"
	CountryEnumGh CountryEnum = "GH"
	CountryEnumGi CountryEnum = "GI"
	CountryEnumGr CountryEnum = "GR"
	CountryEnumGl CountryEnum = "GL"
	CountryEnumGd CountryEnum = "GD"
	CountryEnumGp CountryEnum = "GP"
	CountryEnumGu CountryEnum = "GU"
	CountryEnumGt CountryEnum = "GT"
	CountryEnumGg CountryEnum = "GG"
	CountryEnumGn CountryEnum = "GN"
	CountryEnumGw CountryEnum = "GW"
	CountryEnumGy CountryEnum = "GY"
	CountryEnumHt CountryEnum = "HT"
	CountryEnumHm CountryEnum = "HM"
	CountryEnumVa CountryEnum = "VA"
	CountryEnumHn CountryEnum = "HN"
	CountryEnumHk CountryEnum = "HK"
	CountryEnumHu CountryEnum = "HU"
	CountryEnumIs CountryEnum = "IS"
	CountryEnumIn CountryEnum = "IN"
	CountryEnumId CountryEnum = "ID"
	CountryEnumIr CountryEnum = "IR"
	CountryEnumIq CountryEnum = "IQ"
	CountryEnumIe CountryEnum = "IE"
	CountryEnumIm CountryEnum = "IM"
	CountryEnumIl CountryEnum = "IL"
	CountryEnumIt CountryEnum = "IT"
	CountryEnumJm CountryEnum = "JM"
	CountryEnumJp CountryEnum = "JP"
	CountryEnumJe CountryEnum = "JE"
	CountryEnumJo CountryEnum = "JO"
	CountryEnumKz CountryEnum = "KZ"
	CountryEnumKe CountryEnum = "KE"
	CountryEnumKi CountryEnum = "KI"
	CountryEnumKw CountryEnum = "KW"
	CountryEnumKg CountryEnum = "KG"
	CountryEnumLa CountryEnum = "LA"
	CountryEnumLv CountryEnum = "LV"
	CountryEnumLb CountryEnum = "LB"
	CountryEnumLs CountryEnum = "LS"
	CountryEnumLr CountryEnum = "LR"
	CountryEnumLy CountryEnum = "LY"
	CountryEnumLi CountryEnum = "LI"
	CountryEnumLt CountryEnum = "LT"
	CountryEnumLu CountryEnum = "LU"
	CountryEnumMo CountryEnum = "MO"
	CountryEnumMg CountryEnum = "MG"
	CountryEnumMw CountryEnum = "MW"
	CountryEnumMy CountryEnum = "MY"
	CountryEnumMv CountryEnum = "MV"
	CountryEnumMl CountryEnum = "ML"
	CountryEnumMt CountryEnum = "MT"
	CountryEnumMh CountryEnum = "MH"
	CountryEnumMq CountryEnum = "MQ"
	CountryEnumMr CountryEnum = "MR"
	CountryEnumMu CountryEnum = "MU"
	CountryEnumYt CountryEnum = "YT"
	CountryEnumMx CountryEnum = "MX"
	CountryEnumFm CountryEnum = "FM"
	CountryEnumMd CountryEnum = "MD"
	CountryEnumMc CountryEnum = "MC"
	CountryEnumMn CountryEnum = "MN"
	CountryEnumMe CountryEnum = "ME"
	CountryEnumMs CountryEnum = "MS"
	CountryEnumMa CountryEnum = "MA"
	CountryEnumMz CountryEnum = "MZ"
	CountryEnumMm CountryEnum = "MM"
	CountryEnumNa CountryEnum = "NA"
	CountryEnumNr CountryEnum = "NR"
	CountryEnumNp CountryEnum = "NP"
	CountryEnumNl CountryEnum = "NL"
	CountryEnumNc CountryEnum = "NC"
	CountryEnumNz CountryEnum = "NZ"
	CountryEnumNi CountryEnum = "NI"
	CountryEnumNe CountryEnum = "NE"
	CountryEnumNg CountryEnum = "NG"
	CountryEnumNu CountryEnum = "NU"
	CountryEnumNf CountryEnum = "NF"
	CountryEnumKp CountryEnum = "KP"
	CountryEnumMk CountryEnum = "MK"
	CountryEnumMp CountryEnum = "MP"
	CountryEnumNo CountryEnum = "NO"
	CountryEnumOm CountryEnum = "OM"
	CountryEnumPk CountryEnum = "PK"
	CountryEnumPw CountryEnum = "PW"
	CountryEnumPs CountryEnum = "PS"
	CountryEnumPa CountryEnum = "PA"
	CountryEnumPg CountryEnum = "PG"
	CountryEnumPy CountryEnum = "PY"
	CountryEnumPe CountryEnum = "PE"
	CountryEnumPh CountryEnum = "PH"
	CountryEnumPn CountryEnum = "PN"
	CountryEnumPl CountryEnum = "PL"
	CountryEnumPt CountryEnum = "PT"
	CountryEnumPr CountryEnum = "PR"
	CountryEnumQa CountryEnum = "QA"
	CountryEnumRe CountryEnum = "RE"
	CountryEnumRo CountryEnum = "RO"
	CountryEnumRu CountryEnum = "RU"
	CountryEnumRw CountryEnum = "RW"
	CountryEnumBl CountryEnum = "BL"
	CountryEnumSh CountryEnum = "SH"
	CountryEnumKn CountryEnum = "KN"
	CountryEnumLc CountryEnum = "LC"
	CountryEnumMf CountryEnum = "MF"
	CountryEnumPm CountryEnum = "PM"
	CountryEnumVc CountryEnum = "VC"
	CountryEnumWs CountryEnum = "WS"
	CountryEnumSm CountryEnum = "SM"
	CountryEnumSt CountryEnum = "ST"
	CountryEnumSa CountryEnum = "SA"
	CountryEnumSn CountryEnum = "SN"
	CountryEnumRs CountryEnum = "RS"
	CountryEnumSc CountryEnum = "SC"
	CountryEnumSl CountryEnum = "SL"
	CountryEnumSg CountryEnum = "SG"
	CountryEnumSx CountryEnum = "SX"
	CountryEnumSk CountryEnum = "SK"
	CountryEnumSi CountryEnum = "SI"
	CountryEnumSb CountryEnum = "SB"
	CountryEnumSo CountryEnum = "SO"
	CountryEnumZa CountryEnum = "ZA"
	CountryEnumGs CountryEnum = "GS"
	CountryEnumKr CountryEnum = "KR"
	CountryEnumSs CountryEnum = "SS"
	CountryEnumEs CountryEnum = "ES"
	CountryEnumLk CountryEnum = "LK"
	CountryEnumSd CountryEnum = "SD"
	CountryEnumSr CountryEnum = "SR"
	CountryEnumSj CountryEnum = "SJ"
	CountryEnumSe CountryEnum = "SE"
	CountryEnumCh CountryEnum = "CH"
	CountryEnumSy CountryEnum = "SY"
	CountryEnumTw CountryEnum = "TW"
	CountryEnumTj CountryEnum = "TJ"
	CountryEnumTz CountryEnum = "TZ"
	CountryEnumTh CountryEnum = "TH"
	CountryEnumTl CountryEnum = "TL"
	CountryEnumTg CountryEnum = "TG"
	CountryEnumTk CountryEnum = "TK"
	CountryEnumTo CountryEnum = "TO"
	CountryEnumTt CountryEnum = "TT"
	CountryEnumTn CountryEnum = "TN"
	CountryEnumTr CountryEnum = "TR"
	CountryEnumTm CountryEnum = "TM"
	CountryEnumTc CountryEnum = "TC"
	CountryEnumTv CountryEnum = "TV"
	CountryEnumUg CountryEnum = "UG"
	CountryEnumUa CountryEnum = "UA"
	CountryEnumAe CountryEnum = "AE"
	CountryEnumGb CountryEnum = "GB"
	CountryEnumUm CountryEnum = "UM"
	CountryEnumUs CountryEnum = "US"
	CountryEnumUy CountryEnum = "UY"
	CountryEnumUz CountryEnum = "UZ"
	CountryEnumVu CountryEnum = "VU"
	CountryEnumVe CountryEnum = "VE"
	CountryEnumVn CountryEnum = "VN"
	CountryEnumVg CountryEnum = "VG"
	CountryEnumVi CountryEnum = "VI"
	CountryEnumWf CountryEnum = "WF"
	CountryEnumEh CountryEnum = "EH"
	CountryEnumYe CountryEnum = "YE"
	CountryEnumZm CountryEnum = "ZM"
	CountryEnumZw CountryEnum = "ZW"
)

func NewCountryEnumFromString(s string) (CountryEnum, error) {
	switch s {
	case "AF":
		return CountryEnumAf, nil
	case "AX":
		return CountryEnumAx, nil
	case "AL":
		return CountryEnumAl, nil
	case "DZ":
		return CountryEnumDz, nil
	case "AS":
		return CountryEnumAs, nil
	case "AD":
		return CountryEnumAd, nil
	case "AO":
		return CountryEnumAo, nil
	case "AI":
		return CountryEnumAi, nil
	case "AQ":
		return CountryEnumAq, nil
	case "AG":
		return CountryEnumAg, nil
	case "AR":
		return CountryEnumAr, nil
	case "AM":
		return CountryEnumAm, nil
	case "AW":
		return CountryEnumAw, nil
	case "AU":
		return CountryEnumAu, nil
	case "AT":
		return CountryEnumAt, nil
	case "AZ":
		return CountryEnumAz, nil
	case "BS":
		return CountryEnumBs, nil
	case "BH":
		return CountryEnumBh, nil
	case "BD":
		return CountryEnumBd, nil
	case "BB":
		return CountryEnumBb, nil
	case "BY":
		return CountryEnumBy, nil
	case "BE":
		return CountryEnumBe, nil
	case "BZ":
		return CountryEnumBz, nil
	case "BJ":
		return CountryEnumBj, nil
	case "BM":
		return CountryEnumBm, nil
	case "BT":
		return CountryEnumBt, nil
	case "BO":
		return CountryEnumBo, nil
	case "BQ":
		return CountryEnumBq, nil
	case "BA":
		return CountryEnumBa, nil
	case "BW":
		return CountryEnumBw, nil
	case "BV":
		return CountryEnumBv, nil
	case "BR":
		return CountryEnumBr, nil
	case "IO":
		return CountryEnumIo, nil
	case "BN":
		return CountryEnumBn, nil
	case "BG":
		return CountryEnumBg, nil
	case "BF":
		return CountryEnumBf, nil
	case "BI":
		return CountryEnumBi, nil
	case "CV":
		return CountryEnumCv, nil
	case "KH":
		return CountryEnumKh, nil
	case "CM":
		return CountryEnumCm, nil
	case "CA":
		return CountryEnumCa, nil
	case "KY":
		return CountryEnumKy, nil
	case "CF":
		return CountryEnumCf, nil
	case "TD":
		return CountryEnumTd, nil
	case "CL":
		return CountryEnumCl, nil
	case "CN":
		return CountryEnumCn, nil
	case "CX":
		return CountryEnumCx, nil
	case "CC":
		return CountryEnumCc, nil
	case "CO":
		return CountryEnumCo, nil
	case "KM":
		return CountryEnumKm, nil
	case "CG":
		return CountryEnumCg, nil
	case "CD":
		return CountryEnumCd, nil
	case "CK":
		return CountryEnumCk, nil
	case "CR":
		return CountryEnumCr, nil
	case "CI":
		return CountryEnumCi, nil
	case "HR":
		return CountryEnumHr, nil
	case "CU":
		return CountryEnumCu, nil
	case "CW":
		return CountryEnumCw, nil
	case "CY":
		return CountryEnumCy, nil
	case "CZ":
		return CountryEnumCz, nil
	case "DK":
		return CountryEnumDk, nil
	case "DJ":
		return CountryEnumDj, nil
	case "DM":
		return CountryEnumDm, nil
	case "DO":
		return CountryEnumDo, nil
	case "EC":
		return CountryEnumEc, nil
	case "EG":
		return CountryEnumEg, nil
	case "SV":
		return CountryEnumSv, nil
	case "GQ":
		return CountryEnumGq, nil
	case "ER":
		return CountryEnumEr, nil
	case "EE":
		return CountryEnumEe, nil
	case "SZ":
		return CountryEnumSz, nil
	case "ET":
		return CountryEnumEt, nil
	case "FK":
		return CountryEnumFk, nil
	case "FO":
		return CountryEnumFo, nil
	case "FJ":
		return CountryEnumFj, nil
	case "FI":
		return CountryEnumFi, nil
	case "FR":
		return CountryEnumFr, nil
	case "GF":
		return CountryEnumGf, nil
	case "PF":
		return CountryEnumPf, nil
	case "TF":
		return CountryEnumTf, nil
	case "GA":
		return CountryEnumGa, nil
	case "GM":
		return CountryEnumGm, nil
	case "GE":
		return CountryEnumGe, nil
	case "DE":
		return CountryEnumDe, nil
	case "GH":
		return CountryEnumGh, nil
	case "GI":
		return CountryEnumGi, nil
	case "GR":
		return CountryEnumGr, nil
	case "GL":
		return CountryEnumGl, nil
	case "GD":
		return CountryEnumGd, nil
	case "GP":
		return CountryEnumGp, nil
	case "GU":
		return CountryEnumGu, nil
	case "GT":
		return CountryEnumGt, nil
	case "GG":
		return CountryEnumGg, nil
	case "GN":
		return CountryEnumGn, nil
	case "GW":
		return CountryEnumGw, nil
	case "GY":
		return CountryEnumGy, nil
	case "HT":
		return CountryEnumHt, nil
	case "HM":
		return CountryEnumHm, nil
	case "VA":
		return CountryEnumVa, nil
	case "HN":
		return CountryEnumHn, nil
	case "HK":
		return CountryEnumHk, nil
	case "HU":
		return CountryEnumHu, nil
	case "IS":
		return CountryEnumIs, nil
	case "IN":
		return CountryEnumIn, nil
	case "ID":
		return CountryEnumId, nil
	case "IR":
		return CountryEnumIr, nil
	case "IQ":
		return CountryEnumIq, nil
	case "IE":
		return CountryEnumIe, nil
	case "IM":
		return CountryEnumIm, nil
	case "IL":
		return CountryEnumIl, nil
	case "IT":
		return CountryEnumIt, nil
	case "JM":
		return CountryEnumJm, nil
	case "JP":
		return CountryEnumJp, nil
	case "JE":
		return CountryEnumJe, nil
	case "JO":
		return CountryEnumJo, nil
	case "KZ":
		return CountryEnumKz, nil
	case "KE":
		return CountryEnumKe, nil
	case "KI":
		return CountryEnumKi, nil
	case "KW":
		return CountryEnumKw, nil
	case "KG":
		return CountryEnumKg, nil
	case "LA":
		return CountryEnumLa, nil
	case "LV":
		return CountryEnumLv, nil
	case "LB":
		return CountryEnumLb, nil
	case "LS":
		return CountryEnumLs, nil
	case "LR":
		return CountryEnumLr, nil
	case "LY":
		return CountryEnumLy, nil
	case "LI":
		return CountryEnumLi, nil
	case "LT":
		return CountryEnumLt, nil
	case "LU":
		return CountryEnumLu, nil
	case "MO":
		return CountryEnumMo, nil
	case "MG":
		return CountryEnumMg, nil
	case "MW":
		return CountryEnumMw, nil
	case "MY":
		return CountryEnumMy, nil
	case "MV":
		return CountryEnumMv, nil
	case "ML":
		return CountryEnumMl, nil
	case "MT":
		return CountryEnumMt, nil
	case "MH":
		return CountryEnumMh, nil
	case "MQ":
		return CountryEnumMq, nil
	case "MR":
		return CountryEnumMr, nil
	case "MU":
		return CountryEnumMu, nil
	case "YT":
		return CountryEnumYt, nil
	case "MX":
		return CountryEnumMx, nil
	case "FM":
		return CountryEnumFm, nil
	case "MD":
		return CountryEnumMd, nil
	case "MC":
		return CountryEnumMc, nil
	case "MN":
		return CountryEnumMn, nil
	case "ME":
		return CountryEnumMe, nil
	case "MS":
		return CountryEnumMs, nil
	case "MA":
		return CountryEnumMa, nil
	case "MZ":
		return CountryEnumMz, nil
	case "MM":
		return CountryEnumMm, nil
	case "NA":
		return CountryEnumNa, nil
	case "NR":
		return CountryEnumNr, nil
	case "NP":
		return CountryEnumNp, nil
	case "NL":
		return CountryEnumNl, nil
	case "NC":
		return CountryEnumNc, nil
	case "NZ":
		return CountryEnumNz, nil
	case "NI":
		return CountryEnumNi, nil
	case "NE":
		return CountryEnumNe, nil
	case "NG":
		return CountryEnumNg, nil
	case "NU":
		return CountryEnumNu, nil
	case "NF":
		return CountryEnumNf, nil
	case "KP":
		return CountryEnumKp, nil
	case "MK":
		return CountryEnumMk, nil
	case "MP":
		return CountryEnumMp, nil
	case "NO":
		return CountryEnumNo, nil
	case "OM":
		return CountryEnumOm, nil
	case "PK":
		return CountryEnumPk, nil
	case "PW":
		return CountryEnumPw, nil
	case "PS":
		return CountryEnumPs, nil
	case "PA":
		return CountryEnumPa, nil
	case "PG":
		return CountryEnumPg, nil
	case "PY":
		return CountryEnumPy, nil
	case "PE":
		return CountryEnumPe, nil
	case "PH":
		return CountryEnumPh, nil
	case "PN":
		return CountryEnumPn, nil
	case "PL":
		return CountryEnumPl, nil
	case "PT":
		return CountryEnumPt, nil
	case "PR":
		return CountryEnumPr, nil
	case "QA":
		return CountryEnumQa, nil
	case "RE":
		return CountryEnumRe, nil
	case "RO":
		return CountryEnumRo, nil
	case "RU":
		return CountryEnumRu, nil
	case "RW":
		return CountryEnumRw, nil
	case "BL":
		return CountryEnumBl, nil
	case "SH":
		return CountryEnumSh, nil
	case "KN":
		return CountryEnumKn, nil
	case "LC":
		return CountryEnumLc, nil
	case "MF":
		return CountryEnumMf, nil
	case "PM":
		return CountryEnumPm, nil
	case "VC":
		return CountryEnumVc, nil
	case "WS":
		return CountryEnumWs, nil
	case "SM":
		return CountryEnumSm, nil
	case "ST":
		return CountryEnumSt, nil
	case "SA":
		return CountryEnumSa, nil
	case "SN":
		return CountryEnumSn, nil
	case "RS":
		return CountryEnumRs, nil
	case "SC":
		return CountryEnumSc, nil
	case "SL":
		return CountryEnumSl, nil
	case "SG":
		return CountryEnumSg, nil
	case "SX":
		return CountryEnumSx, nil
	case "SK":
		return CountryEnumSk, nil
	case "SI":
		return CountryEnumSi, nil
	case "SB":
		return CountryEnumSb, nil
	case "SO":
		return CountryEnumSo, nil
	case "ZA":
		return CountryEnumZa, nil
	case "GS":
		return CountryEnumGs, nil
	case "KR":
		return CountryEnumKr, nil
	case "SS":
		return CountryEnumSs, nil
	case "ES":
		return CountryEnumEs, nil
	case "LK":
		return CountryEnumLk, nil
	case "SD":
		return CountryEnumSd, nil
	case "SR":
		return CountryEnumSr, nil
	case "SJ":
		return CountryEnumSj, nil
	case "SE":
		return CountryEnumSe, nil
	case "CH":
		return CountryEnumCh, nil
	case "SY":
		return CountryEnumSy, nil
	case "TW":
		return CountryEnumTw, nil
	case "TJ":
		return CountryEnumTj, nil
	case "TZ":
		return CountryEnumTz, nil
	case "TH":
		return CountryEnumTh, nil
	case "TL":
		return CountryEnumTl, nil
	case "TG":
		return CountryEnumTg, nil
	case "TK":
		return CountryEnumTk, nil
	case "TO":
		return CountryEnumTo, nil
	case "TT":
		return CountryEnumTt, nil
	case "TN":
		return CountryEnumTn, nil
	case "TR":
		return CountryEnumTr, nil
	case "TM":
		return CountryEnumTm, nil
	case "TC":
		return CountryEnumTc, nil
	case "TV":
		return CountryEnumTv, nil
	case "UG":
		return CountryEnumUg, nil
	case "UA":
		return CountryEnumUa, nil
	case "AE":
		return CountryEnumAe, nil
	case "GB":
		return CountryEnumGb, nil
	case "UM":
		return CountryEnumUm, nil
	case "US":
		return CountryEnumUs, nil
	case "UY":
		return CountryEnumUy, nil
	case "UZ":
		return CountryEnumUz, nil
	case "VU":
		return CountryEnumVu, nil
	case "VE":
		return CountryEnumVe, nil
	case "VN":
		return CountryEnumVn, nil
	case "VG":
		return CountryEnumVg, nil
	case "VI":
		return CountryEnumVi, nil
	case "WF":
		return CountryEnumWf, nil
	case "EH":
		return CountryEnumEh, nil
	case "YE":
		return CountryEnumYe, nil
	case "ZM":
		return CountryEnumZm, nil
	case "ZW":
		return CountryEnumZw, nil
	}
	var t CountryEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountryEnum) Ptr() *CountryEnum {
	return &c
}

type CrmAccountResponse struct {
	Model    *Account                    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CrmAccountResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CrmAccountResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CrmAccountResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmAccountResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CrmAssociationTypeResponse struct {
	Model    *AssociationType            `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CrmAssociationTypeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CrmAssociationTypeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CrmAssociationTypeResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmAssociationTypeResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CrmContactResponse struct {
	Model    *Contact                    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CrmContactResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CrmContactResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CrmContactResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmContactResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CrmCustomObjectResponse struct {
	Model    *CustomObject               `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CrmCustomObjectResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CrmCustomObjectResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CrmCustomObjectResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmCustomObjectResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// # The CustomObject Object
//
// ### Description
//
// The `Custom Object` record refers to an instance of a Custom Object Class.
//
// ### Usage Example
//
// TODO
type CustomObject struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The custom object class the custom object record belongs to.
	ObjectClass *string `json:"object_class,omitempty"`
	// The fields and values contained within the custom object record.
	Fields       map[string]interface{} `json:"fields,omitempty"`
	RemoteFields []*RemoteField         `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CustomObject) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomObject(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomObject) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// # The Custom Object Class Object
//
// ### Description
//
// The `Custom Object Class` object is used to represent a Custom Object Schema in the remote system.
//
// ### Usage Example
//
// TODO
type CustomObjectClass struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId   *string    `json:"remote_id,omitempty"`
	CreatedAt  *time.Time `json:"created_at,omitempty"`
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The custom object class's name.
	Name *string `json:"name,omitempty"`
	// The custom object class's description.
	Description *string `json:"description,omitempty"`
	// The custom object class's singular and plural labels.
	Labels map[string]*string                      `json:"labels,omitempty"`
	Fields []*RemoteFieldClassForCustomObjectClass `json:"fields,omitempty"`
	// The types of associations with other models that the custom object class can have.
	AssociationTypes []map[string]interface{} `json:"association_types,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CustomObjectClass) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomObjectClass
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomObjectClass(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomObjectClass) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CustomObjectRequest struct {
	Fields map[string]interface{} `json:"fields,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CustomObjectRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomObjectRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomObjectRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomObjectRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// # The DataPassthrough Object
//
// ### Description
//
// The `DataPassthrough` object is used to send information to an otherwise-unsupported third-party endpoint.
//
// ### Usage Example
//
// Create a `DataPassthrough` to get team hierarchies from your Rippling integration.
type DataPassthroughRequest struct {
	Method MethodEnum `json:"method,omitempty"`
	// The path of the request in the third party's platform.
	Path string `json:"path"`
	// An optional override of the third party's base url for the request.
	BaseUrlOverride *string `json:"base_url_override,omitempty"`
	// The data with the request. You must include a `request_format` parameter matching the data's format
	Data *string `json:"data,omitempty"`
	// Pass an array of `MultipartFormField` objects in here instead of using the `data` param if `request_format` is set to `MULTIPART`.
	MultipartFormData []*MultipartFormFieldRequest `json:"multipart_form_data,omitempty"`
	// The headers to use for the request (Merge will handle the account's authorization headers). `Content-Type` header is required for passthrough. Choose content type corresponding to expected format of receiving server.
	Headers       map[string]interface{} `json:"headers,omitempty"`
	RequestFormat *RequestFormatEnum     `json:"request_format,omitempty"`
	// Optional. If true, the response will always be an object of the form `{"type": T, "value": ...}` where `T` will be one of `string, boolean, number, null, array, object`.
	NormalizeResponse *bool `json:"normalize_response,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DataPassthroughRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler DataPassthroughRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DataPassthroughRequest(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DataPassthroughRequest) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DebugModeLog struct {
	LogId         string                `json:"log_id"`
	DashboardView string                `json:"dashboard_view"`
	LogSummary    *DebugModelLogSummary `json:"log_summary,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DebugModeLog) UnmarshalJSON(data []byte) error {
	type unmarshaler DebugModeLog
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DebugModeLog(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DebugModeLog) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DebugModelLogSummary struct {
	Url        string `json:"url"`
	Method     string `json:"method"`
	StatusCode int    `json:"status_code"`

	_rawJSON json.RawMessage
}

func (d *DebugModelLogSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler DebugModelLogSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DebugModelLogSummary(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DebugModelLogSummary) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// - `INBOUND` - INBOUND
// - `OUTBOUND` - OUTBOUND
type DirectionEnum string

const (
	DirectionEnumInbound  DirectionEnum = "INBOUND"
	DirectionEnumOutbound DirectionEnum = "OUTBOUND"
)

func NewDirectionEnumFromString(s string) (DirectionEnum, error) {
	switch s {
	case "INBOUND":
		return DirectionEnumInbound, nil
	case "OUTBOUND":
		return DirectionEnumOutbound, nil
	}
	var t DirectionEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DirectionEnum) Ptr() *DirectionEnum {
	return &d
}

// # The EmailAddress Object
//
// ### Description
//
// The `EmailAddress` object is used to represent an entity's email address.
//
// ### Usage Example
//
// Fetch from the `GET Contact` endpoint and view their email addresses.
type EmailAddress struct {
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The email address.
	EmailAddress *string `json:"email_address,omitempty"`
	// The email address's type.
	EmailAddressType *string `json:"email_address_type,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EmailAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailAddress(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailAddress) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// # The EmailAddress Object
//
// ### Description
//
// The `EmailAddress` object is used to represent an entity's email address.
//
// ### Usage Example
//
// Fetch from the `GET Contact` endpoint and view their email addresses.
type EmailAddressRequest struct {
	// The email address.
	EmailAddress *string `json:"email_address,omitempty"`
	// The email address's type.
	EmailAddressType    *string                `json:"email_address_type,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EmailAddressRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailAddressRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailAddressRequest(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailAddressRequest) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// - `READ` - READ
// - `WRITE` - WRITE
type EnabledActionsEnum string

const (
	EnabledActionsEnumRead  EnabledActionsEnum = "READ"
	EnabledActionsEnumWrite EnabledActionsEnum = "WRITE"
)

func NewEnabledActionsEnumFromString(s string) (EnabledActionsEnum, error) {
	switch s {
	case "READ":
		return EnabledActionsEnumRead, nil
	case "WRITE":
		return EnabledActionsEnumWrite, nil
	}
	var t EnabledActionsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EnabledActionsEnum) Ptr() *EnabledActionsEnum {
	return &e
}

// - `RAW` - RAW
// - `BASE64` - BASE64
// - `GZIP_BASE64` - GZIP_BASE64
type EncodingEnum string

const (
	EncodingEnumRaw        EncodingEnum = "RAW"
	EncodingEnumBase64     EncodingEnum = "BASE64"
	EncodingEnumGzipBase64 EncodingEnum = "GZIP_BASE64"
)

func NewEncodingEnumFromString(s string) (EncodingEnum, error) {
	switch s {
	case "RAW":
		return EncodingEnumRaw, nil
	case "BASE64":
		return EncodingEnumBase64, nil
	case "GZIP_BASE64":
		return EncodingEnumGzipBase64, nil
	}
	var t EncodingEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EncodingEnum) Ptr() *EncodingEnum {
	return &e
}

// # The Engagement Object
//
// ### Description
//
// The `Engagement` object is used to represent an interaction noted in a CRM system.
//
// ### Usage Example
//
// TODO
type Engagement struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The engagement's owner.
	Owner *EngagementOwner `json:"owner,omitempty"`
	// The engagement's content.
	Content *string `json:"content,omitempty"`
	// The engagement's subject.
	Subject *string `json:"subject,omitempty"`
	// The engagement's direction.
	//
	// - `INBOUND` - INBOUND
	// - `OUTBOUND` - OUTBOUND
	Direction *EngagementDirection `json:"direction,omitempty"`
	// The engagement type of the engagement.
	EngagementType *EngagementEngagementType `json:"engagement_type,omitempty"`
	// The time at which the engagement started.
	StartTime *time.Time `json:"start_time,omitempty"`
	// The time at which the engagement ended.
	EndTime *time.Time `json:"end_time,omitempty"`
	// The account of the engagement.
	Account  *EngagementAccount        `json:"account,omitempty"`
	Contacts []*EngagementContactsItem `json:"contacts,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (e *Engagement) UnmarshalJSON(data []byte) error {
	type unmarshaler Engagement
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Engagement(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *Engagement) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The account of the engagement.
type EngagementAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewEngagementAccountFromString(value string) *EngagementAccount {
	return &EngagementAccount{typeName: "string", String: value}
}

func NewEngagementAccountFromAccount(value *Account) *EngagementAccount {
	return &EngagementAccount{typeName: "account", Account: value}
}

func (e *EngagementAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		e.typeName = "account"
		e.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EngagementAccount) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "account":
		return json.Marshal(e.Account)
	}
}

type EngagementAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (e *EngagementAccount) Accept(visitor EngagementAccountVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "account":
		return visitor.VisitAccount(e.Account)
	}
}

type EngagementContactsItem struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewEngagementContactsItemFromString(value string) *EngagementContactsItem {
	return &EngagementContactsItem{typeName: "string", String: value}
}

func NewEngagementContactsItemFromContact(value *Contact) *EngagementContactsItem {
	return &EngagementContactsItem{typeName: "contact", Contact: value}
}

func (e *EngagementContactsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		e.typeName = "contact"
		e.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EngagementContactsItem) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "contact":
		return json.Marshal(e.Contact)
	}
}

type EngagementContactsItemVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (e *EngagementContactsItem) Accept(visitor EngagementContactsItemVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "contact":
		return visitor.VisitContact(e.Contact)
	}
}

// The engagement's direction.
//
// - `INBOUND` - INBOUND
// - `OUTBOUND` - OUTBOUND
type EngagementDirection struct {
	typeName      string
	DirectionEnum DirectionEnum
	String        string
}

func NewEngagementDirectionFromDirectionEnum(value DirectionEnum) *EngagementDirection {
	return &EngagementDirection{typeName: "directionEnum", DirectionEnum: value}
}

func NewEngagementDirectionFromString(value string) *EngagementDirection {
	return &EngagementDirection{typeName: "string", String: value}
}

func (e *EngagementDirection) UnmarshalJSON(data []byte) error {
	var valueDirectionEnum DirectionEnum
	if err := json.Unmarshal(data, &valueDirectionEnum); err == nil {
		e.typeName = "directionEnum"
		e.DirectionEnum = valueDirectionEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EngagementDirection) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "directionEnum":
		return json.Marshal(e.DirectionEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type EngagementDirectionVisitor interface {
	VisitDirectionEnum(DirectionEnum) error
	VisitString(string) error
}

func (e *EngagementDirection) Accept(visitor EngagementDirectionVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "directionEnum":
		return visitor.VisitDirectionEnum(e.DirectionEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

// The engagement type of the engagement.
type EngagementEngagementType struct {
	typeName       string
	String         string
	EngagementType *EngagementType
}

func NewEngagementEngagementTypeFromString(value string) *EngagementEngagementType {
	return &EngagementEngagementType{typeName: "string", String: value}
}

func NewEngagementEngagementTypeFromEngagementType(value *EngagementType) *EngagementEngagementType {
	return &EngagementEngagementType{typeName: "engagementType", EngagementType: value}
}

func (e *EngagementEngagementType) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueEngagementType := new(EngagementType)
	if err := json.Unmarshal(data, &valueEngagementType); err == nil {
		e.typeName = "engagementType"
		e.EngagementType = valueEngagementType
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EngagementEngagementType) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "engagementType":
		return json.Marshal(e.EngagementType)
	}
}

type EngagementEngagementTypeVisitor interface {
	VisitString(string) error
	VisitEngagementType(*EngagementType) error
}

func (e *EngagementEngagementType) Accept(visitor EngagementEngagementTypeVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "engagementType":
		return visitor.VisitEngagementType(e.EngagementType)
	}
}

// The engagement's owner.
type EngagementOwner struct {
	typeName string
	String   string
	User     *User
}

func NewEngagementOwnerFromString(value string) *EngagementOwner {
	return &EngagementOwner{typeName: "string", String: value}
}

func NewEngagementOwnerFromUser(value *User) *EngagementOwner {
	return &EngagementOwner{typeName: "user", User: value}
}

func (e *EngagementOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		e.typeName = "user"
		e.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EngagementOwner) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "user":
		return json.Marshal(e.User)
	}
}

type EngagementOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (e *EngagementOwner) Accept(visitor EngagementOwnerVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "user":
		return visitor.VisitUser(e.User)
	}
}

// # The Engagement Object
//
// ### Description
//
// The `Engagement` object is used to represent an interaction noted in a CRM system.
//
// ### Usage Example
//
// TODO
type EngagementRequest struct {
	// The engagement's owner.
	Owner *EngagementRequestOwner `json:"owner,omitempty"`
	// The engagement's content.
	Content *string `json:"content,omitempty"`
	// The engagement's subject.
	Subject *string `json:"subject,omitempty"`
	// The engagement's direction.
	//
	// - `INBOUND` - INBOUND
	// - `OUTBOUND` - OUTBOUND
	Direction *EngagementRequestDirection `json:"direction,omitempty"`
	// The engagement type of the engagement.
	EngagementType *EngagementRequestEngagementType `json:"engagement_type,omitempty"`
	// The time at which the engagement started.
	StartTime *time.Time `json:"start_time,omitempty"`
	// The time at which the engagement ended.
	EndTime *time.Time `json:"end_time,omitempty"`
	// The account of the engagement.
	Account             *EngagementRequestAccount        `json:"account,omitempty"`
	Contacts            []*EngagementRequestContactsItem `json:"contacts,omitempty"`
	IntegrationParams   map[string]interface{}           `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}           `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest            `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EngagementRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EngagementRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EngagementRequest(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EngagementRequest) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The account of the engagement.
type EngagementRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewEngagementRequestAccountFromString(value string) *EngagementRequestAccount {
	return &EngagementRequestAccount{typeName: "string", String: value}
}

func NewEngagementRequestAccountFromAccount(value *Account) *EngagementRequestAccount {
	return &EngagementRequestAccount{typeName: "account", Account: value}
}

func (e *EngagementRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		e.typeName = "account"
		e.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EngagementRequestAccount) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "account":
		return json.Marshal(e.Account)
	}
}

type EngagementRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (e *EngagementRequestAccount) Accept(visitor EngagementRequestAccountVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "account":
		return visitor.VisitAccount(e.Account)
	}
}

type EngagementRequestContactsItem struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewEngagementRequestContactsItemFromString(value string) *EngagementRequestContactsItem {
	return &EngagementRequestContactsItem{typeName: "string", String: value}
}

func NewEngagementRequestContactsItemFromContact(value *Contact) *EngagementRequestContactsItem {
	return &EngagementRequestContactsItem{typeName: "contact", Contact: value}
}

func (e *EngagementRequestContactsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		e.typeName = "contact"
		e.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EngagementRequestContactsItem) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "contact":
		return json.Marshal(e.Contact)
	}
}

type EngagementRequestContactsItemVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (e *EngagementRequestContactsItem) Accept(visitor EngagementRequestContactsItemVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "contact":
		return visitor.VisitContact(e.Contact)
	}
}

// The engagement's direction.
//
// - `INBOUND` - INBOUND
// - `OUTBOUND` - OUTBOUND
type EngagementRequestDirection struct {
	typeName      string
	DirectionEnum DirectionEnum
	String        string
}

func NewEngagementRequestDirectionFromDirectionEnum(value DirectionEnum) *EngagementRequestDirection {
	return &EngagementRequestDirection{typeName: "directionEnum", DirectionEnum: value}
}

func NewEngagementRequestDirectionFromString(value string) *EngagementRequestDirection {
	return &EngagementRequestDirection{typeName: "string", String: value}
}

func (e *EngagementRequestDirection) UnmarshalJSON(data []byte) error {
	var valueDirectionEnum DirectionEnum
	if err := json.Unmarshal(data, &valueDirectionEnum); err == nil {
		e.typeName = "directionEnum"
		e.DirectionEnum = valueDirectionEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EngagementRequestDirection) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "directionEnum":
		return json.Marshal(e.DirectionEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type EngagementRequestDirectionVisitor interface {
	VisitDirectionEnum(DirectionEnum) error
	VisitString(string) error
}

func (e *EngagementRequestDirection) Accept(visitor EngagementRequestDirectionVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "directionEnum":
		return visitor.VisitDirectionEnum(e.DirectionEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

// The engagement type of the engagement.
type EngagementRequestEngagementType struct {
	typeName       string
	String         string
	EngagementType *EngagementType
}

func NewEngagementRequestEngagementTypeFromString(value string) *EngagementRequestEngagementType {
	return &EngagementRequestEngagementType{typeName: "string", String: value}
}

func NewEngagementRequestEngagementTypeFromEngagementType(value *EngagementType) *EngagementRequestEngagementType {
	return &EngagementRequestEngagementType{typeName: "engagementType", EngagementType: value}
}

func (e *EngagementRequestEngagementType) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueEngagementType := new(EngagementType)
	if err := json.Unmarshal(data, &valueEngagementType); err == nil {
		e.typeName = "engagementType"
		e.EngagementType = valueEngagementType
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EngagementRequestEngagementType) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "engagementType":
		return json.Marshal(e.EngagementType)
	}
}

type EngagementRequestEngagementTypeVisitor interface {
	VisitString(string) error
	VisitEngagementType(*EngagementType) error
}

func (e *EngagementRequestEngagementType) Accept(visitor EngagementRequestEngagementTypeVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "engagementType":
		return visitor.VisitEngagementType(e.EngagementType)
	}
}

// The engagement's owner.
type EngagementRequestOwner struct {
	typeName string
	String   string
	User     *User
}

func NewEngagementRequestOwnerFromString(value string) *EngagementRequestOwner {
	return &EngagementRequestOwner{typeName: "string", String: value}
}

func NewEngagementRequestOwnerFromUser(value *User) *EngagementRequestOwner {
	return &EngagementRequestOwner{typeName: "user", User: value}
}

func (e *EngagementRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		e.typeName = "user"
		e.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EngagementRequestOwner) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "user":
		return json.Marshal(e.User)
	}
}

type EngagementRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (e *EngagementRequestOwner) Accept(visitor EngagementRequestOwnerVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "user":
		return visitor.VisitUser(e.User)
	}
}

type EngagementResponse struct {
	Model    *Engagement                 `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EngagementResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EngagementResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EngagementResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EngagementResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// # The Engagement Type Object
//
// ### Description
//
// The `Engagement Type` object is used to represent an interaction activity. A given `Engagement` typically has an `Engagement Type` object represented in the engagement_type field.
//
// ### Usage Example
//
// TODO
type EngagementType struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The engagement type's activity type.
	//
	// - `CALL` - CALL
	// - `MEETING` - MEETING
	// - `EMAIL` - EMAIL
	ActivityType *EngagementTypeActivityType `json:"activity_type,omitempty"`
	// The engagement type's name.
	Name         *string        `json:"name,omitempty"`
	RemoteFields []*RemoteField `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EngagementType) UnmarshalJSON(data []byte) error {
	type unmarshaler EngagementType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EngagementType(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EngagementType) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The engagement type's activity type.
//
// - `CALL` - CALL
// - `MEETING` - MEETING
// - `EMAIL` - EMAIL
type EngagementTypeActivityType struct {
	typeName         string
	ActivityTypeEnum ActivityTypeEnum
	String           string
}

func NewEngagementTypeActivityTypeFromActivityTypeEnum(value ActivityTypeEnum) *EngagementTypeActivityType {
	return &EngagementTypeActivityType{typeName: "activityTypeEnum", ActivityTypeEnum: value}
}

func NewEngagementTypeActivityTypeFromString(value string) *EngagementTypeActivityType {
	return &EngagementTypeActivityType{typeName: "string", String: value}
}

func (e *EngagementTypeActivityType) UnmarshalJSON(data []byte) error {
	var valueActivityTypeEnum ActivityTypeEnum
	if err := json.Unmarshal(data, &valueActivityTypeEnum); err == nil {
		e.typeName = "activityTypeEnum"
		e.ActivityTypeEnum = valueActivityTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EngagementTypeActivityType) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "activityTypeEnum":
		return json.Marshal(e.ActivityTypeEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type EngagementTypeActivityTypeVisitor interface {
	VisitActivityTypeEnum(ActivityTypeEnum) error
	VisitString(string) error
}

func (e *EngagementTypeActivityType) Accept(visitor EngagementTypeActivityTypeVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "activityTypeEnum":
		return visitor.VisitActivityTypeEnum(e.ActivityTypeEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

type ErrorValidationProblem struct {
	Source      *ValidationProblemSource `json:"source,omitempty"`
	Title       string                   `json:"title"`
	Detail      string                   `json:"detail"`
	ProblemType string                   `json:"problem_type"`

	_rawJSON json.RawMessage
}

func (e *ErrorValidationProblem) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorValidationProblem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorValidationProblem(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorValidationProblem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// - `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
// - `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
// - `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
// - `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
// - `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
// - `INVITED_USER` - INVITED_USER
// - `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
// - `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
// - `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
// - `CREATED_DESTINATION` - CREATED_DESTINATION
// - `DELETED_DESTINATION` - DELETED_DESTINATION
// - `CHANGED_DESTINATION` - CHANGED_DESTINATION
// - `CHANGED_SCOPES` - CHANGED_SCOPES
// - `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
// - `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
// - `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
// - `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
// - `ENABLED_CATEGORY` - ENABLED_CATEGORY
// - `DISABLED_CATEGORY` - DISABLED_CATEGORY
// - `CHANGED_PASSWORD` - CHANGED_PASSWORD
// - `RESET_PASSWORD` - RESET_PASSWORD
// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// - `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// - `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// - `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
// - `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
// - `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
// - `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
// - `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
// - `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
// - `CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE` - DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE
// - `FORCED_LINKED_ACCOUNT_RESYNC` - FORCED_LINKED_ACCOUNT_RESYNC
// - `MUTED_ISSUE` - MUTED_ISSUE
// - `GENERATED_MAGIC_LINK` - GENERATED_MAGIC_LINK
// - `ENABLED_MERGE_WEBHOOK` - ENABLED_MERGE_WEBHOOK
// - `DISABLED_MERGE_WEBHOOK` - DISABLED_MERGE_WEBHOOK
// - `MERGE_WEBHOOK_TARGET_CHANGED` - MERGE_WEBHOOK_TARGET_CHANGED
// - `END_USER_CREDENTIALS_ACCESSED` - END_USER_CREDENTIALS_ACCESSED
type EventTypeEnum string

const (
	EventTypeEnumCreatedRemoteProductionApiKey              EventTypeEnum = "CREATED_REMOTE_PRODUCTION_API_KEY"
	EventTypeEnumDeletedRemoteProductionApiKey              EventTypeEnum = "DELETED_REMOTE_PRODUCTION_API_KEY"
	EventTypeEnumCreatedTestApiKey                          EventTypeEnum = "CREATED_TEST_API_KEY"
	EventTypeEnumDeletedTestApiKey                          EventTypeEnum = "DELETED_TEST_API_KEY"
	EventTypeEnumRegeneratedProductionApiKey                EventTypeEnum = "REGENERATED_PRODUCTION_API_KEY"
	EventTypeEnumInvitedUser                                EventTypeEnum = "INVITED_USER"
	EventTypeEnumTwoFactorAuthEnabled                       EventTypeEnum = "TWO_FACTOR_AUTH_ENABLED"
	EventTypeEnumTwoFactorAuthDisabled                      EventTypeEnum = "TWO_FACTOR_AUTH_DISABLED"
	EventTypeEnumDeletedLinkedAccount                       EventTypeEnum = "DELETED_LINKED_ACCOUNT"
	EventTypeEnumCreatedDestination                         EventTypeEnum = "CREATED_DESTINATION"
	EventTypeEnumDeletedDestination                         EventTypeEnum = "DELETED_DESTINATION"
	EventTypeEnumChangedDestination                         EventTypeEnum = "CHANGED_DESTINATION"
	EventTypeEnumChangedScopes                              EventTypeEnum = "CHANGED_SCOPES"
	EventTypeEnumChangedPersonalInformation                 EventTypeEnum = "CHANGED_PERSONAL_INFORMATION"
	EventTypeEnumChangedOrganizationSettings                EventTypeEnum = "CHANGED_ORGANIZATION_SETTINGS"
	EventTypeEnumEnabledIntegration                         EventTypeEnum = "ENABLED_INTEGRATION"
	EventTypeEnumDisabledIntegration                        EventTypeEnum = "DISABLED_INTEGRATION"
	EventTypeEnumEnabledCategory                            EventTypeEnum = "ENABLED_CATEGORY"
	EventTypeEnumDisabledCategory                           EventTypeEnum = "DISABLED_CATEGORY"
	EventTypeEnumChangedPassword                            EventTypeEnum = "CHANGED_PASSWORD"
	EventTypeEnumResetPassword                              EventTypeEnum = "RESET_PASSWORD"
	EventTypeEnumEnabledRedactUnmappedDataForOrganization   EventTypeEnum = "ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION"
	EventTypeEnumEnabledRedactUnmappedDataForLinkedAccount  EventTypeEnum = "ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT"
	EventTypeEnumDisabledRedactUnmappedDataForOrganization  EventTypeEnum = "DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION"
	EventTypeEnumDisabledRedactUnmappedDataForLinkedAccount EventTypeEnum = "DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT"
	EventTypeEnumCreatedIntegrationWideFieldMapping         EventTypeEnum = "CREATED_INTEGRATION_WIDE_FIELD_MAPPING"
	EventTypeEnumCreatedLinkedAccountFieldMapping           EventTypeEnum = "CREATED_LINKED_ACCOUNT_FIELD_MAPPING"
	EventTypeEnumChangedIntegrationWideFieldMapping         EventTypeEnum = "CHANGED_INTEGRATION_WIDE_FIELD_MAPPING"
	EventTypeEnumChangedLinkedAccountFieldMapping           EventTypeEnum = "CHANGED_LINKED_ACCOUNT_FIELD_MAPPING"
	EventTypeEnumDeletedIntegrationWideFieldMapping         EventTypeEnum = "DELETED_INTEGRATION_WIDE_FIELD_MAPPING"
	EventTypeEnumDeletedLinkedAccountFieldMapping           EventTypeEnum = "DELETED_LINKED_ACCOUNT_FIELD_MAPPING"
	EventTypeEnumCreatedLinkedAccountCommonModelOverride    EventTypeEnum = "CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE"
	EventTypeEnumChangedLinkedAccountCommonModelOverride    EventTypeEnum = "CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE"
	EventTypeEnumDeletedLinkedAccountCommonModelOverride    EventTypeEnum = "DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE"
	EventTypeEnumForcedLinkedAccountResync                  EventTypeEnum = "FORCED_LINKED_ACCOUNT_RESYNC"
	EventTypeEnumMutedIssue                                 EventTypeEnum = "MUTED_ISSUE"
	EventTypeEnumGeneratedMagicLink                         EventTypeEnum = "GENERATED_MAGIC_LINK"
	EventTypeEnumEnabledMergeWebhook                        EventTypeEnum = "ENABLED_MERGE_WEBHOOK"
	EventTypeEnumDisabledMergeWebhook                       EventTypeEnum = "DISABLED_MERGE_WEBHOOK"
	EventTypeEnumMergeWebhookTargetChanged                  EventTypeEnum = "MERGE_WEBHOOK_TARGET_CHANGED"
	EventTypeEnumEndUserCredentialsAccessed                 EventTypeEnum = "END_USER_CREDENTIALS_ACCESSED"
)

func NewEventTypeEnumFromString(s string) (EventTypeEnum, error) {
	switch s {
	case "CREATED_REMOTE_PRODUCTION_API_KEY":
		return EventTypeEnumCreatedRemoteProductionApiKey, nil
	case "DELETED_REMOTE_PRODUCTION_API_KEY":
		return EventTypeEnumDeletedRemoteProductionApiKey, nil
	case "CREATED_TEST_API_KEY":
		return EventTypeEnumCreatedTestApiKey, nil
	case "DELETED_TEST_API_KEY":
		return EventTypeEnumDeletedTestApiKey, nil
	case "REGENERATED_PRODUCTION_API_KEY":
		return EventTypeEnumRegeneratedProductionApiKey, nil
	case "INVITED_USER":
		return EventTypeEnumInvitedUser, nil
	case "TWO_FACTOR_AUTH_ENABLED":
		return EventTypeEnumTwoFactorAuthEnabled, nil
	case "TWO_FACTOR_AUTH_DISABLED":
		return EventTypeEnumTwoFactorAuthDisabled, nil
	case "DELETED_LINKED_ACCOUNT":
		return EventTypeEnumDeletedLinkedAccount, nil
	case "CREATED_DESTINATION":
		return EventTypeEnumCreatedDestination, nil
	case "DELETED_DESTINATION":
		return EventTypeEnumDeletedDestination, nil
	case "CHANGED_DESTINATION":
		return EventTypeEnumChangedDestination, nil
	case "CHANGED_SCOPES":
		return EventTypeEnumChangedScopes, nil
	case "CHANGED_PERSONAL_INFORMATION":
		return EventTypeEnumChangedPersonalInformation, nil
	case "CHANGED_ORGANIZATION_SETTINGS":
		return EventTypeEnumChangedOrganizationSettings, nil
	case "ENABLED_INTEGRATION":
		return EventTypeEnumEnabledIntegration, nil
	case "DISABLED_INTEGRATION":
		return EventTypeEnumDisabledIntegration, nil
	case "ENABLED_CATEGORY":
		return EventTypeEnumEnabledCategory, nil
	case "DISABLED_CATEGORY":
		return EventTypeEnumDisabledCategory, nil
	case "CHANGED_PASSWORD":
		return EventTypeEnumChangedPassword, nil
	case "RESET_PASSWORD":
		return EventTypeEnumResetPassword, nil
	case "ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION":
		return EventTypeEnumEnabledRedactUnmappedDataForOrganization, nil
	case "ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT":
		return EventTypeEnumEnabledRedactUnmappedDataForLinkedAccount, nil
	case "DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION":
		return EventTypeEnumDisabledRedactUnmappedDataForOrganization, nil
	case "DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT":
		return EventTypeEnumDisabledRedactUnmappedDataForLinkedAccount, nil
	case "CREATED_INTEGRATION_WIDE_FIELD_MAPPING":
		return EventTypeEnumCreatedIntegrationWideFieldMapping, nil
	case "CREATED_LINKED_ACCOUNT_FIELD_MAPPING":
		return EventTypeEnumCreatedLinkedAccountFieldMapping, nil
	case "CHANGED_INTEGRATION_WIDE_FIELD_MAPPING":
		return EventTypeEnumChangedIntegrationWideFieldMapping, nil
	case "CHANGED_LINKED_ACCOUNT_FIELD_MAPPING":
		return EventTypeEnumChangedLinkedAccountFieldMapping, nil
	case "DELETED_INTEGRATION_WIDE_FIELD_MAPPING":
		return EventTypeEnumDeletedIntegrationWideFieldMapping, nil
	case "DELETED_LINKED_ACCOUNT_FIELD_MAPPING":
		return EventTypeEnumDeletedLinkedAccountFieldMapping, nil
	case "CREATED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE":
		return EventTypeEnumCreatedLinkedAccountCommonModelOverride, nil
	case "CHANGED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE":
		return EventTypeEnumChangedLinkedAccountCommonModelOverride, nil
	case "DELETED_LINKED_ACCOUNT_COMMON_MODEL_OVERRIDE":
		return EventTypeEnumDeletedLinkedAccountCommonModelOverride, nil
	case "FORCED_LINKED_ACCOUNT_RESYNC":
		return EventTypeEnumForcedLinkedAccountResync, nil
	case "MUTED_ISSUE":
		return EventTypeEnumMutedIssue, nil
	case "GENERATED_MAGIC_LINK":
		return EventTypeEnumGeneratedMagicLink, nil
	case "ENABLED_MERGE_WEBHOOK":
		return EventTypeEnumEnabledMergeWebhook, nil
	case "DISABLED_MERGE_WEBHOOK":
		return EventTypeEnumDisabledMergeWebhook, nil
	case "MERGE_WEBHOOK_TARGET_CHANGED":
		return EventTypeEnumMergeWebhookTargetChanged, nil
	case "END_USER_CREDENTIALS_ACCESSED":
		return EventTypeEnumEndUserCredentialsAccessed, nil
	}
	var t EventTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventTypeEnum) Ptr() *EventTypeEnum {
	return &e
}

type ExternalTargetFieldApi struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	IsMapped    *string `json:"is_mapped,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExternalTargetFieldApi) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalTargetFieldApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalTargetFieldApi(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalTargetFieldApi) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExternalTargetFieldApiResponse struct {
	Account     []*ExternalTargetFieldApi `json:"Account,omitempty"`
	Contact     []*ExternalTargetFieldApi `json:"Contact,omitempty"`
	Lead        []*ExternalTargetFieldApi `json:"Lead,omitempty"`
	Note        []*ExternalTargetFieldApi `json:"Note,omitempty"`
	Opportunity []*ExternalTargetFieldApi `json:"Opportunity,omitempty"`
	Stage       []*ExternalTargetFieldApi `json:"Stage,omitempty"`
	User        []*ExternalTargetFieldApi `json:"User,omitempty"`
	Task        []*ExternalTargetFieldApi `json:"Task,omitempty"`
	Engagement  []*ExternalTargetFieldApi `json:"Engagement,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExternalTargetFieldApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalTargetFieldApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalTargetFieldApiResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalTargetFieldApiResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// - `string` - string
// - `number` - number
// - `date` - date
// - `datetime` - datetime
// - `bool` - bool
// - `list` - list
type FieldFormatEnum string

const (
	FieldFormatEnumString   FieldFormatEnum = "string"
	FieldFormatEnumNumber   FieldFormatEnum = "number"
	FieldFormatEnumDate     FieldFormatEnum = "date"
	FieldFormatEnumDatetime FieldFormatEnum = "datetime"
	FieldFormatEnumBool     FieldFormatEnum = "bool"
	FieldFormatEnumList     FieldFormatEnum = "list"
)

func NewFieldFormatEnumFromString(s string) (FieldFormatEnum, error) {
	switch s {
	case "string":
		return FieldFormatEnumString, nil
	case "number":
		return FieldFormatEnumNumber, nil
	case "date":
		return FieldFormatEnumDate, nil
	case "datetime":
		return FieldFormatEnumDatetime, nil
	case "bool":
		return FieldFormatEnumBool, nil
	case "list":
		return FieldFormatEnumList, nil
	}
	var t FieldFormatEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FieldFormatEnum) Ptr() *FieldFormatEnum {
	return &f
}

type FieldMappingApiInstance struct {
	Id                *string                             `json:"id,omitempty"`
	IsIntegrationWide *bool                               `json:"is_integration_wide,omitempty"`
	TargetField       *FieldMappingApiInstanceTargetField `json:"target_field,omitempty"`
	RemoteField       *FieldMappingApiInstanceRemoteField `json:"remote_field,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstance) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstance(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstance) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceRemoteField struct {
	RemoteKeyName      *string                                               `json:"remote_key_name,omitempty"`
	Schema             map[string]interface{}                                `json:"schema,omitempty"`
	RemoteEndpointInfo *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo `json:"remote_endpoint_info,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstanceRemoteField) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceRemoteField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceRemoteField(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceRemoteField) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo struct {
	Method             *string  `json:"method,omitempty"`
	UrlPath            *string  `json:"url_path,omitempty"`
	FieldTraversalPath []string `json:"field_traversal_path,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceRemoteFieldRemoteEndpointInfo) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceResponse struct {
	Account     []*FieldMappingApiInstance `json:"Account,omitempty"`
	Contact     []*FieldMappingApiInstance `json:"Contact,omitempty"`
	Lead        []*FieldMappingApiInstance `json:"Lead,omitempty"`
	Note        []*FieldMappingApiInstance `json:"Note,omitempty"`
	Opportunity []*FieldMappingApiInstance `json:"Opportunity,omitempty"`
	Stage       []*FieldMappingApiInstance `json:"Stage,omitempty"`
	User        []*FieldMappingApiInstance `json:"User,omitempty"`
	Task        []*FieldMappingApiInstance `json:"Task,omitempty"`
	Engagement  []*FieldMappingApiInstance `json:"Engagement,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstanceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceResponse(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingApiInstanceTargetField struct {
	Name               string `json:"name"`
	Description        string `json:"description"`
	IsOrganizationWide bool   `json:"is_organization_wide"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingApiInstanceTargetField) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingApiInstanceTargetField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingApiInstanceTargetField(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingApiInstanceTargetField) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMappingInstanceResponse struct {
	Model    *FieldMappingApiInstance    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldMappingInstanceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldMappingInstanceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldMappingInstanceResponse(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldMappingInstanceResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldPermissionDeserializer struct {
	EnabledFields  []interface{} `json:"enabled_fields,omitempty"`
	DisabledFields []interface{} `json:"disabled_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldPermissionDeserializer) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldPermissionDeserializer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldPermissionDeserializer(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldPermissionDeserializer) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldPermissionDeserializerRequest struct {
	EnabledFields  []interface{} `json:"enabled_fields,omitempty"`
	DisabledFields []interface{} `json:"disabled_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldPermissionDeserializerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldPermissionDeserializerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldPermissionDeserializerRequest(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldPermissionDeserializerRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// - `string` - string
// - `number` - number
// - `date` - date
// - `datetime` - datetime
// - `bool` - bool
// - `list` - list
type FieldTypeEnum string

const (
	FieldTypeEnumString   FieldTypeEnum = "string"
	FieldTypeEnumNumber   FieldTypeEnum = "number"
	FieldTypeEnumDate     FieldTypeEnum = "date"
	FieldTypeEnumDatetime FieldTypeEnum = "datetime"
	FieldTypeEnumBool     FieldTypeEnum = "bool"
	FieldTypeEnumList     FieldTypeEnum = "list"
)

func NewFieldTypeEnumFromString(s string) (FieldTypeEnum, error) {
	switch s {
	case "string":
		return FieldTypeEnumString, nil
	case "number":
		return FieldTypeEnumNumber, nil
	case "date":
		return FieldTypeEnumDate, nil
	case "datetime":
		return FieldTypeEnumDatetime, nil
	case "bool":
		return FieldTypeEnumBool, nil
	case "list":
		return FieldTypeEnumList, nil
	}
	var t FieldTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FieldTypeEnum) Ptr() *FieldTypeEnum {
	return &f
}

type IgnoreCommonModelRequest struct {
	Reason  ReasonEnum `json:"reason,omitempty"`
	Message *string    `json:"message,omitempty"`

	_rawJSON json.RawMessage
}

func (i *IgnoreCommonModelRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler IgnoreCommonModelRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IgnoreCommonModelRequest(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IgnoreCommonModelRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IndividualCommonModelScopeDeserializer struct {
	ModelName        string                                  `json:"model_name"`
	ModelPermissions map[string]*ModelPermissionDeserializer `json:"model_permissions,omitempty"`
	FieldPermissions *FieldPermissionDeserializer            `json:"field_permissions,omitempty"`

	_rawJSON json.RawMessage
}

func (i *IndividualCommonModelScopeDeserializer) UnmarshalJSON(data []byte) error {
	type unmarshaler IndividualCommonModelScopeDeserializer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IndividualCommonModelScopeDeserializer(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IndividualCommonModelScopeDeserializer) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IndividualCommonModelScopeDeserializerRequest struct {
	ModelName        string                                         `json:"model_name"`
	ModelPermissions map[string]*ModelPermissionDeserializerRequest `json:"model_permissions,omitempty"`
	FieldPermissions *FieldPermissionDeserializerRequest            `json:"field_permissions,omitempty"`

	_rawJSON json.RawMessage
}

func (i *IndividualCommonModelScopeDeserializerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler IndividualCommonModelScopeDeserializerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IndividualCommonModelScopeDeserializerRequest(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IndividualCommonModelScopeDeserializerRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type Issue struct {
	Id *string `json:"id,omitempty"`
	// Status of the issue. Options: ('ONGOING', 'RESOLVED')
	//
	// - `ONGOING` - ONGOING
	// - `RESOLVED` - RESOLVED
	Status            *IssueStatus           `json:"status,omitempty"`
	ErrorDescription  string                 `json:"error_description"`
	EndUser           map[string]interface{} `json:"end_user,omitempty"`
	FirstIncidentTime *time.Time             `json:"first_incident_time,omitempty"`
	LastIncidentTime  *time.Time             `json:"last_incident_time,omitempty"`
	IsMuted           *bool                  `json:"is_muted,omitempty"`
	ErrorDetails      []string               `json:"error_details,omitempty"`

	_rawJSON json.RawMessage
}

func (i *Issue) UnmarshalJSON(data []byte) error {
	type unmarshaler Issue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = Issue(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *Issue) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Status of the issue. Options: ('ONGOING', 'RESOLVED')
//
// - `ONGOING` - ONGOING
// - `RESOLVED` - RESOLVED
type IssueStatus struct {
	typeName        string
	IssueStatusEnum IssueStatusEnum
	String          string
}

func NewIssueStatusFromIssueStatusEnum(value IssueStatusEnum) *IssueStatus {
	return &IssueStatus{typeName: "issueStatusEnum", IssueStatusEnum: value}
}

func NewIssueStatusFromString(value string) *IssueStatus {
	return &IssueStatus{typeName: "string", String: value}
}

func (i *IssueStatus) UnmarshalJSON(data []byte) error {
	var valueIssueStatusEnum IssueStatusEnum
	if err := json.Unmarshal(data, &valueIssueStatusEnum); err == nil {
		i.typeName = "issueStatusEnum"
		i.IssueStatusEnum = valueIssueStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IssueStatus) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "issueStatusEnum":
		return json.Marshal(i.IssueStatusEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type IssueStatusVisitor interface {
	VisitIssueStatusEnum(IssueStatusEnum) error
	VisitString(string) error
}

func (i *IssueStatus) Accept(visitor IssueStatusVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "issueStatusEnum":
		return visitor.VisitIssueStatusEnum(i.IssueStatusEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

// - `ONGOING` - ONGOING
// - `RESOLVED` - RESOLVED
type IssueStatusEnum string

const (
	IssueStatusEnumOngoing  IssueStatusEnum = "ONGOING"
	IssueStatusEnumResolved IssueStatusEnum = "RESOLVED"
)

func NewIssueStatusEnumFromString(s string) (IssueStatusEnum, error) {
	switch s {
	case "ONGOING":
		return IssueStatusEnumOngoing, nil
	case "RESOLVED":
		return IssueStatusEnumResolved, nil
	}
	var t IssueStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IssueStatusEnum) Ptr() *IssueStatusEnum {
	return &i
}

// - `string` - uuid
// - `number` - url
// - `date` - email
// - `datetime` - phone
// - `bool` - currency
// - `list` - decimal
type ItemFormatEnum string

const (
	ItemFormatEnumString   ItemFormatEnum = "string"
	ItemFormatEnumNumber   ItemFormatEnum = "number"
	ItemFormatEnumDate     ItemFormatEnum = "date"
	ItemFormatEnumDatetime ItemFormatEnum = "datetime"
	ItemFormatEnumBool     ItemFormatEnum = "bool"
	ItemFormatEnumList     ItemFormatEnum = "list"
)

func NewItemFormatEnumFromString(s string) (ItemFormatEnum, error) {
	switch s {
	case "string":
		return ItemFormatEnumString, nil
	case "number":
		return ItemFormatEnumNumber, nil
	case "date":
		return ItemFormatEnumDate, nil
	case "datetime":
		return ItemFormatEnumDatetime, nil
	case "bool":
		return ItemFormatEnumBool, nil
	case "list":
		return ItemFormatEnumList, nil
	}
	var t ItemFormatEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i ItemFormatEnum) Ptr() *ItemFormatEnum {
	return &i
}

type ItemSchema struct {
	ItemType    *ItemTypeEnum   `json:"item_type,omitempty"`
	ItemFormat  *ItemFormatEnum `json:"item_format,omitempty"`
	ItemChoices []string        `json:"item_choices,omitempty"`

	_rawJSON json.RawMessage
}

func (i *ItemSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler ItemSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ItemSchema(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ItemSchema) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// - `string` - string
// - `number` - number
// - `date` - date
// - `datetime` - datetime
// - `bool` - bool
// - `list` - list
type ItemTypeEnum string

const (
	ItemTypeEnumString   ItemTypeEnum = "string"
	ItemTypeEnumNumber   ItemTypeEnum = "number"
	ItemTypeEnumDate     ItemTypeEnum = "date"
	ItemTypeEnumDatetime ItemTypeEnum = "datetime"
	ItemTypeEnumBool     ItemTypeEnum = "bool"
	ItemTypeEnumList     ItemTypeEnum = "list"
)

func NewItemTypeEnumFromString(s string) (ItemTypeEnum, error) {
	switch s {
	case "string":
		return ItemTypeEnumString, nil
	case "number":
		return ItemTypeEnumNumber, nil
	case "date":
		return ItemTypeEnumDate, nil
	case "datetime":
		return ItemTypeEnumDatetime, nil
	case "bool":
		return ItemTypeEnumBool, nil
	case "list":
		return ItemTypeEnumList, nil
	}
	var t ItemTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i ItemTypeEnum) Ptr() *ItemTypeEnum {
	return &i
}

// - `en` - en
// - `de` - de
type LanguageEnum string

const (
	LanguageEnumEn LanguageEnum = "en"
	LanguageEnumDe LanguageEnum = "de"
)

func NewLanguageEnumFromString(s string) (LanguageEnum, error) {
	switch s {
	case "en":
		return LanguageEnumEn, nil
	case "de":
		return LanguageEnumDe, nil
	}
	var t LanguageEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LanguageEnum) Ptr() *LanguageEnum {
	return &l
}

// # The Lead Object
//
// ### Description
//
// The `Lead` object is used to represent an individual who is a potential customer.
//
// ### Usage Example
//
// TODO
type Lead struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The lead's owner.
	Owner *LeadOwner `json:"owner,omitempty"`
	// The lead's source.
	LeadSource *string `json:"lead_source,omitempty"`
	// The lead's title.
	Title *string `json:"title,omitempty"`
	// The lead's company.
	Company *string `json:"company,omitempty"`
	// The lead's first name.
	FirstName *string `json:"first_name,omitempty"`
	// The lead's last name.
	LastName       *string         `json:"last_name,omitempty"`
	Addresses      []*Address      `json:"addresses,omitempty"`
	EmailAddresses []*EmailAddress `json:"email_addresses,omitempty"`
	PhoneNumbers   []*PhoneNumber  `json:"phone_numbers,omitempty"`
	// When the third party's lead was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// When the third party's lead was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// When the lead was converted.
	ConvertedDate *time.Time `json:"converted_date,omitempty"`
	// The contact of the converted lead.
	ConvertedContact *LeadConvertedContact `json:"converted_contact,omitempty"`
	// The account of the converted lead.
	ConvertedAccount *LeadConvertedAccount `json:"converted_account,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (l *Lead) UnmarshalJSON(data []byte) error {
	type unmarshaler Lead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = Lead(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *Lead) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// The account of the converted lead.
type LeadConvertedAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewLeadConvertedAccountFromString(value string) *LeadConvertedAccount {
	return &LeadConvertedAccount{typeName: "string", String: value}
}

func NewLeadConvertedAccountFromAccount(value *Account) *LeadConvertedAccount {
	return &LeadConvertedAccount{typeName: "account", Account: value}
}

func (l *LeadConvertedAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typeName = "string"
		l.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		l.typeName = "account"
		l.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LeadConvertedAccount) MarshalJSON() ([]byte, error) {
	switch l.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "string":
		return json.Marshal(l.String)
	case "account":
		return json.Marshal(l.Account)
	}
}

type LeadConvertedAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (l *LeadConvertedAccount) Accept(visitor LeadConvertedAccountVisitor) error {
	switch l.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "string":
		return visitor.VisitString(l.String)
	case "account":
		return visitor.VisitAccount(l.Account)
	}
}

// The contact of the converted lead.
type LeadConvertedContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewLeadConvertedContactFromString(value string) *LeadConvertedContact {
	return &LeadConvertedContact{typeName: "string", String: value}
}

func NewLeadConvertedContactFromContact(value *Contact) *LeadConvertedContact {
	return &LeadConvertedContact{typeName: "contact", Contact: value}
}

func (l *LeadConvertedContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typeName = "string"
		l.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		l.typeName = "contact"
		l.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LeadConvertedContact) MarshalJSON() ([]byte, error) {
	switch l.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "string":
		return json.Marshal(l.String)
	case "contact":
		return json.Marshal(l.Contact)
	}
}

type LeadConvertedContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (l *LeadConvertedContact) Accept(visitor LeadConvertedContactVisitor) error {
	switch l.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "string":
		return visitor.VisitString(l.String)
	case "contact":
		return visitor.VisitContact(l.Contact)
	}
}

// The lead's owner.
type LeadOwner struct {
	typeName string
	String   string
	User     *User
}

func NewLeadOwnerFromString(value string) *LeadOwner {
	return &LeadOwner{typeName: "string", String: value}
}

func NewLeadOwnerFromUser(value *User) *LeadOwner {
	return &LeadOwner{typeName: "user", User: value}
}

func (l *LeadOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typeName = "string"
		l.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		l.typeName = "user"
		l.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LeadOwner) MarshalJSON() ([]byte, error) {
	switch l.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "string":
		return json.Marshal(l.String)
	case "user":
		return json.Marshal(l.User)
	}
}

type LeadOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (l *LeadOwner) Accept(visitor LeadOwnerVisitor) error {
	switch l.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "string":
		return visitor.VisitString(l.String)
	case "user":
		return visitor.VisitUser(l.User)
	}
}

// # The Lead Object
//
// ### Description
//
// The `Lead` object is used to represent an individual who is a potential customer.
//
// ### Usage Example
//
// TODO
type LeadRequest struct {
	// The lead's owner.
	Owner *LeadRequestOwner `json:"owner,omitempty"`
	// The lead's source.
	LeadSource *string `json:"lead_source,omitempty"`
	// The lead's title.
	Title *string `json:"title,omitempty"`
	// The lead's company.
	Company *string `json:"company,omitempty"`
	// The lead's first name.
	FirstName *string `json:"first_name,omitempty"`
	// The lead's last name.
	LastName       *string                `json:"last_name,omitempty"`
	Addresses      []*AddressRequest      `json:"addresses,omitempty"`
	EmailAddresses []*EmailAddressRequest `json:"email_addresses,omitempty"`
	PhoneNumbers   []*PhoneNumberRequest  `json:"phone_numbers,omitempty"`
	// When the lead was converted.
	ConvertedDate *time.Time `json:"converted_date,omitempty"`
	// The contact of the converted lead.
	ConvertedContact *LeadRequestConvertedContact `json:"converted_contact,omitempty"`
	// The account of the converted lead.
	ConvertedAccount    *LeadRequestConvertedAccount `json:"converted_account,omitempty"`
	IntegrationParams   map[string]interface{}       `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}       `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest        `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (l *LeadRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler LeadRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LeadRequest(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LeadRequest) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// The account of the converted lead.
type LeadRequestConvertedAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewLeadRequestConvertedAccountFromString(value string) *LeadRequestConvertedAccount {
	return &LeadRequestConvertedAccount{typeName: "string", String: value}
}

func NewLeadRequestConvertedAccountFromAccount(value *Account) *LeadRequestConvertedAccount {
	return &LeadRequestConvertedAccount{typeName: "account", Account: value}
}

func (l *LeadRequestConvertedAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typeName = "string"
		l.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		l.typeName = "account"
		l.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LeadRequestConvertedAccount) MarshalJSON() ([]byte, error) {
	switch l.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "string":
		return json.Marshal(l.String)
	case "account":
		return json.Marshal(l.Account)
	}
}

type LeadRequestConvertedAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (l *LeadRequestConvertedAccount) Accept(visitor LeadRequestConvertedAccountVisitor) error {
	switch l.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "string":
		return visitor.VisitString(l.String)
	case "account":
		return visitor.VisitAccount(l.Account)
	}
}

// The contact of the converted lead.
type LeadRequestConvertedContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewLeadRequestConvertedContactFromString(value string) *LeadRequestConvertedContact {
	return &LeadRequestConvertedContact{typeName: "string", String: value}
}

func NewLeadRequestConvertedContactFromContact(value *Contact) *LeadRequestConvertedContact {
	return &LeadRequestConvertedContact{typeName: "contact", Contact: value}
}

func (l *LeadRequestConvertedContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typeName = "string"
		l.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		l.typeName = "contact"
		l.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LeadRequestConvertedContact) MarshalJSON() ([]byte, error) {
	switch l.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "string":
		return json.Marshal(l.String)
	case "contact":
		return json.Marshal(l.Contact)
	}
}

type LeadRequestConvertedContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (l *LeadRequestConvertedContact) Accept(visitor LeadRequestConvertedContactVisitor) error {
	switch l.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "string":
		return visitor.VisitString(l.String)
	case "contact":
		return visitor.VisitContact(l.Contact)
	}
}

// The lead's owner.
type LeadRequestOwner struct {
	typeName string
	String   string
	User     *User
}

func NewLeadRequestOwnerFromString(value string) *LeadRequestOwner {
	return &LeadRequestOwner{typeName: "string", String: value}
}

func NewLeadRequestOwnerFromUser(value *User) *LeadRequestOwner {
	return &LeadRequestOwner{typeName: "user", User: value}
}

func (l *LeadRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typeName = "string"
		l.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		l.typeName = "user"
		l.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LeadRequestOwner) MarshalJSON() ([]byte, error) {
	switch l.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "string":
		return json.Marshal(l.String)
	case "user":
		return json.Marshal(l.User)
	}
}

type LeadRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (l *LeadRequestOwner) Accept(visitor LeadRequestOwnerVisitor) error {
	switch l.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "string":
		return visitor.VisitString(l.String)
	case "user":
		return visitor.VisitUser(l.User)
	}
}

type LeadResponse struct {
	Model    *Lead                       `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (l *LeadResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LeadResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LeadResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LeadResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LinkToken struct {
	LinkToken       string  `json:"link_token"`
	IntegrationName *string `json:"integration_name,omitempty"`
	MagicLinkUrl    *string `json:"magic_link_url,omitempty"`

	_rawJSON json.RawMessage
}

func (l *LinkToken) UnmarshalJSON(data []byte) error {
	type unmarshaler LinkToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LinkToken(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LinkToken) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LinkedAccountStatus struct {
	LinkedAccountStatus string `json:"linked_account_status"`
	CanMakeRequest      bool   `json:"can_make_request"`

	_rawJSON json.RawMessage
}

func (l *LinkedAccountStatus) UnmarshalJSON(data []byte) error {
	type unmarshaler LinkedAccountStatus
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LinkedAccountStatus(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LinkedAccountStatus) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type MetaResponse struct {
	RequestSchema                  map[string]interface{} `json:"request_schema,omitempty"`
	RemoteFieldClasses             map[string]interface{} `json:"remote_field_classes,omitempty"`
	Status                         *LinkedAccountStatus   `json:"status,omitempty"`
	HasConditionalParams           bool                   `json:"has_conditional_params"`
	HasRequiredLinkedAccountParams bool                   `json:"has_required_linked_account_params"`

	_rawJSON json.RawMessage
}

func (m *MetaResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MetaResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetaResponse(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetaResponse) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `GET` - GET
// - `OPTIONS` - OPTIONS
// - `HEAD` - HEAD
// - `POST` - POST
// - `PUT` - PUT
// - `PATCH` - PATCH
// - `DELETE` - DELETE
type MethodEnum string

const (
	MethodEnumGet     MethodEnum = "GET"
	MethodEnumOptions MethodEnum = "OPTIONS"
	MethodEnumHead    MethodEnum = "HEAD"
	MethodEnumPost    MethodEnum = "POST"
	MethodEnumPut     MethodEnum = "PUT"
	MethodEnumPatch   MethodEnum = "PATCH"
	MethodEnumDelete  MethodEnum = "DELETE"
)

func NewMethodEnumFromString(s string) (MethodEnum, error) {
	switch s {
	case "GET":
		return MethodEnumGet, nil
	case "OPTIONS":
		return MethodEnumOptions, nil
	case "HEAD":
		return MethodEnumHead, nil
	case "POST":
		return MethodEnumPost, nil
	case "PUT":
		return MethodEnumPut, nil
	case "PATCH":
		return MethodEnumPatch, nil
	case "DELETE":
		return MethodEnumDelete, nil
	}
	var t MethodEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MethodEnum) Ptr() *MethodEnum {
	return &m
}

// # The ModelOperation Object
//
// ### Description
//
// The `ModelOperation` object is used to represent the operations that are currently supported for a given model.
//
// ### Usage Example
//
// View what operations are supported for the `Candidate` endpoint.
type ModelOperation struct {
	ModelName              string   `json:"model_name"`
	AvailableOperations    []string `json:"available_operations,omitempty"`
	RequiredPostParameters []string `json:"required_post_parameters,omitempty"`
	SupportedFields        []string `json:"supported_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelOperation) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelOperation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelOperation(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelOperation) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelPermissionDeserializer struct {
	IsEnabled *bool `json:"is_enabled,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelPermissionDeserializer) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelPermissionDeserializer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelPermissionDeserializer(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelPermissionDeserializer) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelPermissionDeserializerRequest struct {
	IsEnabled *bool `json:"is_enabled,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelPermissionDeserializerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelPermissionDeserializerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelPermissionDeserializerRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelPermissionDeserializerRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// # The MultipartFormField Object
//
// ### Description
//
// The `MultipartFormField` object is used to represent fields in an HTTP request using `multipart/form-data`.
//
// ### Usage Example
//
// Create a `MultipartFormField` to define a multipart form entry.
type MultipartFormFieldRequest struct {
	// The name of the form field
	Name string `json:"name"`
	// The data for the form field.
	Data string `json:"data"`
	// The encoding of the value of `data`. Defaults to `RAW` if not defined.
	//
	// - `RAW` - RAW
	// - `BASE64` - BASE64
	// - `GZIP_BASE64` - GZIP_BASE64
	Encoding *MultipartFormFieldRequestEncoding `json:"encoding,omitempty"`
	// The file name of the form field, if the field is for a file.
	FileName *string `json:"file_name,omitempty"`
	// The MIME type of the file, if the field is for a file.
	ContentType *string `json:"content_type,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MultipartFormFieldRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MultipartFormFieldRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MultipartFormFieldRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MultipartFormFieldRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// The encoding of the value of `data`. Defaults to `RAW` if not defined.
//
// - `RAW` - RAW
// - `BASE64` - BASE64
// - `GZIP_BASE64` - GZIP_BASE64
type MultipartFormFieldRequestEncoding struct {
	typeName     string
	EncodingEnum EncodingEnum
	String       string
}

func NewMultipartFormFieldRequestEncodingFromEncodingEnum(value EncodingEnum) *MultipartFormFieldRequestEncoding {
	return &MultipartFormFieldRequestEncoding{typeName: "encodingEnum", EncodingEnum: value}
}

func NewMultipartFormFieldRequestEncodingFromString(value string) *MultipartFormFieldRequestEncoding {
	return &MultipartFormFieldRequestEncoding{typeName: "string", String: value}
}

func (m *MultipartFormFieldRequestEncoding) UnmarshalJSON(data []byte) error {
	var valueEncodingEnum EncodingEnum
	if err := json.Unmarshal(data, &valueEncodingEnum); err == nil {
		m.typeName = "encodingEnum"
		m.EncodingEnum = valueEncodingEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		m.typeName = "string"
		m.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MultipartFormFieldRequestEncoding) MarshalJSON() ([]byte, error) {
	switch m.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", m.typeName, m)
	case "encodingEnum":
		return json.Marshal(m.EncodingEnum)
	case "string":
		return json.Marshal(m.String)
	}
}

type MultipartFormFieldRequestEncodingVisitor interface {
	VisitEncodingEnum(EncodingEnum) error
	VisitString(string) error
}

func (m *MultipartFormFieldRequestEncoding) Accept(visitor MultipartFormFieldRequestEncodingVisitor) error {
	switch m.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", m.typeName, m)
	case "encodingEnum":
		return visitor.VisitEncodingEnum(m.EncodingEnum)
	case "string":
		return visitor.VisitString(m.String)
	}
}

// # The Note Object
//
// ### Description
//
// The `Note` object is used to represent a note on another object.
//
// ### Usage Example
//
// TODO
type Note struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The note's owner.
	Owner *NoteOwner `json:"owner,omitempty"`
	// The note's content.
	Content *string `json:"content,omitempty"`
	// The note's contact.
	Contact *NoteContact `json:"contact,omitempty"`
	// The note's account.
	Account *NoteAccount `json:"account,omitempty"`
	// The note's opportunity.
	Opportunity *NoteOpportunity `json:"opportunity,omitempty"`
	// When the third party's lead was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// When the third party's lead was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (n *Note) UnmarshalJSON(data []byte) error {
	type unmarshaler Note
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = Note(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *Note) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// The note's account.
type NoteAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewNoteAccountFromString(value string) *NoteAccount {
	return &NoteAccount{typeName: "string", String: value}
}

func NewNoteAccountFromAccount(value *Account) *NoteAccount {
	return &NoteAccount{typeName: "account", Account: value}
}

func (n *NoteAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		n.typeName = "string"
		n.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		n.typeName = "account"
		n.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NoteAccount) MarshalJSON() ([]byte, error) {
	switch n.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return json.Marshal(n.String)
	case "account":
		return json.Marshal(n.Account)
	}
}

type NoteAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (n *NoteAccount) Accept(visitor NoteAccountVisitor) error {
	switch n.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return visitor.VisitString(n.String)
	case "account":
		return visitor.VisitAccount(n.Account)
	}
}

// The note's contact.
type NoteContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewNoteContactFromString(value string) *NoteContact {
	return &NoteContact{typeName: "string", String: value}
}

func NewNoteContactFromContact(value *Contact) *NoteContact {
	return &NoteContact{typeName: "contact", Contact: value}
}

func (n *NoteContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		n.typeName = "string"
		n.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		n.typeName = "contact"
		n.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NoteContact) MarshalJSON() ([]byte, error) {
	switch n.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return json.Marshal(n.String)
	case "contact":
		return json.Marshal(n.Contact)
	}
}

type NoteContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (n *NoteContact) Accept(visitor NoteContactVisitor) error {
	switch n.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return visitor.VisitString(n.String)
	case "contact":
		return visitor.VisitContact(n.Contact)
	}
}

// The note's opportunity.
type NoteOpportunity struct {
	typeName    string
	String      string
	Opportunity *Opportunity
}

func NewNoteOpportunityFromString(value string) *NoteOpportunity {
	return &NoteOpportunity{typeName: "string", String: value}
}

func NewNoteOpportunityFromOpportunity(value *Opportunity) *NoteOpportunity {
	return &NoteOpportunity{typeName: "opportunity", Opportunity: value}
}

func (n *NoteOpportunity) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		n.typeName = "string"
		n.String = valueString
		return nil
	}
	valueOpportunity := new(Opportunity)
	if err := json.Unmarshal(data, &valueOpportunity); err == nil {
		n.typeName = "opportunity"
		n.Opportunity = valueOpportunity
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NoteOpportunity) MarshalJSON() ([]byte, error) {
	switch n.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return json.Marshal(n.String)
	case "opportunity":
		return json.Marshal(n.Opportunity)
	}
}

type NoteOpportunityVisitor interface {
	VisitString(string) error
	VisitOpportunity(*Opportunity) error
}

func (n *NoteOpportunity) Accept(visitor NoteOpportunityVisitor) error {
	switch n.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return visitor.VisitString(n.String)
	case "opportunity":
		return visitor.VisitOpportunity(n.Opportunity)
	}
}

// The note's owner.
type NoteOwner struct {
	typeName string
	String   string
	User     *User
}

func NewNoteOwnerFromString(value string) *NoteOwner {
	return &NoteOwner{typeName: "string", String: value}
}

func NewNoteOwnerFromUser(value *User) *NoteOwner {
	return &NoteOwner{typeName: "user", User: value}
}

func (n *NoteOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		n.typeName = "string"
		n.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		n.typeName = "user"
		n.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NoteOwner) MarshalJSON() ([]byte, error) {
	switch n.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return json.Marshal(n.String)
	case "user":
		return json.Marshal(n.User)
	}
}

type NoteOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (n *NoteOwner) Accept(visitor NoteOwnerVisitor) error {
	switch n.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return visitor.VisitString(n.String)
	case "user":
		return visitor.VisitUser(n.User)
	}
}

// # The Note Object
//
// ### Description
//
// The `Note` object is used to represent a note on another object.
//
// ### Usage Example
//
// TODO
type NoteRequest struct {
	// The note's owner.
	Owner *NoteRequestOwner `json:"owner,omitempty"`
	// The note's content.
	Content *string `json:"content,omitempty"`
	// The note's contact.
	Contact *NoteRequestContact `json:"contact,omitempty"`
	// The note's account.
	Account *NoteRequestAccount `json:"account,omitempty"`
	// The note's opportunity.
	Opportunity         *NoteRequestOpportunity `json:"opportunity,omitempty"`
	IntegrationParams   map[string]interface{}  `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}  `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest   `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NoteRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NoteRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NoteRequest(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NoteRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// The note's account.
type NoteRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewNoteRequestAccountFromString(value string) *NoteRequestAccount {
	return &NoteRequestAccount{typeName: "string", String: value}
}

func NewNoteRequestAccountFromAccount(value *Account) *NoteRequestAccount {
	return &NoteRequestAccount{typeName: "account", Account: value}
}

func (n *NoteRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		n.typeName = "string"
		n.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		n.typeName = "account"
		n.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NoteRequestAccount) MarshalJSON() ([]byte, error) {
	switch n.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return json.Marshal(n.String)
	case "account":
		return json.Marshal(n.Account)
	}
}

type NoteRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (n *NoteRequestAccount) Accept(visitor NoteRequestAccountVisitor) error {
	switch n.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return visitor.VisitString(n.String)
	case "account":
		return visitor.VisitAccount(n.Account)
	}
}

// The note's contact.
type NoteRequestContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewNoteRequestContactFromString(value string) *NoteRequestContact {
	return &NoteRequestContact{typeName: "string", String: value}
}

func NewNoteRequestContactFromContact(value *Contact) *NoteRequestContact {
	return &NoteRequestContact{typeName: "contact", Contact: value}
}

func (n *NoteRequestContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		n.typeName = "string"
		n.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		n.typeName = "contact"
		n.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NoteRequestContact) MarshalJSON() ([]byte, error) {
	switch n.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return json.Marshal(n.String)
	case "contact":
		return json.Marshal(n.Contact)
	}
}

type NoteRequestContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (n *NoteRequestContact) Accept(visitor NoteRequestContactVisitor) error {
	switch n.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return visitor.VisitString(n.String)
	case "contact":
		return visitor.VisitContact(n.Contact)
	}
}

// The note's opportunity.
type NoteRequestOpportunity struct {
	typeName    string
	String      string
	Opportunity *Opportunity
}

func NewNoteRequestOpportunityFromString(value string) *NoteRequestOpportunity {
	return &NoteRequestOpportunity{typeName: "string", String: value}
}

func NewNoteRequestOpportunityFromOpportunity(value *Opportunity) *NoteRequestOpportunity {
	return &NoteRequestOpportunity{typeName: "opportunity", Opportunity: value}
}

func (n *NoteRequestOpportunity) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		n.typeName = "string"
		n.String = valueString
		return nil
	}
	valueOpportunity := new(Opportunity)
	if err := json.Unmarshal(data, &valueOpportunity); err == nil {
		n.typeName = "opportunity"
		n.Opportunity = valueOpportunity
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NoteRequestOpportunity) MarshalJSON() ([]byte, error) {
	switch n.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return json.Marshal(n.String)
	case "opportunity":
		return json.Marshal(n.Opportunity)
	}
}

type NoteRequestOpportunityVisitor interface {
	VisitString(string) error
	VisitOpportunity(*Opportunity) error
}

func (n *NoteRequestOpportunity) Accept(visitor NoteRequestOpportunityVisitor) error {
	switch n.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return visitor.VisitString(n.String)
	case "opportunity":
		return visitor.VisitOpportunity(n.Opportunity)
	}
}

// The note's owner.
type NoteRequestOwner struct {
	typeName string
	String   string
	User     *User
}

func NewNoteRequestOwnerFromString(value string) *NoteRequestOwner {
	return &NoteRequestOwner{typeName: "string", String: value}
}

func NewNoteRequestOwnerFromUser(value *User) *NoteRequestOwner {
	return &NoteRequestOwner{typeName: "user", User: value}
}

func (n *NoteRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		n.typeName = "string"
		n.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		n.typeName = "user"
		n.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NoteRequestOwner) MarshalJSON() ([]byte, error) {
	switch n.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return json.Marshal(n.String)
	case "user":
		return json.Marshal(n.User)
	}
}

type NoteRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (n *NoteRequestOwner) Accept(visitor NoteRequestOwnerVisitor) error {
	switch n.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", n.typeName, n)
	case "string":
		return visitor.VisitString(n.String)
	case "user":
		return visitor.VisitUser(n.User)
	}
}

type NoteResponse struct {
	Model    *Note                       `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NoteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NoteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NoteResponse(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NoteResponse) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type ObjectClassDescriptionRequest struct {
	Id         string         `json:"id"`
	OriginType OriginTypeEnum `json:"origin_type,omitempty"`

	_rawJSON json.RawMessage
}

func (o *ObjectClassDescriptionRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ObjectClassDescriptionRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = ObjectClassDescriptionRequest(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *ObjectClassDescriptionRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// # The Opportunity Object
//
// ### Description
//
// The `Opportunity` object is used to represent a deal opportunity in a CRM system.
//
// ### Usage Example
//
// TODO
type Opportunity struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The opportunity's name.
	Name *string `json:"name,omitempty"`
	// The opportunity's description.
	Description *string `json:"description,omitempty"`
	// The opportunity's amount.
	Amount *int `json:"amount,omitempty"`
	// The opportunity's owner.
	Owner *OpportunityOwner `json:"owner,omitempty"`
	// The account of the opportunity.
	Account *OpportunityAccount `json:"account,omitempty"`
	// The stage of the opportunity.
	Stage *OpportunityStage `json:"stage,omitempty"`
	// The opportunity's status.
	//
	// - `OPEN` - OPEN
	// - `WON` - WON
	// - `LOST` - LOST
	Status *OpportunityStatus `json:"status,omitempty"`
	// When the opportunity's last activity occurred.
	LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
	// When the opportunity was closed.
	CloseDate *time.Time `json:"close_date,omitempty"`
	// When the third party's opportunity was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (o *Opportunity) UnmarshalJSON(data []byte) error {
	type unmarshaler Opportunity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = Opportunity(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *Opportunity) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// The account of the opportunity.
type OpportunityAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewOpportunityAccountFromString(value string) *OpportunityAccount {
	return &OpportunityAccount{typeName: "string", String: value}
}

func NewOpportunityAccountFromAccount(value *Account) *OpportunityAccount {
	return &OpportunityAccount{typeName: "account", Account: value}
}

func (o *OpportunityAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typeName = "string"
		o.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		o.typeName = "account"
		o.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityAccount) MarshalJSON() ([]byte, error) {
	switch o.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return json.Marshal(o.String)
	case "account":
		return json.Marshal(o.Account)
	}
}

type OpportunityAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (o *OpportunityAccount) Accept(visitor OpportunityAccountVisitor) error {
	switch o.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return visitor.VisitString(o.String)
	case "account":
		return visitor.VisitAccount(o.Account)
	}
}

// The opportunity's owner.
type OpportunityOwner struct {
	typeName string
	String   string
	User     *User
}

func NewOpportunityOwnerFromString(value string) *OpportunityOwner {
	return &OpportunityOwner{typeName: "string", String: value}
}

func NewOpportunityOwnerFromUser(value *User) *OpportunityOwner {
	return &OpportunityOwner{typeName: "user", User: value}
}

func (o *OpportunityOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typeName = "string"
		o.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		o.typeName = "user"
		o.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityOwner) MarshalJSON() ([]byte, error) {
	switch o.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return json.Marshal(o.String)
	case "user":
		return json.Marshal(o.User)
	}
}

type OpportunityOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (o *OpportunityOwner) Accept(visitor OpportunityOwnerVisitor) error {
	switch o.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return visitor.VisitString(o.String)
	case "user":
		return visitor.VisitUser(o.User)
	}
}

// # The Opportunity Object
//
// ### Description
//
// The `Opportunity` object is used to represent a deal opportunity in a CRM system.
//
// ### Usage Example
//
// TODO
type OpportunityRequest struct {
	// The opportunity's name.
	Name *string `json:"name,omitempty"`
	// The opportunity's description.
	Description *string `json:"description,omitempty"`
	// The opportunity's amount.
	Amount *int `json:"amount,omitempty"`
	// The opportunity's owner.
	Owner *OpportunityRequestOwner `json:"owner,omitempty"`
	// The account of the opportunity.
	Account *OpportunityRequestAccount `json:"account,omitempty"`
	// The stage of the opportunity.
	Stage *OpportunityRequestStage `json:"stage,omitempty"`
	// The opportunity's status.
	//
	// - `OPEN` - OPEN
	// - `WON` - WON
	// - `LOST` - LOST
	Status *OpportunityRequestStatus `json:"status,omitempty"`
	// When the opportunity's last activity occurred.
	LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
	// When the opportunity was closed.
	CloseDate           *time.Time             `json:"close_date,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpportunityRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpportunityRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpportunityRequest(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpportunityRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// The account of the opportunity.
type OpportunityRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewOpportunityRequestAccountFromString(value string) *OpportunityRequestAccount {
	return &OpportunityRequestAccount{typeName: "string", String: value}
}

func NewOpportunityRequestAccountFromAccount(value *Account) *OpportunityRequestAccount {
	return &OpportunityRequestAccount{typeName: "account", Account: value}
}

func (o *OpportunityRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typeName = "string"
		o.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		o.typeName = "account"
		o.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityRequestAccount) MarshalJSON() ([]byte, error) {
	switch o.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return json.Marshal(o.String)
	case "account":
		return json.Marshal(o.Account)
	}
}

type OpportunityRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (o *OpportunityRequestAccount) Accept(visitor OpportunityRequestAccountVisitor) error {
	switch o.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return visitor.VisitString(o.String)
	case "account":
		return visitor.VisitAccount(o.Account)
	}
}

// The opportunity's owner.
type OpportunityRequestOwner struct {
	typeName string
	String   string
	User     *User
}

func NewOpportunityRequestOwnerFromString(value string) *OpportunityRequestOwner {
	return &OpportunityRequestOwner{typeName: "string", String: value}
}

func NewOpportunityRequestOwnerFromUser(value *User) *OpportunityRequestOwner {
	return &OpportunityRequestOwner{typeName: "user", User: value}
}

func (o *OpportunityRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typeName = "string"
		o.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		o.typeName = "user"
		o.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityRequestOwner) MarshalJSON() ([]byte, error) {
	switch o.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return json.Marshal(o.String)
	case "user":
		return json.Marshal(o.User)
	}
}

type OpportunityRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (o *OpportunityRequestOwner) Accept(visitor OpportunityRequestOwnerVisitor) error {
	switch o.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return visitor.VisitString(o.String)
	case "user":
		return visitor.VisitUser(o.User)
	}
}

// The stage of the opportunity.
type OpportunityRequestStage struct {
	typeName string
	String   string
	Stage    *Stage
}

func NewOpportunityRequestStageFromString(value string) *OpportunityRequestStage {
	return &OpportunityRequestStage{typeName: "string", String: value}
}

func NewOpportunityRequestStageFromStage(value *Stage) *OpportunityRequestStage {
	return &OpportunityRequestStage{typeName: "stage", Stage: value}
}

func (o *OpportunityRequestStage) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typeName = "string"
		o.String = valueString
		return nil
	}
	valueStage := new(Stage)
	if err := json.Unmarshal(data, &valueStage); err == nil {
		o.typeName = "stage"
		o.Stage = valueStage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityRequestStage) MarshalJSON() ([]byte, error) {
	switch o.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return json.Marshal(o.String)
	case "stage":
		return json.Marshal(o.Stage)
	}
}

type OpportunityRequestStageVisitor interface {
	VisitString(string) error
	VisitStage(*Stage) error
}

func (o *OpportunityRequestStage) Accept(visitor OpportunityRequestStageVisitor) error {
	switch o.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return visitor.VisitString(o.String)
	case "stage":
		return visitor.VisitStage(o.Stage)
	}
}

// The opportunity's status.
//
// - `OPEN` - OPEN
// - `WON` - WON
// - `LOST` - LOST
type OpportunityRequestStatus struct {
	typeName              string
	OpportunityStatusEnum OpportunityStatusEnum
	String                string
}

func NewOpportunityRequestStatusFromOpportunityStatusEnum(value OpportunityStatusEnum) *OpportunityRequestStatus {
	return &OpportunityRequestStatus{typeName: "opportunityStatusEnum", OpportunityStatusEnum: value}
}

func NewOpportunityRequestStatusFromString(value string) *OpportunityRequestStatus {
	return &OpportunityRequestStatus{typeName: "string", String: value}
}

func (o *OpportunityRequestStatus) UnmarshalJSON(data []byte) error {
	var valueOpportunityStatusEnum OpportunityStatusEnum
	if err := json.Unmarshal(data, &valueOpportunityStatusEnum); err == nil {
		o.typeName = "opportunityStatusEnum"
		o.OpportunityStatusEnum = valueOpportunityStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typeName = "string"
		o.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityRequestStatus) MarshalJSON() ([]byte, error) {
	switch o.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "opportunityStatusEnum":
		return json.Marshal(o.OpportunityStatusEnum)
	case "string":
		return json.Marshal(o.String)
	}
}

type OpportunityRequestStatusVisitor interface {
	VisitOpportunityStatusEnum(OpportunityStatusEnum) error
	VisitString(string) error
}

func (o *OpportunityRequestStatus) Accept(visitor OpportunityRequestStatusVisitor) error {
	switch o.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "opportunityStatusEnum":
		return visitor.VisitOpportunityStatusEnum(o.OpportunityStatusEnum)
	case "string":
		return visitor.VisitString(o.String)
	}
}

type OpportunityResponse struct {
	Model    *Opportunity                `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpportunityResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler OpportunityResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpportunityResponse(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpportunityResponse) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// The stage of the opportunity.
type OpportunityStage struct {
	typeName string
	String   string
	Stage    *Stage
}

func NewOpportunityStageFromString(value string) *OpportunityStage {
	return &OpportunityStage{typeName: "string", String: value}
}

func NewOpportunityStageFromStage(value *Stage) *OpportunityStage {
	return &OpportunityStage{typeName: "stage", Stage: value}
}

func (o *OpportunityStage) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typeName = "string"
		o.String = valueString
		return nil
	}
	valueStage := new(Stage)
	if err := json.Unmarshal(data, &valueStage); err == nil {
		o.typeName = "stage"
		o.Stage = valueStage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityStage) MarshalJSON() ([]byte, error) {
	switch o.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return json.Marshal(o.String)
	case "stage":
		return json.Marshal(o.Stage)
	}
}

type OpportunityStageVisitor interface {
	VisitString(string) error
	VisitStage(*Stage) error
}

func (o *OpportunityStage) Accept(visitor OpportunityStageVisitor) error {
	switch o.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "string":
		return visitor.VisitString(o.String)
	case "stage":
		return visitor.VisitStage(o.Stage)
	}
}

// The opportunity's status.
//
// - `OPEN` - OPEN
// - `WON` - WON
// - `LOST` - LOST
type OpportunityStatus struct {
	typeName              string
	OpportunityStatusEnum OpportunityStatusEnum
	String                string
}

func NewOpportunityStatusFromOpportunityStatusEnum(value OpportunityStatusEnum) *OpportunityStatus {
	return &OpportunityStatus{typeName: "opportunityStatusEnum", OpportunityStatusEnum: value}
}

func NewOpportunityStatusFromString(value string) *OpportunityStatus {
	return &OpportunityStatus{typeName: "string", String: value}
}

func (o *OpportunityStatus) UnmarshalJSON(data []byte) error {
	var valueOpportunityStatusEnum OpportunityStatusEnum
	if err := json.Unmarshal(data, &valueOpportunityStatusEnum); err == nil {
		o.typeName = "opportunityStatusEnum"
		o.OpportunityStatusEnum = valueOpportunityStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typeName = "string"
		o.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityStatus) MarshalJSON() ([]byte, error) {
	switch o.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "opportunityStatusEnum":
		return json.Marshal(o.OpportunityStatusEnum)
	case "string":
		return json.Marshal(o.String)
	}
}

type OpportunityStatusVisitor interface {
	VisitOpportunityStatusEnum(OpportunityStatusEnum) error
	VisitString(string) error
}

func (o *OpportunityStatus) Accept(visitor OpportunityStatusVisitor) error {
	switch o.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", o.typeName, o)
	case "opportunityStatusEnum":
		return visitor.VisitOpportunityStatusEnum(o.OpportunityStatusEnum)
	case "string":
		return visitor.VisitString(o.String)
	}
}

// - `OPEN` - OPEN
// - `WON` - WON
// - `LOST` - LOST
type OpportunityStatusEnum string

const (
	OpportunityStatusEnumOpen OpportunityStatusEnum = "OPEN"
	OpportunityStatusEnumWon  OpportunityStatusEnum = "WON"
	OpportunityStatusEnumLost OpportunityStatusEnum = "LOST"
)

func NewOpportunityStatusEnumFromString(s string) (OpportunityStatusEnum, error) {
	switch s {
	case "OPEN":
		return OpportunityStatusEnumOpen, nil
	case "WON":
		return OpportunityStatusEnumWon, nil
	case "LOST":
		return OpportunityStatusEnumLost, nil
	}
	var t OpportunityStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OpportunityStatusEnum) Ptr() *OpportunityStatusEnum {
	return &o
}

// - `CUSTOM_OBJECT` - CUSTOM_OBJECT
// - `COMMON_MODEL` - COMMON_MODEL
// - `REMOTE_ONLY_MODEL` - REMOTE_ONLY_MODEL
type OriginTypeEnum string

const (
	OriginTypeEnumCustomObject    OriginTypeEnum = "CUSTOM_OBJECT"
	OriginTypeEnumCommonModel     OriginTypeEnum = "COMMON_MODEL"
	OriginTypeEnumRemoteOnlyModel OriginTypeEnum = "REMOTE_ONLY_MODEL"
)

func NewOriginTypeEnumFromString(s string) (OriginTypeEnum, error) {
	switch s {
	case "CUSTOM_OBJECT":
		return OriginTypeEnumCustomObject, nil
	case "COMMON_MODEL":
		return OriginTypeEnumCommonModel, nil
	case "REMOTE_ONLY_MODEL":
		return OriginTypeEnumRemoteOnlyModel, nil
	}
	var t OriginTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OriginTypeEnum) Ptr() *OriginTypeEnum {
	return &o
}

type PaginatedAccountDetailsAndActionsList struct {
	Next     *string                     `json:"next,omitempty"`
	Previous *string                     `json:"previous,omitempty"`
	Results  []*AccountDetailsAndActions `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedAccountDetailsAndActionsList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAccountDetailsAndActionsList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAccountDetailsAndActionsList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAccountDetailsAndActionsList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedAccountList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Account `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedAccountList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAccountList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAccountList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAccountList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedAssociationList struct {
	Next     *string        `json:"next,omitempty"`
	Previous *string        `json:"previous,omitempty"`
	Results  []*Association `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedAssociationList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAssociationList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAssociationList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAssociationList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedAssociationTypeList struct {
	Next     *string            `json:"next,omitempty"`
	Previous *string            `json:"previous,omitempty"`
	Results  []*AssociationType `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedAssociationTypeList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAssociationTypeList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAssociationTypeList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAssociationTypeList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedAuditLogEventList struct {
	Next     *string          `json:"next,omitempty"`
	Previous *string          `json:"previous,omitempty"`
	Results  []*AuditLogEvent `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedAuditLogEventList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedAuditLogEventList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedAuditLogEventList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedAuditLogEventList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedContactList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Contact `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedContactList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedContactList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedContactList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedContactList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedCustomObjectClassList struct {
	Next     *string              `json:"next,omitempty"`
	Previous *string              `json:"previous,omitempty"`
	Results  []*CustomObjectClass `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedCustomObjectClassList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedCustomObjectClassList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedCustomObjectClassList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedCustomObjectClassList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedCustomObjectList struct {
	Next     *string         `json:"next,omitempty"`
	Previous *string         `json:"previous,omitempty"`
	Results  []*CustomObject `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedCustomObjectList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedCustomObjectList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedCustomObjectList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedCustomObjectList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedEngagementList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*Engagement `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedEngagementList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedEngagementList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedEngagementList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedEngagementList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedEngagementTypeList struct {
	Next     *string           `json:"next,omitempty"`
	Previous *string           `json:"previous,omitempty"`
	Results  []*EngagementType `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedEngagementTypeList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedEngagementTypeList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedEngagementTypeList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedEngagementTypeList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedIssueList struct {
	Next     *string  `json:"next,omitempty"`
	Previous *string  `json:"previous,omitempty"`
	Results  []*Issue `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedIssueList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedIssueList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedIssueList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedIssueList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedLeadList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Lead `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedLeadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedLeadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedLeadList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedLeadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedNoteList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Note `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedNoteList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedNoteList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedNoteList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedNoteList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedOpportunityList struct {
	Next     *string        `json:"next,omitempty"`
	Previous *string        `json:"previous,omitempty"`
	Results  []*Opportunity `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedOpportunityList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedOpportunityList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedOpportunityList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedOpportunityList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedRemoteFieldClassList struct {
	Next     *string             `json:"next,omitempty"`
	Previous *string             `json:"previous,omitempty"`
	Results  []*RemoteFieldClass `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedRemoteFieldClassList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedRemoteFieldClassList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedRemoteFieldClassList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedRemoteFieldClassList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedStageList struct {
	Next     *string  `json:"next,omitempty"`
	Previous *string  `json:"previous,omitempty"`
	Results  []*Stage `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedStageList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedStageList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedStageList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedStageList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedSyncStatusList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*SyncStatus `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedSyncStatusList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSyncStatusList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSyncStatusList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSyncStatusList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedTaskList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Task `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedTaskList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTaskList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTaskList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTaskList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedUserList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*User `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedUserList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedUserList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedUserList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedUserList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Account Object
//
// ### Description
//
// The `Account` object is used to represent a company in a CRM system.
//
// ### Usage Example
//
// TODO
type PatchedAccountRequest struct {
	// The account's owner.
	Owner *string `json:"owner,omitempty"`
	// The account's name.
	Name *string `json:"name,omitempty"`
	// The account's description.
	Description *string `json:"description,omitempty"`
	// The account's industry.
	Industry *string `json:"industry,omitempty"`
	// The account's website.
	Website *string `json:"website,omitempty"`
	// The account's number of employees.
	NumberOfEmployees *int              `json:"number_of_employees,omitempty"`
	Addresses         []*AddressRequest `json:"addresses,omitempty"`
	// The last date (either most recent or furthest in the future) of when an activity occurs in an account.
	LastActivityAt      *time.Time             `json:"last_activity_at,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PatchedAccountRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PatchedAccountRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatchedAccountRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedAccountRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Contact Object
//
// ### Description
//
// The `Contact` object is used to represent an existing point of contact at a company in a CRM system.
//
// ### Usage Example
//
// TODO
type PatchedContactRequest struct {
	// The contact's first name.
	FirstName *string `json:"first_name,omitempty"`
	// The contact's last name.
	LastName *string `json:"last_name,omitempty"`
	// The contact's account.
	Account *string `json:"account,omitempty"`
	// The contact's owner.
	Owner          *PatchedContactRequestOwner `json:"owner,omitempty"`
	Addresses      []*AddressRequest           `json:"addresses,omitempty"`
	EmailAddresses []*EmailAddressRequest      `json:"email_addresses,omitempty"`
	PhoneNumbers   []*PhoneNumberRequest       `json:"phone_numbers,omitempty"`
	// When the contact's last activity occurred.
	LastActivityAt      *time.Time             `json:"last_activity_at,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PatchedContactRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PatchedContactRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatchedContactRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedContactRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The contact's owner.
type PatchedContactRequestOwner struct {
	typeName string
	String   string
	User     *User
}

func NewPatchedContactRequestOwnerFromString(value string) *PatchedContactRequestOwner {
	return &PatchedContactRequestOwner{typeName: "string", String: value}
}

func NewPatchedContactRequestOwnerFromUser(value *User) *PatchedContactRequestOwner {
	return &PatchedContactRequestOwner{typeName: "user", User: value}
}

func (p *PatchedContactRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		p.typeName = "user"
		p.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PatchedContactRequestOwner) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "user":
		return json.Marshal(p.User)
	}
}

type PatchedContactRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (p *PatchedContactRequestOwner) Accept(visitor PatchedContactRequestOwnerVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "user":
		return visitor.VisitUser(p.User)
	}
}

// # The Engagement Object
//
// ### Description
//
// The `Engagement` object is used to represent an interaction noted in a CRM system.
//
// ### Usage Example
//
// TODO
type PatchedEngagementRequest struct {
	// The engagement's owner.
	Owner *string `json:"owner,omitempty"`
	// The engagement's content.
	Content *string `json:"content,omitempty"`
	// The engagement's subject.
	Subject *string `json:"subject,omitempty"`
	// The engagement's direction.
	//
	// - `INBOUND` - INBOUND
	// - `OUTBOUND` - OUTBOUND
	Direction *PatchedEngagementRequestDirection `json:"direction,omitempty"`
	// The engagement type of the engagement.
	EngagementType *string `json:"engagement_type,omitempty"`
	// The time at which the engagement started.
	StartTime *time.Time `json:"start_time,omitempty"`
	// The time at which the engagement ended.
	EndTime *time.Time `json:"end_time,omitempty"`
	// The account of the engagement.
	Account             *string                `json:"account,omitempty"`
	Contacts            []*string              `json:"contacts,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PatchedEngagementRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PatchedEngagementRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatchedEngagementRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedEngagementRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The engagement's direction.
//
// - `INBOUND` - INBOUND
// - `OUTBOUND` - OUTBOUND
type PatchedEngagementRequestDirection struct {
	typeName      string
	DirectionEnum DirectionEnum
	String        string
}

func NewPatchedEngagementRequestDirectionFromDirectionEnum(value DirectionEnum) *PatchedEngagementRequestDirection {
	return &PatchedEngagementRequestDirection{typeName: "directionEnum", DirectionEnum: value}
}

func NewPatchedEngagementRequestDirectionFromString(value string) *PatchedEngagementRequestDirection {
	return &PatchedEngagementRequestDirection{typeName: "string", String: value}
}

func (p *PatchedEngagementRequestDirection) UnmarshalJSON(data []byte) error {
	var valueDirectionEnum DirectionEnum
	if err := json.Unmarshal(data, &valueDirectionEnum); err == nil {
		p.typeName = "directionEnum"
		p.DirectionEnum = valueDirectionEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PatchedEngagementRequestDirection) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "directionEnum":
		return json.Marshal(p.DirectionEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PatchedEngagementRequestDirectionVisitor interface {
	VisitDirectionEnum(DirectionEnum) error
	VisitString(string) error
}

func (p *PatchedEngagementRequestDirection) Accept(visitor PatchedEngagementRequestDirectionVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "directionEnum":
		return visitor.VisitDirectionEnum(p.DirectionEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// # The Opportunity Object
//
// ### Description
//
// The `Opportunity` object is used to represent a deal opportunity in a CRM system.
//
// ### Usage Example
//
// TODO
type PatchedOpportunityRequest struct {
	// The opportunity's name.
	Name *string `json:"name,omitempty"`
	// The opportunity's description.
	Description *string `json:"description,omitempty"`
	// The opportunity's amount.
	Amount *int `json:"amount,omitempty"`
	// The opportunity's owner.
	Owner *string `json:"owner,omitempty"`
	// The account of the opportunity.
	Account *string `json:"account,omitempty"`
	// The stage of the opportunity.
	Stage *string `json:"stage,omitempty"`
	// The opportunity's status.
	//
	// - `OPEN` - OPEN
	// - `WON` - WON
	// - `LOST` - LOST
	Status *PatchedOpportunityRequestStatus `json:"status,omitempty"`
	// When the opportunity's last activity occurred.
	LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
	// When the opportunity was closed.
	CloseDate           *time.Time             `json:"close_date,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PatchedOpportunityRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PatchedOpportunityRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatchedOpportunityRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedOpportunityRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The opportunity's status.
//
// - `OPEN` - OPEN
// - `WON` - WON
// - `LOST` - LOST
type PatchedOpportunityRequestStatus struct {
	typeName              string
	OpportunityStatusEnum OpportunityStatusEnum
	String                string
}

func NewPatchedOpportunityRequestStatusFromOpportunityStatusEnum(value OpportunityStatusEnum) *PatchedOpportunityRequestStatus {
	return &PatchedOpportunityRequestStatus{typeName: "opportunityStatusEnum", OpportunityStatusEnum: value}
}

func NewPatchedOpportunityRequestStatusFromString(value string) *PatchedOpportunityRequestStatus {
	return &PatchedOpportunityRequestStatus{typeName: "string", String: value}
}

func (p *PatchedOpportunityRequestStatus) UnmarshalJSON(data []byte) error {
	var valueOpportunityStatusEnum OpportunityStatusEnum
	if err := json.Unmarshal(data, &valueOpportunityStatusEnum); err == nil {
		p.typeName = "opportunityStatusEnum"
		p.OpportunityStatusEnum = valueOpportunityStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PatchedOpportunityRequestStatus) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "opportunityStatusEnum":
		return json.Marshal(p.OpportunityStatusEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PatchedOpportunityRequestStatusVisitor interface {
	VisitOpportunityStatusEnum(OpportunityStatusEnum) error
	VisitString(string) error
}

func (p *PatchedOpportunityRequestStatus) Accept(visitor PatchedOpportunityRequestStatusVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "opportunityStatusEnum":
		return visitor.VisitOpportunityStatusEnum(p.OpportunityStatusEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// # The Task Object
//
// ### Description
//
// The `Task` object is used to represent a task, such as a to-do item.
//
// ### Usage Example
//
// TODO
type PatchedTaskRequest struct {
	// The task's subject.
	Subject *string `json:"subject,omitempty"`
	// The task's content.
	Content *string `json:"content,omitempty"`
	// The task's owner.
	Owner *string `json:"owner,omitempty"`
	// The task's account.
	Account *string `json:"account,omitempty"`
	// The task's opportunity.
	Opportunity *string `json:"opportunity,omitempty"`
	// When the task is completed.
	CompletedDate *time.Time `json:"completed_date,omitempty"`
	// When the task is due.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The task's status.
	//
	// - `OPEN` - OPEN
	// - `CLOSED` - CLOSED
	Status              *PatchedTaskRequestStatus `json:"status,omitempty"`
	IntegrationParams   map[string]interface{}    `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{}    `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest     `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PatchedTaskRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PatchedTaskRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatchedTaskRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedTaskRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The task's status.
//
// - `OPEN` - OPEN
// - `CLOSED` - CLOSED
type PatchedTaskRequestStatus struct {
	typeName       string
	TaskStatusEnum TaskStatusEnum
	String         string
}

func NewPatchedTaskRequestStatusFromTaskStatusEnum(value TaskStatusEnum) *PatchedTaskRequestStatus {
	return &PatchedTaskRequestStatus{typeName: "taskStatusEnum", TaskStatusEnum: value}
}

func NewPatchedTaskRequestStatusFromString(value string) *PatchedTaskRequestStatus {
	return &PatchedTaskRequestStatus{typeName: "string", String: value}
}

func (p *PatchedTaskRequestStatus) UnmarshalJSON(data []byte) error {
	var valueTaskStatusEnum TaskStatusEnum
	if err := json.Unmarshal(data, &valueTaskStatusEnum); err == nil {
		p.typeName = "taskStatusEnum"
		p.TaskStatusEnum = valueTaskStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PatchedTaskRequestStatus) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "taskStatusEnum":
		return json.Marshal(p.TaskStatusEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PatchedTaskRequestStatusVisitor interface {
	VisitTaskStatusEnum(TaskStatusEnum) error
	VisitString(string) error
}

func (p *PatchedTaskRequestStatus) Accept(visitor PatchedTaskRequestStatusVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "taskStatusEnum":
		return visitor.VisitTaskStatusEnum(p.TaskStatusEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// # The PhoneNumber Object
//
// ### Description
//
// The `PhoneNumber` object is used to represent an entity's phone number.
//
// ### Usage Example
//
// Fetch from the `GET Contact` endpoint and view their phone numbers.
type PhoneNumber struct {
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// The phone number's type.
	PhoneNumberType *string `json:"phone_number_type,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PhoneNumber) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneNumber
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneNumber(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneNumber) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The PhoneNumber Object
//
// ### Description
//
// The `PhoneNumber` object is used to represent an entity's phone number.
//
// ### Usage Example
//
// Fetch from the `GET Contact` endpoint and view their phone numbers.
type PhoneNumberRequest struct {
	// The phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// The phone number's type.
	PhoneNumberType     *string                `json:"phone_number_type,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PhoneNumberRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneNumberRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneNumberRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneNumberRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// - `GENERAL_CUSTOMER_REQUEST` - GENERAL_CUSTOMER_REQUEST
// - `GDPR` - GDPR
// - `OTHER` - OTHER
type ReasonEnum string

const (
	ReasonEnumGeneralCustomerRequest ReasonEnum = "GENERAL_CUSTOMER_REQUEST"
	ReasonEnumGdpr                   ReasonEnum = "GDPR"
	ReasonEnumOther                  ReasonEnum = "OTHER"
)

func NewReasonEnumFromString(s string) (ReasonEnum, error) {
	switch s {
	case "GENERAL_CUSTOMER_REQUEST":
		return ReasonEnumGeneralCustomerRequest, nil
	case "GDPR":
		return ReasonEnumGdpr, nil
	case "OTHER":
		return ReasonEnumOther, nil
	}
	var t ReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReasonEnum) Ptr() *ReasonEnum {
	return &r
}

// # The RemoteData Object
//
// ### Description
//
// The `RemoteData` object is used to represent the full data pulled from the third-party API for an object.
//
// ### Usage Example
//
// TODO
type RemoteData struct {
	// The third-party API path that is being called.
	Path string      `json:"path"`
	Data interface{} `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteData) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteData(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteEndpointInfo struct {
	Method             string        `json:"method"`
	UrlPath            string        `json:"url_path"`
	FieldTraversalPath []interface{} `json:"field_traversal_path,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteEndpointInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteEndpointInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteEndpointInfo(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteEndpointInfo) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteField struct {
	RemoteFieldClass *RemoteFieldRemoteFieldClass `json:"remote_field_class,omitempty"`
	Value            interface{}                  `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteField) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteField(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteField) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldApi struct {
	Schema             map[string]interface{}  `json:"schema,omitempty"`
	RemoteKeyName      string                  `json:"remote_key_name"`
	RemoteEndpointInfo *RemoteEndpointInfo     `json:"remote_endpoint_info,omitempty"`
	ExampleValues      []interface{}           `json:"example_values,omitempty"`
	AdvancedMetadata   *AdvancedMetadata       `json:"advanced_metadata,omitempty"`
	Coverage           *RemoteFieldApiCoverage `json:"coverage,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldApi) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldApi(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldApi) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldApiCoverage struct {
	typeName string
	Integer  int
	Double   float64
}

func NewRemoteFieldApiCoverageFromInteger(value int) *RemoteFieldApiCoverage {
	return &RemoteFieldApiCoverage{typeName: "integer", Integer: value}
}

func NewRemoteFieldApiCoverageFromDouble(value float64) *RemoteFieldApiCoverage {
	return &RemoteFieldApiCoverage{typeName: "double", Double: value}
}

func (r *RemoteFieldApiCoverage) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		r.typeName = "integer"
		r.Integer = valueInteger
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		r.typeName = "double"
		r.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldApiCoverage) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "integer":
		return json.Marshal(r.Integer)
	case "double":
		return json.Marshal(r.Double)
	}
}

type RemoteFieldApiCoverageVisitor interface {
	VisitInteger(int) error
	VisitDouble(float64) error
}

func (r *RemoteFieldApiCoverage) Accept(visitor RemoteFieldApiCoverageVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "integer":
		return visitor.VisitInteger(r.Integer)
	case "double":
		return visitor.VisitDouble(r.Double)
	}
}

type RemoteFieldApiResponse struct {
	Account     []*RemoteFieldApi `json:"Account,omitempty"`
	Contact     []*RemoteFieldApi `json:"Contact,omitempty"`
	Lead        []*RemoteFieldApi `json:"Lead,omitempty"`
	Note        []*RemoteFieldApi `json:"Note,omitempty"`
	Opportunity []*RemoteFieldApi `json:"Opportunity,omitempty"`
	Stage       []*RemoteFieldApi `json:"Stage,omitempty"`
	User        []*RemoteFieldApi `json:"User,omitempty"`
	Task        []*RemoteFieldApi `json:"Task,omitempty"`
	Engagement  []*RemoteFieldApi `json:"Engagement,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldApiResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldApiResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldClass struct {
	Id            *string                             `json:"id,omitempty"`
	DisplayName   *string                             `json:"display_name,omitempty"`
	RemoteKeyName *string                             `json:"remote_key_name,omitempty"`
	Description   *string                             `json:"description,omitempty"`
	IsCustom      *bool                               `json:"is_custom,omitempty"`
	IsRequired    *bool                               `json:"is_required,omitempty"`
	FieldType     *RemoteFieldClassFieldType          `json:"field_type,omitempty"`
	FieldFormat   *RemoteFieldClassFieldFormat        `json:"field_format,omitempty"`
	FieldChoices  []*RemoteFieldClassFieldChoicesItem `json:"field_choices,omitempty"`
	ItemSchema    *ItemSchema                         `json:"item_schema,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldClass) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldClass
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldClass(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldClass) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldClassFieldChoicesItem struct {
	Value       interface{} `json:"value,omitempty"`
	DisplayName *string     `json:"display_name,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldClassFieldChoicesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldClassFieldChoicesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldClassFieldChoicesItem(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldClassFieldChoicesItem) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldClassFieldFormat struct {
	typeName        string
	FieldFormatEnum FieldFormatEnum
	String          string
}

func NewRemoteFieldClassFieldFormatFromFieldFormatEnum(value FieldFormatEnum) *RemoteFieldClassFieldFormat {
	return &RemoteFieldClassFieldFormat{typeName: "fieldFormatEnum", FieldFormatEnum: value}
}

func NewRemoteFieldClassFieldFormatFromString(value string) *RemoteFieldClassFieldFormat {
	return &RemoteFieldClassFieldFormat{typeName: "string", String: value}
}

func (r *RemoteFieldClassFieldFormat) UnmarshalJSON(data []byte) error {
	var valueFieldFormatEnum FieldFormatEnum
	if err := json.Unmarshal(data, &valueFieldFormatEnum); err == nil {
		r.typeName = "fieldFormatEnum"
		r.FieldFormatEnum = valueFieldFormatEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldClassFieldFormat) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "fieldFormatEnum":
		return json.Marshal(r.FieldFormatEnum)
	case "string":
		return json.Marshal(r.String)
	}
}

type RemoteFieldClassFieldFormatVisitor interface {
	VisitFieldFormatEnum(FieldFormatEnum) error
	VisitString(string) error
}

func (r *RemoteFieldClassFieldFormat) Accept(visitor RemoteFieldClassFieldFormatVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "fieldFormatEnum":
		return visitor.VisitFieldFormatEnum(r.FieldFormatEnum)
	case "string":
		return visitor.VisitString(r.String)
	}
}

type RemoteFieldClassFieldType struct {
	typeName      string
	FieldTypeEnum FieldTypeEnum
	String        string
}

func NewRemoteFieldClassFieldTypeFromFieldTypeEnum(value FieldTypeEnum) *RemoteFieldClassFieldType {
	return &RemoteFieldClassFieldType{typeName: "fieldTypeEnum", FieldTypeEnum: value}
}

func NewRemoteFieldClassFieldTypeFromString(value string) *RemoteFieldClassFieldType {
	return &RemoteFieldClassFieldType{typeName: "string", String: value}
}

func (r *RemoteFieldClassFieldType) UnmarshalJSON(data []byte) error {
	var valueFieldTypeEnum FieldTypeEnum
	if err := json.Unmarshal(data, &valueFieldTypeEnum); err == nil {
		r.typeName = "fieldTypeEnum"
		r.FieldTypeEnum = valueFieldTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldClassFieldType) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "fieldTypeEnum":
		return json.Marshal(r.FieldTypeEnum)
	case "string":
		return json.Marshal(r.String)
	}
}

type RemoteFieldClassFieldTypeVisitor interface {
	VisitFieldTypeEnum(FieldTypeEnum) error
	VisitString(string) error
}

func (r *RemoteFieldClassFieldType) Accept(visitor RemoteFieldClassFieldTypeVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "fieldTypeEnum":
		return visitor.VisitFieldTypeEnum(r.FieldTypeEnum)
	case "string":
		return visitor.VisitString(r.String)
	}
}

type RemoteFieldClassForCustomObjectClass struct {
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt    *time.Time                                              `json:"modified_at,omitempty"`
	DisplayName   *string                                                 `json:"display_name,omitempty"`
	RemoteKeyName *string                                                 `json:"remote_key_name,omitempty"`
	Description   *string                                                 `json:"description,omitempty"`
	IsRequired    *bool                                                   `json:"is_required,omitempty"`
	FieldType     *RemoteFieldClassForCustomObjectClassFieldType          `json:"field_type,omitempty"`
	FieldFormat   *RemoteFieldClassForCustomObjectClassFieldFormat        `json:"field_format,omitempty"`
	FieldChoices  []*RemoteFieldClassForCustomObjectClassFieldChoicesItem `json:"field_choices,omitempty"`
	ItemSchema    *RemoteFieldClassForCustomObjectClassItemSchema         `json:"item_schema,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldClassForCustomObjectClass) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldClassForCustomObjectClass
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldClassForCustomObjectClass(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldClassForCustomObjectClass) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldClassForCustomObjectClassFieldChoicesItem struct {
	Value       interface{} `json:"value,omitempty"`
	DisplayName *string     `json:"display_name,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldClassForCustomObjectClassFieldChoicesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldClassForCustomObjectClassFieldChoicesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldClassForCustomObjectClassFieldChoicesItem(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldClassForCustomObjectClassFieldChoicesItem) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldClassForCustomObjectClassFieldFormat struct {
	typeName        string
	FieldFormatEnum FieldFormatEnum
	String          string
}

func NewRemoteFieldClassForCustomObjectClassFieldFormatFromFieldFormatEnum(value FieldFormatEnum) *RemoteFieldClassForCustomObjectClassFieldFormat {
	return &RemoteFieldClassForCustomObjectClassFieldFormat{typeName: "fieldFormatEnum", FieldFormatEnum: value}
}

func NewRemoteFieldClassForCustomObjectClassFieldFormatFromString(value string) *RemoteFieldClassForCustomObjectClassFieldFormat {
	return &RemoteFieldClassForCustomObjectClassFieldFormat{typeName: "string", String: value}
}

func (r *RemoteFieldClassForCustomObjectClassFieldFormat) UnmarshalJSON(data []byte) error {
	var valueFieldFormatEnum FieldFormatEnum
	if err := json.Unmarshal(data, &valueFieldFormatEnum); err == nil {
		r.typeName = "fieldFormatEnum"
		r.FieldFormatEnum = valueFieldFormatEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldClassForCustomObjectClassFieldFormat) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "fieldFormatEnum":
		return json.Marshal(r.FieldFormatEnum)
	case "string":
		return json.Marshal(r.String)
	}
}

type RemoteFieldClassForCustomObjectClassFieldFormatVisitor interface {
	VisitFieldFormatEnum(FieldFormatEnum) error
	VisitString(string) error
}

func (r *RemoteFieldClassForCustomObjectClassFieldFormat) Accept(visitor RemoteFieldClassForCustomObjectClassFieldFormatVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "fieldFormatEnum":
		return visitor.VisitFieldFormatEnum(r.FieldFormatEnum)
	case "string":
		return visitor.VisitString(r.String)
	}
}

type RemoteFieldClassForCustomObjectClassFieldType struct {
	typeName      string
	FieldTypeEnum FieldTypeEnum
	String        string
}

func NewRemoteFieldClassForCustomObjectClassFieldTypeFromFieldTypeEnum(value FieldTypeEnum) *RemoteFieldClassForCustomObjectClassFieldType {
	return &RemoteFieldClassForCustomObjectClassFieldType{typeName: "fieldTypeEnum", FieldTypeEnum: value}
}

func NewRemoteFieldClassForCustomObjectClassFieldTypeFromString(value string) *RemoteFieldClassForCustomObjectClassFieldType {
	return &RemoteFieldClassForCustomObjectClassFieldType{typeName: "string", String: value}
}

func (r *RemoteFieldClassForCustomObjectClassFieldType) UnmarshalJSON(data []byte) error {
	var valueFieldTypeEnum FieldTypeEnum
	if err := json.Unmarshal(data, &valueFieldTypeEnum); err == nil {
		r.typeName = "fieldTypeEnum"
		r.FieldTypeEnum = valueFieldTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldClassForCustomObjectClassFieldType) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "fieldTypeEnum":
		return json.Marshal(r.FieldTypeEnum)
	case "string":
		return json.Marshal(r.String)
	}
}

type RemoteFieldClassForCustomObjectClassFieldTypeVisitor interface {
	VisitFieldTypeEnum(FieldTypeEnum) error
	VisitString(string) error
}

func (r *RemoteFieldClassForCustomObjectClassFieldType) Accept(visitor RemoteFieldClassForCustomObjectClassFieldTypeVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "fieldTypeEnum":
		return visitor.VisitFieldTypeEnum(r.FieldTypeEnum)
	case "string":
		return visitor.VisitString(r.String)
	}
}

type RemoteFieldClassForCustomObjectClassItemSchema struct {
	ItemType    *string   `json:"item_type,omitempty"`
	ItemFormat  *string   `json:"item_format,omitempty"`
	ItemChoices []*string `json:"item_choices,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldClassForCustomObjectClassItemSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldClassForCustomObjectClassItemSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldClassForCustomObjectClassItemSchema(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldClassForCustomObjectClassItemSchema) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldRemoteFieldClass struct {
	typeName         string
	String           string
	RemoteFieldClass *RemoteFieldClass
}

func NewRemoteFieldRemoteFieldClassFromString(value string) *RemoteFieldRemoteFieldClass {
	return &RemoteFieldRemoteFieldClass{typeName: "string", String: value}
}

func NewRemoteFieldRemoteFieldClassFromRemoteFieldClass(value *RemoteFieldClass) *RemoteFieldRemoteFieldClass {
	return &RemoteFieldRemoteFieldClass{typeName: "remoteFieldClass", RemoteFieldClass: value}
}

func (r *RemoteFieldRemoteFieldClass) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	valueRemoteFieldClass := new(RemoteFieldClass)
	if err := json.Unmarshal(data, &valueRemoteFieldClass); err == nil {
		r.typeName = "remoteFieldClass"
		r.RemoteFieldClass = valueRemoteFieldClass
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldRemoteFieldClass) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "remoteFieldClass":
		return json.Marshal(r.RemoteFieldClass)
	}
}

type RemoteFieldRemoteFieldClassVisitor interface {
	VisitString(string) error
	VisitRemoteFieldClass(*RemoteFieldClass) error
}

func (r *RemoteFieldRemoteFieldClass) Accept(visitor RemoteFieldRemoteFieldClassVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "remoteFieldClass":
		return visitor.VisitRemoteFieldClass(r.RemoteFieldClass)
	}
}

type RemoteFieldRequest struct {
	RemoteFieldClass *RemoteFieldRequestRemoteFieldClass `json:"remote_field_class,omitempty"`
	Value            interface{}                         `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteFieldRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteFieldRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteFieldRequest(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteFieldRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemoteFieldRequestRemoteFieldClass struct {
	typeName         string
	String           string
	RemoteFieldClass *RemoteFieldClass
}

func NewRemoteFieldRequestRemoteFieldClassFromString(value string) *RemoteFieldRequestRemoteFieldClass {
	return &RemoteFieldRequestRemoteFieldClass{typeName: "string", String: value}
}

func NewRemoteFieldRequestRemoteFieldClassFromRemoteFieldClass(value *RemoteFieldClass) *RemoteFieldRequestRemoteFieldClass {
	return &RemoteFieldRequestRemoteFieldClass{typeName: "remoteFieldClass", RemoteFieldClass: value}
}

func (r *RemoteFieldRequestRemoteFieldClass) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	valueRemoteFieldClass := new(RemoteFieldClass)
	if err := json.Unmarshal(data, &valueRemoteFieldClass); err == nil {
		r.typeName = "remoteFieldClass"
		r.RemoteFieldClass = valueRemoteFieldClass
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldRequestRemoteFieldClass) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "remoteFieldClass":
		return json.Marshal(r.RemoteFieldClass)
	}
}

type RemoteFieldRequestRemoteFieldClassVisitor interface {
	VisitString(string) error
	VisitRemoteFieldClass(*RemoteFieldClass) error
}

func (r *RemoteFieldRequestRemoteFieldClass) Accept(visitor RemoteFieldRequestRemoteFieldClassVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "remoteFieldClass":
		return visitor.VisitRemoteFieldClass(r.RemoteFieldClass)
	}
}

// # The RemoteKey Object
//
// ### Description
//
// The `RemoteKey` object is used to represent a request for a new remote key.
//
// ### Usage Example
//
// Post a `GenerateRemoteKey` to receive a new `RemoteKey`.
type RemoteKey struct {
	Name string `json:"name"`
	Key  string `json:"key"`

	_rawJSON json.RawMessage
}

func (r *RemoteKey) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteKey(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteKey) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// # The RemoteResponse Object
//
// ### Description
//
// The `RemoteResponse` object is used to represent information returned from a third-party endpoint.
//
// ### Usage Example
//
// View the `RemoteResponse` returned from your `DataPassthrough`.
type RemoteResponse struct {
	Method          string                 `json:"method"`
	Path            string                 `json:"path"`
	Status          int                    `json:"status"`
	Response        interface{}            `json:"response,omitempty"`
	ResponseHeaders map[string]interface{} `json:"response_headers,omitempty"`
	ResponseType    *ResponseTypeEnum      `json:"response_type,omitempty"`
	Headers         map[string]interface{} `json:"headers,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemoteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RemoteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemoteResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemoteResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// - `JSON` - JSON
// - `XML` - XML
// - `MULTIPART` - MULTIPART
type RequestFormatEnum string

const (
	RequestFormatEnumJson      RequestFormatEnum = "JSON"
	RequestFormatEnumXml       RequestFormatEnum = "XML"
	RequestFormatEnumMultipart RequestFormatEnum = "MULTIPART"
)

func NewRequestFormatEnumFromString(s string) (RequestFormatEnum, error) {
	switch s {
	case "JSON":
		return RequestFormatEnumJson, nil
	case "XML":
		return RequestFormatEnumXml, nil
	case "MULTIPART":
		return RequestFormatEnumMultipart, nil
	}
	var t RequestFormatEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestFormatEnum) Ptr() *RequestFormatEnum {
	return &r
}

// - `JSON` - JSON
// - `BASE64_GZIP` - BASE64_GZIP
type ResponseTypeEnum string

const (
	ResponseTypeEnumJson       ResponseTypeEnum = "JSON"
	ResponseTypeEnumBase64Gzip ResponseTypeEnum = "BASE64_GZIP"
)

func NewResponseTypeEnumFromString(s string) (ResponseTypeEnum, error) {
	switch s {
	case "JSON":
		return ResponseTypeEnumJson, nil
	case "BASE64_GZIP":
		return ResponseTypeEnumBase64Gzip, nil
	}
	var t ResponseTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ResponseTypeEnum) Ptr() *ResponseTypeEnum {
	return &r
}

// - `ADMIN` - ADMIN
// - `DEVELOPER` - DEVELOPER
// - `MEMBER` - MEMBER
// - `API` - API
// - `SYSTEM` - SYSTEM
// - `MERGE_TEAM` - MERGE_TEAM
type RoleEnum string

const (
	RoleEnumAdmin     RoleEnum = "ADMIN"
	RoleEnumDeveloper RoleEnum = "DEVELOPER"
	RoleEnumMember    RoleEnum = "MEMBER"
	RoleEnumApi       RoleEnum = "API"
	RoleEnumSystem    RoleEnum = "SYSTEM"
	RoleEnumMergeTeam RoleEnum = "MERGE_TEAM"
)

func NewRoleEnumFromString(s string) (RoleEnum, error) {
	switch s {
	case "ADMIN":
		return RoleEnumAdmin, nil
	case "DEVELOPER":
		return RoleEnumDeveloper, nil
	case "MEMBER":
		return RoleEnumMember, nil
	case "API":
		return RoleEnumApi, nil
	case "SYSTEM":
		return RoleEnumSystem, nil
	case "MERGE_TEAM":
		return RoleEnumMergeTeam, nil
	}
	var t RoleEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RoleEnum) Ptr() *RoleEnum {
	return &r
}

// - `IN_NEXT_SYNC` - IN_NEXT_SYNC
// - `IN_LAST_SYNC` - IN_LAST_SYNC
type SelectiveSyncConfigurationsUsageEnum string

const (
	SelectiveSyncConfigurationsUsageEnumInNextSync SelectiveSyncConfigurationsUsageEnum = "IN_NEXT_SYNC"
	SelectiveSyncConfigurationsUsageEnumInLastSync SelectiveSyncConfigurationsUsageEnum = "IN_LAST_SYNC"
)

func NewSelectiveSyncConfigurationsUsageEnumFromString(s string) (SelectiveSyncConfigurationsUsageEnum, error) {
	switch s {
	case "IN_NEXT_SYNC":
		return SelectiveSyncConfigurationsUsageEnumInNextSync, nil
	case "IN_LAST_SYNC":
		return SelectiveSyncConfigurationsUsageEnumInLastSync, nil
	}
	var t SelectiveSyncConfigurationsUsageEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SelectiveSyncConfigurationsUsageEnum) Ptr() *SelectiveSyncConfigurationsUsageEnum {
	return &s
}

// # The Stage Object
//
// ### Description
//
// The `Stage` object is used to represent the stage of an opportunity.
//
// ### Usage Example
//
// TODO
type Stage struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The stage's name.
	Name *string `json:"name,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (s *Stage) UnmarshalJSON(data []byte) error {
	type unmarshaler Stage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Stage(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *Stage) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// # The SyncStatus Object
//
// ### Description
//
// # The `SyncStatus` object is used to represent the syncing state of an account
//
// ### Usage Example
//
// View the `SyncStatus` for an account to see how recently its models were synced.
type SyncStatus struct {
	ModelName                        string                                `json:"model_name"`
	ModelId                          string                                `json:"model_id"`
	LastSyncStart                    *time.Time                            `json:"last_sync_start,omitempty"`
	NextSyncStart                    *time.Time                            `json:"next_sync_start,omitempty"`
	Status                           SyncStatusStatusEnum                  `json:"status,omitempty"`
	IsInitialSync                    bool                                  `json:"is_initial_sync"`
	SelectiveSyncConfigurationsUsage *SelectiveSyncConfigurationsUsageEnum `json:"selective_sync_configurations_usage,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SyncStatus) UnmarshalJSON(data []byte) error {
	type unmarshaler SyncStatus
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SyncStatus(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SyncStatus) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// - `SYNCING` - SYNCING
// - `DONE` - DONE
// - `FAILED` - FAILED
// - `DISABLED` - DISABLED
// - `PAUSED` - PAUSED
// - `PARTIALLY_SYNCED` - PARTIALLY_SYNCED
type SyncStatusStatusEnum string

const (
	SyncStatusStatusEnumSyncing         SyncStatusStatusEnum = "SYNCING"
	SyncStatusStatusEnumDone            SyncStatusStatusEnum = "DONE"
	SyncStatusStatusEnumFailed          SyncStatusStatusEnum = "FAILED"
	SyncStatusStatusEnumDisabled        SyncStatusStatusEnum = "DISABLED"
	SyncStatusStatusEnumPaused          SyncStatusStatusEnum = "PAUSED"
	SyncStatusStatusEnumPartiallySynced SyncStatusStatusEnum = "PARTIALLY_SYNCED"
)

func NewSyncStatusStatusEnumFromString(s string) (SyncStatusStatusEnum, error) {
	switch s {
	case "SYNCING":
		return SyncStatusStatusEnumSyncing, nil
	case "DONE":
		return SyncStatusStatusEnumDone, nil
	case "FAILED":
		return SyncStatusStatusEnumFailed, nil
	case "DISABLED":
		return SyncStatusStatusEnumDisabled, nil
	case "PAUSED":
		return SyncStatusStatusEnumPaused, nil
	case "PARTIALLY_SYNCED":
		return SyncStatusStatusEnumPartiallySynced, nil
	}
	var t SyncStatusStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SyncStatusStatusEnum) Ptr() *SyncStatusStatusEnum {
	return &s
}

// # The Task Object
//
// ### Description
//
// The `Task` object is used to represent a task, such as a to-do item.
//
// ### Usage Example
//
// TODO
type Task struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The task's subject.
	Subject *string `json:"subject,omitempty"`
	// The task's content.
	Content *string `json:"content,omitempty"`
	// The task's owner.
	Owner *TaskOwner `json:"owner,omitempty"`
	// The task's account.
	Account *TaskAccount `json:"account,omitempty"`
	// The task's opportunity.
	Opportunity *TaskOpportunity `json:"opportunity,omitempty"`
	// When the task is completed.
	CompletedDate *time.Time `json:"completed_date,omitempty"`
	// When the task is due.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The task's status.
	//
	// - `OPEN` - OPEN
	// - `CLOSED` - CLOSED
	Status *TaskStatus `json:"status,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (t *Task) UnmarshalJSON(data []byte) error {
	type unmarshaler Task
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Task(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *Task) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The task's account.
type TaskAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewTaskAccountFromString(value string) *TaskAccount {
	return &TaskAccount{typeName: "string", String: value}
}

func NewTaskAccountFromAccount(value *Account) *TaskAccount {
	return &TaskAccount{typeName: "account", Account: value}
}

func (t *TaskAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		t.typeName = "account"
		t.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskAccount) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "account":
		return json.Marshal(t.Account)
	}
}

type TaskAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (t *TaskAccount) Accept(visitor TaskAccountVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "account":
		return visitor.VisitAccount(t.Account)
	}
}

// The task's opportunity.
type TaskOpportunity struct {
	typeName    string
	String      string
	Opportunity *Opportunity
}

func NewTaskOpportunityFromString(value string) *TaskOpportunity {
	return &TaskOpportunity{typeName: "string", String: value}
}

func NewTaskOpportunityFromOpportunity(value *Opportunity) *TaskOpportunity {
	return &TaskOpportunity{typeName: "opportunity", Opportunity: value}
}

func (t *TaskOpportunity) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueOpportunity := new(Opportunity)
	if err := json.Unmarshal(data, &valueOpportunity); err == nil {
		t.typeName = "opportunity"
		t.Opportunity = valueOpportunity
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskOpportunity) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "opportunity":
		return json.Marshal(t.Opportunity)
	}
}

type TaskOpportunityVisitor interface {
	VisitString(string) error
	VisitOpportunity(*Opportunity) error
}

func (t *TaskOpportunity) Accept(visitor TaskOpportunityVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "opportunity":
		return visitor.VisitOpportunity(t.Opportunity)
	}
}

// The task's owner.
type TaskOwner struct {
	typeName string
	String   string
	User     *User
}

func NewTaskOwnerFromString(value string) *TaskOwner {
	return &TaskOwner{typeName: "string", String: value}
}

func NewTaskOwnerFromUser(value *User) *TaskOwner {
	return &TaskOwner{typeName: "user", User: value}
}

func (t *TaskOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typeName = "user"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskOwner) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "user":
		return json.Marshal(t.User)
	}
}

type TaskOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TaskOwner) Accept(visitor TaskOwnerVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "user":
		return visitor.VisitUser(t.User)
	}
}

// # The Task Object
//
// ### Description
//
// The `Task` object is used to represent a task, such as a to-do item.
//
// ### Usage Example
//
// TODO
type TaskRequest struct {
	// The task's subject.
	Subject *string `json:"subject,omitempty"`
	// The task's content.
	Content *string `json:"content,omitempty"`
	// The task's owner.
	Owner *TaskRequestOwner `json:"owner,omitempty"`
	// The task's account.
	Account *TaskRequestAccount `json:"account,omitempty"`
	// The task's opportunity.
	Opportunity *TaskRequestOpportunity `json:"opportunity,omitempty"`
	// When the task is completed.
	CompletedDate *time.Time `json:"completed_date,omitempty"`
	// When the task is due.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The task's status.
	//
	// - `OPEN` - OPEN
	// - `CLOSED` - CLOSED
	Status              *TaskRequestStatus     `json:"status,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TaskRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TaskRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaskRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The task's account.
type TaskRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewTaskRequestAccountFromString(value string) *TaskRequestAccount {
	return &TaskRequestAccount{typeName: "string", String: value}
}

func NewTaskRequestAccountFromAccount(value *Account) *TaskRequestAccount {
	return &TaskRequestAccount{typeName: "account", Account: value}
}

func (t *TaskRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		t.typeName = "account"
		t.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskRequestAccount) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "account":
		return json.Marshal(t.Account)
	}
}

type TaskRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (t *TaskRequestAccount) Accept(visitor TaskRequestAccountVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "account":
		return visitor.VisitAccount(t.Account)
	}
}

// The task's opportunity.
type TaskRequestOpportunity struct {
	typeName    string
	String      string
	Opportunity *Opportunity
}

func NewTaskRequestOpportunityFromString(value string) *TaskRequestOpportunity {
	return &TaskRequestOpportunity{typeName: "string", String: value}
}

func NewTaskRequestOpportunityFromOpportunity(value *Opportunity) *TaskRequestOpportunity {
	return &TaskRequestOpportunity{typeName: "opportunity", Opportunity: value}
}

func (t *TaskRequestOpportunity) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueOpportunity := new(Opportunity)
	if err := json.Unmarshal(data, &valueOpportunity); err == nil {
		t.typeName = "opportunity"
		t.Opportunity = valueOpportunity
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskRequestOpportunity) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "opportunity":
		return json.Marshal(t.Opportunity)
	}
}

type TaskRequestOpportunityVisitor interface {
	VisitString(string) error
	VisitOpportunity(*Opportunity) error
}

func (t *TaskRequestOpportunity) Accept(visitor TaskRequestOpportunityVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "opportunity":
		return visitor.VisitOpportunity(t.Opportunity)
	}
}

// The task's owner.
type TaskRequestOwner struct {
	typeName string
	String   string
	User     *User
}

func NewTaskRequestOwnerFromString(value string) *TaskRequestOwner {
	return &TaskRequestOwner{typeName: "string", String: value}
}

func NewTaskRequestOwnerFromUser(value *User) *TaskRequestOwner {
	return &TaskRequestOwner{typeName: "user", User: value}
}

func (t *TaskRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typeName = "user"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskRequestOwner) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "user":
		return json.Marshal(t.User)
	}
}

type TaskRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TaskRequestOwner) Accept(visitor TaskRequestOwnerVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "user":
		return visitor.VisitUser(t.User)
	}
}

// The task's status.
//
// - `OPEN` - OPEN
// - `CLOSED` - CLOSED
type TaskRequestStatus struct {
	typeName       string
	TaskStatusEnum TaskStatusEnum
	String         string
}

func NewTaskRequestStatusFromTaskStatusEnum(value TaskStatusEnum) *TaskRequestStatus {
	return &TaskRequestStatus{typeName: "taskStatusEnum", TaskStatusEnum: value}
}

func NewTaskRequestStatusFromString(value string) *TaskRequestStatus {
	return &TaskRequestStatus{typeName: "string", String: value}
}

func (t *TaskRequestStatus) UnmarshalJSON(data []byte) error {
	var valueTaskStatusEnum TaskStatusEnum
	if err := json.Unmarshal(data, &valueTaskStatusEnum); err == nil {
		t.typeName = "taskStatusEnum"
		t.TaskStatusEnum = valueTaskStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskRequestStatus) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "taskStatusEnum":
		return json.Marshal(t.TaskStatusEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TaskRequestStatusVisitor interface {
	VisitTaskStatusEnum(TaskStatusEnum) error
	VisitString(string) error
}

func (t *TaskRequestStatus) Accept(visitor TaskRequestStatusVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "taskStatusEnum":
		return visitor.VisitTaskStatusEnum(t.TaskStatusEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

type TaskResponse struct {
	Model    *Task                       `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TaskResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TaskResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaskResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The task's status.
//
// - `OPEN` - OPEN
// - `CLOSED` - CLOSED
type TaskStatus struct {
	typeName       string
	TaskStatusEnum TaskStatusEnum
	String         string
}

func NewTaskStatusFromTaskStatusEnum(value TaskStatusEnum) *TaskStatus {
	return &TaskStatus{typeName: "taskStatusEnum", TaskStatusEnum: value}
}

func NewTaskStatusFromString(value string) *TaskStatus {
	return &TaskStatus{typeName: "string", String: value}
}

func (t *TaskStatus) UnmarshalJSON(data []byte) error {
	var valueTaskStatusEnum TaskStatusEnum
	if err := json.Unmarshal(data, &valueTaskStatusEnum); err == nil {
		t.typeName = "taskStatusEnum"
		t.TaskStatusEnum = valueTaskStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaskStatus) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "taskStatusEnum":
		return json.Marshal(t.TaskStatusEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TaskStatusVisitor interface {
	VisitTaskStatusEnum(TaskStatusEnum) error
	VisitString(string) error
}

func (t *TaskStatus) Accept(visitor TaskStatusVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "taskStatusEnum":
		return visitor.VisitTaskStatusEnum(t.TaskStatusEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

// - `OPEN` - OPEN
// - `CLOSED` - CLOSED
type TaskStatusEnum string

const (
	TaskStatusEnumOpen   TaskStatusEnum = "OPEN"
	TaskStatusEnumClosed TaskStatusEnum = "CLOSED"
)

func NewTaskStatusEnumFromString(s string) (TaskStatusEnum, error) {
	switch s {
	case "OPEN":
		return TaskStatusEnumOpen, nil
	case "CLOSED":
		return TaskStatusEnumClosed, nil
	}
	var t TaskStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskStatusEnum) Ptr() *TaskStatusEnum {
	return &t
}

// # The User Object
//
// ### Description
//
// The `User` object is used to represent a user with a login to the CRM system.
//
// ### Usage Example
//
// TODO
type User struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The datetime that this object was created by Merge.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime that this object was modified by Merge.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The user's name.
	Name *string `json:"name,omitempty"`
	// The user's email address.
	Email *string `json:"email,omitempty"`
	// Whether or not the user is active.
	IsActive *bool `json:"is_active,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	RemoteWasDeleted *bool                  `json:"remote_was_deleted,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	RemoteData       []*RemoteData          `json:"remote_data,omitempty"`
	RemoteFields     []*RemoteField         `json:"remote_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type ValidationProblemSource struct {
	Pointer string `json:"pointer"`

	_rawJSON json.RawMessage
}

func (v *ValidationProblemSource) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidationProblemSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidationProblemSource(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidationProblemSource) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type WarningValidationProblem struct {
	Source      *ValidationProblemSource `json:"source,omitempty"`
	Title       string                   `json:"title"`
	Detail      string                   `json:"detail"`
	ProblemType string                   `json:"problem_type"`

	_rawJSON json.RawMessage
}

func (w *WarningValidationProblem) UnmarshalJSON(data []byte) error {
	type unmarshaler WarningValidationProblem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WarningValidationProblem(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WarningValidationProblem) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookReceiver struct {
	Event    string  `json:"event"`
	IsActive bool    `json:"is_active"`
	Key      *string `json:"key,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WebhookReceiver) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookReceiver
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhookReceiver(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookReceiver) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
