// Code generated by Fern. DO NOT EDIT.

package crm

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/merge-api/merge-go-client/v2/internal"
	time "time"
)

type OpportunityEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool               `json:"-" url:"run_async,omitempty"`
	Model    *OpportunityRequest `json:"model,omitempty" url:"-"`
}

type OpportunitiesListRequest struct {
	// If provided, will only return opportunities with this account.
	AccountId *string `json:"-" url:"account_id,omitempty"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-" url:"created_after,omitempty"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-" url:"created_before,omitempty"`
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*OpportunitiesListRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-" url:"modified_after,omitempty"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-" url:"modified_before,omitempty"`
	// If provided, will only return opportunities with this owner.
	OwnerId *string `json:"-" url:"owner_id,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
	// If provided, will only return opportunities created in the third party platform after this datetime.
	RemoteCreatedAfter *time.Time `json:"-" url:"remote_created_after,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-" url:"remote_id,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
	// If provided, will only return opportunities with this stage.
	StageId *string `json:"-" url:"stage_id,omitempty"`
	// If provided, will only return opportunities with this status. Options: ('OPEN', 'WON', 'LOST')
	//
	// * `OPEN` - OPEN
	// * `WON` - WON
	// * `LOST` - LOST
	Status *OpportunitiesListRequestStatus `json:"-" url:"status,omitempty"`
}

type PatchedOpportunityEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-" url:"is_debug_mode,omitempty"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool                      `json:"-" url:"run_async,omitempty"`
	Model    *PatchedOpportunityRequest `json:"model,omitempty" url:"-"`
}

type OpportunitiesRemoteFieldClassesListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
	IncludeDeletedData *bool `json:"-" url:"include_deleted_data,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// If provided, will only return remote field classes with this is_common_model_field value
	IsCommonModelField *bool `json:"-" url:"is_common_model_field,omitempty"`
	// Number of results to return per page.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type OpportunitiesRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand []*OpportunitiesRetrieveRequestExpandItem `json:"-" url:"expand,omitempty"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-" url:"include_remote_data,omitempty"`
	// Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.
	IncludeRemoteFields *bool `json:"-" url:"include_remote_fields,omitempty"`
	// Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).
	IncludeShellData *bool `json:"-" url:"include_shell_data,omitempty"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-" url:"remote_fields,omitempty"`
	// A comma separated list of enum field names for which you'd like the original values to be returned, instead of Merge's normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
	ShowEnumOrigins *string `json:"-" url:"show_enum_origins,omitempty"`
}

type OpportunitiesListRequestExpandItem string

const (
	OpportunitiesListRequestExpandItemAccount OpportunitiesListRequestExpandItem = "account"
	OpportunitiesListRequestExpandItemOwner   OpportunitiesListRequestExpandItem = "owner"
	OpportunitiesListRequestExpandItemStage   OpportunitiesListRequestExpandItem = "stage"
)

func NewOpportunitiesListRequestExpandItemFromString(s string) (OpportunitiesListRequestExpandItem, error) {
	switch s {
	case "account":
		return OpportunitiesListRequestExpandItemAccount, nil
	case "owner":
		return OpportunitiesListRequestExpandItemOwner, nil
	case "stage":
		return OpportunitiesListRequestExpandItemStage, nil
	}
	var t OpportunitiesListRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OpportunitiesListRequestExpandItem) Ptr() *OpportunitiesListRequestExpandItem {
	return &o
}

type OpportunitiesListRequestStatus string

const (
	OpportunitiesListRequestStatusLost OpportunitiesListRequestStatus = "LOST"
	OpportunitiesListRequestStatusOpen OpportunitiesListRequestStatus = "OPEN"
	OpportunitiesListRequestStatusWon  OpportunitiesListRequestStatus = "WON"
)

func NewOpportunitiesListRequestStatusFromString(s string) (OpportunitiesListRequestStatus, error) {
	switch s {
	case "LOST":
		return OpportunitiesListRequestStatusLost, nil
	case "OPEN":
		return OpportunitiesListRequestStatusOpen, nil
	case "WON":
		return OpportunitiesListRequestStatusWon, nil
	}
	var t OpportunitiesListRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OpportunitiesListRequestStatus) Ptr() *OpportunitiesListRequestStatus {
	return &o
}

type OpportunitiesRetrieveRequestExpandItem string

const (
	OpportunitiesRetrieveRequestExpandItemAccount OpportunitiesRetrieveRequestExpandItem = "account"
	OpportunitiesRetrieveRequestExpandItemOwner   OpportunitiesRetrieveRequestExpandItem = "owner"
	OpportunitiesRetrieveRequestExpandItemStage   OpportunitiesRetrieveRequestExpandItem = "stage"
)

func NewOpportunitiesRetrieveRequestExpandItemFromString(s string) (OpportunitiesRetrieveRequestExpandItem, error) {
	switch s {
	case "account":
		return OpportunitiesRetrieveRequestExpandItemAccount, nil
	case "owner":
		return OpportunitiesRetrieveRequestExpandItemOwner, nil
	case "stage":
		return OpportunitiesRetrieveRequestExpandItemStage, nil
	}
	var t OpportunitiesRetrieveRequestExpandItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OpportunitiesRetrieveRequestExpandItem) Ptr() *OpportunitiesRetrieveRequestExpandItem {
	return &o
}

// # The Opportunity Object
// ### Description
// The `Opportunity` object is used to represent a deal opportunity in a CRM system.
// ### Usage Example
// TODO
type OpportunityRequest struct {
	// The opportunity's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The opportunity's description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The opportunity's amount.
	Amount *int `json:"amount,omitempty" url:"amount,omitempty"`
	// The opportunity's owner.
	Owner *OpportunityRequestOwner `json:"owner,omitempty" url:"owner,omitempty"`
	// The account of the opportunity.
	Account *OpportunityRequestAccount `json:"account,omitempty" url:"account,omitempty"`
	// The stage of the opportunity.
	Stage *OpportunityRequestStage `json:"stage,omitempty" url:"stage,omitempty"`
	// The opportunity's status.
	//
	// * `OPEN` - OPEN
	// * `WON` - WON
	// * `LOST` - LOST
	Status *OpportunityStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// When the opportunity's last activity occurred.
	LastActivityAt *time.Time `json:"last_activity_at,omitempty" url:"last_activity_at,omitempty"`
	// When the opportunity was closed.
	CloseDate           *time.Time             `json:"close_date,omitempty" url:"close_date,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OpportunityRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OpportunityRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *OpportunityRequest) GetAmount() *int {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *OpportunityRequest) GetOwner() *OpportunityRequestOwner {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *OpportunityRequest) GetAccount() *OpportunityRequestAccount {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *OpportunityRequest) GetStage() *OpportunityRequestStage {
	if o == nil {
		return nil
	}
	return o.Stage
}

func (o *OpportunityRequest) GetStatus() *OpportunityStatusEnum {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *OpportunityRequest) GetLastActivityAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastActivityAt
}

func (o *OpportunityRequest) GetCloseDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.CloseDate
}

func (o *OpportunityRequest) GetIntegrationParams() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.IntegrationParams
}

func (o *OpportunityRequest) GetLinkedAccountParams() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.LinkedAccountParams
}

func (o *OpportunityRequest) GetRemoteFields() []*RemoteFieldRequest {
	if o == nil {
		return nil
	}
	return o.RemoteFields
}

func (o *OpportunityRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpportunityRequest) UnmarshalJSON(data []byte) error {
	type embed OpportunityRequest
	var unmarshaler = struct {
		embed
		LastActivityAt *internal.DateTime `json:"last_activity_at,omitempty"`
		CloseDate      *internal.DateTime `json:"close_date,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OpportunityRequest(unmarshaler.embed)
	o.LastActivityAt = unmarshaler.LastActivityAt.TimePtr()
	o.CloseDate = unmarshaler.CloseDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpportunityRequest) MarshalJSON() ([]byte, error) {
	type embed OpportunityRequest
	var marshaler = struct {
		embed
		LastActivityAt *internal.DateTime `json:"last_activity_at,omitempty"`
		CloseDate      *internal.DateTime `json:"close_date,omitempty"`
	}{
		embed:          embed(*o),
		LastActivityAt: internal.NewOptionalDateTime(o.LastActivityAt),
		CloseDate:      internal.NewOptionalDateTime(o.CloseDate),
	}
	return json.Marshal(marshaler)
}

func (o *OpportunityRequest) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// The account of the opportunity.
type OpportunityRequestAccount struct {
	String  string
	Account *Account

	typ string
}

func (o *OpportunityRequestAccount) GetString() string {
	if o == nil {
		return ""
	}
	return o.String
}

func (o *OpportunityRequestAccount) GetAccount() *Account {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *OpportunityRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typ = "String"
		o.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		o.typ = "Account"
		o.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityRequestAccount) MarshalJSON() ([]byte, error) {
	if o.typ == "String" || o.String != "" {
		return json.Marshal(o.String)
	}
	if o.typ == "Account" || o.Account != nil {
		return json.Marshal(o.Account)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", o)
}

type OpportunityRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (o *OpportunityRequestAccount) Accept(visitor OpportunityRequestAccountVisitor) error {
	if o.typ == "String" || o.String != "" {
		return visitor.VisitString(o.String)
	}
	if o.typ == "Account" || o.Account != nil {
		return visitor.VisitAccount(o.Account)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", o)
}

// The opportunity's owner.
type OpportunityRequestOwner struct {
	String string
	User   *User

	typ string
}

func (o *OpportunityRequestOwner) GetString() string {
	if o == nil {
		return ""
	}
	return o.String
}

func (o *OpportunityRequestOwner) GetUser() *User {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *OpportunityRequestOwner) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typ = "String"
		o.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		o.typ = "User"
		o.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityRequestOwner) MarshalJSON() ([]byte, error) {
	if o.typ == "String" || o.String != "" {
		return json.Marshal(o.String)
	}
	if o.typ == "User" || o.User != nil {
		return json.Marshal(o.User)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", o)
}

type OpportunityRequestOwnerVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (o *OpportunityRequestOwner) Accept(visitor OpportunityRequestOwnerVisitor) error {
	if o.typ == "String" || o.String != "" {
		return visitor.VisitString(o.String)
	}
	if o.typ == "User" || o.User != nil {
		return visitor.VisitUser(o.User)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", o)
}

// The stage of the opportunity.
type OpportunityRequestStage struct {
	String string
	Stage  *Stage

	typ string
}

func (o *OpportunityRequestStage) GetString() string {
	if o == nil {
		return ""
	}
	return o.String
}

func (o *OpportunityRequestStage) GetStage() *Stage {
	if o == nil {
		return nil
	}
	return o.Stage
}

func (o *OpportunityRequestStage) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		o.typ = "String"
		o.String = valueString
		return nil
	}
	valueStage := new(Stage)
	if err := json.Unmarshal(data, &valueStage); err == nil {
		o.typ = "Stage"
		o.Stage = valueStage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OpportunityRequestStage) MarshalJSON() ([]byte, error) {
	if o.typ == "String" || o.String != "" {
		return json.Marshal(o.String)
	}
	if o.typ == "Stage" || o.Stage != nil {
		return json.Marshal(o.Stage)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", o)
}

type OpportunityRequestStageVisitor interface {
	VisitString(string) error
	VisitStage(*Stage) error
}

func (o *OpportunityRequestStage) Accept(visitor OpportunityRequestStageVisitor) error {
	if o.typ == "String" || o.String != "" {
		return visitor.VisitString(o.String)
	}
	if o.typ == "Stage" || o.Stage != nil {
		return visitor.VisitStage(o.Stage)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", o)
}

type OpportunityResponse struct {
	Model    *Opportunity                `json:"model" url:"model"`
	Warnings []*WarningValidationProblem `json:"warnings" url:"warnings"`
	Errors   []*ErrorValidationProblem   `json:"errors" url:"errors"`
	Logs     []*DebugModeLog             `json:"logs,omitempty" url:"logs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OpportunityResponse) GetModel() *Opportunity {
	if o == nil {
		return nil
	}
	return o.Model
}

func (o *OpportunityResponse) GetWarnings() []*WarningValidationProblem {
	if o == nil {
		return nil
	}
	return o.Warnings
}

func (o *OpportunityResponse) GetErrors() []*ErrorValidationProblem {
	if o == nil {
		return nil
	}
	return o.Errors
}

func (o *OpportunityResponse) GetLogs() []*DebugModeLog {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *OpportunityResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpportunityResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler OpportunityResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpportunityResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpportunityResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type PaginatedOpportunityList struct {
	Next     *string        `json:"next,omitempty" url:"next,omitempty"`
	Previous *string        `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*Opportunity `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaginatedOpportunityList) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *PaginatedOpportunityList) GetPrevious() *string {
	if p == nil {
		return nil
	}
	return p.Previous
}

func (p *PaginatedOpportunityList) GetResults() []*Opportunity {
	if p == nil {
		return nil
	}
	return p.Results
}

func (p *PaginatedOpportunityList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedOpportunityList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedOpportunityList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedOpportunityList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedOpportunityList) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// # The Opportunity Object
// ### Description
// The `Opportunity` object is used to represent a deal opportunity in a CRM system.
// ### Usage Example
// TODO
type PatchedOpportunityRequest struct {
	// The opportunity's name.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The opportunity's description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The opportunity's amount.
	Amount *int `json:"amount,omitempty" url:"amount,omitempty"`
	// The opportunity's owner.
	Owner *string `json:"owner,omitempty" url:"owner,omitempty"`
	// The account of the opportunity.
	Account *string `json:"account,omitempty" url:"account,omitempty"`
	// The stage of the opportunity.
	Stage *string `json:"stage,omitempty" url:"stage,omitempty"`
	// The opportunity's status.
	//
	// * `OPEN` - OPEN
	// * `WON` - WON
	// * `LOST` - LOST
	Status *OpportunityStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// When the opportunity's last activity occurred.
	LastActivityAt *time.Time `json:"last_activity_at,omitempty" url:"last_activity_at,omitempty"`
	// When the opportunity was closed.
	CloseDate           *time.Time             `json:"close_date,omitempty" url:"close_date,omitempty"`
	IntegrationParams   map[string]interface{} `json:"integration_params,omitempty" url:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty" url:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty" url:"remote_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PatchedOpportunityRequest) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PatchedOpportunityRequest) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PatchedOpportunityRequest) GetAmount() *int {
	if p == nil {
		return nil
	}
	return p.Amount
}

func (p *PatchedOpportunityRequest) GetOwner() *string {
	if p == nil {
		return nil
	}
	return p.Owner
}

func (p *PatchedOpportunityRequest) GetAccount() *string {
	if p == nil {
		return nil
	}
	return p.Account
}

func (p *PatchedOpportunityRequest) GetStage() *string {
	if p == nil {
		return nil
	}
	return p.Stage
}

func (p *PatchedOpportunityRequest) GetStatus() *OpportunityStatusEnum {
	if p == nil {
		return nil
	}
	return p.Status
}

func (p *PatchedOpportunityRequest) GetLastActivityAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastActivityAt
}

func (p *PatchedOpportunityRequest) GetCloseDate() *time.Time {
	if p == nil {
		return nil
	}
	return p.CloseDate
}

func (p *PatchedOpportunityRequest) GetIntegrationParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.IntegrationParams
}

func (p *PatchedOpportunityRequest) GetLinkedAccountParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.LinkedAccountParams
}

func (p *PatchedOpportunityRequest) GetRemoteFields() []*RemoteFieldRequest {
	if p == nil {
		return nil
	}
	return p.RemoteFields
}

func (p *PatchedOpportunityRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PatchedOpportunityRequest) UnmarshalJSON(data []byte) error {
	type embed PatchedOpportunityRequest
	var unmarshaler = struct {
		embed
		LastActivityAt *internal.DateTime `json:"last_activity_at,omitempty"`
		CloseDate      *internal.DateTime `json:"close_date,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PatchedOpportunityRequest(unmarshaler.embed)
	p.LastActivityAt = unmarshaler.LastActivityAt.TimePtr()
	p.CloseDate = unmarshaler.CloseDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchedOpportunityRequest) MarshalJSON() ([]byte, error) {
	type embed PatchedOpportunityRequest
	var marshaler = struct {
		embed
		LastActivityAt *internal.DateTime `json:"last_activity_at,omitempty"`
		CloseDate      *internal.DateTime `json:"close_date,omitempty"`
	}{
		embed:          embed(*p),
		LastActivityAt: internal.NewOptionalDateTime(p.LastActivityAt),
		CloseDate:      internal.NewOptionalDateTime(p.CloseDate),
	}
	return json.Marshal(marshaler)
}

func (p *PatchedOpportunityRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
